{
  "collection": {
    "info": {
      "_postman_id": "7f2d134c-0652-4763-bcaa-ff75092b3e39",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7e9b0b67-613d-4c8e-8ede-bd22c7ed8973",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ce12f378-8b08-444a-9572-6ee157a6adc1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8acfa64f-ffcc-4d4b-8f69-0d4a20412d5c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7cbd3edc-0d0e-4318-894c-856d603f4d6f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e0b9afd9-6e96-493c-85c3-38cefd16c2fe"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4710fa4a-7588-4de5-8897-43582878a169",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f691403c-49fc-4bbf-8f14-a8f561550ab3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3977cb9d-d8b7-47d0-95eb-19631b4d37a1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4123b207-3c8a-4363-a941-a75fd6369920"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3d72596a-b8a3-4c52-9b96-b3e887001c16",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8ea70214-5f80-48ad-9d1f-5d7b6efcee68"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "19d3cd7e-13fd-406f-992f-bb624b174a82",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e1076366-46ad-485b-904b-ac5255ebd347"
            }
          }
        ]
      },
      {
        "id": "b98ffec2-25b4-4499-89a9-5b5a4b39918d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "498fa16d-7507-4ed9-a5f5-fcd87c2fa284",
            "name": "Negative Testing",
            "item": [
              {
                "id": "badfada9-3901-43a7-972f-5a832989fb72",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dc8e0a67-ea39-49a6-9293-9328177444db",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e7193f-c70a-4e85-a8b0-5bb6403282bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb60df47-2e56-4391-8d66-3298cfd1f11d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9273fb0-8df1-42b3-be82-6deea085ef57",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d8e572-bea0-4847-9016-1d637f5f07c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f67cdde-9210-4af7-a63b-97f0912d0f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db523a5-31a2-47e2-beb0-4d2232e4b971",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9a4cbc3-6f4a-44ab-b425-3eb45360ed12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fac75863-8726-4786-8337-f72b62d8cfc0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2308f718-399f-48e8-a831-7f9ecbe48d2d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b0ad6094-db74-4272-830a-4f0acb8aac43",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e507edc1-837f-4dd5-be4d-e22feb68b329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f0f1da34-0bd0-4ee0-bc41-ef228b4eabd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a0779a-6966-4dec-b685-18cf39bf7873",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d36c5b9-8a8d-47cd-a679-3bba8aa70ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf9e2ec-e275-4dea-93d4-2dd7c7471f31",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d32981c-41d6-4b84-af46-a55ba9a1e002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f29e818-fbb0-445b-b941-e0d5299f54fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b554d454-add0-4dfe-b586-570a66b696a6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "66342b5b-e613-40b9-bedd-4d1247b17a7b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ec7875d4-bd1b-4bd9-8bbd-448dee8da4fa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dcbd5a9c-4d2d-4c35-b5c0-a45b403adc65",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5b42a4f-a515-4c47-a107-b87cfb055808",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9b01f973-c1f9-4c86-9065-8a2e4cca6f9d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e2b93529-a30d-4d97-a63b-75356d0dfc56",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "47d20178-6f08-4314-894f-71488a5da916"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4b242724-6be3-4220-853c-f2ddfae67311",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "23de72be-df2a-4e7a-a10b-fd4977d411c1"
            }
          }
        ]
      },
      {
        "id": "49a51b50-3585-48ea-b202-743c59f5b0b6",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "423a8a6a-4e89-4566-9e78-9e2cf4eaea4b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cd70145c-43bb-4501-b6df-16e7ef544ffc",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4901c64b-2e97-44c8-b9ad-f511301d18cd",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6542270-e8c3-4dbd-b126-5bc65c3957a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81e58bc2-6183-4aa4-a380-079376edbde5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2502dd3d-cc96-453a-9ac8-52be1df3874a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf22fb20-363c-421b-bacb-1f89364ad995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31aefc0f-821c-49f8-9e41-405bea97d8e7",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "922ceced-eb6e-4bc6-9ab5-67af596a71fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55afa0b7-190f-462c-962a-3aa58e932f44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ddde9c-0d32-49e3-80fa-d1728daccf2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d633cb17-bf42-4dab-ae9e-0e8b4c5b3893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2dd1877-3bc0-4232-87eb-718e3d43caf2",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb038c9-c8d0-4dba-8ffa-b374965bd107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c56dee3-c152-440e-993c-2b269518865c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "558212d7-2d32-4305-85e9-2ea28eaa833b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17934c81-02de-436b-8c38-c88d53a018ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a74d089-5b61-4a47-8652-6e989ea0428f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f2ab740-1ef0-4188-b9bc-25ea0dd48b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a17db721-3dc3-42fa-8865-bf117cdfa2c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6fb0bdc-cf79-4473-88c5-c7f5594c10b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8bf23438-d54e-483b-9770-555dcf7f644a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd7142df-caee-4e8f-9118-018688cb1eaa",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f007edfa-5dbd-444c-98b9-3121e60ff948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d71bed1-9c6f-4c73-a335-f55840973a3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cf65608-3c1a-4dca-b62b-273dabd1aa02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "03818855-b845-431d-b908-dc38e94a9227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f4771d-2623-43e2-9b36-f32cffcd5fd8",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45f88528-f51d-4be4-b477-f40af7b1bdc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bfc7b86-cc4a-4ef5-96b0-11c10826d093"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "030de78c-40e8-4518-872c-2701c25f243b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "792d63eb-5376-4865-afff-e6a8dd34e4fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b10108-e5f2-425e-a324-7f5c7286d645",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dc9bb82-3cc5-407d-a194-ffa415fed27d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a3fbaa0-36ea-46b8-9c62-bbcbc7f0ce90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a76868ff-9df3-4b0b-8408-30b561bc7613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82c61a22-2752-4b77-aa98-c2dbb986e938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5de3c19-4742-4ecd-bafd-6209f0c45e04",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b408f98-c9ff-45da-bf41-b3afe35773ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5f3b1a4-36a7-4587-90ca-72322d7ecbb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c7f17d-1bb9-4174-a281-5aaf3054cac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4671b423-29cc-496d-9ac7-4ff2158ae028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f71a715-8b81-4d69-b1a9-700fb7bd7f05",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b832d2c7-2fd1-4692-9e77-a33bf0f694b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5feb1409-2b8e-40ce-aa43-72df61bc7cd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55f3eea5-9090-4a4a-849b-f36ff700828d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b61b4c17-2648-4609-9cbd-1ac2219a6e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa21086a-c4af-46d3-97c0-19d08216c43e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac522f6-094e-4b41-81ef-06793136dfb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f568acc-f543-42a8-ba94-8e2291011692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f1fff28-8fd3-4df9-a366-278dc47d9108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78fc516d-1536-462a-82b4-4c52d7ea465f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e28e88a-7b81-4c60-9032-24a92011881f",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ea59ef7-30b6-4cf6-9928-5a77959423f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60b9f3e2-4aa1-44f1-a728-605bbc138a06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a861a69-70c2-4508-bdc7-553c3b76e710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4dfb2b26-683c-4d87-9a22-3c19b0627260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "643c1dd1-60ec-4adf-b765-249c29027b2f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d23319-2af8-49cc-a4a9-9d38190c938a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59cb6168-6732-4c7d-84a5-55c3feca0c71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13db0c06-621d-47ea-9b9f-95f4c9e786ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3906c2d-23c2-4207-a853-ed17dadd63e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e3d231-5625-40dc-a2fd-1ae6b8016de9",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33467e56-7987-4984-b726-04e36a5d17d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af668fd5-31bd-40b4-9e78-2b5759c048e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd8ffd9f-3e33-445f-861d-dd93c5c18c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62e227b4-f5b8-49fc-ac7d-cb0e15133c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43766055-0fbd-41b3-92e8-ccf5fb5c1434",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "335b8dbb-2517-4e05-8aa6-802a278fe564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e96451d-590e-4aca-baf5-3be662080b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f0d084d-ffce-4db3-a833-9af75fa10050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2dea7692-5e6d-4ddc-8dd5-78078b6eb51e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a49afc-9136-4417-bb92-975b77a82541",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b069a4-f67a-4eee-bec4-708f6313643e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f86ada01-8114-4143-bde9-18b5c7f7e7a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c93c7f95-b435-4c1f-a21a-76d6f08bac12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5434dd77-cddb-4f7e-8c54-6c3c184fe84d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a2df82e-bf6c-48e9-b263-85259c81f522",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19199259-b99b-4759-87dc-229024602d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a2f3c99-2d1a-4e1f-a26a-25008aaf0304"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e67dbbf-2207-4415-a447-7df12c7ef04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1c9fad0-2ff8-4199-966a-cb6271a46abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cbc2c43-0648-4764-9d3e-ca482d1a0313",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46ec7f60-7a25-4425-974c-4e2b57382e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7440261-8ff3-414f-8f2e-df2b3ba717d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6621bb18-4e17-4bca-a784-e7e41b145399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd4a23eb-90f5-4085-8f91-98d6d8a25c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd462ca6-a3af-4216-a5fe-7df960c526db",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "855c1bd4-2f69-4971-b192-58af96d704ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6da14123-2774-47f1-9deb-d5f37ba338b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc0e29eb-164d-451d-bce9-20c69439e1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "612955a3-6536-41d0-b20f-3d45d365f903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2ac9f0-f6bc-489f-851b-aaffb5ac23ba",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5145adc0-526e-41b6-a860-1b3c42beb673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c00ae4d2-ff2d-436c-8c04-b7704ad453ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0b6bbf-5ad3-4299-a2d3-8be7826de8cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff7e2c2c-e29b-4f50-a573-4769e36eb8d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba1518c-9826-4626-98ed-02e0333ae2e6",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fef6581-9e5d-4725-9b82-90f648fdd800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ebced3c-e5ad-4e4d-8430-623c0cd21632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c058deb2-ad96-45f1-b1f1-55e90f5b1c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8eee65f-3e37-4b04-89dd-68aec4f6e333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba5b373-fdaa-458d-aed9-875fb904f836",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89399b0-b282-4f44-8960-6971d49b6738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c0132da-327d-4d06-b28f-46c4cb322187"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac7eee1-e7c8-479e-b59d-9513e4b4e5d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c1b0d13-1eeb-4a79-9cd5-72343af6be0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b5206d-2d6a-4cca-9a6b-c549e0370e4d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acb7dd86-359d-41d2-88b0-4284f046a21f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "124a1348-2365-447d-9c1f-7ed07b2047de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad65c47d-2ce6-4c95-ac1c-39cbbbe4e62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "28a6dfab-467d-4062-b9f9-ac6a6b97701f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3711bd0-589b-4ae2-aaa3-7cd751a1b53f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8009dd06-9e38-4456-858e-13d41c7ded71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "347b2721-1c8e-4830-b13a-193e7a8220cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8a672a9-a1de-4915-a4b9-c5fa4b5e685a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e882874f-6bff-4c73-8ca1-8c71a6c4406b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e83447-d878-49ee-b0b9-e3d8ecd747bb",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b454a2f-251d-4c00-ab1b-f5dc0903411e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43476a4e-28f5-4995-bb09-2093938985e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad8c2a7-a0ba-4361-a4ae-73f269cd77d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4bfb2ae-340b-43af-832f-dff0c81fec68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68bf3c7-8534-490b-b5a3-278a70fff20f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0ea635-f427-40a6-85e5-7072f5d67e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "410ceeb6-52a4-4f44-a357-61bd369259dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820be292-1811-4b7b-8fe8-89c8c89380f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b916a228-55e1-4b27-a809-69a3bd17ac4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b4c0b8-cd85-46dc-8539-6c3ceebc3f19",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a136a3-45c5-41ec-960b-b8ae1dfbc0e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67a7cfd3-9f24-446d-b3a1-f9ebbe008dd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7dd68b-c962-4f63-a58f-49acc86426be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "74e64a67-cc90-4b88-b6a7-084548deea6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f3e32ef-053a-4edf-b63c-baa587b29e01",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be41f1d6-dee5-4a3d-a0e6-d92b11eaf479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "262c5989-1721-4ddb-b0d2-f65b899ff728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c64ffd-8bb3-475a-aaa7-c372539cc6b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bb0ae4e-d03c-4dd5-82c9-b1793eaea393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11920da-17ee-4d90-b794-e5bd4d43b495",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1fec8b-50c7-495e-a973-524ca34a96fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "941e9267-1954-4222-8d09-296cc074013e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4de2892-5cb4-42f2-bb58-c3b4a438f4b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5149d417-cfaf-4c74-ab3a-a646948fdbd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b4dd2f-7579-45fd-97e9-4ca46262b201",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97202c04-b5bc-4997-9a0f-5a5fc4e2daf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77164113-7dc0-417d-aa50-069445ae06c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce2459d2-2456-4fa9-969e-c8cb0055be00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "52969da0-ee77-436b-8d14-302c927a6005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "786b520b-c4d4-4b37-8e2c-75f3af551044",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f4da74-f9c0-41c4-abbf-0767f7da217a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85ecdb35-07cf-4db6-b47c-76d64d142566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b15b949-6d27-4ebb-87a5-cdc9d1409178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "86ec61c9-7c76-4230-8374-0e559718e869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a65c6a2-24bf-49b4-ae4c-a9e2bf839cdc",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68495480-7fdb-483e-ba38-6aff2b3c3ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1a927ae-3136-45ea-a1b1-a034d49467e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef8af560-b0e8-44af-9bd3-2fd2e7a98bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec40d035-f207-42df-bda1-be42ed00581d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e5070b-379c-4bf1-a74c-63d4f3102235",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "879bfbaa-baf0-4faa-b5a6-8b7038531734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0c06aef-d148-4ab9-9799-0a4cf64b43c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f19bb5-76c9-4a9f-9812-8fd4377b406e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f5e14d7-6fc7-4048-8fcb-5c53633c4b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d71778-5f4e-4ac3-be32-f4bc07d4b073",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f3a234c-8342-46b8-8be9-17143e2fa4d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c73741b-1249-4f85-8304-890a7506a9cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24605942-84c4-4e8b-8b1c-c5c9d425161b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fa096ba-9489-49fb-9a2f-ecca2b96be25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014b2e0b-dacb-46f8-b2ed-da87fe5e0434",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba5dd99-f8d2-43cc-b182-3ca82d5ab87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e97425fa-f82b-4b6a-9d9b-0e316cc512d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa75706-f079-4a77-be53-7b953ea07f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b7879ac-5331-4734-a210-6c1038de3f05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5824be8e-0b7c-43f7-8cd1-5a1a9e6341b0",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ab9248f-11b7-4350-bce3-18197f6c2566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeeb9490-b248-4171-86ca-4d3c752e3a42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e33931-01fb-474d-aca0-212c953de328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "8e9e7bc3-3d95-4e11-9ee0-e0c8e0ea6ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d463ed5-6ecf-433c-824c-d4688ad677f9",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7accfcc0-a751-4134-84db-7d2da8282a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af14a7f5-1ee4-4691-99cd-b8d7db66a2b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1930c38-3160-4203-95fa-b4d2bf752a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7ae16aec-9baf-43fb-a449-29e11b3284a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437313a6-38b3-4d83-8fe4-3645e51b69ea",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1386d8a0-cc29-4595-90e0-1d138834d026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31acc2fa-cf06-4f15-a42c-3a936a82070a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce06dee-c8d0-49e7-9695-1460b4300e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "471cac09-1910-4104-8030-31e93ddb7829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0bbd83f-121a-4d0b-bda3-89a8c71df0ab",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f21cf3b-f110-4991-a5dc-8f83232f8127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dbc03a0-339f-44c3-99f1-f135fce1e6dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "219e369f-1329-4f02-b614-7d3b358fcc95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b890f29-3d55-4201-bc64-9696eb28a100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "635b76ac-bf36-4fbc-8019-39baa3289f46",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac99a71-cfb8-48be-a9e3-07be50fd3443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ae77a64-ea3e-4fb0-b1e2-92fafbbc45d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73fc9a3f-e122-4228-84b2-c86602c05611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "09ac5e47-73c6-4f33-a94e-7f55f253448f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9724f915-0490-4053-bd46-980b7aa20544",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b4f50d-eff0-4289-8121-cdadefa26b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a61cb18-efb1-4573-b77b-c574289f7c57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f68853d-f6ca-4e7c-aabf-b4b259372d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "17046a1a-40f5-4c39-90b0-cb18c729626d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9774bf7e-3912-4c4c-9f52-df71d899414a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81a3de6a-21b2-4af3-9eb5-1c180179db70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d4e3464-9158-4d6f-937b-ba288a533505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c369b446-60ac-4edc-a0ba-961162b0e0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "773b93ee-ce7d-4b83-9e64-6e67c574cf75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33521dd5-3b8f-478d-9049-10337369857a",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "328c4f04-6af7-43e7-8b06-9a9cb5a8a40d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51917eb8-02c4-42ec-a730-659016e95f50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c85f08-045a-4af9-9fdd-ed436075d86b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "cba6ee56-0c72-47fe-9e31-237bc29556c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e309d28-5350-412f-97d1-259adf138aad",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ccf634-96fb-45c2-be93-75baf1a3daa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3252dfd0-b1ad-4218-94ce-6b40d4af245a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ae030d-8d87-47af-8349-d2e06e22761e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "38a38e48-2371-42e8-8d9b-cb26ec556269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56daafe1-b160-4b93-9f66-dc5571a2bd75",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ef8b4d-920f-4a2d-a571-31418c1f4bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52ece92b-8c7b-4e0a-a94f-b5492c14ff02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a665ee4c-e4a6-46d3-829c-f178255367f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a786963d-6303-4e57-9723-ca78e2c6bafd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11159af5-05d2-4df2-9c63-06bea76c31d6",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cec67a-78f2-4955-b11e-8a9b760fda12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17eaf679-4e6a-46cc-a077-b65fd00a5974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd999fd2-36d0-4fb5-b22d-73fa491af3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "81beeb03-3d7f-41c6-bbc4-4df62072cd0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0920d053-2ed9-4a60-931e-9b9a4dc5c1c4",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "928ab90f-1924-444a-bf69-1b02a36b086b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fa98340-bcd9-4227-89ca-8f23cbc40a46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27cded6d-44d3-499f-b840-2273f5d56bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9c2a39d-deb6-408f-b9d3-736c090557de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de9c0bd-a98a-44b6-a4f8-7606d8b5c92b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b94b38bb-1500-4cb9-9bd4-2a9d2a9b7ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f51ead9-3bb9-48e6-8cd6-4628fa506811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db69b29c-9b69-4a93-a7a7-8465e1b1daf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af2a60ae-c871-4f4c-8b50-bcb511864b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "978824b7-6276-48e7-b70b-2ee362049741",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be675d9-8f49-4b30-b2e3-66dfaa10a496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7e99b1f-0d09-460e-a1d5-beee93dbc60c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cea5dec-5004-435e-b65b-75f508248e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b25f103-c6a7-451f-80c9-837cbfc8dd33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "856da9ae-8950-4618-aaf8-95a3fe92724e",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee18aa1-755e-41e8-8d1b-f1f7a6882438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57256054-dc2d-4ff6-8663-748415de335a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5879314c-f681-4ea6-9559-06aef503a765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ff162cd-bb40-4b7f-8c82-fe4143648f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e4816f-64b2-4ddb-a578-735e03eeb901",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de844768-64bf-42dc-8a1c-0aa749a59f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "397add4f-1ab4-4c7f-92f4-114e7a1ce306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9dc7332-8172-4de9-829e-d29d86fda9f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ae6f5254-15c3-4801-aa9d-17f244fee355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a641532a-7ad4-41de-84fb-984f9b1dac80",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "416f2bec-d037-48e3-a2ce-4f9fb8065844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f1cec0-e4b4-4218-a00b-8d204520989a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ed96e1-36e1-4b61-915e-73974a2b9704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "88a9b21e-1137-4db5-b073-e346ca4f7495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f857372f-8b17-47b1-8588-3fe1010b2d55",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e0fd46c-6344-4564-978f-8bc7dd973145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32557ae2-c0c9-4569-89e9-a898997bff5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769a3767-fffb-45ba-b57a-0e8d5ee657a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "634d1787-d267-42bc-a87f-278de8bef81e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80db4775-acd8-486a-8fc8-b0257c482df9",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "865a56d6-418d-4e28-a5ab-9c2b05a4ea11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0059e133-f4db-442e-8cd7-550567cb6a65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c418fe-a450-4078-9a4b-bc57b5b3d097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb3d2055-9e31-4d86-81bd-0bd9c7d7f6ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b18ede27-f0a3-40c1-ad69-c8638b515152",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "659c8293-baa8-4f7d-b79a-5cd7a5bf800e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83c08bce-3677-4fad-958a-58a05912b4ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31628a6f-e142-4c0c-9a40-af00668ef766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "940b5039-6708-404e-b3ac-2337648fa4a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4aa402b-8035-4c9c-a115-8810f74febea",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f29d0c8-59f0-4ed4-8dc9-9f9ce8890081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48dd0055-2548-40a5-8874-3bdc374b76dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "555eecd5-5157-4282-9483-e27ec36c73fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "49618f8f-e770-492e-a207-27485a0b7952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66617686-f9b2-4f9a-bb36-a5a6e2919183",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "482ea116-8f82-4980-8878-8b29972f0756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "101b585a-27ac-49ec-a80e-0df4d176adc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a6f4278-b1f1-4a04-8846-c4a78e63e837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5ccfd85e-9e3d-4c07-b486-20a72118adfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c77345-7d6a-4f35-a5df-33252fd326b0",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb481d06-b366-42bd-962e-d8601d624485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cdda6dd-7551-4de2-98b3-ce0f7832c820"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ea479b-650b-4204-9baf-8510521387ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "866362ef-8112-4902-8c88-df65c47d9edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "950cd9e4-4dbc-4d03-bd5c-7cefc9f21333",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef786947-72d7-49dc-9286-0aba3ba1039a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26536db9-310e-435a-bc0c-9c3e7a55f5d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "389fd4bc-56e6-467d-9c61-4ed280ca3f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8838e48-34c3-42b1-a7d9-97f0b4eba250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d4d1ea-5b59-4c8e-ad4e-8d727aba96a8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7071e83b-545e-4df9-a3e7-b68eb46920f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "850443bd-f990-4cc0-bf03-b1fcf3e00a3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54602ae-0516-4ffc-bafd-c00a53f4a3fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b113843-9989-4b05-ab5e-49288e6adea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4860af0e-2e97-42c5-81bb-63f57add4754",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7a08c8-2c32-4a1b-bce9-a691a0d92ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4294503-a827-42d2-8cec-862347a06839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cff5bdf-e0bd-404b-9ea5-0907cc254ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0e7cc8d-450a-47f3-a75c-53f9cbaf9236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f420bc9e-ec61-4a4b-b821-f5db9a6e5644",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26cea41-112d-437c-9da9-8e7f111d0fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c81c88e7-c14a-4d47-b3d9-2265dc090205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc689b96-24a5-446d-86e8-fbe5304d44da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d88c62b3-5c22-4476-9304-542de5890855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a160066e-22a1-44af-ad7f-2d2c5b495f06",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64fc8537-4f77-4863-aca5-caa90a2f0e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30f5d498-c4fc-41b2-8fbb-c5717cffad57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a2575a-1b4d-4a22-8c44-af607df05811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "59124c4c-616c-4731-9c24-2ada3bd3c50e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0ceeb78-4c96-4b7f-b48a-513c5468a9b9",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b256fd0-5319-414c-af3c-a231700f5a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84307c4c-8fad-474d-b993-4b963116ef78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29c7aabe-e1b8-42f0-9069-814389e8642f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b355b69d-f96b-4b99-815a-98a553678a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67c1194e-6567-49c0-b77c-8d3ec6619487",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebab12d2-528d-4b5c-88a5-0cee652750b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a21603e-7418-4e7e-8afb-d9a95a175414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a172ff-32f4-4bca-b78b-1af5392b0ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b59fc91-e650-4e47-ae70-3e6b1b87bfc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc20f773-186b-4c80-8a63-3f9600c6bb9b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26cd3f7a-f7f9-4260-96e3-2b441b944ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d4cc31d-0642-46c1-ba1c-335c988b5678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990c0348-0657-47c2-9059-d70268014b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9209ecd-e40d-47bd-a70d-aaa61e263409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a919f273-94d9-483b-96cf-5c04f1e36535",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0bb40cc-da6b-4c21-854a-29098506c39d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62ad9a5f-6f65-445d-ba2b-9f7c4ddb2c5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8f4b767-bf5f-49d4-a455-bcc04a743751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ad9df9a-90a8-4a65-a1d4-88565b522008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23dc8aee-192a-47f8-8b90-6673f381575a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91dbff7e-ea29-4606-be2f-3b6cc2c84a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44af8215-03e8-4344-91fa-f5d6f947fc71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0709967-1be1-4aaa-8d9c-20af9f144d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3c866b09-dce0-448e-8b1c-32bbd429a057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eea638d5-9e94-4fd9-bf4c-360326fab407",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7865e458-1404-4d5e-a7ed-00ea25f0a3ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcd81f2c-c7fe-41b1-a356-160d34c11ff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cbb88e6-b87a-45e6-8168-cfd3503b72b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "770a00e4-a286-43a6-beb0-df0acfbbd329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9e0b51-5abb-4d81-8095-85830c192bb8",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ea1a52-dab1-47bc-b439-c5d6f3e16d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8af7e0f-df96-418d-b709-b3ea64331ca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a06533f6-1979-48f2-b761-428c5f7734ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "98244920-e99d-4f51-8581-69bb97f65e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01637c4c-45e9-4373-8173-265509160b96",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f76509d-0fd2-43a2-a0ee-676dd6c2447d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c032e42-efd3-49e2-9457-56d5486abdc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12733854-4b4f-4671-95ac-cfcafc13514a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfabfa92-8396-423c-b6af-0b91c6a7ee85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd24c263-d5d4-4ed3-823e-c1baa8586ea7",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f8d01f-ef44-4e60-abd6-4c57164786b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91256809-d790-46ab-b69b-e9223006a08e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39bbeae0-de52-44cd-b933-7ffa4d1fda52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b46212aa-923a-42b1-8d97-bd29f8a50a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b459a0-a6b7-4a30-a73d-6dda77547ead",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79da4a13-95c1-4d0a-9a2a-7bb80cdd1684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76ed717c-2fb3-4639-ad61-99c28ea3aabc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5862eb-f648-404c-80fa-bd602a361ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "161bb571-6d69-428c-8816-365436a33a68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4149b5e7-7968-41f5-a070-1e5cc3388e37",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a076fa-6e70-485f-85ff-6bc5e41fc762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "912f7f75-bbc0-495b-a284-25ff52d7c56c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a309e51-5ec3-4f1d-9983-5bdafccc097d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d27ede7-e353-47b1-9a9d-a9ff3dc14ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace1a88f-98a2-46f9-b4f8-522ea2657bdf",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3baee7b-228d-40ed-b57e-92f2b328a9be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0e93a9f-beff-4fbc-ae32-d3e07041756b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf2d301-d67a-458e-8699-ddea00869a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b247346b-d5a0-48cf-ba61-eabcefc7ea93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb2ddde3-1c93-4b76-abd4-37e43a679236",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81e4be0-e800-4720-a997-b25f97ba6df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "784a5698-cbff-4202-b80b-c91827ba01db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1de3dc-8af5-4830-aaaf-cf5ecc7a1e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d073cb4-f06a-47c1-9307-c5be30629546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "970c3806-c6cd-40b9-b510-36bc7ed1f3c0",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4b97df-ddd0-4e64-abd2-b626c5a257db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d5b3e23-062a-4661-98bb-ea73f98afa1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54e02831-03e5-4e3d-a6e1-6542c9932dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "58e467e2-74ac-421a-96d5-3935672c183a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6747f1cb-4c50-4b1f-9877-a7390eaa4952",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e903d842-9a17-42c4-b065-6b80e0baa600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd5b47bc-f038-405d-9424-02760a48a98b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ed1392-6fbf-4b93-9beb-e5ece7b1dae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6544c122-4514-4e50-942e-004985d69bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ce27ca5-dc08-478b-8a4f-a17da435c14f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e14cb9-d21d-46e2-a549-0d8b5c66d9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d687b763-54c0-4048-ac0d-7da0321613a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b0a9974-f69f-412e-b431-f31a8620df56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dddc38e5-c8fe-44ec-bf56-4009834fd462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b919122-856d-4978-9056-376cdb019d43",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a029c5b-2f3e-49ca-8e32-ff934fac8293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6097ad20-25bf-4f9b-8b9a-b17609ca9add"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657f48e1-34aa-4e40-9d3e-c5bea1af6ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9c9c2a54-c369-4594-87ae-12da92fb6169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487b5210-73a4-4734-b682-9484b1dc7173",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84564291-1e27-4eb3-9d50-4bcdc75cc1a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d684e195-d288-459a-8dfa-87a8d5d2b75f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7928855a-01a5-4a79-8555-84e1d5ded913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "35292e39-d956-42a2-bf78-d3ce5c72649a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5319051-7f8c-4c3f-8a16-a23d65559c26",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a8b8dc-60e2-4deb-af39-b14620f04251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99974d0f-2e18-4c7e-b8af-9ad1bae31019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aabf3293-8c7a-4844-9f97-83762ddf6000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e02ef00e-226a-4a8a-99c3-494afd907107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253c63ec-56b7-4b78-82b9-d4e5415a23f1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8994858-28a0-4f59-8be6-66f3f1453777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51df42fa-a2be-44df-92a8-5f932ecf816e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea7e8363-87a7-4671-babf-8395a593cf5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b68aac5c-3e41-4324-8984-7c0d06aee26f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43237915-5173-46d2-8e2f-7938adb7dfa5",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2260486e-29fd-4f69-821f-a3a5968d8c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4247d4c-72ea-42ad-b76d-f447533954b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e46cf273-578e-4f77-9743-3043637e258d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "715a9000-b352-4703-977b-20e897711658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b02c00-a0e0-4b02-8ce6-7bdfa20f2f51",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0075d5c3-ab26-461a-b208-ceda2fc44a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2786a8bc-ede1-4ebd-ad0f-c79e770257c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe4f70b6-7f7f-4d36-8367-19b797440443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "132f3d88-3dab-406b-85d4-33fd0bf8d1f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28f188d-3f99-42ed-badd-4819d0e3c4ee",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb50908b-d7c6-443f-a321-13e91ffd7567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "206127e4-3101-4f3c-ad80-1a7faa7b1fd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c7b665-b856-4961-92bc-34b0dd0f0885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e429b21e-a21a-4f25-b7bd-750486e14891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e22b32d9-336b-44fa-833c-2b3a6617eafe",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e3c8ec-e3d8-4dab-9e75-c08de3669380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7d8f8489-6ade-4f46-81e9-532cd66002d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3570714-1b72-4280-a98e-a2c061caf0c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb4a4bf6-fbbf-432f-a457-8f29f7595b03"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ca23db53-32ca-4747-8f62-6c07e76e1b95",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ec467559-5fc5-4eba-8922-ae5333bf5161",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "824711cb-ad28-4faa-9383-e838ad654e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae454add-d04e-4d14-b316-4b7630f0b02a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47a025d-7554-42de-b172-55a8f40e4ba1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "8ec3a1bc-803c-46c9-863d-d3b052107e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c9a728-0dc9-410d-b2e7-4ddc9f47fd14",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3afd9c4a-c2fb-4108-80c7-e43cb86bd08d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fab5e639-497f-4c4a-b3c3-8931058894e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c806f95d-cc65-4e28-9d05-557e8f6abdab",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "610dfb96-2936-483f-9fc3-b3f1a3bd6b4e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d3c1fc54-723c-4b73-9ea7-90d63011afad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6cdc3541-9be5-4bd4-803b-53eea1231fcb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "845fa5d2-4a6d-4c2f-bc3d-88b66d43b8ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7a7cf6a-94b8-4b6c-9789-12522b88b53f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9cc96533-64b5-4db4-bd1b-e400381d0714",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d168fcdc-a488-4e09-8cf2-b2e9ffdedc93"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c619efc3-306a-4680-a1c6-0a3ad365a84f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5e3e7b82-cbf5-4b45-bf40-cc01f65c8a5e"
                }
              }
            ]
          },
          {
            "id": "b9e9b13c-1485-4fa9-a96e-400870466045",
            "name": "Positive Testing",
            "item": [
              {
                "id": "50327224-2de6-4554-8ecd-8517d05189ed",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b61bc5e-ea99-4683-85e9-566963e984f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "587e88fa-9cf7-4a01-98ca-578dca55a151"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d793bc3f-6ab8-4cc5-834f-77894a9ccf15",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "e33b0a87-cc0a-4c95-976b-f2757204bdee"
                    }
                  }
                ]
              },
              {
                "id": "5df5d280-bb66-40d5-9a44-ce83365ff926",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf8769a2-c5b1-4539-b10a-54d312abb273",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5e4ccfd3-d9e2-4622-a61a-785681139680"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aef5c656-c970-4a55-b9c8-913a33a7241b",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "f260fc95-deb9-4748-b54d-ec41957e117e"
                    }
                  }
                ]
              },
              {
                "id": "87cc641c-a452-4b51-a9c7-645aa270f5f3",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "059d0bdf-583b-4f68-988f-45ed3dd51ac1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "157f9329-7ed6-43b5-bad6-e1b1173f8522"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ba8223a-c9e0-45cb-bcee-12508ed773a9",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "a0697b5c-67de-4350-83be-e0dc1df439d2"
                    }
                  }
                ]
              },
              {
                "id": "ff02e879-4a4b-47c0-b092-4ae9709ab826",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4201b458-fa75-4a47-9995-44e5310d7c4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a5a8d5ea-c575-4ded-af24-494132db077b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "24007197-222e-444c-91f1-c4e6b97112c5",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "9753fbe8-0dde-4731-9d2d-201df1a4452f"
                    }
                  }
                ]
              },
              {
                "id": "1c5e6166-b81e-4ba5-9062-694a72867b63",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c67b861-5d78-4607-a1f3-f6e518c13734",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8f0a3866-e76f-4d31-8ed3-7731a56d1afa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "359e9a2a-5f8c-4cee-ba6c-c909550efec3",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "ca062041-ba9d-4809-a602-cc3059308a8e"
                    }
                  }
                ]
              },
              {
                "id": "5d07c6c2-5807-4cf6-b919-30ca9b2d3ae1",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bcaa8df5-9bb3-4df5-8366-e1920f67a277",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9778bbf3-9be4-4082-bf42-a2a85f0666a5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c2ff9d5-839b-4470-aab9-1261b30d45bc",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "63385510-4c59-4573-ad2b-a482e7a9e912"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "010be305-75cc-419d-87e7-432129fef6fe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "052179c9-3432-4c17-8123-f8ddf08660fe"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8cd3d055-126a-4157-abec-e37c6789bfc0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8c8d9967-cd37-4cc1-9dcf-0e18899fcc4e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b7ec8bdd-4daf-4cd6-a94f-333d455374fc",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "abf85140-b189-43cb-a333-0c9857dc280c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "687270ff-8b78-41f6-9988-812a25790b05",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9f94f260-940c-4c75-9c67-84879a3ea01c"
            }
          }
        ]
      },
      {
        "id": "495d226d-2652-4261-bcac-fa73cdd16494",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d5e53706-2431-4f17-82c3-ce7a5baea51c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f0725010-98d8-4896-896d-c81770e905dc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f490bbb2-4aa1-40d5-aa51-5bfd016104d1",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f66d35-4c61-4f28-b1fb-6b90539617c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7adc4f02-f2ca-4a84-a5cb-31ebfa6f5b52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ecd4765-e5db-40c9-920b-663f5c6405f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee102225-3dd3-42e4-affa-916049d6f3c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e2dfbaf-0e34-4ec8-bcb6-c1cea8a17f5c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cef1307-0a7b-4484-90ab-8538a5d1d720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d15e54aa-9f86-455c-9311-1c20955d65e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42996807-a853-4463-9404-10f9b6bb1db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ade117f0-bdd5-4420-9e2b-641862d0d203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b44a435-f8e8-48ad-a8fc-1fd4a503443b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "052c7a96-9e33-43c5-8e47-ac48d75d2f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b083fbf5-1332-41b8-8e9e-f9497b1152cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "344756e5-e27d-4b71-bd4c-83fbeb98f021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fea2847-936d-44eb-bc9a-44cf8b4c7039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33a5504-954a-470c-be05-10d7819d8c1b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "077f8c20-e802-4774-85c9-9df1467146ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3ee7818-86da-494b-96be-c451c153888c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "589a7422-1f20-44c1-8a19-524289d44e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "17b1b210-4ca8-4fd8-9cce-1827cfabbc7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d619200-cb70-4dbf-b90e-aeb55b92c789",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4edb832-e251-40a2-9786-b40338eac7ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ee9a009-0e54-42e1-9902-cdad9e1dabc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f96b60e-961a-4171-908f-0d1ba3beb84a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f2ae9dc-e40f-468d-9cae-3a87a8f24313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b2c77c-10ee-4e0f-8ee6-ee5598beebbc",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c178d1-9f89-4b65-a9d8-c9660bbfc778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a0be64b-f71d-46fc-8e40-fd18915b13de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf13b09-ada8-4b0f-afbf-e0cf455c1171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "82590aa9-3220-4531-a287-6a89aa1d1a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e70a77-ba82-44ba-8e9e-072db204dbc5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99df3f5e-865c-49d3-9262-e8a30bf3f80c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58526f30-9ba3-40f4-8268-1dcb3174b781"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "768352d4-3ebd-4d4b-924d-dc4264f8a444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cbb7e9e-4c07-4bda-adb0-492a39faf935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5659ac2-c913-4a1a-8165-8551c653224d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc9c7215-0f5e-425d-84aa-fa08a6ce386d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04906dad-e987-4d2f-9088-2a81800937c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b59216-20fa-418d-89cb-24d3a773865d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4435a73-7448-44e4-8fd0-a941496fac08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee438206-07fc-40b0-a2f0-6c9aa382f63b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b39e0bd-a6f5-4cb4-bb12-6ed339c80f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dee2b981-83bd-413a-9fcc-e0c6843f2038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11bee0a4-797b-44ff-b49d-4483fa2683f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ea06d7c-46a6-41ec-bc0e-cdc87ff26374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c6ffa0-f177-45d1-90d6-4c91bf9b9b33",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e67a4244-40ce-4a28-9d84-b45efe033af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "228f4fd3-984c-4619-95d9-1889659beaf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b092a666-b9db-42df-9a7d-c7f1bb81552e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8034c5d-96e5-4b6f-821a-263155844577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "368a5ad8-5323-4f28-b142-78cab48a7a55",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f803399c-a314-4592-9c78-f656b1ba9b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2f78c93-4e02-4cb5-be21-a8c1d8690f76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05a6f07-6ad4-46d9-82b7-0840ffbfdaa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "206ccc18-6287-4ec0-a936-92cd96045b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d47883-be9d-4987-9eae-10544d4ad473",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b70c681-7f37-486e-8b95-817babcb45ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb761704-0914-4c49-9a4f-7055ffa1c7d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f02b68-95e8-4d09-ac3e-1fd0dc26ab2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4b2b9748-4b70-4ca0-8601-b71943e533ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa25123a-ae1c-4369-bd99-a287548ef5a0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a817e8-40cb-4fa1-9a0e-fbbe3d3c4cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b3f9190-2758-41b6-ba2e-b4723342c931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7075d16-8743-48df-b507-72e23ea801c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "89452c0f-b25b-4947-85be-f8f18cb74cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc858860-93a3-429f-b1d9-bb4410f64d6d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb3ffcff-9a7b-4e70-ad33-2aaf695e05d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d379e0b0-f0d4-4d91-b488-5fb0337cbfd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e8614ad-06b6-486d-982f-36fb08085f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "75301210-d4d7-4682-9a10-38559ab66641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb4142db-acb3-4ad8-ae21-9fb87d5e49cb",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d212dd4b-edbd-4c72-9ae8-a366a966144b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73cae804-6c0b-409b-b534-f6514115db61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee08677-ffaf-414e-97b2-652fbfa3a250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cf85367-3561-4a4c-90b4-b2c6d5a9cfe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36574a0a-2894-4578-a4dc-22961a6594c4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c639566-883c-4eb0-a5ca-86e5e8a55274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9630efcf-fcd5-473b-84fd-0e982afe04b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0012e0cb-cc3e-4942-a5ae-d8e7e4ee4e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b8cae59-7c54-40b6-8928-6aaf2114cd97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be2091d-c61a-4829-899f-315ba4e798cb",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a8232a6-ded6-4f09-a43c-965cb2e1c319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "907ca063-d4c8-41e8-a65f-2969e63056c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ce884a-d1ca-4df9-ae5e-c533803f8a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "412ff4a3-ceb2-4226-8075-d0a58624e6b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9158bfc-6866-4b99-a702-a0f5271b437a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1560012-1175-4de0-9c13-d378195bd47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7579734c-9015-4813-b5a0-9e9395da21e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3799b4f-a228-4ddf-b156-2b72a34f9931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbbaeba8-6d12-481c-80f1-a9f1800fd80a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b0a83a-76f2-471c-888a-a9c92c9afd99",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4e860c-8d1e-4a74-8369-0761812ab00c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f293fc1-8b1f-4101-9d6d-70af2653c260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cf1638b-865a-405d-aea0-abe9d66b41e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8e37d30-3509-4a1d-a857-383aa1527cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf2d640-665e-4a38-b27b-ed563ba22142",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89a107c-591a-4fe5-8f6b-85ebe7418896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78efcab2-b5de-4cc0-9b37-2fe852cfe7cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb0ae3b3-2ccb-4083-ae5a-0aea0b84358d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdf44eeb-3be9-4c18-8134-f7779e513981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dfc0636-1c4d-4d80-b602-ef1999dace19",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac855cf-dd4b-4c14-98f6-c5ef89c2cd42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51385f11-171f-48da-8762-c62d6f2b7241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8625c85-bac0-41d0-aafa-4183c94a72c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7d0317f-562b-4d01-847b-772b66e86227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e8d218-d94e-498a-b186-b0e10b09b1af",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b419a48c-bff7-4828-949e-fe51bb720fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2c49ba2-045f-4e6e-8886-6229f1b363e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75fc8984-4cb8-445e-9ca3-f30bedf90a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "416e3a41-e7c0-40ac-bc9c-1fb3c51498c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "234ef39f-2a01-4dc2-b27e-799e108ce7f9",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d69d052-86e8-4632-b30c-e9643dfd266d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2da862f-cb91-435a-9352-472a8a56e7e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3b6117-727d-497d-9fd6-9fc5eebc19ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54c42864-4212-44df-8bc6-c77f1bc07053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f8acc4-9c17-4af5-b844-eefbcf6e546c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3842fdac-08fe-46eb-9d25-576b4dec314b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ca5cff4-aedf-4b0b-9029-18f16bbbc941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3af72a7-9d6c-4309-a08f-d5eb08f38f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4564bcf6-af6c-4c01-9c1f-db4403c2621a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6253af24-5712-4f8b-a495-cce98f416919",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75f03a0d-2bd7-4cbf-992a-edcba2bab324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa1495a3-8215-4f30-aaff-6fee06a13a83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e6f063-6465-4277-b4c8-4848e5012efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1896187-72bc-4f7f-9e1c-d21dc1353fde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7d9a68d-87ef-4b17-a8e1-704c93f93406",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c6ac92-c324-45c8-9414-2d1e3e77b580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9b13796-41c8-4d89-9646-f22196770efb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ae0dd0-7825-4ca2-b0a6-fbf6246d6c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8594d826-f365-4c2a-bfca-3f79c58db66b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35df8708-2195-47a4-9fc5-53cffe94a6a5",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3cdf95c-c623-436a-b017-0387af50bdfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "030b4838-715a-4fb6-9a04-ca0cdca89637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1291ac3-aa4a-4053-87df-1816fba2fa82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "193f72e4-29e9-4745-b8e2-665e558702f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2426b207-c042-4f51-b7f4-ea0fa8a75995",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae1e36a-9874-46e3-8821-22c390b74546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "957177a7-38ef-4d4d-974c-b532d3004899"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3709375f-cbb5-4974-8bc2-241032e646c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4b728dd-e332-45e5-874c-1dfab9f52dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acfb6991-2011-41dd-8093-e25b2e612087",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1a0cce7-f595-4a8f-a6eb-7028d510ec9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6b63b4d-b3ea-4e14-b5d7-0cdef04926bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15edbb9f-c366-4758-bd7f-a48df1309c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c05a4624-b1ec-4684-b468-f4fa66371773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b9ac21c-b20f-4b40-8b59-c26e8c93ea76",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e7cd28-0485-41fa-9344-3d038a79090b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "612a9e41-472c-41a2-98e1-4d644f9c6bfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c303b3-e773-4989-9f47-a7d80fbeb729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08507ae0-77ad-411c-b22b-97d87369d629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65cb065f-1560-4c03-9c98-81f08621c958",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74dbe2b4-b840-4f55-a81e-00d9f8702c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d42fc32d-37b4-4c9a-b101-ceaba221aefa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f7cf924-d740-4f50-b61d-a76637b9b9bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29106506-2d67-4f7c-a77a-db17c5c45f0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac04aea-519d-4553-a5b4-aadaaec246f2",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "471c9566-895f-4e47-be3c-81fd833fe94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc70c13-08c6-4616-8051-6d0d8aa58884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba81cee-f33d-409c-ac3e-b8e95f34ebb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b6cb75c-c723-490b-acbd-c6c2b4670f60"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "56501824-c16e-404c-9cce-0730033832aa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "93eb979d-623e-4c24-90d3-d07ce28d563c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae8a07e-d347-4b76-9b6d-9ab3215763b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb7422cc-fd1f-427b-8a2e-7fa7574bbc59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc54cda-1f60-4b93-8db9-4c9cd8bd4abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "110220fd-d6f0-454b-a2c4-beddf1e6f63e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d610d1-38a7-4039-8da9-2a61807f3e44",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5fb213b-c779-40d0-9069-2417c5e09546",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "9186972e-7cdc-4853-9a51-79096fb7f650"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e62e0b-b91b-4d2e-835f-385ba9cc6bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f90967e6-75fb-4b2e-9540-75c36d0bd229"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d976cf4-35ba-4ebf-9588-cc4bfbb2da2e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb885b5e-4afc-4701-a574-b2bc43abd8d0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca5a8920-0c29-4e30-a352-010ef2761619",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8d1132c-7bfe-427c-8535-bd35e608fe40"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "db19b904-1d25-4546-965a-366f2afe6142",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a45c0454-eab3-421e-aa93-22a720f3ee57"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3aea2dcc-147f-47b4-a9df-0f719d30f870",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "13b3b5ea-c336-4213-ae5e-4e5d8b27bbda"
            }
          }
        ]
      },
      {
        "id": "2a75a31b-01c0-45f2-928b-ff06e871608c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "596e826f-dc4d-46a9-919d-3805694390d8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e0041b4c-3e95-4061-9ed7-4d636970fd42",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5a1e44e9-f409-4e7e-a534-2d25a3fae27f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f288134-68e0-4dd1-bc99-c308eba558bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d08a0a1d-6b13-4604-b1c2-a0722e5977cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e0e9a01-5054-4a6d-8275-b7dc5dc580f9",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "042ca722-f086-4276-9105-404a11b5b644",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f25c2f6c-0c59-4939-9f3f-53f4c54fd882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b7a86c1-9fba-487f-a05c-85f5de83708b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dde86f5c-84b5-4a93-8a3e-b3927cbbcb7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d8a026b-7aff-472f-9dbb-fc6c684addae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b644371-cc2b-4f2e-b679-ebe247d1c9b7",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eedfd83-2b74-44a8-b70c-ab7e7e2899a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "959ae5c3-6a7e-4b4c-8c5e-38cd8766a780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7927938b-1085-422f-8d2e-ea01c1e23129",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ed731f-1169-487c-a5cc-82d66e747c5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68a6c829-e3d6-4de3-9558-5da233fe5ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b83bdc45-b7d5-4a4a-adce-5e6720faef66",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee567f5-5cf2-44fb-99cd-9427c8ae051a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8cdb311-3639-49b7-b909-091d9cf0a702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fcb60e1-7992-457b-8a39-dadb958a2f08",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4a4251-d651-4331-9bc4-d93cb59873e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "957d2b43-8255-48be-913d-1fd820e6042d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89cd0674-ab0a-4af0-8cfa-9ceb10193652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60e60a27-b64b-4777-85e0-1cffca571488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a1423eb-2815-4e8a-8816-ebbf642eee54",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a00423df-13d0-4a95-a002-9cdbf9c9f8fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f247f49-945a-4667-9446-daa09f231799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d40bf7fc-ddbb-4664-b773-673bbcb5b74c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eef46dd0-6214-4231-a6b8-428987cf68dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a521fb-62d3-44b0-93e2-4c7206b85891",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e98641f2-6ae6-4e5e-a01d-3b55b3ebc582",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a4c51d6-bf66-4317-9c1c-c1d1879197ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c040af-af43-4d28-8afd-3ed204680eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c068b841-be7a-4827-b926-ae85fb05d586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c43131-a5c8-42e8-b9d4-b15ee2558622",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894a45be-cedc-4fcb-8a71-34f4142ba4f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bf925d1-3e62-4d8e-86d8-4a9648e79794"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed1287d-6284-491b-92d2-19143797068c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d352ddb-9c8c-4cd4-981b-20f7b9cb0a44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb9ff7ac-8d12-4cab-9066-a3cb8e432242",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99a84dfc-c888-4034-a6a6-167f14166990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d1406a9-6aa7-4e44-b74d-2d9486186ed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af76314-7427-49d7-9a58-f4f8eb616d6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2e75002-866f-43e4-b5a1-f56d8836676b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311e64d1-0332-4490-a4aa-f2e0f641f581",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef5408ab-e5f8-4c3b-b51d-50352f9b1066",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec43d8b8-e30c-4042-9308-f9523f25a196"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bfb2bac-4adf-4d5a-967a-7bced6582e43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47862f18-f482-495e-9e06-46a7d61f06a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93565f7b-bebc-4289-983d-de120d5d1821",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aef1113c-56c3-4db7-8b47-e26b6ddda586",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c8436de-9c09-4748-b43b-7152f533cef1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cccaed9d-1f55-447a-b3f0-3e3e83b5d1d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "885d4a3d-e6bd-4a60-8bcf-0d0790bff0d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6edfcacb-3cd3-428f-b412-080670b4ba1c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7761b7b7-3da4-44d3-bc14-085224e2c12e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25654c3c-db17-46c4-9a5a-e69515e4cdfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c329e06-7462-4846-86cf-34e9ceb53ad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf14d950-fd14-4095-9171-8ef4ef73d6cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f34dbff7-1ed6-4f43-8cca-e15c515015f4",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8861abb-9f25-4827-9229-5607cf44de60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdfdc7ac-6901-4ada-a0c9-f051096a2dac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d87e17-fefd-49c8-8e1b-b07ca914bbd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b3c2d19-87a5-4a1b-bb7f-e94afae8af53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9674c8c2-e6e4-4aaa-93f2-e3a7ae9c580e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc91c353-3924-41b7-891f-7885ec5a55cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e0204b3-5d69-4655-9019-1bdde868ea8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2555428-941f-475e-9660-441128351fa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a63942b-922e-4740-9409-c72b235100a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813d134f-8ded-47a3-9c89-a6f6d392dc17",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5867e591-2131-41bf-9fa7-23e2fdd88227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21846a88-ee36-49a2-9da8-3e343045c838"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e50ac2b5-1840-4c3d-a29d-1d240ef27d2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb4c5502-bbd3-437c-8061-4f1e47ce309a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce9fa74a-b86c-401a-b15d-d6af26711955",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54142111-9545-489f-b56c-64dc544c2483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45d1da13-684b-4e36-a949-cb62122c7f8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ea3529-4ad1-4128-b9a0-1cb227b03810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e54692de-0e51-46f5-8a3e-52ddd30a650e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b9879b9-4a3a-4bfb-8b67-ed6d332d324b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cddae34-b8d8-47de-98d5-8da28fdc0f0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a52c1fb5-2402-4430-9b1a-a022cf75d09b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e246f690-4b08-4724-b29c-59490e3609b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6a540d2-301c-4a6f-99e0-9b7978a1f0d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a2cd78f-8b99-41f3-bbf3-e74aaa58f99a",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a9753d-56ec-479f-b287-0e28cba8deff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62399d0d-e45d-4c87-ae20-4e42a4618f7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be12f76a-31d2-42d5-a065-5f73f87842b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "284588a6-b186-4a75-858a-c55a4d75c95a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "883b1094-1a33-4edb-87e0-46325e7060f2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c4b35a-f2a4-4e1f-b815-1241283b87c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb5fcd72-11ed-4cd8-83f0-3dadf4bdc4d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae155686-25b1-4c35-9315-76777f73473b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07a3d7fc-bec7-4e22-a629-0dbd6623dd7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cb7c9a7-98e6-44a9-8288-511c5b474079",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62905cbc-59a8-4221-af17-a4a239f02951",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b203f86-e2fb-4402-8629-958ce9466f3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f603d00f-1e5f-4476-a770-d75f9bd25a3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e218b788-cec9-4d1b-879e-6e71a99368e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19fd2f79-bf18-41ad-a52e-9b22fd07a56f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a92c02a0-133e-40dc-bb52-ff31c50d97de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecc38470-332f-4e0f-b7c3-156ada3a3875"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd786deb-e69d-41db-b051-63951c680b21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de19caef-9c8b-4589-8743-e74f5efb19cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ed23d4-ded0-4fe5-b496-8b4c44a1fa33",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d434867a-cc2a-4ef1-8a23-9f64044602e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1585a742-15b4-4609-8b45-fbe6c67e718c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3079541-9eaf-4c74-adbd-488cad1b2dc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cb71ba0-95b4-490c-8fb4-66a95f25129b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0814a05e-64e1-4744-bd68-54a64bd8a336",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b598733-3ecb-4952-ad07-b10a635a46ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8319ac95-d29b-4b8d-8f29-3f98b52dd2e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45de58b4-b386-477c-a571-09aa83a862d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acbf34fa-d99d-4190-bd28-edef36c587a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d355a2b-5c21-4e25-8cb5-d061bdf895f7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7633af6-ec7d-4b2f-b4e6-19615596e32b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53a7fa31-1641-4666-95cf-d5ad2b819b98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0338e42-7542-42b7-898f-451d55994463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bfd74ca-3e6b-4954-a874-214084cb38c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b712b6a1-3c29-4eb2-8c23-13b35f66afb3",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7004cf7-afee-4656-a4fa-007a62821bd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2fb7a70-9eff-48e9-97a8-8bdb50d27b7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32817013-f4c5-417e-b7e3-00e1a5ad503b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d3cbc70-1bf8-46db-be70-d2f355f0de7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44b61e29-877b-4e55-ba99-7a53d153a821",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db55cced-8bf7-4e08-81e9-64a29622f04f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25b99e9e-60f1-491c-99e0-216ecc7186cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "731f7ab5-5574-4a81-a9da-7ff2bbdc2c51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0bb1763-943c-4e81-a524-356737ca4b26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2aab074-9917-4939-af23-1168f95985b7",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ecacf3a-d3a4-4880-b201-183742621bd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a226ee77-5a7b-4238-8190-77c236b58807"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae31a5d2-4017-4a9b-b5ce-8b704ac96cbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e39437b5-0c10-4288-b3b1-ad1c39a861e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c7668d5-a353-4153-b868-513bf6e408b4",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4784891c-a43e-4d51-9cfa-e6a5d1f87f6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d844cf83-db34-4cdd-9360-72a34171f4a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b5631e-bcdc-4493-beee-88b26e5f59ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f9c792e-b1d9-42cd-b8ec-0c20b10be008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "598ecf49-23f3-4796-8415-6b5d2bd78041",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f249f361-19a8-4113-9f67-2340eb7213bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38efc469-049d-4ec1-a971-58b09a5b7b86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "481a0bc0-ff35-41be-82aa-f08a90b7bac7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d57198d7-39d6-47ea-bb36-ad8732a45945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "581b5e64-7f6b-43fe-b43a-10a910f63937",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f4fb52-2d3f-4fe3-abc6-d943271f9b4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa361638-29ca-4d76-a529-61e95a31672d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51b5708-eb44-4e10-9e4b-5cbee01b27ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0df0ae66-4903-415b-a655-585986449bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2bf0080-76df-4e36-a910-19360b72f05b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ca13ba-1994-48b5-95e6-142c2c33cc3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "969e22b7-469c-4ad2-98f1-9b5e3ca38631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c915ad9c-6a1f-4f8a-b9f4-ca96ecc5197d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45ae792f-539a-4fda-a22b-9a59faaea06f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e68e5450-8dbf-4a8b-a2c7-fbed1d1902ce",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98f6a5e0-cac0-4f67-b0b8-232477d15e45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "739ea9c0-1a81-44f5-82d1-37ee4b290b5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e59276d-6845-41f9-9ee7-2d0770267fb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aa26428-5d26-485b-b71f-7654f0164765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8819f7-77fb-476b-a351-48d5c6e8feca",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0592a971-cff9-41d6-8549-99d2eea75a1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14b381c2-215b-4d68-ae08-107325fe1317"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1d7d47-f8b3-4ef7-8ddb-32c2a1bce4a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e332b53-7012-42e0-ba14-e97a686e4c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47820213-8b9d-46ea-8fe7-dd91b72b044b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa975820-ef6c-4a54-92ff-e4a070015d77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d2430b9-523d-4b4f-9dc2-94a35ae78eb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c94f7782-745c-49ba-af6b-a8be37847d06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a88c0aa-78c2-4984-8a1a-bb6b4be10ce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc5058a-caa8-48c8-8f85-7512a05dfede",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0ea2abb-a6a1-4dc8-8c03-de45f1411de7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49527b51-e854-42b9-913d-2edc1afbecf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2cac96-1f49-46b9-98dd-a9825f7b4363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e873030-93c3-4571-91db-ee4591bf6250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe1d122-28a6-400f-b471-e3f3fa39a600",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe696f0-618e-4db4-b956-24ffa6d38414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6c0ffdc-aefd-4749-9427-2839d83bd3a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9ec6767-b6b0-4e7d-a398-03e09944e4b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9bce3f5-2dd7-4c76-8009-8caa31e0d1ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b11e78-07f6-4c4e-818c-243c7ce0747b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e02e0ed1-91d1-4f1c-af57-7c22d34beef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e10b7e96-07c6-4a09-959c-8e94a51f85bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b400dca-1b10-48a6-ae1e-5f9c28771474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd48fea9-2909-43f7-8172-1f5b3a2a0d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d706e4c2-eed2-42ec-a4fc-39373a13dd59",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d496916-6de8-4868-951b-e484b5d7158f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6a4beb0-453d-4d38-9f4a-b9a3c77dad38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bae4254-62b3-4be0-bbf3-d6eb102d3d12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b10e249-b492-43f2-9723-92451ce78d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51688723-b7b5-48c8-a58a-e3d6e00c6576",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ec16cd-226c-4f1e-9e4e-b39046804249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68f03c7f-ebf5-42ca-b397-fafd6d5de6c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "866a1ec3-e81e-4d79-8760-49c15f2eb0ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f27e08e-2d4d-4a56-88f0-2ba54e8e6ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836173cd-14e5-4c81-b47a-e13fb54040c2",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a110952-bff9-421e-a0a6-193f279ee7e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39c96ae3-87d2-4668-994d-6d402e68527e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ccb019-2d4f-471d-be98-6426f571db75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf3aacb7-5908-44f7-a5d3-050007748eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23fd8f50-8f12-4005-990b-3c0f87a3259c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a15c7da4-1cc5-4f4a-8353-185c15a69371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8b34116-b610-433e-be00-9a4ae55a34f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8b438f-9f5c-4866-9fb7-a2bb8ccafa5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93fcba14-b289-4270-bb62-ca4627d535ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9048fff4-5c90-4bff-a421-64807f23c0ca",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d481f9-62fc-4a31-bd69-1ef144cbf665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24067798-422c-44ab-85d9-3f9eb59b8a85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b0d50e-7da8-4a2c-8dea-9cd9bcd9b30e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8b64469-cb97-4612-9493-770d84732c9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be60355b-efaf-49c9-b56d-8192f767bb0a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef88844d-d5de-4730-ac46-db6020ada39a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17be99e9-523a-422f-a0b5-2a5e005c0099"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "826b2ec2-b509-4adc-9bb6-19dfebc5b7e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a91c9e99-af1d-44de-b042-2d6aa55464a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba22b02-1085-4a6d-bbd6-eb6f38a8f996",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e212bc-ce92-448d-8601-4c6c6a5c744c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea66d9a3-f10f-400a-9a23-5408d6c8d0c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "806a84c2-30fa-4434-a095-ca4b044b96ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71ee6c34-8053-480a-80d3-a8e8845e5d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "868fd0b6-e3bb-441f-924d-2b650411a8bd",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0880fe8-b0fe-473b-8e2a-127b45c35ed6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e88dbd86-a52e-4af1-b009-73241758d0c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55c90d1-1c5b-46f4-a834-86767974bf50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b63fdec8-bb4c-46a7-8b5d-f7a337e6bd31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c78fbac2-2d27-4401-b378-791c8d2f0298",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75b8eca3-cf03-47e4-953a-aed2863c588a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b468902-ed70-43cf-9515-88631735e8c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ed93c6-31d2-4a9b-a64d-a65b83ceb438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f814364c-2baa-48aa-b5c5-45e65d1329f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0ddde31-6efd-4b6c-8561-4e5227438c61",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "737c77a2-fa01-4f5e-9cac-e2f5f55c4770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e352c02-b9d1-4175-a39d-12ed3e17529d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbaf4716-dbb1-485e-b05a-42f974f24f18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d5e2099-d41d-45b6-8d9a-ce1f3ad5653a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e5309cb-9fe8-41a8-87e1-5ede78ad6c6a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c5f7f9-9fe3-4b97-acb4-6a19cd9c04eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e659980-2247-4fb1-b516-1accd9006fd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afddbce1-3825-45b6-8161-70b72c28c193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e73561b-fb45-46d6-863a-7b84938ecc65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db9e6b8-f7c3-427c-bc8c-993697875920",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34ed9033-f57f-4348-93e8-3a8f5acb2204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cf8f0cb-2af0-409f-962d-c4c5fd2ca008"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "426c8c46-83c3-42a5-bc66-ac597ed7d15c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e4824c3-dc07-45bc-9713-4d48aaa4f16b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88bba275-242a-4525-96a5-51b052216699",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea852678-a264-4b34-9ccc-79bd31a50b60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49c23620-70e6-4c00-96ba-29dee3fb6d03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "190746db-e5f1-47c6-b473-9c03d0b40641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f4d695b-e5d4-4e3d-9f48-ad03f88d3a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72eb4ce2-faa5-4de9-884b-e61a02b53cc5",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94dc7f20-63dd-4605-9b12-43cc4ce7c165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6fe08bb-fbdd-4df2-b899-9709923bbe12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afdb8ed0-03a9-4ec3-9c00-d1a65828d4b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7678444a-a67d-41d5-89a4-cb91768ca69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b90ad10-123c-4af8-b6d0-1844b3cb96f3",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af249e0-f464-4907-a87a-f9ea3f7f6c4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd2d8ea0-b633-4f2d-9271-6d6937a8df7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5378c14-e4fd-4682-949b-0e0c9103b51c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac703f0-e0f2-4224-8111-6d7729efaacd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c34eb6-73f9-47ea-a583-9c4c96f9f8ba",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36d40ab5-f208-44ed-b35a-6b93d43f3f15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a8089c3-7846-49c7-b379-90556ba86f1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "427242dd-80ac-446f-8e6b-ff58d7be2ac2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "282838f5-5f3c-4570-99a2-f840f0b2b950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c76ed6-7911-42e1-b7be-41f1743a0ef9",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44cd6578-1128-46ee-9e79-a09945177bee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c68caf38-677a-4706-93e5-1b51c4c4bfe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81767a52-cdcd-4128-a85a-64b2edd27402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebeaa026-057e-4cb4-8e9b-2c463bca1d18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "230b4623-5e46-4bc2-9510-312a0515636f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf39ccf-f103-4a70-80fd-6b2e4bd7239e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb369735-cb34-41e7-b2bb-9851da540931"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9be5b7d-edaa-4384-8f38-61343ecbf599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25adb9ae-1beb-460e-9683-63c2eecd2ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17def70d-1978-4d16-98e6-c62a5dd2b803",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c836988-d1af-45b2-b03f-cceb15e820cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "133e4ad3-b0e1-47a5-81c6-a373ec1f7381"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e5a96dc-5225-4fe1-b2f8-31dec6152260",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c1bf4ed-f58f-4c32-819b-9b07a37dad0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a065dd-c4c7-40e0-88b0-cc5ef922a0ff",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a05dff8-1c8f-4d9c-b217-757988537a00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "911a9f91-a57b-449e-88e3-242b16b1cc2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83bd896-35de-4e01-aad7-e1138a7d5636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58565010-d34e-4b54-aa77-3170e53e713a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214c361f-b50e-4544-98c8-1ee304a40960",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67749101-d0ba-4f99-958c-fa0711102952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df1bf3e3-459f-4343-9009-20647a88cb91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51923704-ed07-4d1f-b777-3babd24894a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e806b050-004a-4be2-920c-c7f575257853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca8a50f4-83c7-4898-b842-e25dd10445d7",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ab9218b-1d57-4b17-86ee-e89e3b55b324",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80e36513-ccad-4ed6-b847-0aa5743dc3ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d22faff-948e-45ab-b4b3-0bea0f6f12d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06cd9833-aafe-49d2-889a-fc2c772db17c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80623be1-c09e-47c5-8867-177ccf1f8c8a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2eff080-dfd4-4cf1-b317-7af5c5268a39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5860a31c-9c77-4794-99ca-6be2cde4c91a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9200199-9798-4cc1-bf70-da43800ed2b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "325abd40-1f48-446b-b56e-29934daafaf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6077289d-e028-41aa-9b40-7635f41c9501",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a5ee053-87e6-4c29-8400-e32542b6d7c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "451eebcb-fe35-4092-8dfd-3c972f9a8bcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e27a064-f384-4b07-8ab8-b75ca5656a71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52835f68-beed-4565-8b14-4b758fa77cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f131cdb2-4d2a-4d06-853f-98031b551560",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff867e3-d017-479b-8ff8-4c2fdf434b45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e31962b-c5e6-4f52-ade4-521a4871d7f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46186499-63ed-4dbf-ab58-614463ad2f06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90dc8789-926d-40ed-8964-e5dd90632d54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d267da-85e6-4673-9dec-3976af4f7730",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9941c3d9-7d03-4f83-a45c-99e1fd6b7d02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4281da12-7d05-4133-8e34-b980a74af8c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b777627b-2542-4b10-b562-c48571950683",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ea0da5d-0443-4f99-8cc1-f91dfcb6bd86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cb77de0-0d09-4d4a-b6e7-8ca6b061e11d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2804f3-72e2-4e8f-91b7-cb8efd84989d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca494010-798d-4998-bf9e-3c3033a27063"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "decd3f05-ce30-408f-802f-3e4939339ca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef9af4d2-34ed-4fd4-a1ee-f930a180364e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a40a616f-b6b3-47da-8f51-79d189013ca3",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4089a85-81d8-42a7-90d4-d53dc917d62f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ea69303-8ff5-451e-b69b-40a5fb52e872"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7bc4520-56e8-46ac-909a-8af961156ed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edc2eae8-9d83-4d11-97f7-1f079a951ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15fd3a7e-dccb-42b0-aa92-bb831fb1db40",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "002354b0-87e4-453c-85da-2f98f74eef89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7679f6bd-4d20-4917-8efb-3f89eeacce29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c34b3ec-7834-428c-9a0b-5d3ab8bd55c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "824848f9-7f41-4813-b2c9-eb758cc325ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b84c457-a813-42dc-a306-df90274879f1",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c12db4-557a-4da3-8ef3-185a279539b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80bc535f-ed7e-4fb0-ace8-b9a3174d54a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f95ae9-cd64-4f93-8bfc-a86026c8e771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73cb522a-8ba0-4824-a566-e495e1b37ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a74016f2-cef6-463e-8f02-f6719291d1ce",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10721af2-2972-46e8-89d9-6a5d9ef6771c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fab41481-84a4-45b2-b396-7235c99eac85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d5e3d1-3028-41f1-ae73-25656d45c6a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53b055a4-0980-4249-aeb8-bd0cefcd0b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7768a80b-6f63-436d-9754-388c48df6896",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129cf496-dba4-4f39-9944-7e0813d723a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38b5d869-1684-4d6b-8ce5-a88f87df3c3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff8443c8-16ed-4953-8386-e29d90472539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34d69901-36e3-4a1c-9dbc-717769724a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab9732c-48b9-4b8a-a82d-f60d2e960528",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8657cda1-1ee5-4d60-9f54-e90b126e63e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b8c74c4-d800-4b12-aca9-145f3bc15c1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b450d30-9ae1-4376-8282-7c1b3f3867f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4f6b494-3286-464f-9b88-329e8b1a9515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ef990e-faac-4be4-a558-3717a47b4938",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee69153-42f0-473c-8d3d-316bcd85fe38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78c1508c-f5f4-4eda-9129-62f3c3f6c661"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5bb790a-d3ce-4926-af19-c82b8438bdff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74575d80-7ad8-440f-9f56-28873bd1a5b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b637a14c-ef16-4c9c-aee4-b0c8b0afb443",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6a889d-4689-4706-9cc9-9518d469259e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9c5e796-6d1b-4feb-acc8-9cd4ed35b498"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1121d4d1-8738-45c7-a682-3efa3ca04ddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76d50560-1344-49a7-b428-61e0a85464f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1937e9bb-1221-4213-b7d9-58b647e91889",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "244ac874-84c8-4b78-8c4e-5f1212a74b51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cfd73a9-7abc-41c1-a0d2-3e606fa0b16f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f37e6c9-2a60-44da-a2e3-f30c624847ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab4e22f8-2c46-412d-9d2f-04f4a47d155e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b8c75b-95f0-4d06-ba06-eb654c1cb7df",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f117b3-2547-4d1e-884b-1a4f89978cec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caed6413-8a90-4e09-a5e6-ad6ee1d2eada"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5644fb0e-9def-4176-bc87-4f01076ccbee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17e84e39-51c3-4706-9054-bedc4c8d5732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51bf66da-a4df-44fc-9b61-d8dba85668db",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38dd7d81-41e7-4632-8b09-f0ee091726b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29fe3f89-3de2-43e3-bb6d-f6365171fe17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bddb410-fbe6-4b16-b866-7e59b41ac81a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "819101ea-a941-4200-8dfb-c30275247621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "536d616c-8293-4450-9ced-ac84864ae01f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f5d290-49b7-4ffb-8022-bd309aa653e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a27bb9c5-1d50-4c2f-bc30-05c03aa7fcea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ae20b3-da74-4965-b8f0-6010b77ebe99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b768e3d3-0551-4bdc-8a0a-425cb5148a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d7fc8ea-1168-4fac-bb3b-966f73d6d466",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f822e64-f6ad-4c0f-b53a-e220b664904c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "236a7a46-9b7c-4844-bff8-409dc41271b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ae481f-43f0-42ce-a42f-b44e5efd3596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52d4b94e-41d3-4aef-8ec8-37a543db5870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f64c6a-b819-4857-af5c-e9200e0d5ca5",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "022608db-c141-4985-b98c-e42dce6bea06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a6ad3f9-757a-47b8-941f-a623d5d8b7bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30bf123c-dcf1-4772-9e9b-8b79f3b254da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b4caa24-17df-48b2-9af6-3d90e3f4d856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5dfbc66-f012-4a11-9da5-1a8a0be43998",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523b8183-bf18-4513-a7a1-55d90a59d1e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d2cbd52-8b08-4aac-864e-d36afaec3cc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5820177c-2614-4b16-ad33-d191d54a9532",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b03b8682-0a38-4659-94c9-bf35dd6abece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d79262-0bd7-4f7b-a4f2-e10673ec94d0",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e780dd-d2fb-4441-b4e6-315ce845dfb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99369f12-4902-49c6-bb64-4cda1ed33dc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a108241-f317-4974-a49e-c31ce3ac0cf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b5a1191-daf2-4fe8-ab47-5963ae442fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc5e675-a308-40ab-a6ff-d07a8886508d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc52384-c2d1-41ed-8cf1-f26d1daa5ebe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d11b958-062c-4cc1-b42e-4ccb4493dc5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "148eb210-9b4f-4e5b-9ed0-c6def3f94821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fac4942f-1874-4779-b64d-8882e3676820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55fd2684-6b0d-4b2d-bba3-e9c48eae214f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c309e8bb-1a61-4642-b701-44781c26b5b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bcd30e0-683a-4f22-abe9-d4651310a0b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bd9a1a7-4df4-4071-b3a2-1bf8fe9130c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7bd6295-e823-479a-b122-7a71ff5a19b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38de6665-7485-4dbe-b35d-58f3327cc4a8",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "460152d6-9dc7-491d-b1fb-6c2a1ce54f90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b92e0773-faf2-4500-a1af-53b651c91f03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d68d25b7-75c7-443f-955b-aa1faba27cc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2705b751-cb43-445e-ba1c-fe65f3ca8d4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12fc79e2-8ca4-489c-a689-a91b401c8469",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d934680f-48ce-4bc3-bfd5-a72225118b48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b62323e8-784c-4e36-9e42-23c6f24aa984"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b129e402-cedb-458d-a5f3-227cd9892131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e691d0d-0af4-4033-a060-e9f7531e7deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d5ced79-8246-4dc5-9715-7005dc447560",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dea17a5-1c03-40d9-b2d2-671a23ff8790",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b33aa43-6cee-4490-8aae-ab50155571d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9987be55-35a1-476e-b58a-ff98b6001628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed44ee98-4d95-42c1-b031-9395cb93fc5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3513887-1649-4ba5-9802-2730e59b2800",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b5f3dd5-53f3-4229-90d7-5d56b767f176",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b400f07-1ca4-4bac-9af9-afc047baf39b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a770c191-2c81-4814-b6eb-83e07ccc1e71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcb0e449-f7d1-4805-b6b6-79b4d0040801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9279bfec-cc26-48a8-9079-218c8e029e8e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3ffb877-b1d3-4fc6-89c8-63fd8c1f86ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "111f5c98-12f4-4d2f-85da-9ee1eddce8ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb47004-26a4-4bde-96f3-48e61ab32335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2f7e9df-a1b0-4287-a2a6-f6b6253372e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a08c0b7-925d-4803-8149-409797d3bddc",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5ff043d-2be1-4119-9e40-999ac10a61de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7a0242e-afcc-4f9e-be61-1a3d0b6061ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "150fcb39-1c36-4acb-8f63-7a91b8c41073",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12f396d0-64ea-4303-80bd-70bae63fc02e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9aa03b1-9de8-41b8-9b56-a4a6cb23b683",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4958b5f-8b86-4527-9dfa-9f9f2a346fdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98755b96-c2ee-4a0d-886b-5c466fa8fe7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "676e06b2-c572-4f2f-8eca-b5cdc189ff9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a59e3272-11ed-457f-9960-4d5c6200c0a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9312d284-c7c1-4aee-b37f-15dd474e8693",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae268bd-ec8d-4d4e-bce7-5dfc3307f1d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92a8145c-7bec-4ee5-9018-54e8b83579f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58679555-1a8f-45fa-a6ac-d8413f998373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98f78917-416c-4696-b786-afde6801fc28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b969e3b7-da8b-44af-85b7-cbe99431a834",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a150cef0-a113-445c-96bc-abbf13c899db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b09d2603-ac84-43af-b660-180895149bcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b52060c0-935d-4564-9da9-55f1ca77e5d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20c12ea6-f20d-48a0-baaa-e4d7a4c6216d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d8c93c-c5c3-4cbd-923b-197c6edd6794",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658097bc-3a67-4b55-8bc0-a90c2f072a25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f910b929-bb8c-4061-abb6-a228642b841a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7d36ff-cc07-47f0-8054-0dffd94cf762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6d69743-8205-45b7-b19d-42ac000bd319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7861c0-9103-4a5c-89fd-8eeb34886829",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a94ade1-9137-44e2-96b2-1060bb51e275",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdbe7ce9-6e2b-4fd8-aa73-20504e465b8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "093c74ae-6b2a-47ca-a476-17d96d6bda7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dfd3dc7-e080-467c-9cf1-24a5c1f8bfd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4960e19-466f-4024-9b16-c042b91667c7",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7286f18d-48c9-4e21-b9b5-fd1c8ff9f85f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0793591-6c81-4ab9-9a64-dd7523027d94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c629ff89-451d-4f2c-adab-2d7ca770200a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "170e70e8-b319-40a7-8027-af927de98757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ebd44d8-31aa-442e-a3f3-09d4e3b3865d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "898a5e6d-33ab-4cee-88e7-ca5cb7ff4f19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44c5a092-4911-4ef0-9d2b-944295a5652f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be34dee-ced0-4a18-9ee3-ab4feab2b984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffa6e7f2-b3ff-4956-aa4a-9300a178ff1f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f77e19a0-f12f-4c96-9ce4-2a56a55f46b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "63f863e9-05e3-4e54-8041-7e8a4ffbbd4c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1b1c591-2196-4e5f-89c3-d5c0d769b0a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5964e4d4-d045-4679-b21d-013e32796088"
                    }
                  }
                ]
              },
              {
                "id": "1aaf7e64-0012-4374-9c1f-30fbe4123370",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "805641a2-9ba1-48d7-9549-a3e590dcce87",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec25076-b2aa-43f8-87dc-fed73202f840",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "047337c3-6c3b-4ead-b5cb-56bad6df78ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1baff8fe-f23a-414e-b236-4d43954e8a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "05937ea7-5009-41f9-af5d-7bb8531b5c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc2279c-33de-4003-bb1c-40ebc5ff2500",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f5494e2-c9e2-4bbf-9a6b-c5c4e15c6b57",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f946d3a5-de77-42c2-a7e3-a5c18230f99b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0508adba-2d5d-4695-b3fc-a46659fd659e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e62236d6-d726-43b7-a193-ce5905dc37a6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9285281-b0f7-4c91-b7f1-b48c643e1b12",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef7f3348-cb6e-46ca-b562-7278a5c05392"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b376f40-1706-4cf7-894e-c008c2ec897c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d0f312a-d22e-4f55-9cd6-d09b429f4711"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "78dfce00-5f88-44d6-861b-0769f667a691",
            "name": "Positive Testing",
            "item": [
              {
                "id": "75091d12-dfcd-4b6a-99e9-3ddf40c8df3b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7bb0b837-8161-4e44-a1a5-30485dbe55f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fde38791-846b-459d-b742-b0a80f85ad62"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88b97739-173d-4905-a7ca-d16eb813a4a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d28445d-aa53-4eae-a9af-458b48675f80"
                    }
                  }
                ]
              },
              {
                "id": "b77a1be0-22bf-44ac-b1d9-1df961723df3",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d3db49f9-5cb2-4313-9b06-7098c2d0412c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8dc999ea-b0b7-4d1b-84e3-f9091b53db50"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "09e8af7a-1247-405c-8e4f-0777a314630e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d29141e-f461-44f9-b017-72515f740645"
                    }
                  }
                ]
              },
              {
                "id": "23e644bd-cfcc-4096-a877-141077c9111a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b93123d-e03e-42e3-8acb-2a9fc6faf2cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "401fdafb-c432-4b68-8b0a-e68ca72a6fc2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2ed4b8f-7194-4940-8a0c-f0d0c1b9a2ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "744b5cb0-bd13-4ec5-8b3b-87654088b589"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c355789-b056-4a62-9b8d-3969ee0d4c1f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e4be980e-1019-4d7a-a4df-3970b53eedd2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce104400-8674-4070-a798-ae338366c857",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c9d86498-141c-468f-8a48-56a8b779f13e"
            }
          }
        ]
      },
      {
        "id": "a5e94a5c-26e9-4110-aeb4-ab28b8d050bf",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "73a76985-e8bc-4c0f-826a-8998574899f6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1a14fbcb-d2b6-4a02-b46c-f25c1293af84",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "065c8eae-97b9-441d-be1e-dcf1eeebc2a8",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad4cf96-8f06-4a5f-aa24-2ed61123e06e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3929747f-21ad-423e-8113-01e77e9ae6de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da980750-379e-40d5-a5a2-4782f88c44f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "718f7705-4c1f-4896-a504-df260d7e9b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce0e7503-1d73-48bc-8e58-17fdc2317f83",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcfe33f1-5600-429a-9788-5de2b3fda87a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7e615792-ad73-4714-a0a1-d37a82d78e69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d9e3f3-7b32-484f-8468-8ea1f6c5e27f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8360584e-c38a-4db9-a8a7-d2643ccdf5ed"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b55992c-5ac7-4a90-a3f4-2b8b9664015c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a35ceabd-c880-4748-804d-4de674df42fa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c2b242d-5145-4f26-bbed-e0580a67913e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "911e87ee-4cad-4e29-9bcb-76fd5c10138d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "baebc581-44de-48e5-b90a-4304d7c892f0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c692705b-a123-4409-9691-65efa415c74f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "63bcc8a5-c002-4aeb-9490-15ccf719a36f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b4f352df-6034-42b6-b5f5-287c60441a5a"
            }
          }
        ]
      },
      {
        "id": "09f6753d-beda-4bb5-a339-d80c258fd951",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "323a1865-b493-4304-953f-bab33bbd8a27",
            "name": "Negative Testing",
            "item": [
              {
                "id": "18e36ca1-bdfb-484e-a202-466783cb451f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5bcb5c5d-53f9-49bd-a558-a0d2c038cf98",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d57ef1-677c-41b2-bd98-6fe4a696429d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9ed3f512-c076-4366-8425-99ca181c46c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b81801d-3563-4730-b58a-3fe4159a8e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3cac184-6f45-4616-ab82-3fca654297e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bd3b265-d1dd-4c56-a187-576ac4de0605",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e72eff-285e-45f3-b795-1a84eb8abc3b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "880b56fb-4819-4387-bf6a-89a12274f97c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0dc459-67e7-4d49-a256-08f9d0fc792d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d018ecf3-7dfd-4d05-a542-f65b0200a8d8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e3016801-0b64-4132-a578-92479888506e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b9fda57-1ca8-4a4a-8caf-f233238ae510"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9facdf97-22ef-4713-b701-4614b3a46ada",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "efd63eef-397f-4810-85a8-36d6fd1f1568"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2f936b8-8399-48e5-8f32-0820514181dc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2c99f2da-92cb-48ae-a151-9af44b861300"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4d94fedd-1fa0-4b88-89b2-5b57bb1a3710",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1c882a69-5252-46e4-8d4f-70860ecd4e63"
            }
          }
        ]
      },
      {
        "id": "b93d4572-6112-433a-a3d6-c2e2492a978e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "470dca28-cfe0-428c-923e-6ab96618e571",
            "name": "Negative Testing",
            "item": [
              {
                "id": "67fc72d7-31da-47bc-bace-a98c9f7bb9cf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d9fca988-c044-4dd9-a0e9-5bef70ab2e2a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66eb7dd4-1f16-405b-bac1-7e7426d2a416",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cc02bae7-62b7-41f1-8501-f3487e1224ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f8b903-1983-41a8-af66-cb7ffd492530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "23e7307c-ccd3-42a0-b246-00d8e1aa3fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7370c65d-e7ae-4c74-a7bd-7d2cbd7ce84d",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea771b4-22ce-44fd-96d2-1c49c5dfd459",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2246fba7-d232-4725-a429-801e3e518c24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc03bc3b-9dbb-4989-9386-e40f6ca417b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "29f71ef4-aca7-47fe-8ed3-ffbd69c3ddc9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a38cdc0-6537-44fe-af51-e9a07b6a4633",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00a63ce3-52ed-44f7-8cc3-6dd4f93d7f5d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "16629fd0-5da2-4d4d-94cc-fb0b82964053",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afcc814e-0582-4684-9353-8c757d31a1c7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "79dfa7cf-4a00-4a9d-8b6d-0b785d45abeb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "960b4227-fdf2-4b3a-bb89-c8bda75fa74b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aec67a38-56dc-4d46-9b7d-b101547278a1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9c02f65e-11c3-4a75-9e06-209f5221cde9"
            }
          }
        ]
      },
      {
        "id": "8f9b77f7-1de1-4a8a-b6d8-96252aa243a8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fb507899-eda0-4850-92fc-99def751ed9c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7eff4b60-b338-431c-b1ed-ddaceec2c222",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "8ee6b697-486f-4b55-887c-4d16378bcc62",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4eb0a9a0-ce13-4326-bac5-e7cd61383573",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05682a8e-597d-43b6-b141-0bc5379d981f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 243,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1855,
        "pending": 0,
        "failed": 5
      },
      "prerequests": {
        "total": 243,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 243,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 492,
        "pending": 0,
        "failed": 96
      },
      "testScripts": {
        "total": 933,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 5
      }
    },
    "timings": {
      "responseAverage": 162.92460317460305,
      "responseMin": 9,
      "responseMax": 2092,
      "responseSd": 332.5440510708624,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1665622676077,
      "completed": 1665622727618
    },
    "executions": [
      {
        "id": "8acfa64f-ffcc-4d4b-8f69-0d4a20412d5c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 243,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "029d07c9-e7ca-4378-b04d-2bf793cde0d7",
          "httpRequestId": "5362a8f8-feda-4405-b7f9-904bd17c436d"
        },
        "item": {
          "id": "8acfa64f-ffcc-4d4b-8f69-0d4a20412d5c",
          "name": "did_json"
        },
        "response": {
          "id": "ea36efc8-9753-4466-bba2-6ad97a234483",
          "status": "OK",
          "code": 200,
          "responseTime": 1694,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc8e0a67-ea39-49a6-9293-9328177444db",
        "cursor": {
          "ref": "9384ea04-e93d-41f9-acf3-16710156ec07",
          "length": 243,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0af6adb0-fd3b-42cc-95d1-2f96f7ebd5ed"
        },
        "item": {
          "id": "dc8e0a67-ea39-49a6-9293-9328177444db",
          "name": "did:invalid"
        },
        "response": {
          "id": "e7d9e209-7105-4927-924e-2b7a7b9a2edb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc8e0a67-ea39-49a6-9293-9328177444db",
        "cursor": {
          "ref": "9384ea04-e93d-41f9-acf3-16710156ec07",
          "length": 243,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0af6adb0-fd3b-42cc-95d1-2f96f7ebd5ed"
        },
        "item": {
          "id": "dc8e0a67-ea39-49a6-9293-9328177444db",
          "name": "did:invalid"
        },
        "response": {
          "id": "e7d9e209-7105-4927-924e-2b7a7b9a2edb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9273fb0-8df1-42b3-be82-6deea085ef57",
        "cursor": {
          "ref": "411c9ee8-e9e6-4d3b-afca-9a2282526f86",
          "length": 243,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "da4c24fe-d07d-4e5e-a67f-94a324e3834a"
        },
        "item": {
          "id": "f9273fb0-8df1-42b3-be82-6deea085ef57",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "67fa6ea4-b1fb-43d1-9678-61c927cced57",
          "status": "Not Found",
          "code": 404,
          "responseTime": 282,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db523a5-31a2-47e2-beb0-4d2232e4b971",
        "cursor": {
          "ref": "44a5e860-69dc-4ca4-a9a1-f5c82df20256",
          "length": 243,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "924be452-b8e4-4003-ace3-68f181bac1b8"
        },
        "item": {
          "id": "9db523a5-31a2-47e2-beb0-4d2232e4b971",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "83f5ee11-f8fb-4d0f-97d5-6553cc0a9ba7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 16,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ad6094-db74-4272-830a-4f0acb8aac43",
        "cursor": {
          "ref": "b993ed64-7749-48c3-8b34-d22f4a5dbca0",
          "length": 243,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e6c9c01b-1e80-459a-a2eb-96a5227ae8ba"
        },
        "item": {
          "id": "b0ad6094-db74-4272-830a-4f0acb8aac43",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7b45d07c-0dca-40d2-81c5-ddc797244ddb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf9e2ec-e275-4dea-93d4-2dd7c7471f31",
        "cursor": {
          "ref": "0b661dab-b9e6-4e2a-b5dc-46289c342e34",
          "length": 243,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2fa682e7-f954-431d-94c0-1c5657636d7e"
        },
        "item": {
          "id": "2cf9e2ec-e275-4dea-93d4-2dd7c7471f31",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c06f0fbc-0182-4054-b9a8-32b1f1717e10",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf9e2ec-e275-4dea-93d4-2dd7c7471f31",
        "cursor": {
          "ref": "0b661dab-b9e6-4e2a-b5dc-46289c342e34",
          "length": 243,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2fa682e7-f954-431d-94c0-1c5657636d7e"
        },
        "item": {
          "id": "2cf9e2ec-e275-4dea-93d4-2dd7c7471f31",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c06f0fbc-0182-4054-b9a8-32b1f1717e10",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcbd5a9c-4d2d-4c35-b5c0-a45b403adc65",
        "cursor": {
          "ref": "abd2ad1f-0c79-48aa-a377-faec0ed1bc03",
          "length": 243,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b3d8c89b-aec6-42ad-93ce-f64c9a8528de"
        },
        "item": {
          "id": "dcbd5a9c-4d2d-4c35-b5c0-a45b403adc65",
          "name": "identifiers"
        },
        "response": {
          "id": "6f6a4855-8823-44bb-8fc6-12c72f53db75",
          "status": "OK",
          "code": 200,
          "responseTime": 374,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4901c64b-2e97-44c8-b9ad-f511301d18cd",
        "cursor": {
          "ref": "0df7cbfe-4b30-4a41-996b-7bb677122e96",
          "length": 243,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b4d1de9c-30ce-449c-b9fc-695af02cd935"
        },
        "item": {
          "id": "4901c64b-2e97-44c8-b9ad-f511301d18cd",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "56470d52-a55d-4069-832e-5112e18e3d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4901c64b-2e97-44c8-b9ad-f511301d18cd",
        "cursor": {
          "ref": "0df7cbfe-4b30-4a41-996b-7bb677122e96",
          "length": 243,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b4d1de9c-30ce-449c-b9fc-695af02cd935"
        },
        "item": {
          "id": "4901c64b-2e97-44c8-b9ad-f511301d18cd",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "56470d52-a55d-4069-832e-5112e18e3d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31aefc0f-821c-49f8-9e41-405bea97d8e7",
        "cursor": {
          "ref": "66d21e6d-0108-4f12-9832-19028805b421",
          "length": 243,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f1ed1ea9-3591-49b1-acc3-4c09f09f07e8"
        },
        "item": {
          "id": "31aefc0f-821c-49f8-9e41-405bea97d8e7",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b79de343-d765-4664-bd1e-661fef35685f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2dd1877-3bc0-4232-87eb-718e3d43caf2",
        "cursor": {
          "ref": "ae59aa7f-bc11-43dc-99c3-776553150f8e",
          "length": 243,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e538f11b-0315-4661-bf9f-70d3ba0f2972"
        },
        "item": {
          "id": "a2dd1877-3bc0-4232-87eb-718e3d43caf2",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ed38af39-7c5c-42f4-9a22-33ad7c4524e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a74d089-5b61-4a47-8652-6e989ea0428f",
        "cursor": {
          "ref": "f5118cc3-f6f6-4137-ace4-bb867b26b23a",
          "length": 243,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c9059df8-0273-4782-8686-8191006416c8"
        },
        "item": {
          "id": "1a74d089-5b61-4a47-8652-6e989ea0428f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "caf63773-61a5-4f79-bcf7-dfb915b7e997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd7142df-caee-4e8f-9118-018688cb1eaa",
        "cursor": {
          "ref": "f987cdfe-cf73-4295-9546-350c22a89bd8",
          "length": 243,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d21a6098-43e0-425c-aa92-00ede00336cc"
        },
        "item": {
          "id": "bd7142df-caee-4e8f-9118-018688cb1eaa",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "dd599ffb-eb4f-459f-8e2d-b98632151394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f4771d-2623-43e2-9b36-f32cffcd5fd8",
        "cursor": {
          "ref": "ce0ee15b-ea0c-464b-8817-4cae6536a992",
          "length": 243,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5c45df29-6127-4e7d-8261-b0c34c36353e"
        },
        "item": {
          "id": "35f4771d-2623-43e2-9b36-f32cffcd5fd8",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "57dc5258-50d2-424b-895e-3615976b80f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b10108-e5f2-425e-a324-7f5c7286d645",
        "cursor": {
          "ref": "5e336246-b86b-42f2-8777-3733b1b7c1de",
          "length": 243,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c7567419-48e7-45b4-badf-cfb93f5bac35"
        },
        "item": {
          "id": "35b10108-e5f2-425e-a324-7f5c7286d645",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9996bd90-389b-4c3f-a0f9-b55e6452dcb9",
          "status": "Created",
          "code": 201,
          "responseTime": 769,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "b5de3c19-4742-4ecd-bafd-6209f0c45e04",
        "cursor": {
          "ref": "615ac198-be51-409d-b37b-820ec8593c96",
          "length": 243,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "616850e4-b19f-4099-abdb-d82987897010"
        },
        "item": {
          "id": "b5de3c19-4742-4ecd-bafd-6209f0c45e04",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5547eda6-3c75-40cc-a3ea-5f2970676b5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f71a715-8b81-4d69-b1a9-700fb7bd7f05",
        "cursor": {
          "ref": "03350187-b2ca-4c52-9688-16763122029e",
          "length": 243,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "eb6b19d2-9d57-450d-9ef4-f3ffdbfd87fc"
        },
        "item": {
          "id": "9f71a715-8b81-4d69-b1a9-700fb7bd7f05",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b52dc1ad-17dd-4917-bd3c-c2bf244fe912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa21086a-c4af-46d3-97c0-19d08216c43e",
        "cursor": {
          "ref": "b4ab0709-c2d9-4a98-a93a-5dbcd6e43a5c",
          "length": 243,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e9e76538-669d-47c8-a0c9-2826f3962678"
        },
        "item": {
          "id": "fa21086a-c4af-46d3-97c0-19d08216c43e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "ee2c9273-8c6b-4bbc-898d-df835a2f606d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e28e88a-7b81-4c60-9032-24a92011881f",
        "cursor": {
          "ref": "47217e52-2278-4aa8-94be-96b422245259",
          "length": 243,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e0c6d2f9-8a1e-426c-924a-0442c620b516"
        },
        "item": {
          "id": "6e28e88a-7b81-4c60-9032-24a92011881f",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a68943f2-dd0e-441d-b097-93d1c9423e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643c1dd1-60ec-4adf-b765-249c29027b2f",
        "cursor": {
          "ref": "8dd0c7d0-f7e0-4899-9492-2395a5dc2925",
          "length": 243,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "169b9902-4d9d-44c2-aaf9-50407e3b9dcb"
        },
        "item": {
          "id": "643c1dd1-60ec-4adf-b765-249c29027b2f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b3721c9a-aa53-4bbf-be6b-33dd27db17ab",
          "status": "Created",
          "code": 201,
          "responseTime": 451,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "68e3d231-5625-40dc-a2fd-1ae6b8016de9",
        "cursor": {
          "ref": "1f6ae374-eda6-425e-b16f-b60ef3b74c93",
          "length": 243,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e9c2a685-b5f7-4df8-b0ee-9843e5382ffa"
        },
        "item": {
          "id": "68e3d231-5625-40dc-a2fd-1ae6b8016de9",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ebdbfd45-746a-46f2-a945-b1fae475884b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43766055-0fbd-41b3-92e8-ccf5fb5c1434",
        "cursor": {
          "ref": "b848b204-c2c7-4863-9ab1-226d13faf05d",
          "length": 243,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ed6dfde0-70d7-4ea1-b20d-2ed7e2a02405"
        },
        "item": {
          "id": "43766055-0fbd-41b3-92e8-ccf5fb5c1434",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "5593c8e4-f75c-47de-8f55-d6a177650bbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5a49afc-9136-4417-bb92-975b77a82541",
        "cursor": {
          "ref": "1a213526-6192-4826-b2fc-c5e2a5777f95",
          "length": 243,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "aa4fa350-5f8c-4617-aaed-d516772daeaf"
        },
        "item": {
          "id": "f5a49afc-9136-4417-bb92-975b77a82541",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ecdee0a9-93e7-4e87-a65b-f1bc144305d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a2df82e-bf6c-48e9-b263-85259c81f522",
        "cursor": {
          "ref": "a647aef0-a3ce-421b-8a91-cd88c7088914",
          "length": 243,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6a1bdac9-f966-4ca2-b51e-ff08e3b52bcb"
        },
        "item": {
          "id": "4a2df82e-bf6c-48e9-b263-85259c81f522",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "7bcdb077-e930-4eee-a635-9fa2fb419866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cbc2c43-0648-4764-9d3e-ca482d1a0313",
        "cursor": {
          "ref": "8a23cb37-2eb7-4d14-b99d-579953bbc57a",
          "length": 243,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8266c6ff-cda4-49a6-8b74-467e4973312f"
        },
        "item": {
          "id": "2cbc2c43-0648-4764-9d3e-ca482d1a0313",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "40a8ba9e-422c-4aca-8657-21eff9f32d82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd462ca6-a3af-4216-a5fe-7df960c526db",
        "cursor": {
          "ref": "df5b06f1-7a79-4166-bf98-828e6e2cc0a6",
          "length": 243,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7fb9c7cf-4e62-41a1-8352-b74e1bb0d285"
        },
        "item": {
          "id": "fd462ca6-a3af-4216-a5fe-7df960c526db",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "2fefda5c-9d6f-4cc4-8d39-723de46802c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f2ac9f0-f6bc-489f-851b-aaffb5ac23ba",
        "cursor": {
          "ref": "345e7a58-1e9c-4c04-80ef-8cef45dccba3",
          "length": 243,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "71c42a0a-f204-4b6c-8c28-a2c467c4619a"
        },
        "item": {
          "id": "5f2ac9f0-f6bc-489f-851b-aaffb5ac23ba",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b342d3da-8958-47de-9863-e7e84ab7ad9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ba1518c-9826-4626-98ed-02e0333ae2e6",
        "cursor": {
          "ref": "24beb854-7a39-4b20-95ab-e08a314ecfcf",
          "length": 243,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "90fb3712-8e38-4c13-bb43-8da65ec67ca4"
        },
        "item": {
          "id": "8ba1518c-9826-4626-98ed-02e0333ae2e6",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "0980ecde-1c09-40da-8d2f-19211671584a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba5b373-fdaa-458d-aed9-875fb904f836",
        "cursor": {
          "ref": "d6b7accd-b874-4251-a69f-fce32a6617a8",
          "length": 243,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "03c8106e-016d-4d4c-8eb1-271919f67f9d"
        },
        "item": {
          "id": "cba5b373-fdaa-458d-aed9-875fb904f836",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4401bb1f-cb07-41e6-a7b8-857fe737bda1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b5206d-2d6a-4cca-9a6b-c549e0370e4d",
        "cursor": {
          "ref": "c78b3de8-c805-4ff3-a9dd-e5eb80aed5df",
          "length": 243,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4e66b97f-277a-4505-a30a-e9d317089537"
        },
        "item": {
          "id": "60b5206d-2d6a-4cca-9a6b-c549e0370e4d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ba96c7b4-9f6b-404e-b71d-c72d3126805f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3711bd0-589b-4ae2-aaa3-7cd751a1b53f",
        "cursor": {
          "ref": "413697e1-15d6-4b2a-af59-c7b52f8254c9",
          "length": 243,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "fee18e74-6cba-4570-8395-ae2b01fea6d0"
        },
        "item": {
          "id": "d3711bd0-589b-4ae2-aaa3-7cd751a1b53f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b82801f4-9879-4ce0-ab78-8ccea40c85cd",
          "status": "Created",
          "code": 201,
          "responseTime": 777,
          "responseSize": 537
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "68e83447-d878-49ee-b0b9-e3d8ecd747bb",
        "cursor": {
          "ref": "4b475e7e-a3d8-43bd-909d-a29d57bfe7fd",
          "length": 243,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "813f524b-33b7-47bc-a781-29b313e03157"
        },
        "item": {
          "id": "68e83447-d878-49ee-b0b9-e3d8ecd747bb",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4ab56f8c-507d-463a-b6ad-41bd8d29294e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68bf3c7-8534-490b-b5a3-278a70fff20f",
        "cursor": {
          "ref": "61ccc813-ad04-4adc-a8d6-ee71253ded6d",
          "length": 243,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e8ab625e-e5e3-4dc3-82ea-865d5622517d"
        },
        "item": {
          "id": "f68bf3c7-8534-490b-b5a3-278a70fff20f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "9d846b9f-d94f-48c6-b605-8d2b4746e913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b4c0b8-cd85-46dc-8539-6c3ceebc3f19",
        "cursor": {
          "ref": "8c1cc7bf-8032-4e52-bb92-d6d6c5ea0be7",
          "length": 243,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "08100341-889f-4b2a-a335-f6cb3eaa2165"
        },
        "item": {
          "id": "f6b4c0b8-cd85-46dc-8539-6c3ceebc3f19",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "30729d11-9529-4e0e-aaf4-075700a8f5d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f3e32ef-053a-4edf-b63c-baa587b29e01",
        "cursor": {
          "ref": "b632c19a-4549-4b69-b496-e682c05319ba",
          "length": 243,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "fee2c259-d407-42b1-91c9-54ef0dcdeef6"
        },
        "item": {
          "id": "8f3e32ef-053a-4edf-b63c-baa587b29e01",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "330adb93-f66a-4e12-823f-4afc04505639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d11920da-17ee-4d90-b794-e5bd4d43b495",
        "cursor": {
          "ref": "25f5ad8c-ef8e-473f-8be1-4db0d6c70d92",
          "length": 243,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "6c0c8333-c724-419c-ac1c-3ec400c6c01a"
        },
        "item": {
          "id": "d11920da-17ee-4d90-b794-e5bd4d43b495",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "95b60b7a-0e01-4c46-8adc-82a9e5c51a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80b4dd2f-7579-45fd-97e9-4ca46262b201",
        "cursor": {
          "ref": "64920e4f-bf7b-4f39-ba03-f60048f6d9fd",
          "length": 243,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f3586744-d5c5-470c-9f84-9267c9c70ea5"
        },
        "item": {
          "id": "80b4dd2f-7579-45fd-97e9-4ca46262b201",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "378dbe60-fc3a-47d1-b58f-c4d8496a4305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "786b520b-c4d4-4b37-8e2c-75f3af551044",
        "cursor": {
          "ref": "0d619789-4327-4ab9-93ad-5dad3e42acf1",
          "length": 243,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "12fb4b61-48b3-406c-8aff-13545b605ff8"
        },
        "item": {
          "id": "786b520b-c4d4-4b37-8e2c-75f3af551044",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "227b47d3-90ca-4048-834d-4e4674a5f2d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a65c6a2-24bf-49b4-ae4c-a9e2bf839cdc",
        "cursor": {
          "ref": "4426cbdf-bd56-4358-9c0c-b987ea433738",
          "length": 243,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a9dfa6d7-d7b4-477b-bb8e-b0de66746b23"
        },
        "item": {
          "id": "5a65c6a2-24bf-49b4-ae4c-a9e2bf839cdc",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ce071b49-bb2b-4232-b146-187c3825fb57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e5070b-379c-4bf1-a74c-63d4f3102235",
        "cursor": {
          "ref": "85763ca6-cab0-4a4b-8074-0f0ba9a1d3aa",
          "length": 243,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f0af5f5e-ccc1-4890-99f7-3eca7199945a"
        },
        "item": {
          "id": "58e5070b-379c-4bf1-a74c-63d4f3102235",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "27a03dad-9355-443e-a5be-c17301fc27f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 273,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68d71778-5f4e-4ac3-be32-f4bc07d4b073",
        "cursor": {
          "ref": "e2ec0b2a-9142-48e8-8fcd-f51f52c86c68",
          "length": 243,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ca3b50ee-fb7e-4bae-a5d3-4632a98649c6"
        },
        "item": {
          "id": "68d71778-5f4e-4ac3-be32-f4bc07d4b073",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ae4b075f-ec64-429e-a96a-ed0ecb84bd32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 252,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "014b2e0b-dacb-46f8-b2ed-da87fe5e0434",
        "cursor": {
          "ref": "79ecf15c-954b-4235-af01-3a2c20a67b37",
          "length": 243,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "25685988-be08-405d-baaa-f80ba77d6658"
        },
        "item": {
          "id": "014b2e0b-dacb-46f8-b2ed-da87fe5e0434",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "7e2ee110-2592-457d-8e17-8c3246f8b27c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5824be8e-0b7c-43f7-8cd1-5a1a9e6341b0",
        "cursor": {
          "ref": "ce081fcd-a4e0-4802-9187-30f5af6b94f7",
          "length": 243,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "498652d0-b62b-43c6-b357-76ab407317a5"
        },
        "item": {
          "id": "5824be8e-0b7c-43f7-8cd1-5a1a9e6341b0",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "657b5245-e867-43d7-b89a-483932980703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d463ed5-6ecf-433c-824c-d4688ad677f9",
        "cursor": {
          "ref": "f3359f56-c072-404d-b3b3-03bef54d89a7",
          "length": 243,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b6a30d27-5ebc-4f40-bc0d-f8f73171e386"
        },
        "item": {
          "id": "9d463ed5-6ecf-433c-824c-d4688ad677f9",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "1e1ed4d5-f91b-44d9-8b44-fa3042241de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1238,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "437313a6-38b3-4d83-8fe4-3645e51b69ea",
        "cursor": {
          "ref": "d5e2fa61-da89-440d-bf09-33bcf28fa52c",
          "length": 243,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "751b3a9d-3bd8-4c62-9b81-4e94845ffb69"
        },
        "item": {
          "id": "437313a6-38b3-4d83-8fe4-3645e51b69ea",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "09d816ac-a25d-49a1-8dc1-23a20a1a6462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0bbd83f-121a-4d0b-bda3-89a8c71df0ab",
        "cursor": {
          "ref": "b5fef2d7-9cb5-4602-ab60-d313f5a6438e",
          "length": 243,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "83f15639-33b5-40bb-aee3-5f1aed190a01"
        },
        "item": {
          "id": "e0bbd83f-121a-4d0b-bda3-89a8c71df0ab",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "55f63a82-9023-46bc-8de4-79ecd31aa827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 289,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "635b76ac-bf36-4fbc-8019-39baa3289f46",
        "cursor": {
          "ref": "fc4be286-b516-406a-8707-550ddf7e54fc",
          "length": 243,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0536c411-3784-40e2-b61f-ce9c2cb01ed9"
        },
        "item": {
          "id": "635b76ac-bf36-4fbc-8019-39baa3289f46",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1ea8c28d-ac18-49ac-b9af-010f0539db3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9724f915-0490-4053-bd46-980b7aa20544",
        "cursor": {
          "ref": "6e8d4617-2a87-42c5-8d98-20213a5f69af",
          "length": 243,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "89766426-d80a-4fef-aa73-b565d191dbbc"
        },
        "item": {
          "id": "9724f915-0490-4053-bd46-980b7aa20544",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "dd694c0e-e1e3-422e-958a-511e20a7c784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9774bf7e-3912-4c4c-9f52-df71d899414a",
        "cursor": {
          "ref": "da687030-9227-4145-93ea-25b96232a645",
          "length": 243,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0d7bc953-f968-48d7-8a8d-57295f579c90"
        },
        "item": {
          "id": "9774bf7e-3912-4c4c-9f52-df71d899414a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "3c9c4bb4-f033-4712-a6e7-bb3fde57bcea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33521dd5-3b8f-478d-9049-10337369857a",
        "cursor": {
          "ref": "2c1e89c2-846d-45ca-8202-27234b1289cf",
          "length": 243,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "010e246a-5193-447c-affa-0a07b958b4ad"
        },
        "item": {
          "id": "33521dd5-3b8f-478d-9049-10337369857a",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c9108f93-99a3-493e-b7ab-60f8b58d5111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e309d28-5350-412f-97d1-259adf138aad",
        "cursor": {
          "ref": "7c4ac7d2-a25c-4477-aa81-b123a86ffadd",
          "length": 243,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1c1b9249-ac1c-438f-bcf4-eb4894e54011"
        },
        "item": {
          "id": "4e309d28-5350-412f-97d1-259adf138aad",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9ae4ce3d-ee79-4d70-aaa7-96d31a64894a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 925,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56daafe1-b160-4b93-9f66-dc5571a2bd75",
        "cursor": {
          "ref": "0f4c3fcb-363b-4a26-86ad-9e34172e545a",
          "length": 243,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "85a927ff-f468-45ed-b562-148b317dacb3"
        },
        "item": {
          "id": "56daafe1-b160-4b93-9f66-dc5571a2bd75",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f016d0de-3d0a-4aa0-90e3-e4e6aecb236f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11159af5-05d2-4df2-9c63-06bea76c31d6",
        "cursor": {
          "ref": "3403800d-63f0-4b2d-a915-7aed05e4df73",
          "length": 243,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2f764df7-60ac-47fc-a0bd-9d7ec7044d11"
        },
        "item": {
          "id": "11159af5-05d2-4df2-9c63-06bea76c31d6",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "77abfec3-6287-4e0d-8baa-cad8766eb075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0920d053-2ed9-4a60-931e-9b9a4dc5c1c4",
        "cursor": {
          "ref": "503e29fb-d7f7-48ba-a67b-edfff30f17bb",
          "length": 243,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9895a70f-802f-4cca-bf5a-56366dd80a5b"
        },
        "item": {
          "id": "0920d053-2ed9-4a60-931e-9b9a4dc5c1c4",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "19f5264e-22e6-4e2e-9b3a-a8b17cccdc59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de9c0bd-a98a-44b6-a4f8-7606d8b5c92b",
        "cursor": {
          "ref": "965cd084-83d9-4fed-b3fa-500fcb949f32",
          "length": 243,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3a68143d-6a32-4ee5-80dd-b8fa8971de33"
        },
        "item": {
          "id": "5de9c0bd-a98a-44b6-a4f8-7606d8b5c92b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "44224796-b995-408a-bc3d-eedba1ef92ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "978824b7-6276-48e7-b70b-2ee362049741",
        "cursor": {
          "ref": "9d92b4a3-961d-4963-8081-345a0dcb3723",
          "length": 243,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6e0fa21e-48b3-4325-b7e0-7577c4fc5c37"
        },
        "item": {
          "id": "978824b7-6276-48e7-b70b-2ee362049741",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "0a7a6d26-06f8-4944-9963-a718e2a265e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "856da9ae-8950-4618-aaf8-95a3fe92724e",
        "cursor": {
          "ref": "a27afa0b-6718-4477-8efb-9adbd77c0813",
          "length": 243,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3699c09a-c530-45f5-8586-cffd0121b235"
        },
        "item": {
          "id": "856da9ae-8950-4618-aaf8-95a3fe92724e",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "eaf31929-3688-4d3c-9eca-2bf3c1f7f5ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 166,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e4816f-64b2-4ddb-a578-735e03eeb901",
        "cursor": {
          "ref": "15ee39ff-91fb-4388-8022-21f59f16009f",
          "length": 243,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d92f2e46-f27c-45a1-a1b6-2da2cc70d0ea"
        },
        "item": {
          "id": "54e4816f-64b2-4ddb-a578-735e03eeb901",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "2fbf4d81-5ab5-45f9-9e1c-08ca9893a4a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a641532a-7ad4-41de-84fb-984f9b1dac80",
        "cursor": {
          "ref": "39a2c266-99f6-49ca-be35-8319d6e902c5",
          "length": 243,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3e4567e9-beaa-447d-9a0a-c7c05e422e7c"
        },
        "item": {
          "id": "a641532a-7ad4-41de-84fb-984f9b1dac80",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f2892cb5-038a-4668-a615-4ec52db6770a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f857372f-8b17-47b1-8588-3fe1010b2d55",
        "cursor": {
          "ref": "f285d555-1759-49a0-8c6c-57243a2e495b",
          "length": 243,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d060ec5f-f6a8-433a-93c3-7d009c91b780"
        },
        "item": {
          "id": "f857372f-8b17-47b1-8588-3fe1010b2d55",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "11835c00-aac9-4803-9214-817425cca82f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 282,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80db4775-acd8-486a-8fc8-b0257c482df9",
        "cursor": {
          "ref": "b4158fed-5a9c-4667-9653-058420547180",
          "length": 243,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ac4fdd8f-3077-485a-b019-13f8c76598d1"
        },
        "item": {
          "id": "80db4775-acd8-486a-8fc8-b0257c482df9",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "1ef3958c-c823-4d10-96f6-2e6a4b4cf027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b18ede27-f0a3-40c1-ad69-c8638b515152",
        "cursor": {
          "ref": "d979bdcb-1b6b-435e-9168-ae771b274d70",
          "length": 243,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "a90d30e2-3b89-4d5e-8d84-ef394c58d559"
        },
        "item": {
          "id": "b18ede27-f0a3-40c1-ad69-c8638b515152",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "30d89e95-7508-4c43-8958-fd46cda7e2c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4aa402b-8035-4c9c-a115-8810f74febea",
        "cursor": {
          "ref": "6c20bdf9-047e-49ef-9c19-07669b3254a0",
          "length": 243,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "cc57bf3b-08d8-4ff9-91bb-2a41edd622fd"
        },
        "item": {
          "id": "d4aa402b-8035-4c9c-a115-8810f74febea",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f17e73d3-e801-4026-ac11-477dd6169b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66617686-f9b2-4f9a-bb36-a5a6e2919183",
        "cursor": {
          "ref": "f52677ca-b6ea-4074-aeb6-bf1c14d360af",
          "length": 243,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "939fc305-6e3b-4a91-b0de-ac12fed226a6"
        },
        "item": {
          "id": "66617686-f9b2-4f9a-bb36-a5a6e2919183",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "4a2bcf0f-4a15-4752-b3eb-1cfeff48ee32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c77345-7d6a-4f35-a5df-33252fd326b0",
        "cursor": {
          "ref": "eba95ccf-2878-4db4-855e-6b6c78fa8238",
          "length": 243,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4b6f80bd-f6d7-4965-8090-a1667b48656e"
        },
        "item": {
          "id": "09c77345-7d6a-4f35-a5df-33252fd326b0",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "8e3782d7-fef5-40ea-bda2-963cd00992c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "950cd9e4-4dbc-4d03-bd5c-7cefc9f21333",
        "cursor": {
          "ref": "06ee3170-f680-4c0d-9fdd-7f7cd4181c50",
          "length": 243,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4015f8eb-3ce2-432a-8b3b-ec05726d573d"
        },
        "item": {
          "id": "950cd9e4-4dbc-4d03-bd5c-7cefc9f21333",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "723dc704-29fd-4bad-a1c3-8a93ba4f97ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d4d1ea-5b59-4c8e-ad4e-8d727aba96a8",
        "cursor": {
          "ref": "5b047e56-7c3b-4f11-9e51-2bc93146604e",
          "length": 243,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "6a519aaf-c820-42d4-b765-7d1743e84b08"
        },
        "item": {
          "id": "73d4d1ea-5b59-4c8e-ad4e-8d727aba96a8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a4c48a65-9454-44c4-aaa4-e24f45d7de52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4860af0e-2e97-42c5-81bb-63f57add4754",
        "cursor": {
          "ref": "23adf3ec-ff78-4f99-aa84-4ed1f956e049",
          "length": 243,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "45c4a640-13dc-465a-8a7f-9b305d0e8e3a"
        },
        "item": {
          "id": "4860af0e-2e97-42c5-81bb-63f57add4754",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a878d3b2-bfaa-4e68-bfa2-c585fd5e505f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 392,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f420bc9e-ec61-4a4b-b821-f5db9a6e5644",
        "cursor": {
          "ref": "294fcb62-45e2-47d4-9229-5aa2386a478b",
          "length": 243,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2f40ac3a-4cf9-4ef8-9e36-24568813bf45"
        },
        "item": {
          "id": "f420bc9e-ec61-4a4b-b821-f5db9a6e5644",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2a1438b2-71f8-4393-b9cf-0b001bfeb0fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a160066e-22a1-44af-ad7f-2d2c5b495f06",
        "cursor": {
          "ref": "c12d76d8-1e16-4319-8ff3-b153b6cc35f1",
          "length": 243,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b1f9f71b-9850-4e77-b5d2-0946f6182c08"
        },
        "item": {
          "id": "a160066e-22a1-44af-ad7f-2d2c5b495f06",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "28042c55-86a8-4f18-a40c-1321f183a4f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ceeb78-4c96-4b7f-b48a-513c5468a9b9",
        "cursor": {
          "ref": "ea105d28-c4d8-4f8a-ae17-947b315fcd19",
          "length": 243,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8e70ac8a-a31e-4aea-8522-a84d71cc87ec"
        },
        "item": {
          "id": "b0ceeb78-4c96-4b7f-b48a-513c5468a9b9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b3e9438b-37d2-4f4c-a508-5db102688edf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67c1194e-6567-49c0-b77c-8d3ec6619487",
        "cursor": {
          "ref": "727caeee-3bfd-4ec7-9a17-e8b7980d8357",
          "length": 243,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e3b1b7eb-6bd3-4a22-9134-1613d9b32ab5"
        },
        "item": {
          "id": "67c1194e-6567-49c0-b77c-8d3ec6619487",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "5f21cf00-8ce3-49b6-b3fd-5fd74c9d1973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc20f773-186b-4c80-8a63-3f9600c6bb9b",
        "cursor": {
          "ref": "3a11f689-b9d7-4267-8d57-d3281bd35475",
          "length": 243,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "0a0c9f68-240d-42a9-a694-cb2c88096248"
        },
        "item": {
          "id": "cc20f773-186b-4c80-8a63-3f9600c6bb9b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ef17b3c1-840e-4321-a937-f16e00d58f02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a919f273-94d9-483b-96cf-5c04f1e36535",
        "cursor": {
          "ref": "b5947bcf-9ab2-4773-b6f5-abe4f9d89b7b",
          "length": 243,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ac09cb8e-c52b-4aba-af1d-ec9ecd856082"
        },
        "item": {
          "id": "a919f273-94d9-483b-96cf-5c04f1e36535",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b6063832-fb45-4d8a-a384-f5575b0974f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23dc8aee-192a-47f8-8b90-6673f381575a",
        "cursor": {
          "ref": "6e82ef36-883d-4c10-bd27-45ed7d7a64d5",
          "length": 243,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d4076e35-a6d9-4f49-af69-f941d62ea04b"
        },
        "item": {
          "id": "23dc8aee-192a-47f8-8b90-6673f381575a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "aca27ff4-1a06-4c75-9ed9-cd842a920dca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea638d5-9e94-4fd9-bf4c-360326fab407",
        "cursor": {
          "ref": "7ada3430-3660-4559-86e1-fd54073eb3c7",
          "length": 243,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c42fc28c-e681-4cd7-a011-423316624761"
        },
        "item": {
          "id": "eea638d5-9e94-4fd9-bf4c-360326fab407",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "21a42214-bc5d-49f2-8984-8e5533dc8e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a9e0b51-5abb-4d81-8095-85830c192bb8",
        "cursor": {
          "ref": "fa17871f-bef4-40f6-83f7-c0594bbcec03",
          "length": 243,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5f45f6b6-973b-4955-a390-fcc70aa1a3db"
        },
        "item": {
          "id": "6a9e0b51-5abb-4d81-8095-85830c192bb8",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d11d1aa1-54d5-4438-9ff0-85cf50709691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01637c4c-45e9-4373-8173-265509160b96",
        "cursor": {
          "ref": "2487cc5c-f636-41c8-878a-621bbca9b5d3",
          "length": 243,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "04bc470f-ef4b-41bd-92a6-1e0fd661f02e"
        },
        "item": {
          "id": "01637c4c-45e9-4373-8173-265509160b96",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "7e0440ec-ca4f-49b0-8656-b72c805bb50e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd24c263-d5d4-4ed3-823e-c1baa8586ea7",
        "cursor": {
          "ref": "e57c9ae0-20e1-4eee-a20e-26e5d37b7d78",
          "length": 243,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1c365ebd-55fc-428a-896c-c8a70822a6ec"
        },
        "item": {
          "id": "bd24c263-d5d4-4ed3-823e-c1baa8586ea7",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ff0c39e0-c6b3-4999-a62b-e1b539217bfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b459a0-a6b7-4a30-a73d-6dda77547ead",
        "cursor": {
          "ref": "0ed3facb-5435-464e-bef4-1a6548f96ea2",
          "length": 243,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5dd08c73-66b8-4bcb-a228-f6ef1e5a6cff"
        },
        "item": {
          "id": "17b459a0-a6b7-4a30-a73d-6dda77547ead",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3b16f483-3c2a-43f6-a834-07d334d616da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4149b5e7-7968-41f5-a070-1e5cc3388e37",
        "cursor": {
          "ref": "9bd23710-742c-434a-9054-bd7fdbdef461",
          "length": 243,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "59cdc3ee-db73-4c7d-a1ed-037fc3c76cc8"
        },
        "item": {
          "id": "4149b5e7-7968-41f5-a070-1e5cc3388e37",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "88538e18-c878-444b-a084-9d69e32da650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace1a88f-98a2-46f9-b4f8-522ea2657bdf",
        "cursor": {
          "ref": "de0742db-30ea-40c7-9cfc-e92bdf479e2b",
          "length": 243,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c43f57bc-a1a0-4854-98c5-81f337aba225"
        },
        "item": {
          "id": "ace1a88f-98a2-46f9-b4f8-522ea2657bdf",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "47935f0a-0d18-46ad-a4ad-62b480f6f147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 334,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb2ddde3-1c93-4b76-abd4-37e43a679236",
        "cursor": {
          "ref": "728fb75c-d96d-4cd6-ad3b-c20f7500498f",
          "length": 243,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "2c2f124a-61aa-449d-a7bc-1fe60e616f27"
        },
        "item": {
          "id": "cb2ddde3-1c93-4b76-abd4-37e43a679236",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "198b882e-414a-46c6-b690-cdf46b8e2cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "970c3806-c6cd-40b9-b510-36bc7ed1f3c0",
        "cursor": {
          "ref": "6397da03-5470-4602-be40-dd2119753063",
          "length": 243,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a03211fe-d39c-467c-8444-6418cbb36a59"
        },
        "item": {
          "id": "970c3806-c6cd-40b9-b510-36bc7ed1f3c0",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "169895dd-b1ca-40cb-821e-db87eb6b4a8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6747f1cb-4c50-4b1f-9877-a7390eaa4952",
        "cursor": {
          "ref": "dd2eb246-bf53-4e95-9d33-a230ca662037",
          "length": 243,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "19c8f83a-5b21-489d-97f7-361185dd4567"
        },
        "item": {
          "id": "6747f1cb-4c50-4b1f-9877-a7390eaa4952",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "00d9168f-b787-43c6-8c6a-10819e749b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ce27ca5-dc08-478b-8a4f-a17da435c14f",
        "cursor": {
          "ref": "65128ebe-c7b0-4795-b7aa-39c697fe1505",
          "length": 243,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "6a835c2f-f6f9-47a0-aded-9143deb06624"
        },
        "item": {
          "id": "9ce27ca5-dc08-478b-8a4f-a17da435c14f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "3274f948-36ef-4ee6-a048-fb27a4e7fffc",
          "status": "Created",
          "code": 201,
          "responseTime": 610,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "3b919122-856d-4978-9056-376cdb019d43",
        "cursor": {
          "ref": "5a0c96ae-6e0a-4f23-be05-366d55257bb0",
          "length": 243,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "4286647a-1d8d-4f94-86cf-8e58a31beecd"
        },
        "item": {
          "id": "3b919122-856d-4978-9056-376cdb019d43",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1a5946ce-796e-479f-9a7a-0c56b9d44221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487b5210-73a4-4734-b682-9484b1dc7173",
        "cursor": {
          "ref": "af79374e-70eb-4a90-be15-4c23a1ecf9e7",
          "length": 243,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d7823477-69a3-45df-9e06-965196878c86"
        },
        "item": {
          "id": "487b5210-73a4-4734-b682-9484b1dc7173",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "29d74f4a-281d-4b93-9b1c-9802c6db4dc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5319051-7f8c-4c3f-8a16-a23d65559c26",
        "cursor": {
          "ref": "e347ae76-bc0d-414c-a903-fba9fd5360bd",
          "length": 243,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d38bab2a-03b0-43a8-af72-da85a76d0a76"
        },
        "item": {
          "id": "a5319051-7f8c-4c3f-8a16-a23d65559c26",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3a372529-ea5c-4731-9b98-995fd8b6ed67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253c63ec-56b7-4b78-82b9-d4e5415a23f1",
        "cursor": {
          "ref": "13e7172b-580c-4768-b5ac-b5558ab3855d",
          "length": 243,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7e4f078c-2b08-4a5b-9669-9cfa83da5fc1"
        },
        "item": {
          "id": "253c63ec-56b7-4b78-82b9-d4e5415a23f1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d23f97f4-1d40-4a38-b700-0ec838630a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43237915-5173-46d2-8e2f-7938adb7dfa5",
        "cursor": {
          "ref": "9d69c15d-fe56-43a1-b87a-11e4da7c5b7b",
          "length": 243,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f826d29e-1414-4332-aa50-97799db4eb55"
        },
        "item": {
          "id": "43237915-5173-46d2-8e2f-7938adb7dfa5",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "997f703e-246a-490d-af29-9266536eb47f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5b02c00-a0e0-4b02-8ce6-7bdfa20f2f51",
        "cursor": {
          "ref": "32a950f4-4e52-4c28-8c57-a7fde305a0ce",
          "length": 243,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "426af027-ec90-4f75-9476-e3618808b73e"
        },
        "item": {
          "id": "a5b02c00-a0e0-4b02-8ce6-7bdfa20f2f51",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f9b25e6b-85f6-4b13-9df9-203b80f3b3e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a28f188d-3f99-42ed-badd-4819d0e3c4ee",
        "cursor": {
          "ref": "ca1290cf-9ff1-4afd-9e70-47142ddf5323",
          "length": 243,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "eb2c059e-3193-41a8-b3d7-2275132d95b5"
        },
        "item": {
          "id": "a28f188d-3f99-42ed-badd-4819d0e3c4ee",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "80299925-427b-47f4-9bf2-2011ef73aa10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e22b32d9-336b-44fa-833c-2b3a6617eafe",
        "cursor": {
          "ref": "b10d9bec-bcb5-4445-8dcd-b394a172af95",
          "length": 243,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "01d379e5-09c2-45e4-ad4d-0b3d0f64f775"
        },
        "item": {
          "id": "e22b32d9-336b-44fa-833c-2b3a6617eafe",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "efbc28da-dca7-4eb0-a6e8-a1a7af213331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec467559-5fc5-4eba-8922-ae5333bf5161",
        "cursor": {
          "ref": "32d64dfe-d788-474f-a308-3c1dd7ae0220",
          "length": 243,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "9105de8e-fa27-4461-9fda-4a3e37aa4936"
        },
        "item": {
          "id": "ec467559-5fc5-4eba-8922-ae5333bf5161",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "aa5497bd-3009-4125-8385-b54f360045ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "93c9a728-0dc9-410d-b2e7-4ddc9f47fd14",
        "cursor": {
          "ref": "a799b288-7f8a-416d-8bf1-d827c98a542e",
          "length": 243,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "0820c1ba-372c-4d41-8625-d30311185420"
        },
        "item": {
          "id": "93c9a728-0dc9-410d-b2e7-4ddc9f47fd14",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "42ebd07d-3796-4361-b234-1d65ad1e9fcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "50327224-2de6-4554-8ecd-8517d05189ed",
        "cursor": {
          "ref": "45e18ba8-5cd2-467d-8c0d-0a4df70fad3b",
          "length": 243,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "05196880-b68c-4b4b-bbbc-f77d037c23f2"
        },
        "item": {
          "id": "50327224-2de6-4554-8ecd-8517d05189ed",
          "name": "credentials_issue"
        },
        "response": {
          "id": "2f32698b-ad5f-43b7-938b-9f17cd201642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:96)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": ".empty was passed non-string primitive undefined",
              "stack": "AssertionError: .empty was passed non-string primitive undefined\n   at Object.eval sandbox-script.js:4:96)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot read properties of undefined (reading 'created')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'created')\n   at Object.eval sandbox-script.js:6:96)"
            }
          }
        ]
      },
      {
        "id": "5df5d280-bb66-40d5-9a44-ce83365ff926",
        "cursor": {
          "ref": "53e85663-cc60-4e7a-9edf-c62bb1d52160",
          "length": 243,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e5e70449-5859-437c-bca9-7462f1b423bc"
        },
        "item": {
          "id": "5df5d280-bb66-40d5-9a44-ce83365ff926",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "f7678fce-a0fa-47eb-8e5c-952941660044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "87cc641c-a452-4b51-a9c7-645aa270f5f3",
        "cursor": {
          "ref": "eede5456-3e5e-4813-8402-8151a3b80987",
          "length": 243,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "11d4aa70-b930-429a-a162-a51c88975129"
        },
        "item": {
          "id": "87cc641c-a452-4b51-a9c7-645aa270f5f3",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6a6b888e-563e-4e8d-bd57-d503c9407fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:98)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:98)"
            }
          }
        ]
      },
      {
        "id": "ff02e879-4a4b-47c0-b092-4ae9709ab826",
        "cursor": {
          "ref": "ce790f2d-d367-47af-83e0-a01349c8b7db",
          "length": 243,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "f019709a-aafc-4a18-8149-c5a956028936"
        },
        "item": {
          "id": "ff02e879-4a4b-47c0-b092-4ae9709ab826",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8b78dc2a-ab33-491b-a238-6d6939b34bcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:99)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:99)"
            }
          }
        ]
      },
      {
        "id": "1c5e6166-b81e-4ba5-9062-694a72867b63",
        "cursor": {
          "ref": "5af7fddd-d69e-4e28-b70a-16545495533a",
          "length": 243,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e6c20c5d-21d7-4d51-857a-5875957218ab"
        },
        "item": {
          "id": "1c5e6166-b81e-4ba5-9062-694a72867b63",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "885da1c7-c82e-4998-ba5b-7782f699ecf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "5d07c6c2-5807-4cf6-b919-30ca9b2d3ae1",
        "cursor": {
          "ref": "411ca4c7-fb57-40ab-88e8-c74b320f99b7",
          "length": 243,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a94687a5-503e-465a-a7cb-638609dfda88"
        },
        "item": {
          "id": "5d07c6c2-5807-4cf6-b919-30ca9b2d3ae1",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "328c3eed-80d6-45e4-a82b-536915435706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "f490bbb2-4aa1-40d5-aa51-5bfd016104d1",
        "cursor": {
          "ref": "a6f1630b-29c1-4232-a3f5-f9f50890eb6b",
          "length": 243,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e7df5ffc-5041-442d-bf07-decff8cd5018"
        },
        "item": {
          "id": "f490bbb2-4aa1-40d5-aa51-5bfd016104d1",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "03b16ed1-1e69-4373-a83f-254393d3c163",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "f490bbb2-4aa1-40d5-aa51-5bfd016104d1",
        "cursor": {
          "ref": "a6f1630b-29c1-4232-a3f5-f9f50890eb6b",
          "length": 243,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e7df5ffc-5041-442d-bf07-decff8cd5018"
        },
        "item": {
          "id": "f490bbb2-4aa1-40d5-aa51-5bfd016104d1",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "03b16ed1-1e69-4373-a83f-254393d3c163",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "6e2dfbaf-0e34-4ec8-bcb6-c1cea8a17f5c",
        "cursor": {
          "ref": "6ebb3004-90ff-46eb-af36-23b6da4b5bdd",
          "length": 243,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "4a94fb10-6de4-40d6-b977-d10173d0816e"
        },
        "item": {
          "id": "6e2dfbaf-0e34-4ec8-bcb6-c1cea8a17f5c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e3ed4252-4d52-4e99-8c4e-dc334875fee5",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "5b44a435-f8e8-48ad-a8fc-1fd4a503443b",
        "cursor": {
          "ref": "a99b0e06-ac38-4e55-a418-bea1d7afc11e",
          "length": 243,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "cfbafa49-dd6b-47c4-92be-40a39cc7c21f"
        },
        "item": {
          "id": "5b44a435-f8e8-48ad-a8fc-1fd4a503443b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6ef65249-7970-415c-98f4-42fd93cf9424",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "d33a5504-954a-470c-be05-10d7819d8c1b",
        "cursor": {
          "ref": "4ca549ed-8431-4870-a2b1-f46993278da5",
          "length": 243,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "eb68e884-818a-4e65-b442-44132ebdbb07"
        },
        "item": {
          "id": "d33a5504-954a-470c-be05-10d7819d8c1b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "228af2df-e5e8-46dc-ae3d-9eee50ff5b76",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "7d619200-cb70-4dbf-b90e-aeb55b92c789",
        "cursor": {
          "ref": "69d332d7-bbc9-414b-b21c-dc5fa479e2eb",
          "length": 243,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3a6659af-27d8-4d1a-be09-2b515d554ef3"
        },
        "item": {
          "id": "7d619200-cb70-4dbf-b90e-aeb55b92c789",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "bc35c88e-6e63-4c05-a95c-50b8e4a7603d",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:106)"
            }
          }
        ]
      },
      {
        "id": "59b2c77c-10ee-4e0f-8ee6-ee5598beebbc",
        "cursor": {
          "ref": "7c33be88-b16a-4b4b-8004-b7d354342d84",
          "length": 243,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "78563402-6447-4124-af1e-7effa8df914e"
        },
        "item": {
          "id": "59b2c77c-10ee-4e0f-8ee6-ee5598beebbc",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d98bae04-1fbc-41a0-80a7-4aebe55d8ab3",
          "status": "OK",
          "code": 200,
          "responseTime": 25,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "f5e70a77-ba82-44ba-8e9e-072db204dbc5",
        "cursor": {
          "ref": "04f56a6c-4b33-4bb6-a08b-2c50f6ff2071",
          "length": 243,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "19dec117-cbf4-4a2e-bb6e-6f3133aac27e"
        },
        "item": {
          "id": "f5e70a77-ba82-44ba-8e9e-072db204dbc5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5c1d01e7-1373-4374-832c-6d2333b1cc5c",
          "status": "OK",
          "code": 200,
          "responseTime": 25,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "f5659ac2-c913-4a1a-8165-8551c653224d",
        "cursor": {
          "ref": "55d2f800-b903-435e-9915-3e7cf02bcc0c",
          "length": 243,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "611781c9-1e84-4536-8e87-3eb408e2dcf0"
        },
        "item": {
          "id": "f5659ac2-c913-4a1a-8165-8551c653224d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d4a2d0a5-1a45-452c-9345-166577233ba5",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "ee438206-07fc-40b0-a2f0-6c9aa382f63b",
        "cursor": {
          "ref": "491e110f-3ebf-4613-a8d4-793836b2972b",
          "length": 243,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "993aca67-38a8-4ac6-bfd0-492c2cb1e73a"
        },
        "item": {
          "id": "ee438206-07fc-40b0-a2f0-6c9aa382f63b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "463b76af-ad4d-4e99-9146-bc4450199783",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "03c6ffa0-f177-45d1-90d6-4c91bf9b9b33",
        "cursor": {
          "ref": "654ae630-307d-42c3-ba98-eb73a1539100",
          "length": 243,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1905f384-1bcc-42ea-9fca-f035cc0b962b"
        },
        "item": {
          "id": "03c6ffa0-f177-45d1-90d6-4c91bf9b9b33",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "dbd817e6-f91b-4611-9b8b-fa781b85c447",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "368a5ad8-5323-4f28-b142-78cab48a7a55",
        "cursor": {
          "ref": "7f995a75-ca80-40a4-a30e-31be2db5c025",
          "length": 243,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "197679ed-a046-4b48-a5fd-c1ef76eddc58"
        },
        "item": {
          "id": "368a5ad8-5323-4f28-b142-78cab48a7a55",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "39d440f6-08f0-4640-929f-29e6d51d9da8",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "32d47883-be9d-4987-9eae-10544d4ad473",
        "cursor": {
          "ref": "ff12e371-9306-4d85-bf8d-fc0c16fee42f",
          "length": 243,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c4c50df4-f65c-46d1-b4a7-aec057eebf1b"
        },
        "item": {
          "id": "32d47883-be9d-4987-9eae-10544d4ad473",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0aa17407-c19d-458f-abf7-75fe0a1403bd",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "aa25123a-ae1c-4369-bd99-a287548ef5a0",
        "cursor": {
          "ref": "7a7e1d26-f56a-41d4-be71-416be959312a",
          "length": 243,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "73cca7ed-5320-40db-8704-6ca01a7f68e7"
        },
        "item": {
          "id": "aa25123a-ae1c-4369-bd99-a287548ef5a0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "be3c85b6-8cb4-44c9-abcb-95845b9e2900",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "fc858860-93a3-429f-b1d9-bb4410f64d6d",
        "cursor": {
          "ref": "e23e05f0-be49-4f25-950c-82e10e614c6a",
          "length": 243,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "8bb1966e-9bed-4b20-bfdf-676e759715ca"
        },
        "item": {
          "id": "fc858860-93a3-429f-b1d9-bb4410f64d6d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ead67734-0c66-4d5e-be12-20cb5b144410",
          "status": "OK",
          "code": 200,
          "responseTime": 24,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "bb4142db-acb3-4ad8-ae21-9fb87d5e49cb",
        "cursor": {
          "ref": "42f95a78-f7e8-48d2-8427-ad133fa8d5a8",
          "length": 243,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "72febce4-ee9d-4177-a7d7-1fead94bbe88"
        },
        "item": {
          "id": "bb4142db-acb3-4ad8-ae21-9fb87d5e49cb",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b5563ec7-4de6-4329-b589-8655bc806e6e",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "36574a0a-2894-4578-a4dc-22961a6594c4",
        "cursor": {
          "ref": "20e40ad9-fc0a-410f-8297-b8b0919070f0",
          "length": 243,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "da6b95ab-007c-46a8-8362-d43257ae09d8"
        },
        "item": {
          "id": "36574a0a-2894-4578-a4dc-22961a6594c4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "24ed6db7-4fa2-45e7-bb6f-30d1f1b54b9b",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "8be2091d-c61a-4829-899f-315ba4e798cb",
        "cursor": {
          "ref": "f9e52fd2-f254-443f-b967-148468f37e40",
          "length": 243,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "75a307d0-6380-4ba0-8592-0363febdf3dd"
        },
        "item": {
          "id": "8be2091d-c61a-4829-899f-315ba4e798cb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4ce967ca-8302-4f8c-849b-161eb46198b7",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "a9158bfc-6866-4b99-a702-a0f5271b437a",
        "cursor": {
          "ref": "b956f66b-6426-4fa8-85ad-f18295b7d820",
          "length": 243,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4c3c0a62-fdc6-4762-b618-c70b4ce7c685"
        },
        "item": {
          "id": "a9158bfc-6866-4b99-a702-a0f5271b437a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5ef49ccb-a227-4bd0-8ac3-ca34216e1d28",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "f0b0a83a-76f2-471c-888a-a9c92c9afd99",
        "cursor": {
          "ref": "30524dac-28ca-41be-b06b-115b3bdf3131",
          "length": 243,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "4995ae2f-1b39-4144-80f6-fdb27d1a354c"
        },
        "item": {
          "id": "f0b0a83a-76f2-471c-888a-a9c92c9afd99",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a4d9cafd-e15e-4584-8b22-9f892c654bee",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "7cf2d640-665e-4a38-b27b-ed563ba22142",
        "cursor": {
          "ref": "7e8544a5-9c1b-4e91-bd81-00658498e983",
          "length": 243,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "3505e9a2-010b-4321-8982-aa09331b70a3"
        },
        "item": {
          "id": "7cf2d640-665e-4a38-b27b-ed563ba22142",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8350a821-7d26-41bd-a022-f0a713eac2e2",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "6dfc0636-1c4d-4d80-b602-ef1999dace19",
        "cursor": {
          "ref": "f922fcf3-85da-47b6-a266-b58b4b8cd362",
          "length": 243,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "4fd7e4ca-2de8-4627-a811-7c480ffe5168"
        },
        "item": {
          "id": "6dfc0636-1c4d-4d80-b602-ef1999dace19",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a1756c2f-d94c-4e2f-b382-5d5868baa6ac",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "60e8d218-d94e-498a-b186-b0e10b09b1af",
        "cursor": {
          "ref": "ccbe663e-42ec-486a-a6e7-b821ca70a491",
          "length": 243,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "269db8a4-558a-4d72-bac9-766010c8a248"
        },
        "item": {
          "id": "60e8d218-d94e-498a-b186-b0e10b09b1af",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d1c270ce-9b73-4e1d-8b60-a9aba4d7b0dc",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "234ef39f-2a01-4dc2-b27e-799e108ce7f9",
        "cursor": {
          "ref": "2c571741-b091-4d71-851b-ec3f5bb742f0",
          "length": 243,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d7c7f8af-204e-4368-844d-7ec8a1ac2491"
        },
        "item": {
          "id": "234ef39f-2a01-4dc2-b27e-799e108ce7f9",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9203ad80-bf7c-4fe8-acb8-7437c7f92bd2",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "99f8acc4-9c17-4af5-b844-eefbcf6e546c",
        "cursor": {
          "ref": "218b2e5e-b663-4a99-9a42-7cfd4ed3174b",
          "length": 243,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "6b3b4d65-780e-439c-83b2-ef3195d22aed"
        },
        "item": {
          "id": "99f8acc4-9c17-4af5-b844-eefbcf6e546c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9b166dda-e5b0-448f-9ee1-2dfdc1ac24c8",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "6253af24-5712-4f8b-a495-cce98f416919",
        "cursor": {
          "ref": "38129a43-8192-4e02-9518-5f3f7d68a47d",
          "length": 243,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8cbca932-214d-48bb-bc30-de244d07975a"
        },
        "item": {
          "id": "6253af24-5712-4f8b-a495-cce98f416919",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a3a787c5-af32-4203-b0f2-216718478439",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "f7d9a68d-87ef-4b17-a8e1-704c93f93406",
        "cursor": {
          "ref": "0aad249e-b6a8-41be-9fa9-0aee2480cf13",
          "length": 243,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "0947cb5e-a5cd-44e2-94e4-8a78c13b5ba8"
        },
        "item": {
          "id": "f7d9a68d-87ef-4b17-a8e1-704c93f93406",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7638f508-f5cf-4379-a9b8-6b6c53591ebd",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "35df8708-2195-47a4-9fc5-53cffe94a6a5",
        "cursor": {
          "ref": "8bd24d38-8985-408b-bf9a-1a2c1f0da686",
          "length": 243,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "46b0e028-9dd1-4713-aa86-d563feebb7b3"
        },
        "item": {
          "id": "35df8708-2195-47a4-9fc5-53cffe94a6a5",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7626b1cf-cff6-4ea0-bb4c-5a7d4ae85381",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "2426b207-c042-4f51-b7f4-ea0fa8a75995",
        "cursor": {
          "ref": "d84e12ac-2a6a-4158-953a-e5b3a53df858",
          "length": 243,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "cbd6518c-733c-45a6-b31b-e2ced5751da9"
        },
        "item": {
          "id": "2426b207-c042-4f51-b7f4-ea0fa8a75995",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "803ebbfc-3bd6-40e7-8703-b799706e0336",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "acfb6991-2011-41dd-8093-e25b2e612087",
        "cursor": {
          "ref": "b6529120-26d5-44dc-aa73-b5af102fa48e",
          "length": 243,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0f1c0c2d-24b7-4dc0-acb3-b5f5e980b238"
        },
        "item": {
          "id": "acfb6991-2011-41dd-8093-e25b2e612087",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "48f2af40-7464-47ef-b3a0-eab6dd0b69b9",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "8b9ac21c-b20f-4b40-8b59-c26e8c93ea76",
        "cursor": {
          "ref": "04752ca6-ab5a-4c3f-82e2-469bad0e8048",
          "length": 243,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "0804265e-e099-4cea-bb8b-85a8f7874882"
        },
        "item": {
          "id": "8b9ac21c-b20f-4b40-8b59-c26e8c93ea76",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "877c72e5-b14c-4cfc-b297-1af51aa2dcfd",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "65cb065f-1560-4c03-9c98-81f08621c958",
        "cursor": {
          "ref": "f0c26175-089a-4fcc-8543-f35fd4d63f9e",
          "length": 243,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6ac766a7-43a7-474a-9942-9976dc2c1e0d"
        },
        "item": {
          "id": "65cb065f-1560-4c03-9c98-81f08621c958",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "40c771fd-34de-44a7-902d-578aeb0b2198",
          "status": "OK",
          "code": 200,
          "responseTime": 24,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "0ac04aea-519d-4553-a5b4-aadaaec246f2",
        "cursor": {
          "ref": "223e292a-627a-4b15-b249-389472bb733d",
          "length": 243,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "82b86f6d-bf7c-48cc-8994-9912a3e9cf60"
        },
        "item": {
          "id": "0ac04aea-519d-4553-a5b4-aadaaec246f2",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "47132076-997a-4244-99ff-409a1f49735f",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "93eb979d-623e-4c24-90d3-d07ce28d563c",
        "cursor": {
          "ref": "4896244d-9ebe-48ee-9cfc-8667e3891d40",
          "length": 243,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "13b60208-1a49-4835-81cc-cc94afe1dd21"
        },
        "item": {
          "id": "93eb979d-623e-4c24-90d3-d07ce28d563c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "be9a86b3-3945-4fce-a524-16aa211b0dc1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 111,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d610d1-38a7-4039-8da9-2a61807f3e44",
        "cursor": {
          "ref": "2ea9d068-39b1-4e6a-9a5e-4adddfc4f7e3",
          "length": 243,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c326edca-7c3b-436f-8863-754f9b133bbd"
        },
        "item": {
          "id": "52d610d1-38a7-4039-8da9-2a61807f3e44",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "49b193b2-098d-4efc-9795-74acfa91b01f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 24,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a1e44e9-f409-4e7e-a534-2d25a3fae27f",
        "cursor": {
          "ref": "09a0ed43-6328-473e-b4a4-9621a2d8f46b",
          "length": 243,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9cd36063-4a16-411b-9898-c0dcfad40293"
        },
        "item": {
          "id": "5a1e44e9-f409-4e7e-a534-2d25a3fae27f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0e5e5e68-f037-4ff0-982f-2c9c0a49f022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a1e44e9-f409-4e7e-a534-2d25a3fae27f",
        "cursor": {
          "ref": "09a0ed43-6328-473e-b4a4-9621a2d8f46b",
          "length": 243,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9cd36063-4a16-411b-9898-c0dcfad40293"
        },
        "item": {
          "id": "5a1e44e9-f409-4e7e-a534-2d25a3fae27f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0e5e5e68-f037-4ff0-982f-2c9c0a49f022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e0e9a01-5054-4a6d-8275-b7dc5dc580f9",
        "cursor": {
          "ref": "d73753ac-027c-4de9-9690-cb4af25d9fae",
          "length": 243,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "931bdb56-1179-48b8-8491-1901af86f00a"
        },
        "item": {
          "id": "2e0e9a01-5054-4a6d-8275-b7dc5dc580f9",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "687f0654-32d4-4fd7-859f-4224de0acdeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 290,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b7a86c1-9fba-487f-a05c-85f5de83708b",
        "cursor": {
          "ref": "2b313c78-6352-49e8-9a08-1925af22075a",
          "length": 243,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "db2976c2-4a32-4c3d-b35a-51616a387447"
        },
        "item": {
          "id": "0b7a86c1-9fba-487f-a05c-85f5de83708b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "adc52d17-a648-4a35-a3d3-7e3d7fb6668a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b644371-cc2b-4f2e-b679-ebe247d1c9b7",
        "cursor": {
          "ref": "e21c1471-f60b-436a-a314-07b5c8daa25e",
          "length": 243,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "38974c0d-4049-4681-b414-2347591368b6"
        },
        "item": {
          "id": "6b644371-cc2b-4f2e-b679-ebe247d1c9b7",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6b59bea8-c90f-491c-9234-87d4a8add666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7927938b-1085-422f-8d2e-ea01c1e23129",
        "cursor": {
          "ref": "fa848945-b109-4dfe-9eeb-a3a4d721385a",
          "length": 243,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "668ae73f-4b45-4429-96c4-0f1988d207f7"
        },
        "item": {
          "id": "7927938b-1085-422f-8d2e-ea01c1e23129",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "fbd5e236-7dea-45ca-81d3-164d91efaa37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b83bdc45-b7d5-4a4a-adce-5e6720faef66",
        "cursor": {
          "ref": "cdd709d3-8296-4593-9170-2af4161531a8",
          "length": 243,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a3df3f35-556a-4939-9c87-1fb9d37152f5"
        },
        "item": {
          "id": "b83bdc45-b7d5-4a4a-adce-5e6720faef66",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "ac380970-7598-4458-9cc8-2cfef57b9405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fcb60e1-7992-457b-8a39-dadb958a2f08",
        "cursor": {
          "ref": "0d9b710c-f571-4fb1-b4ce-0a211a1734a5",
          "length": 243,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "260040e0-42a1-42d1-89c9-d26b0c7c5c9c"
        },
        "item": {
          "id": "6fcb60e1-7992-457b-8a39-dadb958a2f08",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "56672204-cfd4-47de-8271-f9b05e709f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1413,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a1423eb-2815-4e8a-8816-ebbf642eee54",
        "cursor": {
          "ref": "f5b1ad5a-e551-4b0a-a7f9-2aee46f8e76f",
          "length": 243,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "88079994-98f6-45e0-8d08-5f5025281da6"
        },
        "item": {
          "id": "3a1423eb-2815-4e8a-8816-ebbf642eee54",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "2398f334-01d5-410f-98f8-342071be193f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16a521fb-62d3-44b0-93e2-4c7206b85891",
        "cursor": {
          "ref": "767b2780-1bfe-47f3-bc4b-8f146f2ff783",
          "length": 243,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e4a8ca4e-cdd2-452b-afa2-224dc1b327f2"
        },
        "item": {
          "id": "16a521fb-62d3-44b0-93e2-4c7206b85891",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "a8f1c73a-32b0-49c8-9eae-a0624ac57af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c43131-a5c8-42e8-b9d4-b15ee2558622",
        "cursor": {
          "ref": "aa4c751a-ba8c-421d-aba3-e45c230db9fe",
          "length": 243,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "27e5f771-26d1-48bf-be1b-fa3bb6919d67"
        },
        "item": {
          "id": "c1c43131-a5c8-42e8-b9d4-b15ee2558622",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "130f4f4b-f429-4082-9ded-bd3c11ac53db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb9ff7ac-8d12-4cab-9066-a3cb8e432242",
        "cursor": {
          "ref": "707486cb-a43d-4795-b5ae-44e9549787ed",
          "length": 243,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "921a3c1d-f070-4e12-a963-86dea69e95a1"
        },
        "item": {
          "id": "bb9ff7ac-8d12-4cab-9066-a3cb8e432242",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "1b773a9b-efef-448b-9c62-a50b1927bf8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311e64d1-0332-4490-a4aa-f2e0f641f581",
        "cursor": {
          "ref": "f94b2017-e502-4849-bfe5-92d465665bf3",
          "length": 243,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "29de7faf-186d-4444-84ba-2dd621fdc9b2"
        },
        "item": {
          "id": "311e64d1-0332-4490-a4aa-f2e0f641f581",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ba772c22-c17c-4811-8b13-63f3cbccddee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93565f7b-bebc-4289-983d-de120d5d1821",
        "cursor": {
          "ref": "d499729f-0761-43de-bceb-a454899c3f08",
          "length": 243,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "61cb0af4-bc49-4528-a7ed-8fbd5ca1a81a"
        },
        "item": {
          "id": "93565f7b-bebc-4289-983d-de120d5d1821",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "91bdd638-f678-4a1b-a55a-91af35c2e8c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6edfcacb-3cd3-428f-b412-080670b4ba1c",
        "cursor": {
          "ref": "701cb917-f8b6-4a74-a7d9-eb6652acd5c1",
          "length": 243,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b1a77592-83bc-477b-ab3b-2f9f93ebb83e"
        },
        "item": {
          "id": "6edfcacb-3cd3-428f-b412-080670b4ba1c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "17314f0e-3aab-4105-a9fd-6e1f712f9637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f34dbff7-1ed6-4f43-8cca-e15c515015f4",
        "cursor": {
          "ref": "c5fb381d-74f2-4311-a712-c112841be86c",
          "length": 243,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "73138d3c-a1c8-4b80-827d-d5f021ddc77c"
        },
        "item": {
          "id": "f34dbff7-1ed6-4f43-8cca-e15c515015f4",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f079a797-973c-4941-b669-553f16ec3eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9674c8c2-e6e4-4aaa-93f2-e3a7ae9c580e",
        "cursor": {
          "ref": "bc05d779-5616-4db8-912c-5a32bbbd2abd",
          "length": 243,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "725269ac-b822-4daa-8672-ac87c00e743e"
        },
        "item": {
          "id": "9674c8c2-e6e4-4aaa-93f2-e3a7ae9c580e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ac9071ab-3d22-4f8b-85f4-c90be0d5247e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813d134f-8ded-47a3-9c89-a6f6d392dc17",
        "cursor": {
          "ref": "1d13df1e-528e-42d3-9239-db1bccb27b21",
          "length": 243,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a2bbca55-6d16-4712-9f40-46c2da944e28"
        },
        "item": {
          "id": "813d134f-8ded-47a3-9c89-a6f6d392dc17",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "88ba3403-736b-4a84-a198-2ab5eebb6798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce9fa74a-b86c-401a-b15d-d6af26711955",
        "cursor": {
          "ref": "de305fbe-1380-499a-a121-0c30f0a412d9",
          "length": 243,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "01339244-7e6e-4f2d-a380-f0f6f2ad7716"
        },
        "item": {
          "id": "ce9fa74a-b86c-401a-b15d-d6af26711955",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ea987842-63c9-4729-8b34-f6f6b8bf36ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 731,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b9879b9-4a3a-4bfb-8b67-ed6d332d324b",
        "cursor": {
          "ref": "6230758d-b835-48c5-9450-383724f5cce9",
          "length": 243,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c9fd4a45-b6d3-419e-b5e1-32abb4e67371"
        },
        "item": {
          "id": "8b9879b9-4a3a-4bfb-8b67-ed6d332d324b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "8dd4633b-f686-41e0-b2cb-4ddaeda02e88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 449,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a2cd78f-8b99-41f3-bbf3-e74aaa58f99a",
        "cursor": {
          "ref": "c2470fb5-2f28-48bc-a97c-b8669c346125",
          "length": 243,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "861776d1-924a-413a-84d6-e8b5d950f188"
        },
        "item": {
          "id": "7a2cd78f-8b99-41f3-bbf3-e74aaa58f99a",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "c9f25e83-771e-468f-9b28-6b93fac0f63d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1403,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "883b1094-1a33-4edb-87e0-46325e7060f2",
        "cursor": {
          "ref": "2ca40bc0-ab1e-478d-a310-9c8ea89b3523",
          "length": 243,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f2cf5764-3039-47cf-8804-28f42018a562"
        },
        "item": {
          "id": "883b1094-1a33-4edb-87e0-46325e7060f2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "2096e8a8-8f14-43e9-ac28-1f6f8296d026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 324,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb7c9a7-98e6-44a9-8288-511c5b474079",
        "cursor": {
          "ref": "2723399d-a740-45c1-9477-c54d56055f69",
          "length": 243,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "2d72dc17-7a2e-4308-b23a-b0636b228d6f"
        },
        "item": {
          "id": "9cb7c9a7-98e6-44a9-8288-511c5b474079",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3cecb564-3e47-404b-9f7e-841cd4abf30b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 348,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19fd2f79-bf18-41ad-a52e-9b22fd07a56f",
        "cursor": {
          "ref": "4e3cdd24-e48e-46a5-9c71-e05b80d5b201",
          "length": 243,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "3ab1cc56-8f33-4679-8f30-8b510a153fb3"
        },
        "item": {
          "id": "19fd2f79-bf18-41ad-a52e-9b22fd07a56f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8a97a819-3b73-4d9d-8427-3f21e41ac459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 349,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ed23d4-ded0-4fe5-b496-8b4c44a1fa33",
        "cursor": {
          "ref": "1a1719b0-36ed-4b0a-869b-298ba2629221",
          "length": 243,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9cc3ddba-d1a2-4a69-88d7-40ba788e8a17"
        },
        "item": {
          "id": "a5ed23d4-ded0-4fe5-b496-8b4c44a1fa33",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ba10e563-adb5-4e08-b2e5-0538c1239b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0814a05e-64e1-4744-bd68-54a64bd8a336",
        "cursor": {
          "ref": "8dabb6fc-2e0e-4081-81a3-6ffc3b0ec5ce",
          "length": 243,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "8ed7c053-ed8e-46ad-9ffa-62a71ee81729"
        },
        "item": {
          "id": "0814a05e-64e1-4744-bd68-54a64bd8a336",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a11012d9-9568-4fbf-b21e-f7b3f2edb798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d355a2b-5c21-4e25-8cb5-d061bdf895f7",
        "cursor": {
          "ref": "704b0659-856b-4d88-b6d4-342e54119583",
          "length": 243,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c8834ad8-6695-4a63-a019-30a0bbd88495"
        },
        "item": {
          "id": "7d355a2b-5c21-4e25-8cb5-d061bdf895f7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f3750993-6280-439b-ab05-8450c4d546ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 244,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b712b6a1-3c29-4eb2-8c23-13b35f66afb3",
        "cursor": {
          "ref": "40e00c5f-ef96-447e-a63d-014384f68bb2",
          "length": 243,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4fe315ca-1fac-4662-9e04-4d3613a79900"
        },
        "item": {
          "id": "b712b6a1-3c29-4eb2-8c23-13b35f66afb3",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1a2af79e-1805-47d5-820f-339720337832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44b61e29-877b-4e55-ba99-7a53d153a821",
        "cursor": {
          "ref": "e366fd86-f5a5-41a6-a8c6-787530f1797f",
          "length": 243,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c11cfb28-5235-44ec-b63a-7abdc7e857b4"
        },
        "item": {
          "id": "44b61e29-877b-4e55-ba99-7a53d153a821",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "74c1746c-cd74-4c25-a3cb-53239c1a21a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2aab074-9917-4939-af23-1168f95985b7",
        "cursor": {
          "ref": "0a8507d7-dd69-4198-aa00-34f2a4352e26",
          "length": 243,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "85625dd1-09e6-4d61-9c8a-f7532453a19f"
        },
        "item": {
          "id": "f2aab074-9917-4939-af23-1168f95985b7",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "903327cf-310b-41a4-bcae-1d8e906264da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c7668d5-a353-4153-b868-513bf6e408b4",
        "cursor": {
          "ref": "3568c40d-41b0-4fbb-b672-3e279baa5886",
          "length": 243,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "629e5871-0de0-4ab1-a23a-f8eee3568e39"
        },
        "item": {
          "id": "7c7668d5-a353-4153-b868-513bf6e408b4",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2cc3bee0-7f22-444d-aa37-860a787f3924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "598ecf49-23f3-4796-8415-6b5d2bd78041",
        "cursor": {
          "ref": "95e7263a-8ad9-4827-88ba-cbb28e04abf7",
          "length": 243,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "8110562b-971b-421d-8976-24345327cdd1"
        },
        "item": {
          "id": "598ecf49-23f3-4796-8415-6b5d2bd78041",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "21b7291d-75d0-4ddf-99f1-c4984e446cde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "581b5e64-7f6b-43fe-b43a-10a910f63937",
        "cursor": {
          "ref": "f06a2e46-c1b2-4f80-b813-2b7f327482ad",
          "length": 243,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "44b37cd4-05f3-40ae-aae9-c4ac61cd401a"
        },
        "item": {
          "id": "581b5e64-7f6b-43fe-b43a-10a910f63937",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4f7ba728-8f0e-4425-8caa-ab89d045f47f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2bf0080-76df-4e36-a910-19360b72f05b",
        "cursor": {
          "ref": "d718cbe5-779c-4e52-a8df-9d175bd21eec",
          "length": 243,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "20676997-e10e-427d-b1f7-1e42f9a27386"
        },
        "item": {
          "id": "c2bf0080-76df-4e36-a910-19360b72f05b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "047361c6-113e-43e4-8935-ac2be0aa6a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 339,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e68e5450-8dbf-4a8b-a2c7-fbed1d1902ce",
        "cursor": {
          "ref": "3342b783-3e83-4944-a3b8-3a43500081b9",
          "length": 243,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8be3dfd1-cc25-4399-ad8a-8c4c4b34d774"
        },
        "item": {
          "id": "e68e5450-8dbf-4a8b-a2c7-fbed1d1902ce",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "abf0660d-a750-43f9-aa2c-14b994ef1c0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c8819f7-77fb-476b-a351-48d5c6e8feca",
        "cursor": {
          "ref": "d9669bd8-458e-4002-a370-382062030868",
          "length": 243,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "2f42ca8b-25e1-4b65-a4a1-143a7edac78d"
        },
        "item": {
          "id": "4c8819f7-77fb-476b-a351-48d5c6e8feca",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "0a15d0f2-bced-429a-b222-62d160c01ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47820213-8b9d-46ea-8fe7-dd91b72b044b",
        "cursor": {
          "ref": "6545cf0f-9a4c-4c47-b310-b823d75086d2",
          "length": 243,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "936a2cb3-52ca-41d9-bfd0-f4c3d2a1c857"
        },
        "item": {
          "id": "47820213-8b9d-46ea-8fe7-dd91b72b044b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6250dc50-56a0-42e7-9916-53bc6d8f6c2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffc5058a-caa8-48c8-8f85-7512a05dfede",
        "cursor": {
          "ref": "00af8876-9b3a-4147-aa6c-46bdc234497e",
          "length": 243,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b82829e7-84ea-4d8b-af87-921088005d3e"
        },
        "item": {
          "id": "ffc5058a-caa8-48c8-8f85-7512a05dfede",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "280a8a98-2f61-436d-9893-a85ca0452471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 387,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fe1d122-28a6-400f-b471-e3f3fa39a600",
        "cursor": {
          "ref": "9a237dea-5852-43ba-bb0f-8b8e787d4938",
          "length": 243,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "68ca2aab-58a9-402b-bedb-f220b7e87d3a"
        },
        "item": {
          "id": "8fe1d122-28a6-400f-b471-e3f3fa39a600",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7ab78140-6021-4a1a-a06a-ea71e7ec418b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 209,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b11e78-07f6-4c4e-818c-243c7ce0747b",
        "cursor": {
          "ref": "a4870402-f980-47b9-a07b-29f6fd425ad8",
          "length": 243,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e1b92d3e-e965-4e94-be40-edef3dfca291"
        },
        "item": {
          "id": "d9b11e78-07f6-4c4e-818c-243c7ce0747b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d0da804f-3c29-4012-90a9-4b78f3af5aed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 242,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d706e4c2-eed2-42ec-a4fc-39373a13dd59",
        "cursor": {
          "ref": "de2b7051-4c6d-425a-b6c5-ddd5f08b27aa",
          "length": 243,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "305995c6-47ed-4f98-96f5-e1c1a7b72616"
        },
        "item": {
          "id": "d706e4c2-eed2-42ec-a4fc-39373a13dd59",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ae1037f0-2457-47b6-9b69-530e31c4a69a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 301,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51688723-b7b5-48c8-a58a-e3d6e00c6576",
        "cursor": {
          "ref": "cbb310a0-e505-437d-b35f-e8023aa86bc7",
          "length": 243,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "604dbd55-a9fd-4267-bace-d92ce3e2b31f"
        },
        "item": {
          "id": "51688723-b7b5-48c8-a58a-e3d6e00c6576",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "74e79804-a0f3-4efb-ba3e-a8b5602bac0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 284,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "836173cd-14e5-4c81-b47a-e13fb54040c2",
        "cursor": {
          "ref": "9526c0dd-942c-402f-8897-bc09abc2fc4e",
          "length": 243,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "0f7138bd-31cd-4966-881b-c7a7190e3d71"
        },
        "item": {
          "id": "836173cd-14e5-4c81-b47a-e13fb54040c2",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "97db3842-fd37-4770-a19d-cb4a182f1084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 315,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23fd8f50-8f12-4005-990b-3c0f87a3259c",
        "cursor": {
          "ref": "888b7607-7d23-40ac-ab32-ee7fdac3a2df",
          "length": 243,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "be6a53f3-49c0-4163-99ea-4fd592a644a9"
        },
        "item": {
          "id": "23fd8f50-8f12-4005-990b-3c0f87a3259c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "93207b79-1f86-407f-8bd5-eaa8b1fb25f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1491,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9048fff4-5c90-4bff-a421-64807f23c0ca",
        "cursor": {
          "ref": "eab11af6-208a-4c8a-b713-b8ce89998b63",
          "length": 243,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9d63b3f4-b1b2-4343-b020-621fac27c983"
        },
        "item": {
          "id": "9048fff4-5c90-4bff-a421-64807f23c0ca",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c2537afb-fa17-41b4-8fb0-e0832ace7f0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 530,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be60355b-efaf-49c9-b56d-8192f767bb0a",
        "cursor": {
          "ref": "fbee93b7-158b-4e2d-8125-37390d14111f",
          "length": 243,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c037cc30-78bf-4d65-b3a3-fb813faf9a57"
        },
        "item": {
          "id": "be60355b-efaf-49c9-b56d-8192f767bb0a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7e754cad-4bf0-4573-9a10-ee1051061372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2092,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba22b02-1085-4a6d-bbd6-eb6f38a8f996",
        "cursor": {
          "ref": "9d00a18e-e110-46d7-95d8-41d7e8ccbcbc",
          "length": 243,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "fd40383c-5b41-4b9b-a052-f2418cb938b7"
        },
        "item": {
          "id": "1ba22b02-1085-4a6d-bbd6-eb6f38a8f996",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "77540c31-399f-4d90-84fa-ff3a61fa5853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 418,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "868fd0b6-e3bb-441f-924d-2b650411a8bd",
        "cursor": {
          "ref": "e08bf622-bc3b-4168-93f2-f238b0245717",
          "length": 243,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "1b6804e0-da92-490f-8657-1f57c7e25440"
        },
        "item": {
          "id": "868fd0b6-e3bb-441f-924d-2b650411a8bd",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "dc82bb18-eb30-4655-b55b-4d78c7ca878d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 393,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c78fbac2-2d27-4401-b378-791c8d2f0298",
        "cursor": {
          "ref": "1b517731-e08d-41e2-9bca-d53be5859ebb",
          "length": 243,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "7e742977-afbf-4272-a503-f25b165e7e4a"
        },
        "item": {
          "id": "c78fbac2-2d27-4401-b378-791c8d2f0298",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "90845092-3c73-4c07-b350-a200ca4f8e26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1903,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ddde31-6efd-4b6c-8561-4e5227438c61",
        "cursor": {
          "ref": "cb0dc57b-2714-4327-a57d-b07e2036e158",
          "length": 243,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a89d3e3a-56a0-45f7-a0e1-561a3619f5c3"
        },
        "item": {
          "id": "b0ddde31-6efd-4b6c-8561-4e5227438c61",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "caf61f1d-5ebf-47ff-9abc-99293ce0d898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e5309cb-9fe8-41a8-87e1-5ede78ad6c6a",
        "cursor": {
          "ref": "9911a40e-095e-432f-abd9-8068bee6fc9b",
          "length": 243,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "d716e5f7-9960-41c6-bb98-88b88917ea75"
        },
        "item": {
          "id": "7e5309cb-9fe8-41a8-87e1-5ede78ad6c6a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1a5bc2d7-e63b-4bca-9687-1b9bcbeab9ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 242,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db9e6b8-f7c3-427c-bc8c-993697875920",
        "cursor": {
          "ref": "ca3ec229-368a-4800-b19c-b39140685ed6",
          "length": 243,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "4f0eb5dc-1687-42c8-a9cb-1177ac4f4011"
        },
        "item": {
          "id": "5db9e6b8-f7c3-427c-bc8c-993697875920",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "8f248706-045f-48c9-bdbe-08cda46604ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 407,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88bba275-242a-4525-96a5-51b052216699",
        "cursor": {
          "ref": "2e387553-4cdc-4660-b33f-6f7fccfbeeba",
          "length": 243,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "0b2ad80b-b353-4824-94e8-728d77365404"
        },
        "item": {
          "id": "88bba275-242a-4525-96a5-51b052216699",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "778ec52a-bdba-4ba7-aca0-1363a0e0310c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 405,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72eb4ce2-faa5-4de9-884b-e61a02b53cc5",
        "cursor": {
          "ref": "2a78cfd1-a634-463c-aac4-c02848135020",
          "length": 243,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "f3c5cd29-00e3-4662-b5b3-71a961cb2f7f"
        },
        "item": {
          "id": "72eb4ce2-faa5-4de9-884b-e61a02b53cc5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "0a564df5-103c-4058-9301-38d604a99c83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 285,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b90ad10-123c-4af8-b6d0-1844b3cb96f3",
        "cursor": {
          "ref": "a39d3928-91e2-48dd-9f9e-eaa05829218e",
          "length": 243,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "8e99e861-7a90-4675-9279-7b0cf0c79232"
        },
        "item": {
          "id": "0b90ad10-123c-4af8-b6d0-1844b3cb96f3",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "58b04142-09b0-4088-96f3-67e896b6213b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c34eb6-73f9-47ea-a583-9c4c96f9f8ba",
        "cursor": {
          "ref": "3b8b4cef-e365-4a95-9e90-96a86c930dc4",
          "length": 243,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4615e464-f1b0-4d33-a715-14b5267e4d5d"
        },
        "item": {
          "id": "e2c34eb6-73f9-47ea-a583-9c4c96f9f8ba",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "64a4d8f9-8678-4ce1-9d9c-525e5dd89c64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0c76ed6-7911-42e1-b7be-41f1743a0ef9",
        "cursor": {
          "ref": "99f59079-471a-4d93-88a2-c46cc6238aa3",
          "length": 243,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "24c8b5e1-5c9e-46e8-9398-b6c2fef411a3"
        },
        "item": {
          "id": "c0c76ed6-7911-42e1-b7be-41f1743a0ef9",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4e444fac-99c8-4d29-9d3c-f6cc42190535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "230b4623-5e46-4bc2-9510-312a0515636f",
        "cursor": {
          "ref": "cac2f963-93af-4efb-86f4-bce3317acb12",
          "length": 243,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "aa057be3-d557-4694-8ac5-ea24b0bd59b9"
        },
        "item": {
          "id": "230b4623-5e46-4bc2-9510-312a0515636f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5df7b9d4-62fd-4028-8467-d4e7e72c3538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 373,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17def70d-1978-4d16-98e6-c62a5dd2b803",
        "cursor": {
          "ref": "6f3bdf19-b9d2-40b4-bdfc-f0a53704d633",
          "length": 243,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "10d22de8-02fb-46c5-bc6a-2d2f8affd87a"
        },
        "item": {
          "id": "17def70d-1978-4d16-98e6-c62a5dd2b803",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "26373df0-3836-4d8b-9c04-69db867c0dc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81a065dd-c4c7-40e0-88b0-cc5ef922a0ff",
        "cursor": {
          "ref": "caf6fe81-6a77-4ccf-8122-f2fbba6fd129",
          "length": 243,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b024e081-8ab4-44eb-8c64-a8e1ccfe1c9d"
        },
        "item": {
          "id": "81a065dd-c4c7-40e0-88b0-cc5ef922a0ff",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "600a55ad-accd-4416-a43f-c9d8fc6012d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "214c361f-b50e-4544-98c8-1ee304a40960",
        "cursor": {
          "ref": "b401848c-ac39-4c40-98b5-86fdb1d09681",
          "length": 243,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b4514806-d8ee-48bf-8c2d-b063c6a6f849"
        },
        "item": {
          "id": "214c361f-b50e-4544-98c8-1ee304a40960",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8d51d8c3-2ea7-4380-b692-1f3d98197186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca8a50f4-83c7-4898-b842-e25dd10445d7",
        "cursor": {
          "ref": "0b37c843-7509-4a00-9df4-ea67282aea24",
          "length": 243,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c0e1ecd6-eefe-4ef6-92c3-ccc6971a2427"
        },
        "item": {
          "id": "ca8a50f4-83c7-4898-b842-e25dd10445d7",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "50a49c6e-3c2f-4e5a-b6f3-75208be9b042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80623be1-c09e-47c5-8867-177ccf1f8c8a",
        "cursor": {
          "ref": "b59b2c5f-4fe5-4316-a9a9-fe810c9aafae",
          "length": 243,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "80a2dfbb-327f-4063-b810-173b50a5ca71"
        },
        "item": {
          "id": "80623be1-c09e-47c5-8867-177ccf1f8c8a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "c85d693d-0633-481a-8e2f-accbfdeb898b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 275,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6077289d-e028-41aa-9b40-7635f41c9501",
        "cursor": {
          "ref": "f06a2ac6-9d96-46e7-9285-12402cec7f35",
          "length": 243,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9e446fe0-25c1-43aa-ab2b-5c352bfa2635"
        },
        "item": {
          "id": "6077289d-e028-41aa-9b40-7635f41c9501",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f25c274c-56e0-4be4-b1bd-58b22330e3c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f131cdb2-4d2a-4d06-853f-98031b551560",
        "cursor": {
          "ref": "847d2649-854a-4dbc-8cdb-512408645c21",
          "length": 243,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "9441e9bc-4b10-4eb8-91da-617b5fb1b135"
        },
        "item": {
          "id": "f131cdb2-4d2a-4d06-853f-98031b551560",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "913b270b-268f-4db5-97f9-851dd8d89a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9d267da-85e6-4673-9dec-3976af4f7730",
        "cursor": {
          "ref": "648fd33c-004d-46be-9476-149873a3269f",
          "length": 243,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "36a09b07-8cbd-494d-948f-5145c05d7362"
        },
        "item": {
          "id": "f9d267da-85e6-4673-9dec-3976af4f7730",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2beeea06-2b91-4b59-bfe7-1666cf59ded5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb77de0-0d09-4d4a-b6e7-8ca6b061e11d",
        "cursor": {
          "ref": "3fa31b73-b9fb-4acd-b360-546e1ae99ebc",
          "length": 243,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c984772c-6fee-47f8-8672-a35d6666000c"
        },
        "item": {
          "id": "9cb77de0-0d09-4d4a-b6e7-8ca6b061e11d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ae2ed363-b874-41b2-825c-358d51f48112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a40a616f-b6b3-47da-8f51-79d189013ca3",
        "cursor": {
          "ref": "cedeeacc-f737-44a9-be43-dda49c309c10",
          "length": 243,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "bd29854e-1056-45e1-bb43-a58349496cd7"
        },
        "item": {
          "id": "a40a616f-b6b3-47da-8f51-79d189013ca3",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "bf661282-d747-4c5f-8309-87a66cf6d940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15fd3a7e-dccb-42b0-aa92-bb831fb1db40",
        "cursor": {
          "ref": "5fcdb74d-51a2-4a16-87ba-78feda73c8af",
          "length": 243,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f145d215-5b72-406d-b3fc-8b6354c76be8"
        },
        "item": {
          "id": "15fd3a7e-dccb-42b0-aa92-bb831fb1db40",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "db0e49cb-900e-45b0-8631-347a899da102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b84c457-a813-42dc-a306-df90274879f1",
        "cursor": {
          "ref": "6d0e3a57-dcee-4c7c-a816-a13b37261033",
          "length": 243,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "79b98293-bf24-470c-9dd8-b7626e99b88b"
        },
        "item": {
          "id": "5b84c457-a813-42dc-a306-df90274879f1",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f5a00aeb-eddd-4549-949f-c804e97fb0b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a74016f2-cef6-463e-8f02-f6719291d1ce",
        "cursor": {
          "ref": "aa534570-bccb-4b28-b3ea-5f6de70b9130",
          "length": 243,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a81d6528-7484-41ce-be7d-8be5eb19707e"
        },
        "item": {
          "id": "a74016f2-cef6-463e-8f02-f6719291d1ce",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "59122e39-adda-4836-b529-241588c16aa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7768a80b-6f63-436d-9754-388c48df6896",
        "cursor": {
          "ref": "e93aa2e1-0ffa-4093-ae3e-4552cd5b4e51",
          "length": 243,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "6a3328c8-ca29-4833-acc9-9baaa52dee85"
        },
        "item": {
          "id": "7768a80b-6f63-436d-9754-388c48df6896",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "672c54d6-fb1b-4d50-85ef-ebfb830fcc00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab9732c-48b9-4b8a-a82d-f60d2e960528",
        "cursor": {
          "ref": "7612d764-b6d0-4659-8971-a0f5e39be5e0",
          "length": 243,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "cd675226-e8bb-4bd4-be4a-f9168790133d"
        },
        "item": {
          "id": "2ab9732c-48b9-4b8a-a82d-f60d2e960528",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "bec78b45-d71a-4061-be63-3efcc64ca553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ef990e-faac-4be4-a558-3717a47b4938",
        "cursor": {
          "ref": "7ea1dbd7-7c9b-460a-b1a1-4afc5c661c53",
          "length": 243,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6d67adbf-d77f-4167-9b8b-91e6b26cc875"
        },
        "item": {
          "id": "a4ef990e-faac-4be4-a558-3717a47b4938",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e22b3689-e0bd-4908-9f37-075025cabddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b637a14c-ef16-4c9c-aee4-b0c8b0afb443",
        "cursor": {
          "ref": "9c841282-6b61-4e43-b612-0bccbe08782c",
          "length": 243,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "50779c3e-342a-4c7c-827e-7d790e9c82d8"
        },
        "item": {
          "id": "b637a14c-ef16-4c9c-aee4-b0c8b0afb443",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "decffebb-9734-4c41-9ea4-14e390370d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1937e9bb-1221-4213-b7d9-58b647e91889",
        "cursor": {
          "ref": "c84b7d26-3e38-4b7d-ad7a-b28a9864d41d",
          "length": 243,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "3e3ffa7a-51c7-4348-9463-089d7c126d9b"
        },
        "item": {
          "id": "1937e9bb-1221-4213-b7d9-58b647e91889",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c035dcf0-8a36-4acd-9bea-ec49902bb39f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10b8c75b-95f0-4d06-ba06-eb654c1cb7df",
        "cursor": {
          "ref": "581ace26-e74b-4dfd-8cf4-9bddbdfb0ff6",
          "length": 243,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "16d5541b-d68a-49c3-8eef-574a6a39456f"
        },
        "item": {
          "id": "10b8c75b-95f0-4d06-ba06-eb654c1cb7df",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3c917fce-7a5e-4c76-affe-9cef4ebe0600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51bf66da-a4df-44fc-9b61-d8dba85668db",
        "cursor": {
          "ref": "d9e0f125-eb83-4ac9-bb6c-af3702876de4",
          "length": 243,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1657dbda-a8a2-4cbd-8bd7-f884512062f4"
        },
        "item": {
          "id": "51bf66da-a4df-44fc-9b61-d8dba85668db",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "bda9ced6-898a-4b67-a487-5292d47882fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536d616c-8293-4450-9ced-ac84864ae01f",
        "cursor": {
          "ref": "23553186-d63b-44c2-bb44-3eda4da2150d",
          "length": 243,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f8479cbe-e1f4-4837-9990-1dbd03f874cf"
        },
        "item": {
          "id": "536d616c-8293-4450-9ced-ac84864ae01f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0fd62b57-0b16-4618-9e39-8a96612a371d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d7fc8ea-1168-4fac-bb3b-966f73d6d466",
        "cursor": {
          "ref": "fbde226d-30e7-426a-b295-8c80d5359c5a",
          "length": 243,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "64d70432-1555-4ded-bbdf-621329727761"
        },
        "item": {
          "id": "1d7fc8ea-1168-4fac-bb3b-966f73d6d466",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7228a922-dbe8-4222-967a-909e5a8708f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f64c6a-b819-4857-af5c-e9200e0d5ca5",
        "cursor": {
          "ref": "38ffa3ac-4d37-4252-99cb-9001e23c4ee7",
          "length": 243,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "244f3735-958e-451c-ac21-463e2d01afe0"
        },
        "item": {
          "id": "d1f64c6a-b819-4857-af5c-e9200e0d5ca5",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "c8b1abba-b5d4-46e2-96e4-60adf48dc700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5dfbc66-f012-4a11-9da5-1a8a0be43998",
        "cursor": {
          "ref": "fb7e2972-fa9b-4ea3-9bb4-1603cd18dbf7",
          "length": 243,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6a01a17c-a525-404f-9b2e-89708dce3a42"
        },
        "item": {
          "id": "d5dfbc66-f012-4a11-9da5-1a8a0be43998",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1b32c248-dff4-4ff2-83b8-f9b3a1332a65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d79262-0bd7-4f7b-a4f2-e10673ec94d0",
        "cursor": {
          "ref": "3a273b0d-bdcb-4b71-99b8-20ff6a387e33",
          "length": 243,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b035879b-0929-42fb-adb3-e1d176582a64"
        },
        "item": {
          "id": "04d79262-0bd7-4f7b-a4f2-e10673ec94d0",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c3a56580-fb68-4e6c-ba38-439854a8c472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffc5e675-a308-40ab-a6ff-d07a8886508d",
        "cursor": {
          "ref": "fdf0393b-eda9-4f93-ba0b-a3ad065e8770",
          "length": 243,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "43fc619f-b6ca-43c1-92d2-3b2a26d1aea7"
        },
        "item": {
          "id": "ffc5e675-a308-40ab-a6ff-d07a8886508d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "3ce649c9-9f30-40fe-92bd-8c4e0be9d8a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55fd2684-6b0d-4b2d-bba3-e9c48eae214f",
        "cursor": {
          "ref": "fddda192-54c9-47f6-8101-eff397b6c4a2",
          "length": 243,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e9ed4cab-ec8c-4f20-bb23-3deac3aa19a1"
        },
        "item": {
          "id": "55fd2684-6b0d-4b2d-bba3-e9c48eae214f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "0b20b7de-046a-4c8e-bc58-29bd837ab9ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38de6665-7485-4dbe-b35d-58f3327cc4a8",
        "cursor": {
          "ref": "a0145135-9538-49a1-9d84-1b3fc68d64a3",
          "length": 243,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6d46fa5f-5061-4605-8ef8-22de2b5db5bb"
        },
        "item": {
          "id": "38de6665-7485-4dbe-b35d-58f3327cc4a8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e3ab1c7f-66f8-48a0-bde8-a006adb796c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12fc79e2-8ca4-489c-a689-a91b401c8469",
        "cursor": {
          "ref": "27f1179f-9b36-4fb9-ac07-d324bc48ba26",
          "length": 243,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "af1b9192-c351-456e-9527-c21af301d603"
        },
        "item": {
          "id": "12fc79e2-8ca4-489c-a689-a91b401c8469",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "10db438d-a8a7-42c9-aa5e-15a06c8da497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d5ced79-8246-4dc5-9715-7005dc447560",
        "cursor": {
          "ref": "ed26fb9f-a3b1-4fa0-bf8e-5bc6f799bd78",
          "length": 243,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "01a480e7-0b68-4dc9-ba25-a6cf1800f94b"
        },
        "item": {
          "id": "9d5ced79-8246-4dc5-9715-7005dc447560",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f3576c0a-abb4-4233-94f3-2d6c38d1ca1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3513887-1649-4ba5-9802-2730e59b2800",
        "cursor": {
          "ref": "77e89299-7164-472b-8acc-80d534021281",
          "length": 243,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a7888e0f-f569-4b46-a5e2-8486f31567ab"
        },
        "item": {
          "id": "e3513887-1649-4ba5-9802-2730e59b2800",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4df145a1-40d7-4a58-b638-8d0960dc34bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9279bfec-cc26-48a8-9079-218c8e029e8e",
        "cursor": {
          "ref": "ad35b171-4622-4f8e-bea0-cd87b54f10c4",
          "length": 243,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0bfda7fb-dfd2-4891-96d2-c15d93f6020b"
        },
        "item": {
          "id": "9279bfec-cc26-48a8-9079-218c8e029e8e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f8cd120f-ab86-42f7-850d-8070323bb91b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a08c0b7-925d-4803-8149-409797d3bddc",
        "cursor": {
          "ref": "28f35870-a9ba-4edc-a7b6-bcb346f50e83",
          "length": 243,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "04c123f1-d5b4-4960-888b-a6475a4db7e8"
        },
        "item": {
          "id": "3a08c0b7-925d-4803-8149-409797d3bddc",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a5f86881-0d3d-4fac-a687-da8e3254d963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9aa03b1-9de8-41b8-9b56-a4a6cb23b683",
        "cursor": {
          "ref": "ee5a4320-8207-474c-ac66-ab3992fbbb20",
          "length": 243,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1945dee4-082d-4489-9ad0-860930be0cd2"
        },
        "item": {
          "id": "f9aa03b1-9de8-41b8-9b56-a4a6cb23b683",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1ddbd375-4d42-4d17-b3ad-05bbf6708f56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9312d284-c7c1-4aee-b37f-15dd474e8693",
        "cursor": {
          "ref": "11e8af5e-05e4-469b-916a-a395dc83ffaa",
          "length": 243,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a86d71cd-3d8a-4fb8-907a-2762324df831"
        },
        "item": {
          "id": "9312d284-c7c1-4aee-b37f-15dd474e8693",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "fc05b211-d30b-4411-a115-1444e762813a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b969e3b7-da8b-44af-85b7-cbe99431a834",
        "cursor": {
          "ref": "917b4e76-cb2b-4a91-8873-2cec4f387f99",
          "length": 243,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "defc463a-0d34-4a48-acf0-2a3e0c22f987"
        },
        "item": {
          "id": "b969e3b7-da8b-44af-85b7-cbe99431a834",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c2897f95-a7ef-4f6d-95d8-a855ce40e870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34d8c93c-c5c3-4cbd-923b-197c6edd6794",
        "cursor": {
          "ref": "8a3c031b-5b0e-4082-9d42-b33b11705962",
          "length": 243,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4f38c1b4-ecf3-42e6-becc-62a0c06bc34e"
        },
        "item": {
          "id": "34d8c93c-c5c3-4cbd-923b-197c6edd6794",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "16501dac-971f-4441-8b8e-38d8766b1bde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7861c0-9103-4a5c-89fd-8eeb34886829",
        "cursor": {
          "ref": "e2851b65-91ec-4d98-9e54-03a00b01b6bb",
          "length": 243,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e3aaedf4-d5b2-47df-9b03-4c329c428276"
        },
        "item": {
          "id": "6a7861c0-9103-4a5c-89fd-8eeb34886829",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "cabb8fc3-d6bb-43d7-a039-fa225d25e5bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4960e19-466f-4024-9b16-c042b91667c7",
        "cursor": {
          "ref": "1c1ba0e6-a3d7-463d-8b95-8b633014c3ec",
          "length": 243,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e2a96847-02a7-4b17-8957-1a3ca0970874"
        },
        "item": {
          "id": "a4960e19-466f-4024-9b16-c042b91667c7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b6aa5768-73ab-4bc0-b94f-096908c807df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ebd44d8-31aa-442e-a3f3-09d4e3b3865d",
        "cursor": {
          "ref": "7d0581e2-6596-4a3e-8234-e28ef53be7a0",
          "length": 243,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "5c13b8b3-16b8-49f6-b439-6a638e0fe1b7"
        },
        "item": {
          "id": "8ebd44d8-31aa-442e-a3f3-09d4e3b3865d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7f8831ef-4c4a-4b76-b401-d5a7a2da3e93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805641a2-9ba1-48d7-9549-a3e590dcce87",
        "cursor": {
          "ref": "98dc4f7e-d92a-49ac-b66d-f6f1803ca5b6",
          "length": 243,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "fa693df8-b0cd-47df-8f30-3b2570dcda16"
        },
        "item": {
          "id": "805641a2-9ba1-48d7-9549-a3e590dcce87",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1958f51b-5b5f-4698-801a-8bbb7d23c6a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc2279c-33de-4003-bb1c-40ebc5ff2500",
        "cursor": {
          "ref": "713446ec-1832-4113-b169-8d5b6af2cf5b",
          "length": 243,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1972866a-ec22-4ba3-affc-4f045822a22b"
        },
        "item": {
          "id": "ebc2279c-33de-4003-bb1c-40ebc5ff2500",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "2279201f-2448-4016-9f7f-03cefedd58bf",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 19,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75091d12-dfcd-4b6a-99e9-3ddf40c8df3b",
        "cursor": {
          "ref": "b9afa8fa-277b-4eca-b8e6-04a7b40416b2",
          "length": 243,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "316a3cfc-adce-4b9f-ad0e-34df9afe2c5f"
        },
        "item": {
          "id": "75091d12-dfcd-4b6a-99e9-3ddf40c8df3b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "fcf9bbd0-a7cb-45fa-bc8e-51943f60bbba",
          "status": "OK",
          "code": 200,
          "responseTime": 1998,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b77a1be0-22bf-44ac-b1d9-1df961723df3",
        "cursor": {
          "ref": "caabccc9-d87f-43b3-867d-865e03750a96",
          "length": 243,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c48823e9-ab53-45d3-bf25-0aba4d58970a"
        },
        "item": {
          "id": "b77a1be0-22bf-44ac-b1d9-1df961723df3",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "b312661e-fc40-48a9-b0cd-77f8ca15a43b",
          "status": "OK",
          "code": 200,
          "responseTime": 730,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e644bd-cfcc-4096-a877-141077c9111a",
        "cursor": {
          "ref": "6ac721a8-85af-4904-a1a1-be423a912bed",
          "length": 243,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "4d5da040-d432-4338-9a0e-550add822f55"
        },
        "item": {
          "id": "23e644bd-cfcc-4096-a877-141077c9111a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "297e9e24-b223-4a77-ae7a-084e7ef1bc58",
          "status": "OK",
          "code": 200,
          "responseTime": 1886,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065c8eae-97b9-441d-be1e-dcf1eeebc2a8",
        "cursor": {
          "ref": "9aefc5e7-8d68-4cf0-aa18-591ae69ea54e",
          "length": 243,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5c513bf5-93ae-4e07-b6cf-80c2548f01aa"
        },
        "item": {
          "id": "065c8eae-97b9-441d-be1e-dcf1eeebc2a8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3f3e0240-6271-4edf-8727-5d39218888b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065c8eae-97b9-441d-be1e-dcf1eeebc2a8",
        "cursor": {
          "ref": "9aefc5e7-8d68-4cf0-aa18-591ae69ea54e",
          "length": 243,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5c513bf5-93ae-4e07-b6cf-80c2548f01aa"
        },
        "item": {
          "id": "065c8eae-97b9-441d-be1e-dcf1eeebc2a8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3f3e0240-6271-4edf-8727-5d39218888b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065c8eae-97b9-441d-be1e-dcf1eeebc2a8",
        "cursor": {
          "ref": "9aefc5e7-8d68-4cf0-aa18-591ae69ea54e",
          "length": 243,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5c513bf5-93ae-4e07-b6cf-80c2548f01aa"
        },
        "item": {
          "id": "065c8eae-97b9-441d-be1e-dcf1eeebc2a8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3f3e0240-6271-4edf-8727-5d39218888b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce0e7503-1d73-48bc-8e58-17fdc2317f83",
        "cursor": {
          "ref": "5b8d2f57-ac6e-47a9-a6ee-079ac5e4d8d9",
          "length": 243,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b2644133-00f7-4116-b784-f14a647282ef"
        },
        "item": {
          "id": "ce0e7503-1d73-48bc-8e58-17fdc2317f83",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "cf1b6c78-0011-4b8b-a120-9d9331ddf970",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 129,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bcb5c5d-53f9-49bd-a558-a0d2c038cf98",
        "cursor": {
          "ref": "b026260a-2bc9-4500-85fa-71e03c684dad",
          "length": 243,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "1792638a-3985-4f0a-8f5f-472e759e4bca"
        },
        "item": {
          "id": "5bcb5c5d-53f9-49bd-a558-a0d2c038cf98",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d410cce9-b5f1-4795-a069-b7b95ca6d560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "5bcb5c5d-53f9-49bd-a558-a0d2c038cf98",
        "cursor": {
          "ref": "b026260a-2bc9-4500-85fa-71e03c684dad",
          "length": 243,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "1792638a-3985-4f0a-8f5f-472e759e4bca"
        },
        "item": {
          "id": "5bcb5c5d-53f9-49bd-a558-a0d2c038cf98",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d410cce9-b5f1-4795-a069-b7b95ca6d560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "8bd3b265-d1dd-4c56-a187-576ac4de0605",
        "cursor": {
          "ref": "0c748017-5959-4f9a-ba29-cf9be8322c5a",
          "length": 243,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "8b73c435-78ef-435f-a069-a50d4e666d68"
        },
        "item": {
          "id": "8bd3b265-d1dd-4c56-a187-576ac4de0605",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "a7a05a2f-0f6f-4c69-894a-82cc64b039bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "d9fca988-c044-4dd9-a0e9-5bef70ab2e2a",
        "cursor": {
          "ref": "65721f21-f553-4e79-a60a-edafa95ce5ae",
          "length": 243,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "4edffc64-e91d-47ff-979b-412e5683ba92"
        },
        "item": {
          "id": "d9fca988-c044-4dd9-a0e9-5bef70ab2e2a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "004d0c4c-ea9e-4583-8c30-810fbc6f48a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9fca988-c044-4dd9-a0e9-5bef70ab2e2a",
        "cursor": {
          "ref": "65721f21-f553-4e79-a60a-edafa95ce5ae",
          "length": 243,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "4edffc64-e91d-47ff-979b-412e5683ba92"
        },
        "item": {
          "id": "d9fca988-c044-4dd9-a0e9-5bef70ab2e2a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "004d0c4c-ea9e-4583-8c30-810fbc6f48a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7370c65d-e7ae-4c74-a7bd-7d2cbd7ce84d",
        "cursor": {
          "ref": "697f29ae-33f2-4d32-8b7d-653b407b9734",
          "length": 243,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8c6966f8-39d8-45eb-a9b9-b5cacd6b821c"
        },
        "item": {
          "id": "7370c65d-e7ae-4c74-a7bd-7d2cbd7ce84d",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "9548a31f-26b9-4a56-b4d4-11cf6b052b73",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 26,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}