{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f95af5f9-daf3-4eba-9320-690c316bd87f",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4185d82c-02a9-419b-b0d3-921f61d82482",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "41183069-2382-4252-a6c0-36a6373a9b9a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0d509d62-8a98-4a5c-b3ab-807fbdc6e054"
                }
              }
            ]
          },
          {
            "id": "c7f0e00c-7466-434c-953c-2b62448ae820",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "04aae37d-01b8-4619-baf1-07cc2c3496ac",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "db36d8db-5413-48f1-89a0-67970e0d027a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5f90fc97-14ec-492d-a647-3002726c3bd7",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9b0c2967-c1bf-4897-9554-270ff3db4b21",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8cada2ab-fc68-49f7-b81c-8ca2c003e594",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1024ad58-3e6c-4bcd-857f-8245390c11d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f935d9cb-efd3-4900-8238-547d19e71dd3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "91659cfc-298a-4036-9fe4-d93b9ba56096",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "08d53328-2f99-4fbe-aa88-3c8bd88664d4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c4913329-e24b-4c04-99ff-8b17f7b08447",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c4f2c66a-e82b-4956-922b-7dbf222bc27a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "00f220dc-91f3-4576-99d2-89fd4673d67f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "61eb7b59-85da-4358-9565-6a3697f98717"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "298ef8cc-4e49-492e-8431-2b4d5a0c873e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4139559f-277e-4881-a843-a428763908f0"
            }
          }
        ]
      },
      {
        "id": "e389e6a6-fd63-47b2-bc00-c3aef7bc4ca7",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2e8b2b36-d18c-4f17-ba8b-d8c5d78bcd25",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8e3f7d71-d985-47e8-ad9b-47444a6a1aea",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ca54e177-8595-41c9-a54f-76c136e408b9",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d860e66-b4ad-4f86-8f87-c529ed5cf727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a31ab4c-64cd-41f6-8b20-d85403e85614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f53fb2-77b8-4bb8-9c03-3c2cb9ab5cb3",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "650c9406-c5d2-438d-8bcf-3a67f00f7dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a22a2927-56f1-4223-b3c0-51aa909d6bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9089943e-66e4-445f-93ac-fabdb839aeec",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce90c85a-9392-4595-b79e-1df525744580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed8b4932-5541-422e-9f50-c4b6b0956371"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "95dcc8d0-f245-4aae-8684-695761dc2506",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "83dd75d9-561d-49f1-bded-1d58358848c9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f541505c-20d8-4db0-98ad-db5ca0e5526b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e62105d9-f67a-4d14-a92a-672f6551dc92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6bf20b9-0e33-4194-b619-85ba1ea864f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a60d9c1-e7d8-4242-b14e-bd125a6dff2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc54a2d-ef5c-49fc-bf6d-9361b11088cb",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21bbe95a-be8d-49a8-ab36-ffa1d1f74594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5848eef4-5e8c-4f9a-917e-355e7e4279c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c7a0b6-c581-40ff-80ed-024051d87ba6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "14dbaf5c-c7ae-4785-b841-d58c1b3e00b3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8d4af149-aa71-40c7-a6df-d9ac3e06c947",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dc53a743-f655-47c8-8f3b-d2a9f1a55bd4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5548e9ec-4392-4f59-a6b0-4b7990f74684",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "43ef3c68-1e36-4d92-82ac-71e9d5244619"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "02235f07-e051-4119-b01c-c21eeaeb2361",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "29235659-6d1d-479d-9aa4-4bff1ae2d10b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2369083a-2796-4f74-a332-57d9de813a34",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ac8b7ba9-79b2-4ee7-b794-36c939338d20"
            }
          }
        ]
      },
      {
        "id": "0bf175dc-09da-4476-b79f-a86c93dff0b5",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f94187a3-20b7-4159-b5f5-5e332f2a22b7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5f15719f-2705-4223-97ae-9470eb79ee68",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "81df63a1-cba6-4543-bdef-ebd0364f13f1",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "993cd4a8-38d1-4fe2-abae-71e20afff315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea6e6076-d266-4226-bb98-27b9c26853ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba0b735-757d-4255-9348-1c4357df84e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e00e98a5-17ec-428b-924c-089802aef42d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d91e644f-5042-4db5-9d82-b9e8ab143c5c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "907ef76d-07c3-49e1-be86-2d3da021e7c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66be7bb8-05af-4e44-8771-0d3c22514b7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78999bc6-5dc1-47f1-bdf1-8a12f1bcf812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fff92c91-a416-4ce2-aa17-b92864a11a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19474b90-edc0-45ae-960e-ff7631491197",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d4d1b45-0c03-4245-9566-0935e9f0fb4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "073719a6-3c78-4f9f-a353-a07e5fdab97b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "001d2c28-f820-451e-a5cf-b3d4eb79852b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f216d0ec-8667-4bac-adb8-e7f64d351679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad91835e-aa85-4417-9e32-7b1804751c53",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00aced37-e3fa-409f-8edb-497819a50729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2f5fcf8-9895-42a0-bb9d-cda625b23da8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6143bdbd-fbeb-4780-8ec1-6fe83cef3096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "901faa40-658c-404d-a556-e522a0fa6545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608f4e4f-2fe0-48f9-9ad5-ee2039f4cdef",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9abacc06-276e-4221-8ab3-b9da37a0ca01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fd57c8a-004d-46cf-b85b-4e1c1edfb9ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b583083c-dfdc-4966-97fb-e5047dc06086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29e9bb20-08a9-4c5c-ad9e-244ecf0d4769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d23037f-96e6-4113-984f-dec591b38114",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf938a37-dde5-41fb-81dc-cd0a94ed7c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "562f4039-56d9-4776-b061-da010a309505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "095323e0-b7be-4405-86f6-ad2c3914e254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2d752d4-458b-49c2-a38e-93ff2f96a107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b3c2d26-680d-43fd-8140-4584a764345e",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3dcf0e5-a49e-48a2-b64d-2f8a7eb9cdcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "674b5b80-4e1f-4667-bf25-a088b0c0c950"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12687c92-1abe-45ba-990c-0332246d4333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83bcc226-73f7-47cf-964f-a5197f2222a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6dbff8-a9c1-4c2d-9987-90d7abe234c3",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcca39ac-3ddf-40cb-aa69-fe9e0bcffec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b87b9a80-0742-4a70-8404-253e2d387d67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851a557f-f6b6-4c06-8902-fde9c0267c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e507aa31-6301-4cd1-8b83-2e9fac8cb51d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317e4602-ba68-46e2-b5e6-a35bd578587f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d659fc-069d-421e-b49a-feb7101feef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bb0e0cb-4ad3-4fb9-b646-df781ce0db5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547f5619-0f31-499e-9153-5e6e8b08c9d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7dc017b8-849c-44f7-bf8c-6833e226f509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "086a96e4-7ddb-4b09-9931-d0eb55519dbc",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b320bc5-e1a8-463a-badf-1968a346137e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c18c712f-9f19-4fa4-8237-1ee7b2e65bbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a152ea11-fd0a-414a-b9b3-4ea10e54715f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "238c96e2-5f55-4a51-aae0-773e90ed0362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52e31728-b3ec-4ff7-a01e-92eb445e0149",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da0eec6-1033-417f-b971-59a8aa455ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec395f6b-cb16-4ebd-b729-e99627e575d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f43dbff-3e11-4ead-9712-4d0f09aeb52e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f423c4aa-a79a-44bf-a118-be3cb6a036ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1dd5418-2b9e-4aaf-8040-4de94ed754a6",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f43c7a-d489-40cf-9b74-4e7192cea794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8209058f-c1f1-4e79-af53-5713271ce235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9693c77-7c23-4ee1-aa82-fb9116c9f053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98e7aa79-552e-4e16-a138-dc19136eb784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f20cf93-2c48-473d-980b-2036698b5baa",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffac13df-2da5-4858-bb6b-a8f1ff6f483b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bfc1e50-72d1-4ef8-9dbd-592f05a84229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfabaf5c-feeb-4543-b9aa-84b3cedd3ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab0c0bdc-fb1f-44de-87e1-a05dbe652a68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e1e92f-6800-4eb3-8c5c-e353b80c4a7a",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8195026b-c1e0-429b-95e1-fe47d17a16cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dcb0001-4e94-4fc3-98b2-c87bfd2d83ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c86a6f05-2b43-4f1a-b18d-bc0dff71a85e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "74bdc44d-ef32-4bce-841e-f69d5b42aaa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc323258-5471-4f13-bf0d-463bfdd1a334",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ac0d23-1d3b-46ab-8071-addf1c57a909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85e7131b-b220-470b-867d-fdd7fd265081"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a217a2b6-ac1a-4b51-99a1-23a811b76a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8124a01-cbc4-49c8-8e8b-480a2369717d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8407911f-6a87-4edc-bb5c-998ac8b544e2",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d89f55f-0038-4c98-803c-6b965d1dd284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cecd844-edb0-415b-a35c-de44407eaa43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0917039d-2e0a-490e-b50c-2ad24888a701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc48ba40-8d48-451e-ba6c-3895dd09c5e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64495646-9704-4162-a921-dd5782a570a5",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8149e4ec-0245-45e4-8a63-25f68563c187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10b2ba95-a6e4-40bb-acac-b461fbb3753f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be751f4-c0dd-4a9b-a7cd-b93449c0da64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a9ca2b6-7af3-455b-9ff0-e799601bfb4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a55c7303-7785-4a6d-b397-c7db29303e62",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0321965-9c92-422c-bad6-054ec17d5a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb72c8f-a525-47e8-8da4-5a8915576783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81b4eee3-c217-4827-be2e-82654c687164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "770673a7-0b40-4cc1-8e0c-468820fa8758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1503fa0b-4ecc-4604-a136-f3365f37242f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c7a8001-392a-44b0-ba90-db68462e8837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ad281d-eb04-4b12-bfc7-2f51cd69934c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54ea9190-c228-414e-ba2f-2f0df585b211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e02064d4-e9e7-4f57-839a-7a750330d3c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f54ce6f-813e-4bc3-8309-a7a474fcaf24",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b8048e-20db-4af7-a6bb-cfe7bc2feca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a8c174c-8eda-49ad-a4c6-5d1374a72a41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de81298-8986-46ef-8ed0-464ca4eb463f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b16f82c-a317-45b8-9e23-9c2ce7473c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb104b3-91b1-47da-9a25-a663e14066ff",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccdfc7be-e201-40a6-bc1b-763e948558aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef009c90-0050-4642-a80c-820ed226ea54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eef9b77-ce68-4ffe-a93d-f1f26cec7031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "15ee76b7-bfd8-426d-ba1b-756917df4865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5acfcae9-4927-4433-9926-0f39618e5244",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7264324c-c615-45e5-b9ed-7195eb61e135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02d75d10-6767-4e48-bc2a-a420b33ff209"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce1f9a3f-9916-46e5-9619-41ebdc2600b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ffb0cf9-ed45-40bf-a725-862a0cb4ec1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bfaa547-0789-43eb-a532-1240dc39fa1c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe485cd-f967-4663-a4f7-a13ccbafd917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fbda11e-751e-458b-93f4-4d344cdf1b3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10282a9-edce-4d62-824c-e35ac8e8a767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e557858-61df-4ec7-8dbc-0509cc5575df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa06c491-011b-4d28-be22-0f539106cbb5",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c04ae8f1-7c48-4b87-ab75-68d9bbf37932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca6600c1-3364-4532-902d-b5a1ef4b024b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb2ee30c-6866-4d13-84af-a11c7c2d24c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f13434c-f36c-47a1-a74a-3e40f0b90036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9797e6d2-3711-4ec6-8c76-f77892690230",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "560a06db-1aec-40af-80bc-54c3bed3ec56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c805f9c-9a15-42d5-ac1d-54f840fdfeea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cdf5c6c-8d17-4a8d-9aa5-8e306ef87201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "367c71b3-56d6-4ba2-bb93-f38f7932428b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb84b241-5425-4e21-b253-8cb8894f31a5",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e5e349-e728-4fbe-b3af-8eda86f642b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb8933a2-6c51-4808-a9f4-1dcd24f3f0f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c861b4a-a2d4-4d04-bb2b-f54581e15a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf25b533-7da1-4728-b571-a4e7f61a4408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d91d269f-abd8-4581-ab30-454807c8e5ea",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b8e9970-62e1-4fd7-94ee-0c8e402d2e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdd782df-fc65-4e34-a0ff-1314d8ed07aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0461c83-7ed3-4645-8d52-94e010e7e8e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd42e59b-f305-49b3-b373-c7129cf6d56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0dda280-5c58-4503-b4c8-671e806b787c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12c72484-9213-442d-8761-8105ef853b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f4b96e3-4bf2-417a-8e94-445c53a0f49e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "583ce9aa-1f28-4366-876a-e39545dade1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb1f59ce-9ce6-44d0-80c5-107e66df6bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f0095b2-d886-4bc4-9dcf-237fbd3a31af",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d8256b-dc4e-4aac-865b-8a8150c36e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2ca2e73-290e-4f22-80df-ee90a8ae7ecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d019c6d5-c9e2-4f46-a308-7aae579640c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "66cab388-9b05-4272-9e26-224058e96d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88bf8464-61b2-49f2-9d88-36b28f08f25b",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe480f4-b7ef-4598-afd9-7b998ae9ccf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a08a669-4450-4aae-ba0f-89cd04c26acc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a14bde2e-768b-4189-bdbc-e6dd18e54593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "66521371-2bf0-4deb-80cc-c27146b7d17c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee3282b-12d0-4c9a-a2c6-0f7d51690913",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f522be-e328-46c1-aa00-5efd012aa32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae0fa3a4-0594-4b42-aadc-cb47aa68e041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e5037b1-bbf1-40e5-b632-2979b3ccf622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e009432-e0c3-48dc-87c0-cf4c10842005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae0f158-2da2-4917-b1bf-262df2f437cb",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c43fba38-78df-4ecd-9a1d-c6d3123fe0b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce8b7c0-756b-4c14-a857-cb92b13c40df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d7d1df-cbe4-41c8-bb90-1945b43e2767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "caade813-18cc-4eca-8e7a-21c24133957c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a8bf61-e7e7-4010-817a-d24a160b5009",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33699951-26c0-4224-9574-15dccd16edb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ae01ac5-e639-4a76-ade1-e15e21ddc1cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69c3386c-5353-4dc9-9d9a-c97d216f5dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "219e01f2-8e4e-4b27-b8ec-6dc5afc350e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01097f42-a435-4c2c-907b-f9233eda5622",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a51aa8-346e-4cb8-9b86-768694292fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcf69571-9bcf-4c32-b079-fc71897d1823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6fca57e-69d1-4917-a04b-945025ed659b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8eeab476-58c6-4315-8d6f-d0855cc44b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd204de7-502d-47fa-a109-fc9adbba90e8",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9536b88-c997-4f49-839c-403ce93a4edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d3ea959-91f0-4e68-b099-65e9e22dd500"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f63c4815-6c8a-4dd6-bdc0-94d20d173644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e42d4f9b-fbd8-4056-b68c-14deaf500b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ec85c0-c40b-4305-be0c-1ecad2cdbf94",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e60bc268-2e9b-477f-8d9e-1f2533951215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efb86075-a85d-4165-8fcd-fd29dbdb90fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb078f4-7e6c-4890-a0f3-a5dbe23e9b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "650ef35d-608a-4ea0-a42d-68e7cc5cb842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed68e381-7f93-4c08-9b1b-3049698572da",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b23383-b5f9-49da-80db-719dea6ed04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae599a21-e924-404b-85cd-1d30fe0ac465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c25f891-8def-4b62-920a-b242771d2a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0652df54-67b0-4b00-aba9-899ee41117de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "189486e3-a4d7-4f8e-917a-c4a19bfd9fac",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4cdfc8b-0727-45b7-9e29-3f3528999e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2639923a-1391-491a-b242-3c13a4e9739b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13e9d048-346a-4f3e-ac4e-2774167143d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "676947e0-49a7-4859-bed7-6689d80217bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7622be43-8c29-4f6d-b9ca-ed08ea815cb4",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec83947a-9f58-4790-8b01-67ba44f388d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f73b463d-11e5-4604-8937-477dea465ff6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be72a4ac-2436-4ef1-aea7-4ebcbdeb163f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "44ad37e7-ca16-4f43-b817-98822c286ff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1a2db5a-0959-4bdc-8873-5af31ce7b997",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa1f270-9c69-455c-8d62-e10bcc8388a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb330d4e-cf9c-4290-9386-4b9cd83d7d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec7b6b7-da92-4d8c-9bff-53d4af845c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "19458034-39bc-4d0a-b408-4e0784f2c046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c1a4d0-c970-46e6-804a-6e1193a7c47a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db06845d-e338-4faa-b2e7-685b2d2e5bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b8ff217-4801-430b-90b6-3639ad552564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5843f746-5b55-4f62-9d3f-d268a97f1197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d54270c-1429-41fc-9e0f-ece920294aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "860521e7-4646-4b80-813d-d5c6738b9c52",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf7e640-1ff9-43d3-98e3-02e6be890ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cc0b54f-1ab3-46e8-92ee-c2752b5b8762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f56284cd-616a-4e74-b8dd-218f6868ee88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c899a77-c485-435f-9ea6-54603d7409f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b51088b5-2f30-4f74-bada-8900c1a24989",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d96a1df1-ebab-4806-a815-cd536bc5c7a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "929502f3-0473-467b-ab91-4cf464c77671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b6c8e01-a400-4e53-a6dc-9c4be5619bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8deefed-a161-4b35-9bb3-ddc40977418e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee8d60a-b553-4b6f-a2a8-013a25c71c7c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b1e64a6-2cea-46aa-80c5-90e412f499a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5c82dc0-46a5-4a19-8e83-476cc79783b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb4466d-4910-4643-9d86-4dd529c47000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5c57d490-1124-4f50-a6c2-4bab8cc97985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2029b82-3fc2-433c-bf41-fc58a4a7b38d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3faf2a70-8c0a-4560-9a0d-e7702f9200d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7730c2b5-1af7-44c4-a9dc-e099689bb2c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "debd5932-80a5-4149-9056-6d35e0410932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "52a72704-abb4-4211-be23-401d46f72a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a2f0ff-e006-48c9-ab3e-ecc7007f13fb",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e9dae1e-ba5e-45de-a201-83c5343c3fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1582147-fd1e-4fc4-985d-8a50b52f382d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c718be3a-c38e-4fd0-bedd-67dc30158d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b323f0e-f423-4473-9154-ba131be484e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae534bc6-b62e-489d-a190-323f75473703",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b81f17d-e321-487e-87ad-6ae587982ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "841ece51-d735-4a1b-8243-b5d4af7f2f65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a412352-439b-41cc-8cf2-c38e569089ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b93cb42f-4846-49dd-8f1b-9f68ccb4ad98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb1138a0-500a-4708-9165-96d43d1ceb48",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef5f440-6be8-4031-a989-b498339db57a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "061553c9-cb4e-4682-a33e-7170cac977b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0b07bf-54b8-4274-bc4d-a5a3904f2398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c54a9cb-252f-4050-b7af-c283a5467f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe4a78c-5544-438b-b078-4d8957c377d2",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa74cd1-1a9e-433a-8c31-539893898c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d037949-c057-4f8d-b104-953c19b7eb46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3406cf47-7e63-4d3b-82a2-8628e4c021b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc28f66b-6928-4baf-a0d5-e8f016679fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872a3b62-22cf-4ff2-9a71-6963d655ec22",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed30e38-d270-4b48-a800-b39cee96bda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "233bb135-f5be-4bfc-90b8-c428ddd23f04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f4555bb-02aa-4575-b2e6-46d3299a403b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7198daf-f476-4f16-9fb6-91faf6fadbe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193c2147-ab31-4cc7-b758-f897b6a2fef6",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaccd787-4031-4a1a-9c32-b84013b37a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8968bdf7-3742-4487-bbfa-c31f2a2bf556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec68726-5b00-45ce-9d69-87868ffe6970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5793a4bb-f7a6-4700-8fda-ba11a7974920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e67638-e15f-4606-bcdc-1acf21c4e101",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c37707-6960-45ec-b83a-04d711820d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "916d114a-abdf-4200-9ba5-f9adb193aeb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dddd624d-ec2d-49a5-bfc6-e0a1adfc9cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "de43c4d9-9388-4fda-93ac-16ebb31548b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f8067f-743f-49f6-a8c4-79aa72150248",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4349b5bf-b916-4088-91c2-73c4a539d113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdcbd6a4-5685-4070-a725-9eeee9a17c7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db4fac8e-c615-41c7-a36f-0c76125ab23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "a865ba12-a133-427f-9548-b144c3512165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c9e2dd7-6c17-4e56-aeac-f443b8297bec",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f406c378-908e-4d4a-afbd-ad11c47ec332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38fc3ac5-fd18-4c17-ada6-6c273c02a33f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "190c85cf-d17a-44e9-8f9b-b8eaf19397f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "afbbcba4-3450-4d2f-ba1c-fefaee35334a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07141540-2cd4-4940-bbb0-fee672d2c8d3",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e775a808-ce02-4511-8d04-c93743709e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "545d0460-9336-41fb-ba17-3e8ded1cffef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd207c93-eea4-4058-974d-2b37c9164d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e5530e2-e6d6-4f96-87b5-b2a1679e29be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f95eebcb-1603-4999-902f-da7954bc6682",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "401810a4-8172-471a-9981-aa3675918079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c755a56e-e296-4397-abd4-d835a15791af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be215172-3bb3-4ab8-baa8-200b55dd9cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b10bcd6-ba54-4184-95e1-a5d1780bf6bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ffab61-7378-4cbc-8c01-3c54bcc2af25",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2a82ab3-e41c-4107-afa3-ff95d1c23467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "370d691e-6647-4a47-afea-7e7c7579caa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2027e74-1ed9-40c4-b0af-28d70e8aa334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed5af06b-eb4b-4ddd-8dd1-94b959f6d74e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0335111e-5755-4141-bd25-c73cbbfe65b2",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf8e9ef-d82f-4cb5-b621-a1c0be7fe218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a71d279f-4ab3-4d79-8f68-5ef391bd53bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "077f6a86-fa94-431d-a2c1-2a28b57bab85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "72dcad92-8cc1-4ff5-8d26-af43b89351d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac7f1b0f-3b87-46ef-ad36-d0a554a24ec3",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7425dad4-d485-4392-b67e-391e430ff305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d687e49-6222-45aa-b795-d9cb5a5f801a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f55dd4e3-b236-4e66-b7d9-eff0a1fcb129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6b1f429-8129-4f63-abf5-769d656b7ffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c41ce9f8-9837-4f99-974c-347787e06372",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "769c3062-e1f4-43d8-bf5a-c11fa2f93334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f7c9b2d-81e4-47aa-8bdf-e005e8ca100a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568b4550-09c2-4c44-a982-75ad203315d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "03c53877-6e79-4577-9ff8-eb93c5769471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2aee1e1-505e-42f6-abe6-2cddde0c9f48",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4d88b8-43b3-4f4d-94e7-d329aea5924c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49d354a8-aa64-4678-8962-8deaf9699a4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af6665d-dcc5-4813-82bd-80e68d17948b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1134c83a-c6fe-47c8-be51-ebfc5412c7bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f70e9f-d2c7-4f26-bb14-2adc9c052133",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c085f98-2dde-4ef4-bfe5-0aff88b8f809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c3206aa-d675-42d4-9e04-c910339c3b0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15f7e8a1-abe0-4ec8-b4aa-01760bc61a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba13d011-3e21-4152-8482-a50ee765d892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feacc37b-6580-4347-8ea5-cefd7b5a7de0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2325446a-7e8c-4472-9353-d45fbf3406e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de1010f7-f8a5-43f3-9f3b-8a977d008869"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc3b950-c660-4496-8967-a375bc8f449f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebcbea98-95c8-47c5-b5c1-dba86b758e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfb2e721-f610-4585-989d-da5060e53eaa",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac94a0e-e248-4c62-b470-3e6080f8f77e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "155da6c1-bec9-4623-b4a7-e579c8683439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd6bdc08-ec9e-483a-b8be-615ca0601817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4807bd9-6684-42f0-aa7c-e7a59825c187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb6cb254-f385-4ab1-aa98-16ee4e6b9500",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aac1ef7-6e5c-4cd3-9152-0c4d971bc0a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91fddf17-1ac9-41e2-8ed4-75068e8d03a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e6f0e8-a0fd-47ed-a13a-1be3be8830f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8052537-8110-4bf6-a568-c805c1d86f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66cef2ad-453c-44ea-b8ac-4fac4edfe78e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "549c3afb-a59e-43c6-bc85-9f4920e76d2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "313d03ae-8b55-4d66-b218-cea39c4a6cd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62a9897-742a-4fcb-b1dd-7c50f830ff4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "69f2d433-0486-401d-9229-6244b1ac0bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5282d990-52cd-4e34-bdbe-510b367f6162",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b0711f-0236-4852-9de0-7dfcc7d248e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "335c7c8e-1c8e-45b0-9c95-c30e1a78b230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9681d826-89f2-4b38-93ab-216fa979fa04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7cc29e4-458f-4af2-9c26-7d673e0a43c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcf1f18f-3b31-4d6c-ab3a-b7e2a44e9bf6",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a92448-caf9-4360-b3cd-21842c431eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b944f34-a91f-49b6-8b91-bcfa5113c25b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c47886b-f9ac-4a88-ad50-e7c7f0209654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a48306bc-e818-40b9-93b2-2154131b6d1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2c3db4-1747-43a7-80e0-b00a415db15f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf1828f-db9a-464f-8a71-b67f13016688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d7bdbc6-809e-41ee-8717-ae20cdc0fa1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f0efe0-e9ef-4a00-af0a-36c52d5a6af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bc249fcb-acb5-42ee-aa85-8b6813be7c44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09a07901-3bca-4935-980f-fe5385be083c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d796c24c-a27a-40d8-91d6-d74b6f4c5ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ab9544a-1629-4e56-9b44-0368df2e49fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da58dbf-f0ad-4e5b-a0ed-2ee6c6091283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e9288b9-2e1e-4daf-aea9-2561de96bacb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee6c117c-fd7f-4583-a18e-cfa3a7709015",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd639ae-031b-4e1b-bb1c-abe175c30bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4b1718c-fdb2-4a47-8bb7-c7d8cfa5d737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "722884ba-db96-455e-bcd8-312e535dba9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "557d0a41-764f-49e5-9558-22a225388fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e0fb5c-81b0-4512-babe-c3ba3e5e394c",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73123ecc-a258-4a4f-927c-411ce80d4a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4fc2c0d-9327-418e-a485-23916c74f350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0f3a17d-1e98-4aa9-b024-e8d061c5b247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "739b7938-e558-4adb-a3a9-b825f192139a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e6f6e2-4449-4e33-b6e5-e11a521627b4",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee19509-4b84-4a31-9a8b-d2dfec84216d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "febf3459-18ad-420f-960d-bb2d1772762a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "279859b9-8a00-4c31-979d-e8dbfe6a399b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a1bd47d-325f-4ed8-8554-f666ffec352d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de4f3e73-a7a0-41e6-8866-ac40c8d0d217",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb17e583-0f3c-426e-bfcc-f3d355e424ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3ee117e-7ce6-45ed-93d5-de5d7dc53ce6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce591e74-8d98-4bd4-8d95-a587a970ddf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6158277-9421-42d1-8e9c-1b119cf55b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b47bece-9241-496f-bee7-28ffc681b887",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d425da6d-3732-430f-919a-2f96ee30f132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef14a1d5-d74a-422e-8d0f-e1aa9b6e0b7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "646351b4-4e9d-4656-bf97-70a64c3816fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa96a659-cce9-4389-9f51-89f4ec530ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73364b2a-bf08-4184-ab1f-61bdb4290ae2",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e52d5a2-b6cd-4820-b78b-ed39e2b04629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fe151c4-ec14-475e-9fa0-a18a4e88cd3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0d90b6-a8e4-4d18-9fff-db204cf4b036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7831ed9f-27b3-4dcb-8eb8-c7fb19b3a153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e98c5c1-6b39-4649-8da8-97ae153676d9",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae293488-b613-49f2-bbe0-d46c48f40beb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a84d8424-f4f4-4734-a7bd-2da4b4bc4c12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "604bb723-e3e9-4267-81a2-a2681b7e5fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "84a0c372-e5bb-400d-97c7-c725c2a386ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2762543-91c4-40aa-a90e-f015649476d3",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f2d5c3e-5f6c-40f0-9f70-56ce1a8ad8ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc8bce6c-c243-4202-8bd7-6f35dfe854d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a6d6fd2-563e-4e98-b255-777fb3b9d15c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bab4a94e-ea11-4d51-9f46-2028a32b6317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "870a425b-b5dd-43e6-b578-d41ed107e478",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16990708-7834-437b-b68b-95820ea24629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "861495f0-8d9e-4b72-b8f7-00481eda03e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd769f0-3298-428a-9574-0d5563fdf715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f36c4a1-4c11-4524-a04e-0be04a68fd5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a83b8d-aa8c-4997-a4e5-cb996e8ec9c4",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d47f27-4451-423c-bc6f-24777e8bf591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06403ae1-cab1-45e5-bc59-f74d51068553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f21d0f9e-5e58-49c2-b3cd-0371387ae848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "15d21549-019b-48b7-baa8-2763e7c20b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af32e47-3867-4cc2-adaa-b3a88f0b70f5",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "893b3ca1-6e30-4d6d-b40d-19ca3239a438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05dd544c-2340-4697-ab6e-56e838c5b0b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "268e4d83-b710-499f-96bc-5ce0e4c013ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3a03b4e-f86e-4e92-b814-e285ab3c0f3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "395b92be-26e8-4461-8fc8-76ddf4a50ca8",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a809b53b-2694-4407-98ab-218d23474678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45b0777b-ce9a-44bc-acd3-d3bb3721b9fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16d297d-97e9-4d07-8b1e-d6fb768d4c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9d3890e3-85e2-400c-a9d8-c99f713821a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6c4a6e-72a9-4ce8-a957-306372cc14d9",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e19dda1-5526-4d41-99f8-8eeeacefc87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a56c8a5-ed19-4e07-8911-5bff305c1164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d258ae3f-59fa-43b7-a3af-847526fa56b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a02ff03-1b23-4ebf-8a5d-bcdeb4e470cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a15aec01-03ab-4ce7-a39c-f601e9ca9eb0",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f36b16-6bb2-47f2-8f8f-688e4cc069ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6706738e-cf6f-4f9d-86ee-8fbb941db561"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f686f7-b1a6-44a8-ae54-01140cbfaa33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "543b3f87-342d-470b-85f1-bd02866c0b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74ab450f-9b49-4a53-9e8e-162c8fa3f5b9",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf1ee5a2-7061-4d4e-8525-3d32e99193a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7a784fb-99e4-4157-9d7a-e47d9ea4896a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d958f7b-38e4-462c-b75d-1906ce87e98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8693f3a-87ee-4fe4-9076-a94f2887bfc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c47d7eba-81db-4b42-84e5-03a41b951ba2",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "108109f5-9fde-42ac-9227-54685614d2dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aa25be6-e2d8-432d-bb0d-23f0484fb583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b71df3-a297-414c-a5d1-d5912c981915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce89a11e-8464-48a2-8b10-00223161bbfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf66e32-8da8-44a5-9458-2a58c8dcc04c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "628fe0dd-fec1-477e-ae15-3380272d57c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1475e9b1-a2ec-405f-bcea-206ed139e1a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df24bb85-d51e-460d-b979-7f6766fddf13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "073797be-f404-4092-9120-4861953efabc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82dedbe9-3803-4365-8e27-6e66d6a35894",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65bfc7c8-d716-4fa0-8882-b2d2a443e21a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "400b82ac-a320-4036-aede-bdb9b3442dab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "142349c5-a7a9-4384-adba-3d410251dd3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "476c09dd-a5a1-467b-8acd-19ccd3b4dc1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9421a5-cc42-47f4-b9b9-0f5cd4f4c8f2",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea6156d-b9c1-4562-964e-8849a5a0128a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f69d702-37ce-48e3-8645-ec32db4de8b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7138a076-40d3-4cb0-9307-5c274a5b53bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "53c98c32-e5ce-481c-8e86-ff98e13d687e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd3707a8-d071-43c8-bee6-e52ac3a6024a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1324cc6-d188-4607-a9b5-928af81f3471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deab14fd-d759-448c-a404-df70c6fc11d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e877ca5-44ea-40e0-b83e-776938b24ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7d4b95e-cdcd-4f1f-9803-45aa258f8388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1538ab3f-6894-4b89-8eca-1684aeb2f704",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9fe08f0-a75a-4abc-845f-e87f116780d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01a06814-99ca-43cc-9214-97ee1bc4cdbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6050e8e3-6325-4b00-ab24-3e412b35540b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "58f02b81-2e03-40d0-8fca-ee02fc2a7100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34207d5c-d3bd-4227-883d-2bc13700c245",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0ce7af8-1133-4e4d-9389-53b661876eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "078a4939-b877-441e-8e0e-87d3f0cf4621"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd2f782-3883-476b-ae3a-dd0401075e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e84fc54c-080f-46fa-8bb3-94657a6785a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c8683eb-7574-4248-8c05-5eac2f6388c4",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "581dc32c-8f70-4e8d-b36f-daf9231be827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ddf8696-b967-4415-954b-cbed639d9996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b48f2b-f125-4260-b6ea-bef5d9afbf64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6042d389-e1d9-4c33-a752-a4f081c9a40d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc4d25f9-8944-4668-bf18-7f701c451c9d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "684bb248-366e-4f6e-9f54-3de37c2cb1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b18bf4c6-f8e5-4336-9862-62942b2ded4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ff922d-31e9-4578-ab44-8bf0151cb851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "470babd1-f798-4aa6-9388-f9dcf5fa1918"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c59d4a22-221f-4835-8fc4-31bc48c189d0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5a23044e-8111-4654-bb23-17f9890b64cd",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a2381b-77d6-4114-9199-af3e067bb909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c064e2e-a8c8-4c05-ad21-64586750366a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7287b830-bcf9-4185-b409-908b3df90b99",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "6a65e52e-e509-4187-a7c2-9ba825567401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5db7c64-ecb4-413b-bc4f-d59b47923303",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "353b3a91-2a7d-47e1-991f-627ae466bb54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9e5ac76-70f6-41b7-bb11-92e188506939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f92188-b86c-4cdd-8321-ab752d0b6399",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "09a5122d-b2db-40b7-851c-b24a64ff4c5b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ca1d67e-df9d-4565-8cb2-495adb28a6e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "66374b17-7850-49d7-b33d-afd95f2bf185"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "441327f0-8429-4ced-917b-835c83681ddb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87b8143d-13bf-418e-ae5b-50fa78c67cfc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6d8bd0cf-cd27-4da8-a009-4c20c2134c1e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2b2ca6d5-07ed-4270-b30c-f69b898162be"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e8cf8820-8cb6-4138-b33a-1b5662cba531",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8be76864-3d3f-4bce-9c64-dd94dcb15df3"
                }
              }
            ]
          },
          {
            "id": "25f447f9-9b7f-47ce-a469-ab2f2ef4df06",
            "name": "Positive Testing",
            "item": [
              {
                "id": "63b05e5b-c062-4a36-9f94-00808adbd05c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a5e943a-16a9-4154-a64d-ef4d4f546ea8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ef368601-b963-4587-a757-7be3899625fa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "43abb8ec-8200-4585-9b42-2dbdf33a5cb0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "33a31d94-77cb-468f-b1e7-8cbb03c1a808"
                    }
                  }
                ]
              },
              {
                "id": "85cce5c1-29f0-431a-99f0-295e8f715fe1",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "087f7e3a-c442-437f-99cc-bbc94aca4446",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6435f0e0-2d70-412f-a446-0cb656031bb2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d5d6c6b6-94e3-4bd5-9bec-7d1533b5f617",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0e6dcd5b-3cf8-4cfa-bfa2-c3c53ce1a806"
                    }
                  }
                ]
              },
              {
                "id": "c6ae98cc-2a8c-4b52-926e-194e2dce3122",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8b201aa-4649-4d86-a4f7-70fbc1e91088",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ea06f36f-a5a5-4969-a2c7-1d1aea9f24c2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "09b282e8-8b81-426a-80b8-45a24e97f1c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "21fd7946-f63d-462b-98d1-106f00cfa19f"
                    }
                  }
                ]
              },
              {
                "id": "c43ba8e3-ff37-4151-9a0f-1aa3dd11680e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c1d5c14-1d64-4ca4-ba29-6508a0f594cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4c52d6ce-9042-46b0-8003-fc25d7ce9a5f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4383ecca-0748-478b-ac6d-c9d816541afe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1fd79438-0adc-42f0-bef6-c9745732c823"
                    }
                  }
                ]
              },
              {
                "id": "9b81d89a-5baf-4f3a-8b90-9e8298c197cd",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a967711d-d52e-447a-b6ae-0b64d3a9ab85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a2d73be1-6b32-4995-8878-f991aeb449db"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c0d18a0-bed5-4069-bcdb-5d7515fa1c2b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "36da1164-8983-4165-9966-be4c757eaa26"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "48cd18ff-cdf8-48a8-b61c-63b7150772dc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "12b2ed0e-b0d6-40f3-b378-9b35e6524996"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "94a38f47-2557-452f-a446-c86e20961772",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "477f71e6-9038-42e9-bb90-8b11d149bfcf"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "103413f2-eb0c-4d00-bd99-59caa88aaaea",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "7c99c71f-2440-4c21-812c-ccb3dd0650ee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "411986bd-2545-4b80-b290-9839a8152c4f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5998b8af-82e1-42f8-bbd2-f136c7385c6a"
            }
          }
        ]
      },
      {
        "id": "163d410c-a51e-4aa5-9a68-37a8ab45e951",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c062697b-9ad2-4bec-b2e2-81f967b85047",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c04df921-b167-4891-9cd4-5cf6a1334d21",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2dab50ab-99e3-4ce4-8985-790d63c1829e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e78bd978-9154-4e7b-ab46-2c567de5ed92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3326b5c-9d97-4bea-807e-1540ea8a70dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48fb680-74e7-476a-93c6-1a86a665adbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1245c7f6-921e-435e-adb2-ec96c0ed4676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a806766-8c23-46c4-af37-ec27f127ac3b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae57605a-3f5b-43b2-9179-f01ce299b766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c17438db-8b07-4c5c-8f68-03e79c7ac447"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c948bb7-dc1f-4311-9ffe-40e3ad31eab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "adc8dd11-9786-4b21-aee4-f600d22b6f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28cad1a1-ea0d-4e76-9124-634dbb1bb7c4",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cbfb7a8-2e68-4996-b1f6-8c8697b5c225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9976657-b522-40ff-b601-f9b182aa890b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7167b612-d3f7-4332-917c-223abe7ba65c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "209f0f12-0d31-4a3d-933f-9e864e46638f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c19b50c1-6467-4062-9717-c4e311f9ded1",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "453e0450-4146-4149-a559-5d6e14e2b9fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59bce5cd-1b73-4110-b7bc-6496316f800a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d9f8e8-d921-4826-8717-413ea25dcaa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b7c9ae1-3bb2-48e3-b467-9086b9eab8a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80528333-bd6d-42fe-89d5-d45347845719",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e47d8916-e63d-4a25-905c-b00374f816af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45e0f09c-148f-4553-8f81-cbf94887f9f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989d37cf-1927-40b5-8b99-044c45c7b097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9691756-d8df-4834-8430-f6a12507f405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef864a71-6145-40c9-9247-df4c0157a0a8",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a1487d-35dc-4394-a089-cc93c011c5cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9deff15e-6930-4cba-a692-70434910e651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a5c9ab-2db2-4cb6-9b18-5ef7a519c310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3cd42f8-0c9e-411f-9349-e21ffa6506a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d0a603-b60b-4b0f-85ec-08e7bccf59d7",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88b64491-e41e-470d-bb37-250271d6831c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14e1e565-f6de-494b-b811-cb2d9a333659"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315bab89-d626-4c19-868d-a1cc8bd430b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "544d6924-8e24-4b65-a997-23bbb98b253a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca8cfe12-3eb0-469a-bc55-d0b9f8708eb0",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f255ab8-0fff-493a-b6cf-2b134e825010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d0f0524-6bc5-409f-8618-98488a8158dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bbb5066-22ea-4c9e-ab1e-d4eb8fc5f0dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "80423af9-dab5-427c-8578-fc106569c678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e431c8-ea77-440e-abf4-2e96680fef41",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfdaac0c-f2ad-4233-9396-ef00e193bd17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d90e77f-feff-454f-b46e-d503a1b75264"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "478f4eba-a107-4198-930e-1aaa09be838e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "14e0e709-d501-4ef0-9e92-a3f0769ddaac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f44af9af-aa2a-44ed-9af3-2a48176392d5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc80ce0-9392-48da-b657-b943c543de2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "520f3b13-058d-4270-8341-dc180132db2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a8f14a-faf0-4725-932e-8710fcdf8135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a84e1f00-6ff8-4e15-a355-2ac066a673b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41947557-2238-4488-b444-d12c1f296321",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b98b29-3b70-494f-a7aa-b4842018f730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fba69470-5ace-4c41-9653-b744f423c358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22cc722e-1a14-4daf-8e6e-3bc200aaefa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "dd772eb1-6cec-416b-89a8-88b5800f95a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a32bf5-7d90-4869-94be-e27a02464a74",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a64344b-2e2f-41dd-b1a2-23ae2dc14e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c80ce238-f879-4fa5-bd98-90b8697e1897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "785246b0-3540-4986-9954-289fabada800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8f92c67c-a3c3-461f-a565-85acca8419dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2c35e8-4e1b-4b28-9e78-b77971a26fe0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "016dc196-08b1-4b8d-a661-68d25ce1a546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c2d3082-2a96-4f99-9e1d-07f0a9fbc628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9053a1-07c2-49c0-add0-4e288d7f9ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c500b559-2c13-4bfc-b56f-0aaa09aea2e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68503590-cf13-4c4c-ac5f-d9b2cdd936bf",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0fffe53-c464-4954-a33f-ed151b3b8e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7108788a-b5fd-464f-a503-996dce6ab124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5959867f-f3c2-43e6-b36f-4192260c0203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1021f07e-03ff-4acf-8456-1a295c592298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ce3230-084d-4c59-9f09-456d6f6963a3",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d43de195-a5c3-4626-9ab0-7a559348b393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8da030fc-6599-46a8-8b1a-b15dde546740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6572d6c6-9d32-4b64-a530-597c1c923567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c3fcfb9-2d7b-4b8a-b94b-7e4d1d5baaa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae7eda2-a215-47fe-821e-201761d7f2fd",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb07d7a9-5592-4b5e-af42-b90be1457799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a11f557-17c2-4948-afe1-f28aad6ef8eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e8b0cd-1540-45ae-9cef-3cf4380c2e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "de7509ea-44a8-434d-863e-0b2bc09de1fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f3ef1d-7767-4834-b715-b77d72faf9db",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fe1bf40-7df4-446e-b6d1-06ea042a2823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0212212b-c77c-4c43-b3bd-50d0d0fe765d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7151d32-30f7-47b7-a24b-a772fa057f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c826983a-0340-4b17-89e1-703e3ccbd8f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23df0033-961d-4ab1-827e-27d5d4767a0e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a4e496-930d-4351-a89b-a13869c9b7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "494e75a0-8f7b-4d81-b548-b52b72b17bff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4abd655-265f-456d-9622-ab96ab8b9019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0539214e-5cbc-47a5-b73d-8057dd74aaa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebbc24fb-437c-4142-8241-c0fc6aff298b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab22be3-8c72-4967-8014-7223ebcefb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2e39b86-2eaa-49fb-b659-be37affac46c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "906989af-5d4e-4e9f-a73a-58490882e010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21ec34c2-a1c9-4abe-a45f-ea27b5bb060f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6262d5-e131-44a8-91db-4dccbdc4ef94",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb92c29a-545b-4f54-9e29-72e0e63a431e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5e73752-a521-4c52-8977-d2f8c9a91aca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c3d7b8-c3b4-4cdd-9347-16c85a13f6a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a88d507-f76d-48d6-bbfc-b61a2fb90d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f3db937-1c28-4c89-9805-4082bc444b4f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb9775e3-90ba-49f7-942b-9c4aeaef2dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "172bba20-8ffd-4f78-901a-a27fbdb4727f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f015c28e-40a1-4fad-bab2-bf619791b653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d965338b-cbc5-4636-bff5-e469f2caf93a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b873a4-404e-4c33-8963-08e09d48afc6",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d287bec-c0dd-4cb8-b382-549657726ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "499e2240-2a96-4e3f-84ba-e460b56ded51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74155164-4a21-415f-a686-94ceffab73ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b2cebe7-f795-45ea-ad73-a7e75c13cb46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94285eac-96b2-49a2-a973-b23c13d504fe",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6d0b37a-e911-47dc-a757-0b1966b64480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e41402f4-a6d8-4772-b5a6-88198c059aad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb62afe-ce1a-4829-b177-d0671cd8189a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5eead9ea-404f-46d9-a086-fe62ad93d22b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09f32f0-1fa3-4b56-9292-5cd395bd2b80",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bae651d-f4a1-47dc-82f6-d8a6d2f126c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ec816c3-21cc-4c65-a046-1a01ff3ba3dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dcf2d55-112c-41c1-9db7-4e6a896b4bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc7b600e-95c8-4491-8f8f-b89b82a2876f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d549b973-5413-442a-bc5f-9235552786d9",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab89ccb-887f-428c-856f-6e69e6ac64a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95d6303d-ae14-448f-aaec-50d32f57f22b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "becff9a2-3066-4c00-a12d-8642bd201298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53c939fa-0a1d-41b5-91a6-fcaee457a2d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef5b55fc-13cd-4b55-bc1b-6679c74a30f5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88d405b-bff7-4101-aa57-2dbd3c79e58e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39d8d9bf-5cb1-4469-a5cd-773a2f220ca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91dd2986-225b-4c26-9c37-2948ea8a679b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18330cb6-3c3a-45e9-82a8-c5c653030599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661e9638-5296-4454-a70e-11e01af25467",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4b6c006-4353-410f-8432-8a7b461071de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6a5eaae-65fe-4264-b6a0-716a9696116a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "845325c4-b4c0-43ab-ae0d-6402ac0fa450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "514fd85b-1302-42b7-ace4-ed56361c1ee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02820e0-e3ad-4948-9398-1b71d16adc65",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa8f276d-4264-4e3e-a3a3-86a631c3b786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c54a8aa-4c62-4b4f-87bb-3f447619b07f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "348328ef-61db-4475-8914-cc832e16ad75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0413bcdd-4f56-470b-9642-d3ed433dcb93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14d41d46-6902-4361-be5f-f78aecae0a38",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a0b66d-c7db-409a-a92c-2021013133de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba70dda5-8e67-48c6-8b00-47c90424c4e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0759fd12-f43f-4a54-b83c-120bf69e0d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01a3547f-62db-4b58-b58d-0ca95ba75b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48bfb914-a497-4fbc-8539-df34780e2938",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d8f4374-8875-481a-a307-d883d26a532c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d3084ff-9d4c-4ee4-b378-e831cd823416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9354edf-6d54-4e0a-8bdf-91ed04d763c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a34350ef-3ef6-4f8a-b85b-0270c6c12db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "360f0b61-6330-40e5-8f5c-7417019872ce",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd1186d-8859-4a37-8988-2db9a55d4d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d617ef92-63e9-4129-9f3e-cacb4290adb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "494a91dd-f173-4d92-b441-06137ffac544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60f392f1-e24c-4140-b034-50e68d16d6cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a2b314-82fe-41f4-9045-16d344e6c74e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e17de12-022c-4ff7-bf06-1da4c6649377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b701352f-a33f-4005-8421-6f29fc1ca505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a40100ed-d46c-4f4b-a980-003d8ee0324b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e13e0fb-eae8-4909-bb73-5afbb6e0a8b8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bde29493-d898-47b9-988a-a60a394f7d0f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f2e3c174-b406-4da1-8c02-1a947b5622e4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f964d6-1c5c-4fcf-968f-c0c237a45fc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e696e198-78ce-44b3-86f7-4c86fc92547d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eaf0fdb-a557-4258-b07b-5f0b9bed6a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d29b26a-0efd-49a5-86a1-94fbc68a41d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "654a511c-123b-4399-8507-42fe62534400",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "260390c5-f453-45b6-95e5-cc65700e2d6b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "285bf8c5-b881-42be-b3ec-b0168bee7c66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e4afdc-c9de-4ac7-8c08-6646d0b3a822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "42351c4c-fce9-47a6-9aad-a4478d32fa24"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "236e6499-0c63-4591-8d0c-517e9790176e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c516f802-e297-4aec-a62a-3fa26987b953"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "86ad877d-2148-481a-8a4e-b985d0010ed6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "468a2ef5-9194-43b8-9e8a-3be73ae1c4b9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bfe7f6da-b9ea-47e9-8d26-28eef8fd275c",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "38c1a093-947a-4637-8453-d6105af9a400"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f60b5f5f-ea66-4a69-b97f-e1c3c76b65b7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fa690aa2-d4e0-487e-9bfe-b8bcf731d7fd"
            }
          }
        ]
      },
      {
        "id": "416c83d2-d6b5-4b74-add6-9c566fdf8265",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9b2aa615-00c6-4de8-9a9d-1e02eef08f0e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "92994f42-0928-4daa-8592-7dc2665775a7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "006b745a-0240-427f-a071-6bd3ed3adfd8",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af925c5-5a86-4bdb-9b11-5054a3ffc5e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91441d05-cd5f-481d-a745-abc573b2ed02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2abf1259-122b-4cd8-a072-fe3f3a32e750",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc83c11-a8d5-445e-8406-a7d99eddaca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1230b45d-ffdf-49a2-bbfe-2a4b22279551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7dafc5e-76d9-48f3-818d-91d3e4d858a0",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53f570d-fd10-40d2-b224-639e24f11dd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "036f0c1d-3b25-4f96-bcb0-05467e1d1a7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e37a9c6-37fd-4b3d-94f5-a4be156b8f38",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd6b4a0-60aa-40b9-842f-70c20dc5135c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a88e2c4c-f0eb-4557-8cba-b8a4bb82438c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6594d089-ab2a-4664-a569-0e7cf4016fb8",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b878c8-8300-424b-a97c-1945c7bbae23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94c5071e-cd34-455d-86b6-bc4f9876d0e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101a06bc-978f-4961-918b-59f4ec6f9c33",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa0516c-4d5d-4c8b-9ae2-9077cace1c43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d8d981f-e815-4941-a338-4278f8479e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df53dce-6621-4cdd-9d93-b60aa560d3b0",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da83219-4c15-4db5-aed8-a8cbab5ff16f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db595b0c-14b4-4db2-abc4-6a9ecafe9794"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5489b4f-6ea0-419e-91a8-e98b6f45e036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0841ec33-d3aa-45a6-8189-9480d7661852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd69fa52-7f5d-43de-a3f3-c751510f7f73",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f0872db-4e10-4eaf-a293-0e50a496a792",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c27e53a-e49b-4f77-bb45-c2e43410262a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8210af85-0128-4a45-ad84-eaa9a3940f7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63509133-9cfb-4dc2-8b3a-e4dff495309f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb457990-70c6-486f-b986-06602493fb6d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc83174-75df-4f4e-b530-412e8fa01406",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "357bc8e8-196c-4bfd-9365-bad149a4cbde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c1dec1-29af-4c90-b5bc-2ff95cf85f3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf42ac65-4e2f-4faa-a6c6-28774c90183c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a50c56d-2a2f-4f95-99d5-d2d0a7d94d7f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44db088-cd54-4753-b388-8eabf62a7f80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7c6ecce-6b88-440b-a5ab-f0420ab6d486"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4fd6c4-9107-47ff-886b-221389cbf84e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef3f2f77-3c2b-42f8-8545-7684a7281c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161913de-5f29-4cd0-a76b-f627a6891062",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef052d8-7662-4d1a-8a0b-da8287a69464",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "877303cd-270b-4a1d-9743-7edfadfe9671"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77be1415-6eab-4075-8312-8a6df058ae5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3c26ee3-e4ce-4135-b181-ee6f7338235c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a273bccf-2ef8-4bd7-8292-7d431a857d3c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a86dbc-df09-4f2e-8267-b2d64eba7ba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acc83db4-3fab-490f-af67-c6de81716b08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44da250-6bfb-4d8f-8fac-4b258a854afe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0971e51-bfb3-4c2c-9613-469a147a4fc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebca21fa-a232-43b6-97ec-c0b045257d3c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa55272-f037-42c0-af25-8205b72dcac3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ceb6002d-0d3e-4aa7-8654-e20d021c1763"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e244ad2a-11d1-4104-a5a4-3b3d93a9c261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cf3450d-e65a-42ae-bac2-415394a737a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e63ac91e-10df-4650-90ea-f0b198cc1c97",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9eaae9-dfa6-4968-9624-3bf7ad69f440",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35153929-0181-4c35-a271-212093543da5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78bc0965-0925-49bf-840d-2e82d0492615",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57186613-35fd-49bc-a114-adaae8086b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5fdc14-3be4-401b-b0ea-7c42d97d6c36",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8886619f-39fa-43dd-bde1-c04a01fd637b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81c50bd3-9b53-4177-ac69-5047b8761216"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe250ef-f1cc-4b17-b52e-b80c88e4602a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "888d7b8e-1713-46bf-b61e-da54f15997bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06ad51df-aa8a-436d-97f7-8e20f1a24c75",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc02c36a-8fd8-4c5f-8f04-8bb6f93c3276",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd3387ed-646e-49ec-8bfc-9b30890a7f22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8b5359-35df-4008-a16e-c990e16a8127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "345a550a-0b5a-450f-9873-151177f577cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63912545-6226-49c0-931b-1e79f2f1f3dc",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d728db6-1e33-47eb-ae9f-9537b519e326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdec0a48-d236-4d00-a7d5-ac9150e87a67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f1c802-1c12-4c08-a1a5-0dd7ad7a7e1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "229cc9fb-e4dc-4d28-be8f-2adb1dcf5961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb945291-2692-4a3c-a041-09c12e68d0e4",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "086f1786-56e9-43c6-88ec-140dce2b1a5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b34d67f-22a9-4548-8c64-879599f00a51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d9e86bd-6dc3-40ba-a056-5b958e6e14df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c75d0c00-137a-4ec3-8f9e-50a35c43608b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6d42c89-5216-4ad1-92a7-7f3195ea749c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59dc432d-3384-4ba1-9ee6-fed20b7e9e6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "110534b1-3c9c-4890-b07b-8a5f53df2ae6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2bac742-cf80-4ca1-902a-dd1686911f71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76922f6d-fc93-4393-8c85-0688a46a05f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "228f0871-0fa2-420d-99df-fa3bf657534b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ca200d-8a11-477a-b677-8d40aba1aa73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9caeb227-a260-4063-b5eb-f65115c811d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "090e8e87-7d64-4619-b537-83e3cdde9fd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07c78060-3224-4454-9c6f-eb0bad238f30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a2a315e-b3fc-4b26-afe6-a04bce4e0b1c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f2be83-9553-4f9a-b49d-a6274274506b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38a5e659-ced9-470d-b03a-04ed87ff5a5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e88b00ea-b19a-4a5f-a667-0b373d676c6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3291e92-4b77-4e42-83e1-f053d5f18ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b279ee-28b9-43ed-802d-dc0525c1afd2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "722f6ddc-37cb-4c10-a37e-316a8aa873d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aa36bb5-9ff4-4d7e-9c46-ca54e3852d6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f396f17-43d9-4745-8dc7-1f105899d36e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea0d3282-ee95-4e5c-80cb-1d74c20a1667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d85b391b-b938-4d88-be84-97c9ec0896b1",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d904a33c-bf4b-4b41-8b09-8ee86e02f69e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d77deffa-0037-4ef4-bc84-cbc03d52343e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2235ce-c798-4e0a-b258-32169b6a0739",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f22b017-31f9-484e-9481-3e0863dd4680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9b9dcd-73c6-4ecf-80cd-5f185a39c166",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd108cbd-94cf-4cd6-81bb-6daedd72778f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e110a6e1-c56c-465a-af84-94ba20e2f81d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba834a87-e130-4bdc-b140-6c78dded7c50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6e34ff3-0a77-45fb-8749-2ef0769cc28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2257d9c6-8007-4403-80f7-58b4fca934f5",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "829dd7a0-b07f-4dd0-aaa5-deaa6304331d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f759377-7651-48bd-8728-cd93f5c807ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64918e8a-fec2-4d0e-a30f-152496dee732",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2984c851-58b4-4e47-aac6-fd1573891e84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e91deb8d-33be-49fa-96f6-1c8bb0609de8",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "713fba16-9073-42f0-92c9-d25bc30d644f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97b5f383-96a9-42d4-95b2-4cafbfdeb72c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b55e734d-2c3a-4086-bb89-049d90045665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0743a05f-54a3-4ea4-91fa-5a3f433ede7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b14a71e6-c4d6-48ad-8f20-d62e5bc979de",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5ae01a-2e0c-4933-bcb0-554c52526111",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9404ce60-65d2-4974-95fd-6e958f46556f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5320e7-1446-4b69-ab3e-a8cf600f0158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a149299f-df2f-4c9c-a149-fab14d9ef16a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27d65034-4bb6-4ff7-822b-5ed75bbc6fce",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d6836f-43d8-47eb-8c23-cf3df4deb0c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37ed0681-f154-4812-a2e6-3db8bb7dea86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "107790ed-412d-4808-8551-10705afa10e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "510af17e-a22d-4869-a7a2-87aa8e707471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bfa9c2b-3eac-4988-8900-1dd2791da5f0",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f56b13-9906-461a-b26c-3a327fa5f58a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c01bea4f-8b15-490a-ae9a-5777bcf62491"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1349250d-fc2e-4354-9ed9-8f7f2114b09b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a63a75f-ee54-41bc-a004-383ff6f3aa60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925dbd15-07ea-4988-8e6c-69192ac7848b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78eb34f8-3675-4ee2-8d35-4bb1edda88a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e555fb99-1c95-43b3-b004-2bb4fdd00203"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c61a80c6-ffe3-4314-a909-88cc9be164d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e431cfdc-1863-4952-b425-fc21d7d4ecca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d4c502b-7c9a-4adb-a87a-df8853f73867",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f88cbd-dce5-47f4-ae96-d1fe6c103dd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e08cdb6-6e34-4123-8d2a-4e5145ec3138"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8ffa2f-c9fe-43b6-99f5-ded6f3cc9f33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6c0a19d-7cf0-489a-a18a-57501e1131f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d2e6ca-2188-4d66-9078-26df901b7b2f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92346f80-7c95-4bac-8c89-66826aa719f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02213cf9-e21d-4ab4-a3e0-60aa2fd9d416"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa31ef79-cb9e-4027-a97d-e5079f74504c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6eed4d0-14a7-4f21-8cfb-ec81fa7a1e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad5270f-43c4-4b72-909f-2a28536b481d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f57b4b9d-86b2-4619-9178-2df0805852cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52e127e2-dfc8-48ee-a91e-c3c4dacaae9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "331ce726-3c8c-4a6e-bad2-db9d88714304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a36fb2-50e8-4472-8bed-adfac9a37b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ae8c55-513f-49cb-ba5e-19258926b7fd",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03f2cf46-f1a9-4085-bfb4-a3981bb8cdda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2faf0ea-936b-47bd-8d64-edf268c69cb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f5e80fa-fd3b-4968-9171-d3cf4fbc979a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f284d42e-4310-4a28-a58d-56cfc2f801d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d1f0e01-192f-44d7-bc0f-66a546804cf4",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7e0784-cc68-4071-9f0e-b541ff5b73e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4645a705-83c9-43ce-af04-898d67b07c07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25453b8d-7122-4495-85fb-9bc295e62c20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6cb5144-fd00-41b3-bbc2-211a2b4595d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c90b8f-e8eb-4652-98a0-be4ac3ac50d9",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ffab49-77cb-4ff9-9f4a-3aefdd0b7928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f15fdc45-bd85-4cd3-a5b7-8e93bb8103a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc3befb-ecb6-46df-9c1a-03087ab7d6de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4149306-6830-488a-9c19-112e4ce83749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9101aa0c-cb28-4f4f-ab50-4bba827d4942",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd1b688-01a4-4ad1-aaac-3e0bf17e4748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c18c0d8f-b0aa-4f45-a360-dc9ea45579aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e03c05-5e39-48b1-bba2-3f861537b7c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f6667d-0de5-4e4e-a222-50381f5b74ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a0da103-0ebb-44c3-9a15-4188b085120f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d963791-b4a5-43e0-a840-111a1f52b550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c75a45b1-af2b-49f1-b60b-9b4d4ce3837a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d72810-b2ff-4252-8b2e-abc623134a29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5ade0f9-3d0f-4343-b6ff-18c164a9d38c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46ee4fde-f523-4bac-be70-949dce382c4e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebca352-ed55-4011-8da4-9507ecf97fe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71846903-ccf8-48b5-8fd0-da7c639123be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d256e81-65ca-47a7-90a8-9446c3b05f43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b6c7879-b11b-4c1d-bcdb-85c8b306aaf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3156b07b-6212-43b5-bd9c-fb8c58b5f019",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c1d0ac0-fdd8-4f74-bd68-47bc1b697e89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8edb004-ad0b-495f-981c-5b860d43706b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9800ba20-ac10-4e66-861d-7131ea2b2629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88b5da25-1899-4b5c-8a06-c2e52243259a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2b87b79-01e1-4784-9e2b-d2489198b578",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bee96dd-f195-4d51-95fb-74cded1741e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2bada97-f701-4df8-9945-d0389ab9eb93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bda12c7-c1e9-4b64-9ea6-9757c12daa37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aac8c622-5ea5-4ef1-aa70-4f120c2abbb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7497309-9a41-48d8-933b-33f59927a113",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c92dde35-7af8-47e6-a787-fd066dda399c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f91174a8-544b-46be-aac7-24c4b51ac693"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd462206-ca77-4849-abfe-8461f501f018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "045ffc3e-41e9-4c40-b0ca-46e485c01703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3086a954-1297-4e49-b42d-cf5b00cfb06e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9bcff7b-491e-4f13-a006-ede2119c439a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed0952fa-6200-4c92-8709-684d6e56b46d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9287219e-161c-4694-b148-cb0007731b9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e1d5e9b-b6ef-4d57-a286-496dd53c585b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "156a6f8a-9f10-4cce-8659-6712ad147961",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da00ab87-7667-4b9d-bc29-5808e9e3bfd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0a59c73-0b8b-432a-ad9c-dc1055cf35d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63022335-26db-44be-a681-eb978f668dff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9d96809-6f28-4f50-994f-c405ed1eb952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f637e604-3089-4cd6-abb8-4fd88dc96fe9",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81be1d4-7cb3-4634-b09b-0fb7b0c70541",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0698fdc6-914d-4111-92fa-e8ca2aab7e65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c96d5e-f25e-4500-9236-bfecc53e0f7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec0ad6a8-72e0-4780-b561-a6fa9d072f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "422ab930-1157-4369-a828-fe2bbd252212",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179f498b-9906-4ae9-aefe-cc755500f575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "600c3af6-80cc-4c81-ae9e-20a354ef80d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53528391-7131-4132-9391-799e97758d0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92233268-ab5e-419d-83b3-c2aceb3cdbaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e43492-428b-4004-8cac-2cc106271b0b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b5e39bb-68cf-471e-8c01-6ae504e455d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35b2a085-a7d0-4790-a2f8-53a0ba41c04e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c45a5bec-2b91-4147-98be-15ad717581ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46e12e6c-3cab-475a-8bd9-d518ba9f2987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "801e30a3-e582-44fb-8e9a-4ff1fa9b5302",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2139860-9072-44b2-85b4-8e50dbdc9110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6873714c-2f73-4eee-a81c-191dfe0edc66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ab1301-1531-4a88-ba1b-cc9a7c7e369f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "972b7991-8f5e-4d43-8415-00a8402f8fe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee9dd4c0-621f-405b-9aaf-3d9e645f0364",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd9a135-9108-4e28-b408-996142eef739",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2e89387-f560-4127-8baa-c436a2c8d479"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "204073d6-a2fd-477d-a505-fcef5d4f52c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a21ecf3d-4926-4fea-9a7c-3aa3651a7416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb305870-1f6c-4dad-bd88-165647bcd048",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5fcfa44-ce01-4e61-8857-6d18859ec686",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c46769b-01a4-4df8-863d-3d8e7c9350c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "436e6394-28bc-463c-b4b0-f1fb38972818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc54405c-195b-4b71-838b-f20a6510d83d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a372c68-b84a-4585-8930-ab157ccb8bef",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae85362-5ce7-4e9a-a39c-aba2cfe51467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "120a9028-4c85-407b-a2a1-d4c9899193bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07e47a24-4a3d-42e8-923d-fddd6ab65ca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58b3838c-b92c-4d95-951b-5533b8d0c425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f72c2d6-acb1-4adb-8379-6939fb3919a9",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe265cd-da12-416d-9cc8-76c05230677e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bb1d12b-8d8c-41e3-8d55-ea8e912fd89b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db3905d-274e-41ea-93c0-9774b1c45a89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "962c1d55-9f66-4311-824e-c8497fdbb6d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad0cc04-b360-485f-8ffb-cedc7c59cd25",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c979c3-5f9c-4af5-a863-c6f53445a630",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e4319c1-f9e5-4d42-be29-4b930132dac4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75ecc182-9dee-4abf-896e-58591ed35c70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8de9d1a4-c1fa-43fc-bc4b-150acb4f1507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11954f42-86fb-4e91-ac91-e97c3667d759",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76062ba5-7f0f-44a4-8bf2-3cd002a32604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a45b2f6-be4c-4544-8afd-f3f8045e7714"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ffc00d-cfe3-419e-a533-664e7e5cc869",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03010a14-fb46-49e7-9ddb-5fd0837c78c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b04749-c5f2-40a9-830a-a142cfc289b7",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1082dbf7-914c-4095-b102-1aa1182915d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63d60b2a-3038-49d0-acc8-ff56bacc91b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cebff7b6-55c7-4dbf-9514-9797de57d7c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92c718c6-9780-4d71-9e77-13c86ab47d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e8f8a00-c4c7-4deb-a194-3054da0a0384",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82de11f6-572f-4a72-9592-d951c6c0b4fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5d9bab8-2157-4d88-92a4-707e2d617838"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8dc38d-9928-4b07-bb84-ded60d1f1466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f290b14-a765-4c75-a66e-673216110e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a6c92d-192f-4f0b-8372-f2b0932ec72d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18889cf6-ea45-4be6-bd31-8bee4e98062f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26f179d2-54a9-49e6-92e0-b132babe7cc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e4bb69-e71b-4175-8474-45366a42b3b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55ef5f5d-f053-4a55-b3f9-07692a2962fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b62abfd-1861-44e2-a630-ab545306dd56",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003660df-14ad-43e6-a6ff-30bfb1d039bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cf20aa3-0ac0-4cd9-8b82-4fd45bb34a01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58358d8d-01ed-4662-aa6c-d21e28e82f3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69ba0185-1487-4a24-8944-db7101c79e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6a4175d-9c2a-43d9-a570-c44a984c3684",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bcd5d41-88e6-4843-b384-9e31782bddcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc72df6c-58ae-4b1c-ae95-2a595cb3c737"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d52bc6-62e8-4f01-a6a0-938787e01ce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d61d3f30-0053-41e1-9f3e-97da4a852d9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16c3351-19c3-4c6f-8b2a-51b9e8aaf76e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f50e04ee-d825-4068-9f44-153d607b7c4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b112fefe-b498-4d93-b3a3-f47682eb934f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3e2bf3-85db-4cd3-9ca9-7abd69e687b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "989192e1-6890-4eaf-aa2e-9fda749c4f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ef1bdc-77f8-4ced-bdb4-daa2fac8025a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f3c522-6bfd-43a4-9fd9-7b2f04d4c84a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e056cca0-8077-4bad-931b-06b97a67556d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c908912b-5433-4588-8b46-e73e54e0b329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7b9f8e5-85a5-412d-b00b-ba7d4cf69daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "282d0ed9-a979-424c-969f-9d6da2eba92d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa567691-b7e4-4f6b-9730-728d6f08b9a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2839b2dd-9053-44fc-917c-9ad1efe8b3b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff85a881-072c-4e79-8e89-5bba36a528d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e8a7d7c-334d-46ef-b9e8-9206d3fb2394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16f8111-3fe4-442c-8598-ff4dc5225d99",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "430ad931-2a21-4d45-bd89-a8ad2455c5fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad93991c-a08f-4bdb-89c1-69c30918b718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc8cbd0a-d197-4074-aae5-6c3d0ad760e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbfd86a7-66fb-4a90-bc70-d4c2faff37ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc7c276-2a71-423b-b4a5-d67136e84eb4",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1ba602-7b49-4e1f-9ea7-c03462f3b2a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4f0f104-99eb-4c12-921c-2e20c91ba556"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fbeafb4-cae2-41b6-a6c2-dcab738c9f86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d823335-c0c2-4c75-b974-16fd3ad81e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bcf5b3d-090b-4f23-99f3-7003facf7530",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95fd83a2-71b9-4276-b701-c0ca7d4fca20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31d1e0b7-f070-44f1-a569-ba097771464e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a307f4d-8610-4f3a-be3d-46151cad7ab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e257784c-2cd4-4b87-9a83-027c94588c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1af14fc-e8c5-48cd-96ee-8dfe57c5a9e8",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25260a2c-dbd8-4888-bc79-9fd7ba362f4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3c5fc37-2f67-4af9-b912-b6576a67120f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3b2bc0-7ae7-4932-a555-05a0238e4880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff95d581-904c-4d2c-ba79-334f2a80351b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0887f80d-03ca-465d-b9a4-88b54f0f1e7e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b88535-9072-4baa-8bef-d6fdd444e17b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0faf4d58-7ea6-46a5-83db-8f04224a0361"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a88fb140-0a4f-415b-9ab7-47237277c425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae0dd56d-3dfc-487d-827b-d5c98a07a1ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d46522-085a-4658-8d30-88e1fb78a5c7",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98dccc6c-5c7f-4b2c-aaf2-5a0d99e2ed20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59fd92da-5948-4bd5-8d82-b8e97777f288"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "205e7a7f-5996-46d9-b161-57626f2dce50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de586e92-78e9-41a1-b411-dec7ae953e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce178786-e3a1-471f-931f-0e8e6b81d36d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e837e9f-63b7-4f02-8e40-8a1b1d7e5ab8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ee97e6a-0173-4943-a626-1def01a28a8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b58f3938-4895-4163-aec5-6ee01b11f43c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2c3f7c5-5e17-4ed9-8178-dbfe0c790240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4caa08fa-6705-46b7-a279-f7aa7a066edc",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05317490-6724-4789-94bd-4f6133fb5d50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44e02b47-5733-4be1-8ec3-92e2ee7bb7a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3421ed3a-609c-4bec-a0f9-ec3d7f18461a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88f6e69c-668c-47bc-b83f-905b251237aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4504b525-b823-48a2-bda3-d16c066cf654",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5626913e-eb4a-4d77-81a1-4b6239ca5261",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38e0ca2a-f59e-48fd-980a-c6690921841b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2dbbbd2-9d49-44fd-a12a-9a92c0b3d830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42364326-8695-435f-bfea-9512f35f7ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca6d49f6-9b69-4821-b8cc-6350939edd68",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b058eee4-9c0b-482f-8f2b-b119172d99c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10b353fe-083b-45bc-aa91-1028f236194f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea48d713-72a5-4eb0-89ea-6e46e2ab10d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbff1c34-25c8-4e37-af37-480f072952f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fde4e98b-bb3b-43eb-b965-feb324de669d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e8eb6c-1131-4b0f-82b0-e190a57c6721",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60852d52-ce26-4690-95c2-9bf2f757b72e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0446a083-0ff0-4764-b045-4ea7f37d5333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a04fae2-9377-4f0d-90f4-18f3d5c250a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2a754f-6c0d-4516-b605-5a2fcb4f9857",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0ebc656-075d-42c9-a971-43fc06b39843",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdaf6624-39a0-43fb-8d4b-f89cd1300ced"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d4e955-f555-42c2-94f5-94fb21b6274e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce1c2fe9-66f0-45ec-a96e-e361bb1cfdf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18decf77-645d-476f-a89c-fee404a768e1",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5379dda5-f975-4fda-b3cb-c018a8622f16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03b8d240-4254-4ed3-82c1-769a23d0c99a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a597237-b2b8-446d-9b46-60b82acce9ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8226f1f-075c-4fdc-9fe4-446edb3f7d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284fc38f-8947-4124-b614-f47c6ab566f6",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "993d10bb-1a8b-4677-8da7-bebede00a4cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97f5604e-ede6-406e-9d90-e31619ea50d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5fe7828-7e3a-4e12-ac4f-d173a67d06c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34e58696-5609-4dde-ac4e-7a25650a5877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504fc400-9e89-4dc1-ba8e-830eba372a6d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2487dbd6-7735-4bcb-a6a0-40ccff26fb74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be6173c0-96a8-4d34-acbe-4d12eebbfd87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7140478-dd92-4ad9-857f-46a0ef651bc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "705dc8f8-8f05-41cf-a773-da9c60133b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36733bcb-70a1-494a-85f6-dfc3417784ab",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "799668e8-10a3-44d7-9fd9-5f384decf8c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91563bb0-42c8-4973-82f7-3912919f01a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7add5a04-d33c-4ba0-a122-2ab10898e543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d799217b-a9db-4c2c-a977-dc3004a28848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db0d1bec-6a44-49d0-bb4a-4a0c8e9e5407",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7270aaa8-2491-41ed-a65e-618802595ff9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee50e0cf-b8fc-45ed-afbe-8e959f954d70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac1ce9ce-83ac-405b-b1b6-f6487a4e9876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e518831-9943-4b95-a4f0-e4089169ff0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d432b3-f79e-419d-b633-c1f4bd743910",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475807d6-dacc-4d7f-a7a8-b98ad822dcaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18cf24f5-b9fe-4228-b405-db0303311906"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4239369e-ed87-48b6-887f-a646be97a012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9ee1546-fdc0-4d24-a428-b35bb6faf299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac9c4eb-1dce-4f80-b445-92ecd1c22fe3",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba34a40-adfa-407c-b699-9ef6fa9353d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ae07a7f-f46f-435f-8624-9f1e3d979cf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ef8ac84-21ea-46e3-9d30-ea890500fa02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49e95606-7713-4d60-916a-4d5a60674f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9191ce78-2f0f-4320-8543-e65dc99ebb77",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79e3b0f-fb2a-4753-92ae-8fdb974acce5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99ca99c0-f97b-4ba5-8eb1-c0474780aacd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ef8c924-672d-450f-88eb-44071220b597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16184f66-d757-4b78-974e-b3704f8ee514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a63b5b27-b9ea-4f88-8b24-8fa157df7f24",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4be04f-866f-4509-9af3-73b463e601d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afbfc249-415d-42c1-89f9-4f18a9e3822d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "261fb573-0995-41c0-b32e-e04bc1e9cc1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efc05e17-c732-4d03-8300-aec225d2c5bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148fc465-c436-4308-b314-df26ffe60eb5",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "669f39a5-5d18-44db-96c9-36fc01fca544",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d513f99-dd6c-495b-a878-29a31cf0eff0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b04975-9387-4dbc-94a7-67416da7cf99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13cb1153-9d15-49fe-9987-ab958ff43bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9446314-7c8c-4a90-bf6d-caca7fe91643",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce89434a-ddf4-4c16-88f8-80a3c5a031db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fe0f437-41ef-461d-95c4-cb2eb799aa92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1792c3a7-f369-4ca2-80be-f22ddd01ed73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20ea5ec5-9af4-41c6-8747-21857bead982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63baf23-fe02-482b-a08f-2b4e7eac553e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9500d5a-1d6a-49a5-b1ee-1758cf127f69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5ce7a9d-c901-4fa8-8f55-6900ca29a6a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4ca968a-d553-4ff3-9d17-a9d197870f67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a212d40-47b3-4e04-be75-cd8b241d9fda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee0745c2-68d6-4740-a149-09055109d249",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c65fd1b1-155f-4fdb-939d-a2e5672c58be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "548a66c7-d5ac-44d7-8fe9-cf72a8840556"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f04591-531d-4b75-838b-e02f826992d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0d4aa83-2265-4815-a5ef-65c73acff0bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3234a0c5-14e8-43f7-8762-71b20de2e0db",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1185fe37-d211-4d5f-9fef-7a0e5de7d081",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83eb78db-76b0-4ca4-9928-283cbbdfaab9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c41e91-fadf-4230-b9b4-80ad8f6f5674",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8f63b6b-18ba-47d7-aa14-a360afbf4623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b946774f-581a-41d3-8dac-efd057587f39",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ed48b3-28ee-4a33-8ca3-527103f505bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57b83a9c-ea16-4d61-b141-29dc48371360"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb500512-32d6-4ceb-a802-991b54e03cd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecc11e5d-3510-44d5-851f-66a58f369904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0262be63-39fb-4323-b207-912ab1fac734",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea49d663-375f-408c-ac29-ac013aa3f95e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f051fe1f-56a1-405d-83c2-a522d6a0eb7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b88197b1-c19b-4518-ba07-68f6e94450d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6948b6a-96e2-487a-ab04-a8deddab18c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84541bd1-e762-46ce-939c-07b82fa85380",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b92d0da-ce21-44fc-bc1b-789c96d0ad3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db67a76b-0a67-43a8-93e2-40cd56e0da00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1858d331-6054-494f-a3ce-7bdfebdb7e43",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5754ec12-21bd-4229-9f4e-cc70bbe92b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4763f85b-3ebb-4ee1-bb7b-0feb0f54bcba",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64b0572-13d8-4bc0-95de-1bc37f9a789b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a33a5293-3f48-406a-a9f1-69b08752a760"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b73df9-52ed-4fa0-a105-8b2585c02ce1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc0ef29f-208e-4292-acb7-6dfdba44b6ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a1502b4-0b37-4391-bcff-8a5a23b5062b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b97a8f5-7838-4c18-a11c-7043d1c20b9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8471a84e-08f3-448f-945d-440ac3ceb858"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e058814-d839-411a-a664-60544b6ca01b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87f11f84-14ee-4a3d-af6b-81a87895cfa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bc08334-06b1-4473-b6fb-40a497691447",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a96a626-3bf2-472f-b5a7-d78c7c1e18dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cb95e28-35db-4fa3-8a60-f5e14b2f4380"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5377f3e-48de-4e63-9a05-2ccf16e8ee1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b396e535-9cde-45a3-83e3-3204b0e3aa21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63744600-d268-4f4c-b62f-cb626b381630",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c130faba-6ba1-408f-9b61-3e2e77228121",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8afa7f0-b89a-42dd-ac67-dbe027b43bf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd8c5d7-aefa-4cbb-bb6b-d1c36e01ab2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42895012-a61a-4f56-83a7-c45fda31aa02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7f3cad-1d41-4ac2-a5a4-3346591d1e7a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82cb80d9-eb3d-4363-a5b9-dd0b3d2cad9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1815dc57-3b16-4af7-9e8b-9a474effac10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4002a9e1-733c-4a12-b51c-2ce43b2184b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4e5135f-aaf5-4214-a951-39f28726f0a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21379ee4-ad1d-4120-bdeb-94684329f321",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "865085a3-f98c-4bb9-b61b-16a866267e5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "606a256f-b64b-4ce6-8edd-865f9bfc359c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41c4ba38-b6b9-4bf1-96e1-a73ece42f608",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b39e225c-0ac7-4d22-9443-27409970d0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a349b4d7-3d60-43c0-b8d7-7a10f8e896b7",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01df897-8fb0-4ca3-a047-c64155a6cbed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5078a816-92c2-43ba-95a2-e82914d30ef7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34bbfe1c-acde-402e-9c00-83f5f119abcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8adf0ef-9b18-401a-834b-f3454714b5db"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1ab58259-827e-4c44-99d1-03a5fc171cd7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e260d2d-6824-4ebb-977f-a0cbd2273b0a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "75be2553-8633-4ead-96a0-be96f5103bf0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "11463217-6397-4ced-bdc4-390f818e2bc3"
                    }
                  }
                ]
              },
              {
                "id": "efa3f6e4-b23b-484f-9205-2ad40ef212eb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2d3319e3-eed5-4c52-979c-60f703eca79b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3880893-9312-4793-ab70-afe437f5f5c4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7aa393af-5fe6-4ef5-8cc1-6d144d88c569"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a17ea688-4255-4559-b340-b510d555ec2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b041e55d-9c6e-4ad6-ba25-3049c61ebb03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81815449-9ff1-4d91-bddc-5414770f103b",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "076b15f3-65e1-40dd-b19d-cfbc8682a624",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "33207a49-a873-4dd6-aee2-aeea8fc83511"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e2daba-589d-4381-969b-8b70b361f24d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "19715c4f-d3c3-4065-8901-b64725b13757"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e6968775-cfde-4909-bc82-ae75e66a5d7c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "933557d0-91aa-4f04-a130-2a5d6571474d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a925715b-48e7-4f46-a6d0-6d9ddaff97e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6384018-f8be-484a-81e0-d3759d6ec1e9"
                    }
                  }
                ]
              },
              {
                "id": "cc9ff969-a64f-4129-916c-462d7a8abe49",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c06b5895-2a1d-4da9-88a1-a1dab91d85ca",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8b3ed6-daba-4a96-aa1e-41a97ece5523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "fe267b25-38c6-4564-b543-bf95abdfc95a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70b8af6-d467-43dd-936b-ca135b0e3702",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01f04885-2e72-48a7-b121-8cd6e0944107"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "238de6f8-fc35-408a-95ab-d705634f650c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0a188786-080e-48fd-be63-9940e9296ea4",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d691af3-ed3a-4c18-8771-ba4526a408d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "434a75a1-ef1c-4ae6-a573-5a2342e33d9b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d1df28a-b6a8-44dc-963b-ac8540d5034b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "674ab051-45e3-4e82-b2aa-ef11c7f93f3d"
                    }
                  }
                ]
              },
              {
                "id": "40bd211b-9aa6-42c1-ba26-23a2eba0b17c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3de2159e-4aea-493f-b9c4-90f4b7797590",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "94489cc8-1422-459d-b77c-ee823ac62cd6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "831bcbaa-cb7d-4a48-8097-5b33a394ecad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "207045df-e0f1-4ec6-8987-10c8a4b1aecb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "65813df0-fee1-4ebf-b8c1-03af48ae827c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f9954ff6-260e-45eb-86c1-62750c970cb9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c3f49c5d-6140-46bd-be06-34cb049d82d9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "34eabacb-7752-4c0a-97bb-9663f6e85290"
            }
          }
        ]
      },
      {
        "id": "ce8c7e6c-2113-41da-b974-46dc3569df67",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1db47ef6-6484-452d-bec0-49c01c184611",
            "name": "Negative Testing",
            "item": [
              {
                "id": "60563a98-5afe-4b09-97ea-84b41ab4aca9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8102ab29-3759-4cca-8337-792158c7e06a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "654fc851-f04f-464b-818e-843ea28f0504",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3b08ed28-5249-4498-bffe-4dd122f3709a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e71f92-1bf3-48e0-ab59-7fc743512a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bdf4a566-4c4d-49af-921c-d208d44206b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed192de-4096-4779-9df5-a2f09c14ca12",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ddb0d74-4871-4865-98c8-9e36bde783f2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "49d59e03-0e30-4c48-9bb8-615757853ce6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50228069-5215-4a8f-a17c-693435b321e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1aaef862-190b-4b47-8a9a-50e897708523"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64eda86d-8068-4866-8019-76200e9a083e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c480786e-8f2d-4231-a03c-f8b7a0dc57f8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a9220052-7da3-4eb0-a804-a2b2888832e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f684c22c-8e6b-472b-a00d-23b44ef09959"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c82f247-5e69-4925-b584-6fc3ddc1f9b8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "05590c99-fd07-44ba-9ba2-6c1aaf291dc3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "47390279-7ce6-4db1-9876-e31ad6614b1b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "913b35bd-e944-43a2-a4dc-db9555f49e33"
            }
          }
        ]
      },
      {
        "id": "15992e44-ac9d-481e-b9b1-806dca288306",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "24d1be11-66da-47c7-8af0-cc070cd13895",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ce12b564-cc20-4b82-8079-47426df1014d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "577bfc1a-0777-4ea4-8ca9-ba3a625d46fd",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b6fa2ef-45db-4d90-b0ac-eb2c6d1a1b01",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e3f3d5d4-e309-48a4-a4e0-e37d16aa1c11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15e933a-2bc4-4291-afc6-ee6521eeb790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9fbda083-06a3-4c75-bcd6-7ac70dd829e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587aaa46-9660-473c-a5c9-a7987996b272",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2712d56-78f5-4e1e-8ed8-10f9732406c1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0d54ed0e-5ee3-454c-bbb1-846a12e3b767"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d686b30-abf7-4d61-a132-9222e1004d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "41e921bb-11ed-4d80-ad63-9b224e59dde6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d8a31a5-a035-4775-8bda-45c32c7075a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ea216e6a-2be3-4785-8b04-dc8784cf16b1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "87b70a89-5c19-4059-803a-9aa132459f5e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73bbd730-1d29-40e1-8ce3-3bcd8371edcf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0c32613f-c50d-4539-b721-17781a97d037",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6bc2904c-5ca7-4e0c-8b27-231faca75b64"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "96f774aa-619d-4e75-b815-88c24368bec6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "92d53286-c84a-44da-8ec0-f38d29f923ac"
            }
          }
        ]
      },
      {
        "id": "a41ae2d3-138d-4679-b0df-916f8b3a0701",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "9e97bceb-9025-4727-bf2a-2cb43b2b278a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "74b287f6-c47b-4090-9cd3-7352fcf73813",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "51dcc0a8-16f0-4199-a376-5e1e82f24716",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da0d4a9-f7c0-4ef1-92fd-df13a0d8799c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d873d60d-23ba-458f-9c9a-95fe2600d597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c64f87-538d-4517-ba89-a8b71c4ecb73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c413658-8f00-4f1d-be2f-07970bc114b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e72889-133b-490a-a853-4874f331cc62",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc6b5e2e-417f-4173-99d5-140ad053245a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "63b172ca-2211-4df9-baeb-c753cbbf859c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea9ab2a-18bc-4ab7-8327-39d6882ca3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f70875c5-5047-40b0-8d26-14d09f2e4baa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6b0b5a5-f228-4714-adfa-9244acb318e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e7c07e8-b410-4942-a6a9-b116edc9e6b5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "21e02e60-c9d5-4a79-8805-21d7d1c6853b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa8759c8-f35f-4919-a004-f1366ce8fa4d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fa0ea817-8340-427a-a785-882713242648",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "629cab69-3475-4403-aa92-c2c10841822c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d23aaa6f-c4ca-4b9b-85e9-67393cd4fcca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4dff616b-e2c3-417a-ac86-84b6db4a497f"
            }
          }
        ]
      },
      {
        "id": "9b0e0d1e-839f-48f2-84c0-16be5ea38356",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a4dde0d8-c47d-4eb7-b9c0-760500517e2d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "65826882-afcc-4f26-a8ec-29c59bef484f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "60847fed-335c-41e6-a29d-cb42694f2a82",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "523fb860-23ce-45cf-aa4c-bea8a9ccfc64",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "17202b93-1f84-41ce-853a-293dcf1e6852",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 84.98473282442745,
      "responseMin": 7,
      "responseMax": 1014,
      "responseSd": 166.5320034223448,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1672101466207,
      "completed": 1672101499912
    },
    "executions": [
      {
        "id": "4185d82c-02a9-419b-b0d3-921f61d82482",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e71e61cf-47fa-4f81-8524-144c9baab6e2",
          "httpRequestId": "c936afbc-7fcb-4c40-aeab-57623b5a74a7"
        },
        "item": {
          "id": "4185d82c-02a9-419b-b0d3-921f61d82482",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "eb323dec-279c-4514-9eef-6528bb7c999c",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 0
        }
      },
      {
        "id": "c7f0e00c-7466-434c-953c-2b62448ae820",
        "cursor": {
          "ref": "06527bfb-c789-4651-a526-e78c77a89d5b",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "017e5694-3342-401c-8cb7-2ecedc833632"
        },
        "item": {
          "id": "c7f0e00c-7466-434c-953c-2b62448ae820",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "bb2d1eca-d4f2-43f4-b156-3cc6e5e38e84",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "8cada2ab-fc68-49f7-b81c-8ca2c003e594",
        "cursor": {
          "ref": "7c677f07-2be9-4823-b790-310e3897a86e",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c33225ef-45ca-4485-890a-e34881b95953"
        },
        "item": {
          "id": "8cada2ab-fc68-49f7-b81c-8ca2c003e594",
          "name": "did_json"
        },
        "response": {
          "id": "31e5e95e-2cb8-4ae7-82c0-398f3bcf499a",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca54e177-8595-41c9-a54f-76c136e408b9",
        "cursor": {
          "ref": "2b9c46ec-4af8-4a23-b61a-d15fdfee079c",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8c9ebdf5-6f23-4359-8ff9-4095901059db"
        },
        "item": {
          "id": "ca54e177-8595-41c9-a54f-76c136e408b9",
          "name": "did:invalid"
        },
        "response": {
          "id": "089044fd-62df-4149-a791-7742992d19dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca54e177-8595-41c9-a54f-76c136e408b9",
        "cursor": {
          "ref": "2b9c46ec-4af8-4a23-b61a-d15fdfee079c",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8c9ebdf5-6f23-4359-8ff9-4095901059db"
        },
        "item": {
          "id": "ca54e177-8595-41c9-a54f-76c136e408b9",
          "name": "did:invalid"
        },
        "response": {
          "id": "089044fd-62df-4149-a791-7742992d19dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f53fb2-77b8-4bb8-9c03-3c2cb9ab5cb3",
        "cursor": {
          "ref": "4f7d855f-b398-4abf-a455-e2bdf3e7d892",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fcdd977e-cc01-464c-b65b-cc69be3bf243"
        },
        "item": {
          "id": "86f53fb2-77b8-4bb8-9c03-3c2cb9ab5cb3",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "30e0054c-d8fd-47bd-b18f-08679e199c49",
          "status": "Not Found",
          "code": 404,
          "responseTime": 51,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9089943e-66e4-445f-93ac-fabdb839aeec",
        "cursor": {
          "ref": "9fbee321-ae66-4071-b8b4-c032784e9ffb",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "352d6058-8c69-4baa-b7fc-744488bb3bd8"
        },
        "item": {
          "id": "9089943e-66e4-445f-93ac-fabdb839aeec",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "dcebd99b-fb60-4230-a36c-94b5b3abafdf",
          "status": "Not Found",
          "code": 404,
          "responseTime": 10,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83dd75d9-561d-49f1-bded-1d58358848c9",
        "cursor": {
          "ref": "b0317635-e28b-4fce-8ffa-4eed3ff27cfd",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "fd6f8a44-072b-44b2-ba9f-b2aaeda526aa"
        },
        "item": {
          "id": "83dd75d9-561d-49f1-bded-1d58358848c9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "80fc1d95-83c2-4078-868e-955ff143c79f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc54a2d-ef5c-49fc-bf6d-9361b11088cb",
        "cursor": {
          "ref": "b19cbae8-d014-4232-8fa3-6d8620de589d",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c4522f00-bac0-48ba-a6c7-2dc5fb73bbf3"
        },
        "item": {
          "id": "4fc54a2d-ef5c-49fc-bf6d-9361b11088cb",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "8efdcc8a-a82a-48cd-a4d3-1ad6c2968f41",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc54a2d-ef5c-49fc-bf6d-9361b11088cb",
        "cursor": {
          "ref": "b19cbae8-d014-4232-8fa3-6d8620de589d",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c4522f00-bac0-48ba-a6c7-2dc5fb73bbf3"
        },
        "item": {
          "id": "4fc54a2d-ef5c-49fc-bf6d-9361b11088cb",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "8efdcc8a-a82a-48cd-a4d3-1ad6c2968f41",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc53a743-f655-47c8-8f3b-d2a9f1a55bd4",
        "cursor": {
          "ref": "3990e117-707f-4f5a-b049-e35b0eb8a8b3",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "726d0025-c70c-4e6b-925e-9f67545abbbc"
        },
        "item": {
          "id": "dc53a743-f655-47c8-8f3b-d2a9f1a55bd4",
          "name": "identifiers"
        },
        "response": {
          "id": "b8713ebe-b351-4a9d-8435-277922ab110f",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81df63a1-cba6-4543-bdef-ebd0364f13f1",
        "cursor": {
          "ref": "51b2eec2-c82e-45d2-97f3-7bd8b6aeb77d",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0b24105a-6234-479a-83a2-f2a8741761c2"
        },
        "item": {
          "id": "81df63a1-cba6-4543-bdef-ebd0364f13f1",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bc93da0b-8bdd-4585-a113-1615127540c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81df63a1-cba6-4543-bdef-ebd0364f13f1",
        "cursor": {
          "ref": "51b2eec2-c82e-45d2-97f3-7bd8b6aeb77d",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0b24105a-6234-479a-83a2-f2a8741761c2"
        },
        "item": {
          "id": "81df63a1-cba6-4543-bdef-ebd0364f13f1",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bc93da0b-8bdd-4585-a113-1615127540c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d91e644f-5042-4db5-9d82-b9e8ab143c5c",
        "cursor": {
          "ref": "f15804c1-538f-4405-8888-1f870c986119",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "26d38b3b-c520-40d9-9362-1013e5a3cb29"
        },
        "item": {
          "id": "d91e644f-5042-4db5-9d82-b9e8ab143c5c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1f7f9869-d38a-44a8-b8cd-9aee441f763c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19474b90-edc0-45ae-960e-ff7631491197",
        "cursor": {
          "ref": "84dc2d06-305e-4f21-a7e3-39cfbd62b4bf",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6e758cbf-8e13-40e5-8c38-1b04f12deee4"
        },
        "item": {
          "id": "19474b90-edc0-45ae-960e-ff7631491197",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "090dad6c-ff18-4922-8098-7ccc6ab90852",
          "status": "Created",
          "code": 201,
          "responseTime": 658,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "ad91835e-aa85-4417-9e32-7b1804751c53",
        "cursor": {
          "ref": "f1ed27df-722e-4ad3-a89e-b9a783ae43bb",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c4fd1997-d005-4e97-934f-de0cbe48c197"
        },
        "item": {
          "id": "ad91835e-aa85-4417-9e32-7b1804751c53",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "479520f0-afe1-4ec3-a376-a07d3eb45c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "608f4e4f-2fe0-48f9-9ad5-ee2039f4cdef",
        "cursor": {
          "ref": "33c09336-3e08-401d-807d-0083ad4b273a",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "fc2513e5-56f3-472c-8263-018c3565ece6"
        },
        "item": {
          "id": "608f4e4f-2fe0-48f9-9ad5-ee2039f4cdef",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "48e6b1a9-b3cf-449e-a902-564a7383af2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d23037f-96e6-4113-984f-dec591b38114",
        "cursor": {
          "ref": "a4973c38-224e-4717-9865-eb8ab564e3e4",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1c31aa31-fe84-4565-b392-dc4369617457"
        },
        "item": {
          "id": "9d23037f-96e6-4113-984f-dec591b38114",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "20b667f3-c64c-4680-b5a0-9968ae7cf392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b3c2d26-680d-43fd-8140-4584a764345e",
        "cursor": {
          "ref": "12ee0940-8f8d-404a-9f27-d1ddf908e145",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "32130f77-4845-4b3c-ad58-a0aaac8a6370"
        },
        "item": {
          "id": "6b3c2d26-680d-43fd-8140-4584a764345e",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "4963c9e8-e94b-4838-86c1-27be33763f67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed6dbff8-a9c1-4c2d-9987-90d7abe234c3",
        "cursor": {
          "ref": "e7b60c54-daee-4f18-bef7-7aa07bbdfe07",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "06005109-bef7-4404-b57b-0529e6d8e410"
        },
        "item": {
          "id": "ed6dbff8-a9c1-4c2d-9987-90d7abe234c3",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "548c3b29-f77c-4906-bfff-79b38b8b490d",
          "status": "Created",
          "code": 201,
          "responseTime": 502,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "317e4602-ba68-46e2-b5e6-a35bd578587f",
        "cursor": {
          "ref": "c05b290e-5c3d-495d-89c5-ad5369e273bc",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2f555b12-156c-4b55-b318-a4cc884925a8"
        },
        "item": {
          "id": "317e4602-ba68-46e2-b5e6-a35bd578587f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "9336e927-343d-42c4-ae9b-13e38813ee84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "086a96e4-7ddb-4b09-9931-d0eb55519dbc",
        "cursor": {
          "ref": "d36045bd-23d4-4146-8140-06f455e2ad67",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "537aea8d-b213-4680-b5d0-106dcc40ac84"
        },
        "item": {
          "id": "086a96e4-7ddb-4b09-9931-d0eb55519dbc",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "86cac6d1-b104-4f04-889b-40b2ee1da6ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52e31728-b3ec-4ff7-a01e-92eb445e0149",
        "cursor": {
          "ref": "284e4b6d-9a8e-4dd1-9dcb-27110a53d9f0",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "14ed7c1e-d91b-417f-a155-af8912bb2efb"
        },
        "item": {
          "id": "52e31728-b3ec-4ff7-a01e-92eb445e0149",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f6ade8a7-1a91-4b21-bf2e-61f8c1838f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1dd5418-2b9e-4aaf-8040-4de94ed754a6",
        "cursor": {
          "ref": "97cdf6bc-f974-46b9-9392-19a53c905356",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "5b1c08ef-5b4b-4381-8ee7-70c001289348"
        },
        "item": {
          "id": "d1dd5418-2b9e-4aaf-8040-4de94ed754a6",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1b8f602e-dde7-4a2a-8aca-cff4447de29d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f20cf93-2c48-473d-980b-2036698b5baa",
        "cursor": {
          "ref": "63b05909-7fbb-4eae-b044-4a4e0ec8f50d",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a89547d1-357e-47f7-b351-1d1f411b99fe"
        },
        "item": {
          "id": "3f20cf93-2c48-473d-980b-2036698b5baa",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f532f34c-d666-4f5d-9b99-41a679e0703e",
          "status": "Created",
          "code": 201,
          "responseTime": 503,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "e6e1e92f-6800-4eb3-8c5c-e353b80c4a7a",
        "cursor": {
          "ref": "3c20e888-65d6-47a1-be4c-bd7202cad10b",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e97434ec-5023-446e-8d16-69ccefbf0a2a"
        },
        "item": {
          "id": "e6e1e92f-6800-4eb3-8c5c-e353b80c4a7a",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "4e315d9c-1a6f-45df-bd9c-ae778fcc47c8",
          "status": "Created",
          "code": 201,
          "responseTime": 855,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "cc323258-5471-4f13-bf0d-463bfdd1a334",
        "cursor": {
          "ref": "475c32c2-9b16-49f2-b16b-0d745d9fd990",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "633277bf-6c2c-4589-b901-ed10ba243e37"
        },
        "item": {
          "id": "cc323258-5471-4f13-bf0d-463bfdd1a334",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ecb19930-0dbd-41f7-aa98-bd4e179ee20d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8407911f-6a87-4edc-bb5c-998ac8b544e2",
        "cursor": {
          "ref": "f60302f6-b794-4224-a241-f2675825ee5b",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0031e9b7-f536-4d55-a5ae-1a81c24594c6"
        },
        "item": {
          "id": "8407911f-6a87-4edc-bb5c-998ac8b544e2",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "f075eca8-6c64-4d75-b5ba-4dd8c48a06b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64495646-9704-4162-a921-dd5782a570a5",
        "cursor": {
          "ref": "a0e629f2-2686-4f67-a670-d474db1a36ae",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "a8430544-216e-4ab2-8e51-eaf6ae786201"
        },
        "item": {
          "id": "64495646-9704-4162-a921-dd5782a570a5",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "75ff4219-d141-4810-8e5a-a5797f606fff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a55c7303-7785-4a6d-b397-c7db29303e62",
        "cursor": {
          "ref": "c38ff41a-971f-4196-860c-ee461c826751",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "88bfebc8-1809-40cf-a742-af201119c233"
        },
        "item": {
          "id": "a55c7303-7785-4a6d-b397-c7db29303e62",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5d822d30-8180-4941-94bd-1ffe85627f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1503fa0b-4ecc-4604-a136-f3365f37242f",
        "cursor": {
          "ref": "5df35fc1-5eb6-4d3b-a262-855b19d74b77",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f03f8fb6-0861-4cd6-9905-f071e224bb24"
        },
        "item": {
          "id": "1503fa0b-4ecc-4604-a136-f3365f37242f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0a60c4a7-308e-4765-9948-7c7a789863d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f54ce6f-813e-4bc3-8309-a7a474fcaf24",
        "cursor": {
          "ref": "33254907-6e27-41d6-aa9c-e6d7157c03fc",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "886f9e38-1321-4284-9391-19f922dba78a"
        },
        "item": {
          "id": "4f54ce6f-813e-4bc3-8309-a7a474fcaf24",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ff09002b-4bb6-4c7c-b753-e26ee5616aae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb104b3-91b1-47da-9a25-a663e14066ff",
        "cursor": {
          "ref": "5e702c94-881b-4ce2-b352-a195e6edddee",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "646e971d-8a43-4650-929e-d61abab5c2cf"
        },
        "item": {
          "id": "7cb104b3-91b1-47da-9a25-a663e14066ff",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "59c575e3-470c-4424-8adc-2ba3df9c7244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5acfcae9-4927-4433-9926-0f39618e5244",
        "cursor": {
          "ref": "780e4f3c-3f5b-47d2-bc92-b62d83000c16",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7bf72cfd-b344-474f-9a68-d1bc102e3be4"
        },
        "item": {
          "id": "5acfcae9-4927-4433-9926-0f39618e5244",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "608eac79-e862-4111-bc8c-d640bdf40256",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bfaa547-0789-43eb-a532-1240dc39fa1c",
        "cursor": {
          "ref": "99ace1cc-ece3-42c1-8a64-12e74ff6a649",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "01e57abf-a21e-41d1-9894-de15dc229a06"
        },
        "item": {
          "id": "1bfaa547-0789-43eb-a532-1240dc39fa1c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "88804774-f0a5-40b7-9945-95910024003e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa06c491-011b-4d28-be22-0f539106cbb5",
        "cursor": {
          "ref": "4368eb65-ce81-4aea-a45f-cc3526bed03e",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6cbfda5e-db51-4353-b2ce-4bfdd86fb368"
        },
        "item": {
          "id": "aa06c491-011b-4d28-be22-0f539106cbb5",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b8449c0f-57d5-4a8a-bd8f-fedfc418bcb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9797e6d2-3711-4ec6-8c76-f77892690230",
        "cursor": {
          "ref": "6cbcb75a-e0d3-403e-9ae6-b3d246577fe0",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5eef4298-a9ef-4ae9-8726-6a756f659c53"
        },
        "item": {
          "id": "9797e6d2-3711-4ec6-8c76-f77892690230",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ba6fea50-17d5-42a3-944c-cf79a9eeb3cf",
          "status": "Created",
          "code": 201,
          "responseTime": 633,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "fb84b241-5425-4e21-b253-8cb8894f31a5",
        "cursor": {
          "ref": "1ad98be9-3fe6-4770-8746-e1496d0d83ae",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ec72799f-ee9c-49c9-b357-a49c80b6ce14"
        },
        "item": {
          "id": "fb84b241-5425-4e21-b253-8cb8894f31a5",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b49d4b7c-bac2-4d3e-bbaa-0e31dd7e3630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d91d269f-abd8-4581-ab30-454807c8e5ea",
        "cursor": {
          "ref": "12125a20-47cb-4aeb-9dbd-cd86b803e281",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "72509149-249b-4ae1-a54c-5ac4db5527ab"
        },
        "item": {
          "id": "d91d269f-abd8-4581-ab30-454807c8e5ea",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "3cc1fd48-e844-4d4c-b3b1-9630a757931c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0dda280-5c58-4503-b4c8-671e806b787c",
        "cursor": {
          "ref": "761dbf2d-43f9-4e86-9a8b-6302b75dc5c2",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3ec82059-8fa2-4a54-8d02-8c3a9641b3fb"
        },
        "item": {
          "id": "e0dda280-5c58-4503-b4c8-671e806b787c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "6d2dc9fc-39db-4d24-961e-46d33a401b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f0095b2-d886-4bc4-9dcf-237fbd3a31af",
        "cursor": {
          "ref": "08bb70ea-6ced-46d7-8818-1190aab80b09",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "cc88bba3-e7eb-40de-a4e0-ab73a516f5ae"
        },
        "item": {
          "id": "5f0095b2-d886-4bc4-9dcf-237fbd3a31af",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "1d0d9fec-b83a-4e6f-b0b3-070419c1f320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88bf8464-61b2-49f2-9d88-36b28f08f25b",
        "cursor": {
          "ref": "b6f54148-a790-4e0e-8a37-c94f21fe4466",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ed78911d-c78c-4cd2-855a-0714c7b99317"
        },
        "item": {
          "id": "88bf8464-61b2-49f2-9d88-36b28f08f25b",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "5dca5703-648e-47f8-bdb2-b72e5319d7c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee3282b-12d0-4c9a-a2c6-0f7d51690913",
        "cursor": {
          "ref": "74a53aac-ccbc-449e-9622-a81fa34306e3",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "35753751-c09e-4d2f-b8d3-21f4b39ac36f"
        },
        "item": {
          "id": "bee3282b-12d0-4c9a-a2c6-0f7d51690913",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "01580b2a-b201-4adf-94a3-c91d165171d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae0f158-2da2-4917-b1bf-262df2f437cb",
        "cursor": {
          "ref": "d18b0787-ea0a-4e42-ada5-181ea8edb0dc",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "fbb5d658-5c24-4d53-96ff-55f5a73ad612"
        },
        "item": {
          "id": "4ae0f158-2da2-4917-b1bf-262df2f437cb",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "eb1982e6-4a89-453d-adfd-c04928307227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a8bf61-e7e7-4010-817a-d24a160b5009",
        "cursor": {
          "ref": "dc8027da-05ca-43ab-9553-e526923bba4b",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "541df10b-a3d0-48ba-9b95-7f35dd66c932"
        },
        "item": {
          "id": "88a8bf61-e7e7-4010-817a-d24a160b5009",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b7a5feed-a260-4929-945a-9789f76a34a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01097f42-a435-4c2c-907b-f9233eda5622",
        "cursor": {
          "ref": "0f6270f4-1126-471a-84f6-15b1d5cbcc15",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "645ae265-c969-449e-8915-12a1e0e9137a"
        },
        "item": {
          "id": "01097f42-a435-4c2c-907b-f9233eda5622",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "39879952-871c-481b-be19-29b89bd890e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd204de7-502d-47fa-a109-fc9adbba90e8",
        "cursor": {
          "ref": "f2b1c20d-5e16-4e1e-a44d-286bc6ea05cc",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9885dd3d-efd6-450d-aa9b-41d1eb1a3afb"
        },
        "item": {
          "id": "dd204de7-502d-47fa-a109-fc9adbba90e8",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b1fb7562-1bc4-4f5a-a2a2-f559b86d5c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ec85c0-c40b-4305-be0c-1ecad2cdbf94",
        "cursor": {
          "ref": "f3278d3d-2631-4524-895f-36e027513ce1",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "83136f4f-6bb8-464f-8152-4f621c0eb584"
        },
        "item": {
          "id": "47ec85c0-c40b-4305-be0c-1ecad2cdbf94",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e51c4563-9fa6-4c27-932c-455a36fc1304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed68e381-7f93-4c08-9b1b-3049698572da",
        "cursor": {
          "ref": "cce98789-c772-41f7-864e-97c184682d37",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "adc7013f-70dc-48ad-997f-f70137908b7e"
        },
        "item": {
          "id": "ed68e381-7f93-4c08-9b1b-3049698572da",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f43e8cc1-e9e4-44e7-bdf9-6f0105d3be09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "189486e3-a4d7-4f8e-917a-c4a19bfd9fac",
        "cursor": {
          "ref": "ec043697-92be-4f00-ba4b-11c983b38b7f",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f7b64750-f0e9-4e2e-bdb1-6b6a4099f878"
        },
        "item": {
          "id": "189486e3-a4d7-4f8e-917a-c4a19bfd9fac",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "79df1601-07ae-45a4-95a7-7bdbaae58883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 342,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "7622be43-8c29-4f6d-b9ca-ed08ea815cb4",
        "cursor": {
          "ref": "fcebe93e-1e1c-42a1-94cd-d50871697d06",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "4b554b2e-2954-4afc-b2dd-c78a3cb15501"
        },
        "item": {
          "id": "7622be43-8c29-4f6d-b9ca-ed08ea815cb4",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1696d143-6c54-4cac-9436-cb389ccb508f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1a2db5a-0959-4bdc-8873-5af31ce7b997",
        "cursor": {
          "ref": "5685a342-3a63-428f-9589-e2c1e333ab48",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2f4ac7de-8c96-4b2b-921d-420d93fd701d"
        },
        "item": {
          "id": "f1a2db5a-0959-4bdc-8873-5af31ce7b997",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1dc2b494-c793-4f0c-8b3f-d789231e0fcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c1a4d0-c970-46e6-804a-6e1193a7c47a",
        "cursor": {
          "ref": "fcc9dde8-1e1a-4adc-b2cf-41c990104354",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2818a1f7-b552-491d-95e5-9eb14d37a899"
        },
        "item": {
          "id": "60c1a4d0-c970-46e6-804a-6e1193a7c47a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f47968ad-2e5b-47a6-b739-c9b7cc361b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "860521e7-4646-4b80-813d-d5c6738b9c52",
        "cursor": {
          "ref": "ac026ab5-d629-43fd-b5a9-ec9b2972aefd",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "fad8f47c-7b74-4a5a-9728-ff4fa7716908"
        },
        "item": {
          "id": "860521e7-4646-4b80-813d-d5c6738b9c52",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "212e397d-2299-4f0e-ac30-4d3795296e49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b51088b5-2f30-4f74-bada-8900c1a24989",
        "cursor": {
          "ref": "cbff32d1-0e27-4414-91de-ae70664e4fd3",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c2d61736-389b-481f-a3ef-55a421c42973"
        },
        "item": {
          "id": "b51088b5-2f30-4f74-bada-8900c1a24989",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "4e5589f9-3a9f-4252-9401-b9d966f03980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee8d60a-b553-4b6f-a2a8-013a25c71c7c",
        "cursor": {
          "ref": "9ca205cf-2389-40b0-9399-e012acd8b3ce",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "21ae9009-7bc7-4541-861d-7c152a3c8caa"
        },
        "item": {
          "id": "1ee8d60a-b553-4b6f-a2a8-013a25c71c7c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a8703ba8-6fa4-4baf-9da9-89222103c65d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2029b82-3fc2-433c-bf41-fc58a4a7b38d",
        "cursor": {
          "ref": "dfd9e50a-e73f-4014-8533-2226071dcd44",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "319b7c9e-9e7e-4597-bd4e-cd4fa93e7f96"
        },
        "item": {
          "id": "a2029b82-3fc2-433c-bf41-fc58a4a7b38d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3b63500d-ba15-490d-9b2c-60c909016502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 317,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "d1a2f0ff-e006-48c9-ab3e-ecc7007f13fb",
        "cursor": {
          "ref": "ff6860ba-17a8-40d7-8255-f0bdbff6ab9a",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "35a656ce-f8bb-4e86-8368-9680b55f983f"
        },
        "item": {
          "id": "d1a2f0ff-e006-48c9-ab3e-ecc7007f13fb",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "fb05b3bc-ac0b-4d38-8e19-2a687df7d1c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae534bc6-b62e-489d-a190-323f75473703",
        "cursor": {
          "ref": "bb96e390-4711-45f4-85bf-3a933d55eb11",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ff369c57-3bbf-4110-9c01-50d2ecb9624f"
        },
        "item": {
          "id": "ae534bc6-b62e-489d-a190-323f75473703",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ea651db4-0492-4f43-b4be-2566841068d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb1138a0-500a-4708-9165-96d43d1ceb48",
        "cursor": {
          "ref": "2a9d20e5-7a43-4b0e-988b-d438a8d93c86",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f1b4f205-13c1-4456-a314-b21ecf497b80"
        },
        "item": {
          "id": "eb1138a0-500a-4708-9165-96d43d1ceb48",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0f1aae86-cfd3-4665-a89d-31197d56c904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe4a78c-5544-438b-b078-4d8957c377d2",
        "cursor": {
          "ref": "95425792-62c2-4384-8619-ad224189e2f0",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "007ca61c-eadd-46b3-bf4c-e6d67927201a"
        },
        "item": {
          "id": "abe4a78c-5544-438b-b078-4d8957c377d2",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ca00b2c3-64a4-461b-a599-d41e7d6e1d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "872a3b62-22cf-4ff2-9a71-6963d655ec22",
        "cursor": {
          "ref": "da8dc2e1-9cef-4d5e-90cc-88d68b173761",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3e37aead-e81e-4a6e-bb82-2f10b069a696"
        },
        "item": {
          "id": "872a3b62-22cf-4ff2-9a71-6963d655ec22",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5a58bb44-7906-4d78-958a-910dd0a76858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "193c2147-ab31-4cc7-b758-f897b6a2fef6",
        "cursor": {
          "ref": "86eb4262-1343-4e28-840a-96ff2f7acccd",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "71a2bc13-c992-4342-a18d-55ffab7f067c"
        },
        "item": {
          "id": "193c2147-ab31-4cc7-b758-f897b6a2fef6",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "6d2c0812-60eb-4da8-93e3-767988954d51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61e67638-e15f-4606-bcdc-1acf21c4e101",
        "cursor": {
          "ref": "fa928867-bc5f-4bfe-83ec-bff2415350c1",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b9122ff1-f21e-42d5-9719-91602b53ce05"
        },
        "item": {
          "id": "61e67638-e15f-4606-bcdc-1acf21c4e101",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a89c66df-8c07-49f9-be9b-fab4ecb37275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f8067f-743f-49f6-a8c4-79aa72150248",
        "cursor": {
          "ref": "06dd72df-7065-438d-b06b-292467326d17",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8b887794-4c0f-4f92-b48c-a51380139473"
        },
        "item": {
          "id": "87f8067f-743f-49f6-a8c4-79aa72150248",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "47a72dda-9684-4971-959e-bb1759833a3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c9e2dd7-6c17-4e56-aeac-f443b8297bec",
        "cursor": {
          "ref": "1df86dac-38e2-4f14-8ed2-f72cabb37899",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e7dd26bc-f248-4f63-9c6b-c70789389dd6"
        },
        "item": {
          "id": "7c9e2dd7-6c17-4e56-aeac-f443b8297bec",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "047b9d7c-0d8e-4569-ad59-f82e503b7147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07141540-2cd4-4940-bbb0-fee672d2c8d3",
        "cursor": {
          "ref": "9d3737d8-18c2-4b14-bc88-5b6ee0278362",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "16a98420-3317-401d-91d6-fe833d119d01"
        },
        "item": {
          "id": "07141540-2cd4-4940-bbb0-fee672d2c8d3",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a1983042-747d-46eb-88c1-bba22c184a45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f95eebcb-1603-4999-902f-da7954bc6682",
        "cursor": {
          "ref": "7287d13e-7646-4eae-8379-31041e0fcb4d",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d635b748-94e3-4bad-abd2-19a0c6333bd0"
        },
        "item": {
          "id": "f95eebcb-1603-4999-902f-da7954bc6682",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "52f4fd8e-36b2-49f3-945d-736cc29bfbb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ffab61-7378-4cbc-8c01-3c54bcc2af25",
        "cursor": {
          "ref": "2bfa0955-7f07-4f8d-bb62-78076943f407",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "bfd72913-38c1-400e-adf0-3db555d1c9a7"
        },
        "item": {
          "id": "04ffab61-7378-4cbc-8c01-3c54bcc2af25",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "fa7a6a99-1a03-49ce-aa8e-4fb74f3713e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0335111e-5755-4141-bd25-c73cbbfe65b2",
        "cursor": {
          "ref": "eba412dc-48a0-4ffb-a2db-9e8d85ce8aa6",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "1fef450e-969b-4da3-8ce3-d82cfd555683"
        },
        "item": {
          "id": "0335111e-5755-4141-bd25-c73cbbfe65b2",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "5de256f9-28cb-4bfc-a07d-ab93f241d9b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac7f1b0f-3b87-46ef-ad36-d0a554a24ec3",
        "cursor": {
          "ref": "763cfd43-1064-47d4-b548-6bbc82b66474",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "fd4cdf39-3d5c-4495-a650-945b0e25a138"
        },
        "item": {
          "id": "ac7f1b0f-3b87-46ef-ad36-d0a554a24ec3",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "be46a627-b58f-4d27-a109-5aa2fe7db5cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c41ce9f8-9837-4f99-974c-347787e06372",
        "cursor": {
          "ref": "da9b68e9-48a8-41b6-8267-949630b60f46",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "04ba5a88-cfae-48a2-b475-a587c2ebea63"
        },
        "item": {
          "id": "c41ce9f8-9837-4f99-974c-347787e06372",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4f49c0a6-5418-4eb7-a562-2c4f39f9fb2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2aee1e1-505e-42f6-abe6-2cddde0c9f48",
        "cursor": {
          "ref": "929c8e8b-fd06-49dc-a18e-f775c43eeeff",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "158a90c1-9a41-4ff7-83f4-3e34dc345314"
        },
        "item": {
          "id": "c2aee1e1-505e-42f6-abe6-2cddde0c9f48",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "5888b999-8bff-4f75-8618-303a87bc99ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f70e9f-d2c7-4f26-bb14-2adc9c052133",
        "cursor": {
          "ref": "6c48b563-1380-46df-b416-19a7d1286f33",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "6da00633-0981-4e1e-91e0-8eef30e2e178"
        },
        "item": {
          "id": "d1f70e9f-d2c7-4f26-bb14-2adc9c052133",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "315db64f-de3f-40f1-9cc0-697428d2f6c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 164,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feacc37b-6580-4347-8ea5-cefd7b5a7de0",
        "cursor": {
          "ref": "fd77f6d0-424b-4c0d-aaa8-0c51ccc3675b",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d6860edc-34cd-4469-a035-79f5b50539d2"
        },
        "item": {
          "id": "feacc37b-6580-4347-8ea5-cefd7b5a7de0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c81b0214-872a-4198-9119-5bb833465111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfb2e721-f610-4585-989d-da5060e53eaa",
        "cursor": {
          "ref": "a1849b04-776d-4e15-a879-f8c098860a6c",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "274d0bdb-5c2a-49ac-89cf-b73e1417f544"
        },
        "item": {
          "id": "bfb2e721-f610-4585-989d-da5060e53eaa",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "7b43d78a-38d7-4dbb-95e1-2f0734d64b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb6cb254-f385-4ab1-aa98-16ee4e6b9500",
        "cursor": {
          "ref": "fb7901bd-7126-4568-baa1-9c2f71944d8b",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "0e08a3c8-12f7-493d-a1c6-bfcf15b4e7ff"
        },
        "item": {
          "id": "eb6cb254-f385-4ab1-aa98-16ee4e6b9500",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "1d246eab-ee04-4e9c-b776-35eb3f1b81b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66cef2ad-453c-44ea-b8ac-4fac4edfe78e",
        "cursor": {
          "ref": "ce50f52b-e5ef-4a43-933c-592273dbe00b",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "05d76b4b-9461-4d3e-9766-6d862e0fb588"
        },
        "item": {
          "id": "66cef2ad-453c-44ea-b8ac-4fac4edfe78e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "96b7ecf7-86dd-4e20-a8bd-cfff7ba17127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5282d990-52cd-4e34-bdbe-510b367f6162",
        "cursor": {
          "ref": "ab05d706-80e3-4288-b198-dff19af42f74",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "32ed2fb2-30ad-45d2-b4a2-c1251dc15fcd"
        },
        "item": {
          "id": "5282d990-52cd-4e34-bdbe-510b367f6162",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "7cf1c02e-9eee-4a5c-8679-62e3621f157a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcf1f18f-3b31-4d6c-ab3a-b7e2a44e9bf6",
        "cursor": {
          "ref": "732ab860-2562-4bed-a308-4c40d3b503b5",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b0de1fd5-6bc3-48b7-aeac-a1f90b1e6254"
        },
        "item": {
          "id": "fcf1f18f-3b31-4d6c-ab3a-b7e2a44e9bf6",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "7318cb38-2a54-42b8-89cf-d03acf1e7017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2c3db4-1747-43a7-80e0-b00a415db15f",
        "cursor": {
          "ref": "adc65344-a326-4331-a5c0-024ee39af1b5",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "14abec0f-6eaf-4ab9-86bd-9e1cac5e5452"
        },
        "item": {
          "id": "dd2c3db4-1747-43a7-80e0-b00a415db15f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "92e241e5-581e-4de4-8b3d-e4648161dd02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09a07901-3bca-4935-980f-fe5385be083c",
        "cursor": {
          "ref": "ede6ae7f-e6c1-481e-828c-f654835fadf5",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d915d229-ea23-4f82-98f1-08ffac14fc68"
        },
        "item": {
          "id": "09a07901-3bca-4935-980f-fe5385be083c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f002939b-9b33-49a0-ad10-c97df0761626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee6c117c-fd7f-4583-a18e-cfa3a7709015",
        "cursor": {
          "ref": "7d926efc-286b-493a-ba6c-6c26c1216eda",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "5c9f8583-ba57-4a40-8d95-916652971560"
        },
        "item": {
          "id": "ee6c117c-fd7f-4583-a18e-cfa3a7709015",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "25aa94fc-e623-45a5-8a3f-753f66a64db5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e0fb5c-81b0-4512-babe-c3ba3e5e394c",
        "cursor": {
          "ref": "28b34368-00bb-428f-bd92-d701c27986ae",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2fc28c47-822c-4ef7-9251-4ae12eed857b"
        },
        "item": {
          "id": "54e0fb5c-81b0-4512-babe-c3ba3e5e394c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "4230315c-1492-4ec0-af24-ba4494acb567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e6f6e2-4449-4e33-b6e5-e11a521627b4",
        "cursor": {
          "ref": "ceb7c63c-1d88-4d57-b4ed-627cd3f7aef8",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8eb1e8ba-6186-4dd5-85be-f33c4c7d94c6"
        },
        "item": {
          "id": "a2e6f6e2-4449-4e33-b6e5-e11a521627b4",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8ec8cc95-971d-424e-9e71-8c41f21ecb90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de4f3e73-a7a0-41e6-8866-ac40c8d0d217",
        "cursor": {
          "ref": "5e3bf91d-a8b7-441d-85b1-0b180b414206",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "fdb0bb1e-02a1-4c71-8db6-d893f80ae760"
        },
        "item": {
          "id": "de4f3e73-a7a0-41e6-8866-ac40c8d0d217",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "032f05e8-581c-4879-93d3-34daab4ed55f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b47bece-9241-496f-bee7-28ffc681b887",
        "cursor": {
          "ref": "a1a57636-7f39-46f2-b1b7-cb4ed49fa740",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b3dcc2e6-6f05-44ce-98fc-ac05c228b913"
        },
        "item": {
          "id": "1b47bece-9241-496f-bee7-28ffc681b887",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "2c5f90ac-cc8c-4f59-a637-ea5712da4e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73364b2a-bf08-4184-ab1f-61bdb4290ae2",
        "cursor": {
          "ref": "baebdace-322b-4514-bf20-bc5dac127ddf",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d7f7e29f-89ac-434b-9420-9587775a910f"
        },
        "item": {
          "id": "73364b2a-bf08-4184-ab1f-61bdb4290ae2",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "56938ce4-8a87-4ca3-82bb-4dd00d89436f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 315,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e98c5c1-6b39-4649-8da8-97ae153676d9",
        "cursor": {
          "ref": "db3f70a0-55bf-4626-bb12-f218338e13b6",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ca06a48f-bfa3-4111-983b-0f3ba296686e"
        },
        "item": {
          "id": "3e98c5c1-6b39-4649-8da8-97ae153676d9",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ed3bed52-35aa-422f-95fb-881a67e39d5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2762543-91c4-40aa-a90e-f015649476d3",
        "cursor": {
          "ref": "da1f83cd-28a7-4fc6-b022-260d7a089170",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "4d4390f9-fcb4-4eb1-99dc-9e8bb2d8c367"
        },
        "item": {
          "id": "c2762543-91c4-40aa-a90e-f015649476d3",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "3e5ee04c-97c7-4b07-a99f-3a6031f7c468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "870a425b-b5dd-43e6-b578-d41ed107e478",
        "cursor": {
          "ref": "b6e638dd-b663-41a1-8a98-0c7690066b29",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6a853671-f672-4a84-9957-cfc5264910f7"
        },
        "item": {
          "id": "870a425b-b5dd-43e6-b578-d41ed107e478",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ca41a3f1-ad7f-4759-8bdf-6c71274b5e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87a83b8d-aa8c-4997-a4e5-cb996e8ec9c4",
        "cursor": {
          "ref": "651e5eac-af82-4a84-acf9-e34da8530f36",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c65856df-2d09-4111-9c39-4661fb102e46"
        },
        "item": {
          "id": "87a83b8d-aa8c-4997-a4e5-cb996e8ec9c4",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "92449cb7-32b2-42df-8db4-766aa039bd1c",
          "status": "Created",
          "code": 201,
          "responseTime": 619,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "7af32e47-3867-4cc2-adaa-b3a88f0b70f5",
        "cursor": {
          "ref": "024b2e23-75cf-4568-9886-eb7529c46495",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "637ab4d5-ed5b-466e-8b9d-e5c120ab48fc"
        },
        "item": {
          "id": "7af32e47-3867-4cc2-adaa-b3a88f0b70f5",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e1a41367-9025-41df-a33c-72ff5b9626ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "395b92be-26e8-4461-8fc8-76ddf4a50ca8",
        "cursor": {
          "ref": "56707f84-672e-4ae3-96ce-1a904f6301bc",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a3c6142a-20b2-45be-945a-2be170499ddf"
        },
        "item": {
          "id": "395b92be-26e8-4461-8fc8-76ddf4a50ca8",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c677dc59-bea9-4c95-a1c1-bc4c375443fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d6c4a6e-72a9-4ce8-a957-306372cc14d9",
        "cursor": {
          "ref": "f70261ef-3873-4e24-8683-cd6d91af2263",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1b08ccc1-b40b-4eb0-a1db-463f93a74c1a"
        },
        "item": {
          "id": "8d6c4a6e-72a9-4ce8-a957-306372cc14d9",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "10a73be1-babb-4004-8b13-268750a264c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a15aec01-03ab-4ce7-a39c-f601e9ca9eb0",
        "cursor": {
          "ref": "8e819d59-ba5d-49b6-9381-21761dd0ff5f",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d145a2a2-cf04-43e8-ad2a-9b3bceb09182"
        },
        "item": {
          "id": "a15aec01-03ab-4ce7-a39c-f601e9ca9eb0",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "229d3315-4523-4556-afd6-88bb51a7df38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74ab450f-9b49-4a53-9e8e-162c8fa3f5b9",
        "cursor": {
          "ref": "0e221756-1434-4f3d-8172-cf93523e0977",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e46e975c-85d4-41cb-8a93-edb5cfe980ab"
        },
        "item": {
          "id": "74ab450f-9b49-4a53-9e8e-162c8fa3f5b9",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8306cb44-ec42-456b-8fd0-ddb87c8af01c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c47d7eba-81db-4b42-84e5-03a41b951ba2",
        "cursor": {
          "ref": "e93dca62-f3de-4f23-82d5-5637ed111380",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "14e4ab53-eeb1-4a3f-8742-9c8aa030ecee"
        },
        "item": {
          "id": "c47d7eba-81db-4b42-84e5-03a41b951ba2",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "5eefa2d4-d66c-4afd-a770-15b3594ee5ac",
          "status": "Created",
          "code": 201,
          "responseTime": 668,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "5cf66e32-8da8-44a5-9458-2a58c8dcc04c",
        "cursor": {
          "ref": "dd2d8789-ae1a-469d-8644-c6bea14a31cd",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e32347d7-4ef2-491d-b08c-708cf2421738"
        },
        "item": {
          "id": "5cf66e32-8da8-44a5-9458-2a58c8dcc04c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c1e8125c-901b-4d4c-9ed1-79ec627235b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82dedbe9-3803-4365-8e27-6e66d6a35894",
        "cursor": {
          "ref": "369bd17f-0db2-49ed-a0c9-88c973228005",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "7ebfe767-15f1-41ff-92fe-9fbbbbc44f37"
        },
        "item": {
          "id": "82dedbe9-3803-4365-8e27-6e66d6a35894",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d9c287aa-194a-4da1-abd1-46ef77247876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9421a5-cc42-47f4-b9b9-0f5cd4f4c8f2",
        "cursor": {
          "ref": "23fb61d9-03db-47c3-9f59-89b2113626a4",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8743585b-efca-40ea-a36e-41fec5784cb1"
        },
        "item": {
          "id": "1a9421a5-cc42-47f4-b9b9-0f5cd4f4c8f2",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "031d399c-3092-40f4-8ddc-9ede61d71a18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd3707a8-d071-43c8-bee6-e52ac3a6024a",
        "cursor": {
          "ref": "9bee662a-a814-4a9e-9cc9-1308895f8b46",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "15becb51-0d00-4ca9-8d38-c2b9f156a2b0"
        },
        "item": {
          "id": "cd3707a8-d071-43c8-bee6-e52ac3a6024a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "6fb4c163-2000-486d-a308-4a75c3df12fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1538ab3f-6894-4b89-8eca-1684aeb2f704",
        "cursor": {
          "ref": "a86bb3a1-1045-4623-8276-1bee17a15862",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c3b86d95-84a5-4544-a191-0bf6fef31be8"
        },
        "item": {
          "id": "1538ab3f-6894-4b89-8eca-1684aeb2f704",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "396dbdb8-f5bb-4ce3-80ac-009f0811bf2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34207d5c-d3bd-4227-883d-2bc13700c245",
        "cursor": {
          "ref": "0818d4ae-5308-413a-9f24-c1f390df5979",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c1ffd1fd-2c7e-4951-9d2a-78b76483fd8d"
        },
        "item": {
          "id": "34207d5c-d3bd-4227-883d-2bc13700c245",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "3178a746-461e-45f9-b7ca-7d8f58d18a6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c8683eb-7574-4248-8c05-5eac2f6388c4",
        "cursor": {
          "ref": "3bbcd7a8-504a-4a02-918a-8d17702ebadf",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "eedb28fc-62e0-41fd-82bc-3907fdf9efec"
        },
        "item": {
          "id": "3c8683eb-7574-4248-8c05-5eac2f6388c4",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f22425a9-6e45-4059-8e5e-dc9ca21e0787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc4d25f9-8944-4668-bf18-7f701c451c9d",
        "cursor": {
          "ref": "476c6c55-206f-43fc-bd53-f117cc5daf35",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "3a14ea86-d26e-4c8f-8f31-c176df24ba21"
        },
        "item": {
          "id": "fc4d25f9-8944-4668-bf18-7f701c451c9d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "024a673d-a285-4fd8-aa63-4bcbaddacf8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a23044e-8111-4654-bb23-17f9890b64cd",
        "cursor": {
          "ref": "7cee7475-80cd-423e-bf1d-1833fd79213f",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "49044e78-b43b-4158-a4ae-6aff337c29b6"
        },
        "item": {
          "id": "5a23044e-8111-4654-bb23-17f9890b64cd",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a6dfe805-6fce-4205-a599-5445dee9c10e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "e5db7c64-ecb4-413b-bc4f-d59b47923303",
        "cursor": {
          "ref": "f22951f6-eedb-46fa-b7c6-a7fa174d73bd",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "98432e85-a75d-4cbc-b73b-1b75712d3787"
        },
        "item": {
          "id": "e5db7c64-ecb4-413b-bc4f-d59b47923303",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "02c82581-5728-403d-8f80-a32bd03a432c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "63b05e5b-c062-4a36-9f94-00808adbd05c",
        "cursor": {
          "ref": "9078990f-678b-4396-be2e-1fb4a2587af0",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ace3e9b8-7ea5-41de-b4e6-8b4ae821111d"
        },
        "item": {
          "id": "63b05e5b-c062-4a36-9f94-00808adbd05c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "426aea04-2c09-4d0a-a7e9-1e2e1f6bf8b5",
          "status": "Created",
          "code": 201,
          "responseTime": 621,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "85cce5c1-29f0-431a-99f0-295e8f715fe1",
        "cursor": {
          "ref": "43cafb9c-a413-4a54-9e35-d60f65a03ea3",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0d372f83-b775-49b3-9b7a-c7c0c9230119"
        },
        "item": {
          "id": "85cce5c1-29f0-431a-99f0-295e8f715fe1",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2858ba31-5fc0-4081-9f2b-dfc2b06812ad",
          "status": "Created",
          "code": 201,
          "responseTime": 665,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ae98cc-2a8c-4b52-926e-194e2dce3122",
        "cursor": {
          "ref": "7511480d-dad8-4436-864f-1443a902a276",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "d11e3e9c-fef9-40d7-92eb-015e676713bb"
        },
        "item": {
          "id": "c6ae98cc-2a8c-4b52-926e-194e2dce3122",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "68d41e60-d70b-4474-a73f-2ddb929ddac5",
          "status": "Created",
          "code": 201,
          "responseTime": 1014,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c43ba8e3-ff37-4151-9a0f-1aa3dd11680e",
        "cursor": {
          "ref": "47209089-0522-4c94-9ab8-de762f04c22b",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b286d127-05c6-48e2-8850-9c05426c6099"
        },
        "item": {
          "id": "c43ba8e3-ff37-4151-9a0f-1aa3dd11680e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "537117af-1d3f-4f71-aaa1-78a7fa825e98",
          "status": "Created",
          "code": 201,
          "responseTime": 700,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b81d89a-5baf-4f3a-8b90-9e8298c197cd",
        "cursor": {
          "ref": "b6b25f2c-4845-4638-b441-77aac82dd7e8",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "20ee14d0-423d-4d28-bfd2-c225d9500aa0"
        },
        "item": {
          "id": "9b81d89a-5baf-4f3a-8b90-9e8298c197cd",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0d6b7b69-4e58-49f7-8e6b-d67af43a29c7",
          "status": "Created",
          "code": 201,
          "responseTime": 618,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dab50ab-99e3-4ce4-8985-790d63c1829e",
        "cursor": {
          "ref": "5312630f-4415-4551-8939-06a669dafb83",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c52ea9c1-4867-4001-a09f-6d5e8e6f28d3"
        },
        "item": {
          "id": "2dab50ab-99e3-4ce4-8985-790d63c1829e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8e1d65e7-ad2f-4f14-a552-8de9ffdc2913",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "2dab50ab-99e3-4ce4-8985-790d63c1829e",
        "cursor": {
          "ref": "5312630f-4415-4551-8939-06a669dafb83",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c52ea9c1-4867-4001-a09f-6d5e8e6f28d3"
        },
        "item": {
          "id": "2dab50ab-99e3-4ce4-8985-790d63c1829e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8e1d65e7-ad2f-4f14-a552-8de9ffdc2913",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "5a806766-8c23-46c4-af37-ec27f127ac3b",
        "cursor": {
          "ref": "d21b359a-7e08-4491-b4ad-be09c7b24f1e",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "77f87bcc-1e1e-42e9-8104-b523a5c21350"
        },
        "item": {
          "id": "5a806766-8c23-46c4-af37-ec27f127ac3b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2d8786bc-c586-429a-a37b-a1ed761d17ac",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "28cad1a1-ea0d-4e76-9124-634dbb1bb7c4",
        "cursor": {
          "ref": "6cee0e40-4407-4969-9cff-f5961a2544b5",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "cbaff3dc-2fa2-4a09-b7b4-1a34d56f7fff"
        },
        "item": {
          "id": "28cad1a1-ea0d-4e76-9124-634dbb1bb7c4",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9059d0a8-0b07-40f3-96be-a7bfaf00b9ee",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "c19b50c1-6467-4062-9717-c4e311f9ded1",
        "cursor": {
          "ref": "b0132c31-2877-48f7-8c4d-c455624b3175",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3590ad1d-24a3-4596-baa4-d160033b3ac1"
        },
        "item": {
          "id": "c19b50c1-6467-4062-9717-c4e311f9ded1",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "39c25b1f-b529-4343-891f-60ce4193d011",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "80528333-bd6d-42fe-89d5-d45347845719",
        "cursor": {
          "ref": "02bc4b0e-7f61-43a2-a44b-cab7c70ca920",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "24297af8-9d8d-44d0-9f15-2959653e8b1f"
        },
        "item": {
          "id": "80528333-bd6d-42fe-89d5-d45347845719",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d51c7baa-ec16-4b9f-8e83-0f8742c1bfd5",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "ef864a71-6145-40c9-9247-df4c0157a0a8",
        "cursor": {
          "ref": "db082e40-68d6-4ccf-a76c-2487ec6b3fc8",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b83117dc-cab3-4d1e-b189-5c9107355d07"
        },
        "item": {
          "id": "ef864a71-6145-40c9-9247-df4c0157a0a8",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a79bbf90-6bef-4f12-95af-678b0358e4fc",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "b5d0a603-b60b-4b0f-85ec-08e7bccf59d7",
        "cursor": {
          "ref": "c45af624-0e53-494a-a723-5feac068ba0c",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2a562d6e-d2ab-43ab-94f3-555e8092c58b"
        },
        "item": {
          "id": "b5d0a603-b60b-4b0f-85ec-08e7bccf59d7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d5711297-8402-446b-88bb-7d4237b7f073",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "ca8cfe12-3eb0-469a-bc55-d0b9f8708eb0",
        "cursor": {
          "ref": "508c9b2b-4fad-4d44-95d0-719c0d5778c1",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a98dfbaf-bec1-473f-aca9-1df92d5bf88f"
        },
        "item": {
          "id": "ca8cfe12-3eb0-469a-bc55-d0b9f8708eb0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "884d8209-7aca-4624-bd28-23dee7415b2a",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "e6e431c8-ea77-440e-abf4-2e96680fef41",
        "cursor": {
          "ref": "7c25a0ae-7ff9-4c68-a19b-ebbc251cc671",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9180863b-9cba-4804-acd5-67665a752691"
        },
        "item": {
          "id": "e6e431c8-ea77-440e-abf4-2e96680fef41",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9f1075b0-55a8-4a7d-8ea3-8f78eb613533",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "f44af9af-aa2a-44ed-9af3-2a48176392d5",
        "cursor": {
          "ref": "13f26f27-d590-4415-add6-f1304c6b8933",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "636c570c-c2aa-4c80-a284-30dfe466be68"
        },
        "item": {
          "id": "f44af9af-aa2a-44ed-9af3-2a48176392d5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "338abf1c-a2fb-4e38-ab19-859cf81dd3ab",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "41947557-2238-4488-b444-d12c1f296321",
        "cursor": {
          "ref": "fa0e4afb-f103-47ff-a4b5-71d78e06905c",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9090cfe8-4615-4354-9974-c02aa8463fc9"
        },
        "item": {
          "id": "41947557-2238-4488-b444-d12c1f296321",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ba02a0aa-6ce0-4640-a3a5-1c0262d83f0f",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "92a32bf5-7d90-4869-94be-e27a02464a74",
        "cursor": {
          "ref": "18bd4987-644e-4409-90d8-ad828e519db5",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e07a4981-dacc-4caa-b389-43c215df9c4b"
        },
        "item": {
          "id": "92a32bf5-7d90-4869-94be-e27a02464a74",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7c0a68d0-20b0-4467-92f6-8f529f12819f",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "af2c35e8-4e1b-4b28-9e78-b77971a26fe0",
        "cursor": {
          "ref": "cc3966b7-89fa-464e-8b09-f239d0a5288b",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "06cdfc32-66a1-4a57-8822-07ad20153a32"
        },
        "item": {
          "id": "af2c35e8-4e1b-4b28-9e78-b77971a26fe0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c99fc930-e382-4571-9d7b-d9760be9d393",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "68503590-cf13-4c4c-ac5f-d9b2cdd936bf",
        "cursor": {
          "ref": "ee49ff4e-b2d9-4d11-b217-32b2c6e1da0d",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d6270606-7894-497b-ac0f-44fea0dffc66"
        },
        "item": {
          "id": "68503590-cf13-4c4c-ac5f-d9b2cdd936bf",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4f673e5a-cd80-440a-8fb8-8aae495f8fe6",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "a1ce3230-084d-4c59-9f09-456d6f6963a3",
        "cursor": {
          "ref": "ddf491dd-ffbd-4010-8b30-30f2c8c2b408",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e3778d76-bb19-4235-95b5-e0072eff530b"
        },
        "item": {
          "id": "a1ce3230-084d-4c59-9f09-456d6f6963a3",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f2093055-cb58-483d-ab53-983c3714e169",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "aae7eda2-a215-47fe-821e-201761d7f2fd",
        "cursor": {
          "ref": "846f7554-4b4d-44b4-b21d-9964b6329539",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "14dd3fd3-288f-4f8e-8c84-75f995fe13a7"
        },
        "item": {
          "id": "aae7eda2-a215-47fe-821e-201761d7f2fd",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4f48a9cc-920b-4469-b5e0-b9c03a7932be",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "e5f3ef1d-7767-4834-b715-b77d72faf9db",
        "cursor": {
          "ref": "e24ff35f-991e-44a3-8c84-9805fccd3165",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ed4aea08-92c3-4bcc-8d1c-922c9ce0fbdd"
        },
        "item": {
          "id": "e5f3ef1d-7767-4834-b715-b77d72faf9db",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0edf82b9-0154-4633-916e-cabc2ec69e67",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "23df0033-961d-4ab1-827e-27d5d4767a0e",
        "cursor": {
          "ref": "f5da2cc7-8a00-4172-be9d-8f4afa6749c9",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7d2bf0c8-b198-4ebe-830e-0fc8e59ad9ea"
        },
        "item": {
          "id": "23df0033-961d-4ab1-827e-27d5d4767a0e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "492bd5b2-912f-407c-b0fd-64ef80b3f8cd",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "ebbc24fb-437c-4142-8241-c0fc6aff298b",
        "cursor": {
          "ref": "8ad51d4e-a08d-43f0-89fb-65a88e0684b2",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "5e555c02-86de-4679-b1b3-74b0595df4cc"
        },
        "item": {
          "id": "ebbc24fb-437c-4142-8241-c0fc6aff298b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ec1c3d43-e5a1-45f8-90af-1fcd3de02125",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "ed6262d5-e131-44a8-91db-4dccbdc4ef94",
        "cursor": {
          "ref": "2d3087a7-0898-41d2-a487-590d3a9929af",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b86ba7d7-6066-435c-bd9d-b5e8faaa8723"
        },
        "item": {
          "id": "ed6262d5-e131-44a8-91db-4dccbdc4ef94",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "74ca629f-1906-4506-b041-b3a81d5be5de",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "4f3db937-1c28-4c89-9805-4082bc444b4f",
        "cursor": {
          "ref": "cefd7050-434d-4cc4-ac98-cd2894e4632e",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c3cc5088-6119-4f77-9e71-f39cb332c017"
        },
        "item": {
          "id": "4f3db937-1c28-4c89-9805-4082bc444b4f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "090cf53a-b9eb-4520-a6e0-249115976bfb",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "22b873a4-404e-4c33-8963-08e09d48afc6",
        "cursor": {
          "ref": "e9e82c6c-ca1c-407d-b39a-c2da6deed25b",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "30a0f593-1cb4-4680-9ddc-db922b5d72bc"
        },
        "item": {
          "id": "22b873a4-404e-4c33-8963-08e09d48afc6",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a03e2be3-11c9-4824-a96b-d747e4b09ae4",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "94285eac-96b2-49a2-a973-b23c13d504fe",
        "cursor": {
          "ref": "31e25572-f16e-4ef0-83fe-9811fc47a18d",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "8eb05197-1f59-48fd-b45a-faaa0c5d3af3"
        },
        "item": {
          "id": "94285eac-96b2-49a2-a973-b23c13d504fe",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6696f7c1-0be9-49ad-8aac-624190799a70",
          "status": "OK",
          "code": 200,
          "responseTime": 26,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "a09f32f0-1fa3-4b56-9292-5cd395bd2b80",
        "cursor": {
          "ref": "4010112a-f4c0-4a6f-9234-5aec89fe44ee",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "283d79b2-a561-4d19-8753-ede9e1dd95ff"
        },
        "item": {
          "id": "a09f32f0-1fa3-4b56-9292-5cd395bd2b80",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8c7dfe70-679d-47e4-a3ef-3912a0df365d",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "d549b973-5413-442a-bc5f-9235552786d9",
        "cursor": {
          "ref": "a53352fd-4f16-44ad-9974-fab9b732f2c2",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "37c58e76-81ad-442d-8a39-0b25a2f6d03c"
        },
        "item": {
          "id": "d549b973-5413-442a-bc5f-9235552786d9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "bd74a881-a243-4eed-80dd-1e8cf7dbf55b",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "ef5b55fc-13cd-4b55-bc1b-6679c74a30f5",
        "cursor": {
          "ref": "59fde62a-90c9-45e3-8d29-06c1001ea9cc",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "459327e3-4791-499e-acf3-3864f22dcbd0"
        },
        "item": {
          "id": "ef5b55fc-13cd-4b55-bc1b-6679c74a30f5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "18aba938-50b4-4fcf-b202-ac97e5ca72d0",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "661e9638-5296-4454-a70e-11e01af25467",
        "cursor": {
          "ref": "b4952317-a4dc-4ec1-8cdf-89800520342d",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3f71dda8-c661-4315-9463-49478722a115"
        },
        "item": {
          "id": "661e9638-5296-4454-a70e-11e01af25467",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6236995e-6082-4423-bfad-dfc203b40473",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "e02820e0-e3ad-4948-9398-1b71d16adc65",
        "cursor": {
          "ref": "cb23deab-51f3-456e-a8cf-3f4d954fbd77",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d512a4fb-308c-4880-bfe3-bbed8691abbb"
        },
        "item": {
          "id": "e02820e0-e3ad-4948-9398-1b71d16adc65",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3358e373-1f33-4832-b99b-cd7f5b26f46c",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "14d41d46-6902-4361-be5f-f78aecae0a38",
        "cursor": {
          "ref": "8e1b531c-401a-48b4-b5a7-8aa27b086d83",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "05019ced-33ed-40f9-8743-bad415a01eeb"
        },
        "item": {
          "id": "14d41d46-6902-4361-be5f-f78aecae0a38",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "869fdd90-0986-4aa0-aa7e-eceb2692f598",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "48bfb914-a497-4fbc-8539-df34780e2938",
        "cursor": {
          "ref": "3581d80a-76ae-46c3-9f69-3668d276917e",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "6e01c952-3a5f-404f-91c5-b796f0152cb9"
        },
        "item": {
          "id": "48bfb914-a497-4fbc-8539-df34780e2938",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "fc462e2d-b35b-444a-9a10-058b3edc9137",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "360f0b61-6330-40e5-8f5c-7417019872ce",
        "cursor": {
          "ref": "dcb8697d-af6c-4585-a6e9-036d17b2731a",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "77cd2d38-2f15-442b-a3a4-ec0dddf6302a"
        },
        "item": {
          "id": "360f0b61-6330-40e5-8f5c-7417019872ce",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f0b726f7-eae6-48b8-99dc-9e197d8b7613",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "45a2b314-82fe-41f4-9045-16d344e6c74e",
        "cursor": {
          "ref": "098df491-af84-49fa-9cab-3380b65365ea",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4fa46aa8-700a-42b2-9912-3905bd0fed8d"
        },
        "item": {
          "id": "45a2b314-82fe-41f4-9045-16d344e6c74e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "6f1288a2-94da-4831-b065-881a383b4c07",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "f2e3c174-b406-4da1-8c02-1a947b5622e4",
        "cursor": {
          "ref": "ced11edc-e222-4289-aa5d-0b31a26855e9",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e37cc6fa-57bc-4620-9921-318351f2fd6f"
        },
        "item": {
          "id": "f2e3c174-b406-4da1-8c02-1a947b5622e4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "73e3b5ec-609b-4cfa-b9a1-35116143013f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "654a511c-123b-4399-8507-42fe62534400",
        "cursor": {
          "ref": "60fba749-94ba-42ff-be7a-5628d2d97e96",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1195e800-c679-4d23-b1ca-679f9a65ea64"
        },
        "item": {
          "id": "654a511c-123b-4399-8507-42fe62534400",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "0c72dcfb-5aa9-4bd4-8d6f-43daee55e65e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "006b745a-0240-427f-a071-6bd3ed3adfd8",
        "cursor": {
          "ref": "0b99e77a-719c-400c-98cf-1faaf3c60076",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f2346855-2489-4bbe-aaf5-66629e095007"
        },
        "item": {
          "id": "006b745a-0240-427f-a071-6bd3ed3adfd8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f406cedb-d49b-4e5c-9022-03331c78ed9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "006b745a-0240-427f-a071-6bd3ed3adfd8",
        "cursor": {
          "ref": "0b99e77a-719c-400c-98cf-1faaf3c60076",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f2346855-2489-4bbe-aaf5-66629e095007"
        },
        "item": {
          "id": "006b745a-0240-427f-a071-6bd3ed3adfd8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f406cedb-d49b-4e5c-9022-03331c78ed9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2abf1259-122b-4cd8-a072-fe3f3a32e750",
        "cursor": {
          "ref": "88c32c48-d042-4ce5-870c-8883ba474877",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "b9de9fc6-1fbd-424c-9c57-8287e774b4c2"
        },
        "item": {
          "id": "2abf1259-122b-4cd8-a072-fe3f3a32e750",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "30ac76be-196e-4474-ae2b-73fda335be60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7dafc5e-76d9-48f3-818d-91d3e4d858a0",
        "cursor": {
          "ref": "1cbbb128-3d03-42c8-8879-2f391a6d2f48",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b66b5ecd-adec-4b8f-a8b1-9597d8fa7a39"
        },
        "item": {
          "id": "d7dafc5e-76d9-48f3-818d-91d3e4d858a0",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "98e8c498-a9c1-4e87-9840-1394be1f3141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e37a9c6-37fd-4b3d-94f5-a4be156b8f38",
        "cursor": {
          "ref": "a52bc322-8b55-462a-a141-65bcf47f4e9d",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "5a638bb8-9a30-4d54-86d6-5cc73a12f32c"
        },
        "item": {
          "id": "3e37a9c6-37fd-4b3d-94f5-a4be156b8f38",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "2fce4c2a-6742-4325-8a72-db58f29ebcb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6594d089-ab2a-4664-a569-0e7cf4016fb8",
        "cursor": {
          "ref": "4d518aca-a17c-48da-8290-3623e6e28c53",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9167d0a3-f277-41d1-9779-67bed845cbee"
        },
        "item": {
          "id": "6594d089-ab2a-4664-a569-0e7cf4016fb8",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8e937021-8460-4b6d-a58c-9f0b2c079e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "101a06bc-978f-4961-918b-59f4ec6f9c33",
        "cursor": {
          "ref": "0b50efd4-eb9e-46ce-aacd-13f6c8679e52",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8e52cdb3-025f-4ee6-aa25-82572bec22f5"
        },
        "item": {
          "id": "101a06bc-978f-4961-918b-59f4ec6f9c33",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "661b5057-95e5-421c-a241-203c67631f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df53dce-6621-4cdd-9d93-b60aa560d3b0",
        "cursor": {
          "ref": "0d597053-1826-4d37-950a-582902974d4a",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "aec0e4d0-8e88-424a-98ef-5ec446e63b5c"
        },
        "item": {
          "id": "0df53dce-6621-4cdd-9d93-b60aa560d3b0",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "189bb8f9-c3a3-4d68-84e7-15437cf38933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd69fa52-7f5d-43de-a3f3-c751510f7f73",
        "cursor": {
          "ref": "1b892e62-780f-4a59-a864-a342f66c8043",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a249a009-89e5-4cba-9dae-8bbcf487fa68"
        },
        "item": {
          "id": "dd69fa52-7f5d-43de-a3f3-c751510f7f73",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "3074f6aa-1305-4474-85aa-129bdf3b39f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb457990-70c6-486f-b986-06602493fb6d",
        "cursor": {
          "ref": "b387863e-75a5-4e26-820d-a8e57d77ccd9",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6c048558-9e76-4d3b-9d29-b4dfb8c29fe3"
        },
        "item": {
          "id": "fb457990-70c6-486f-b986-06602493fb6d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e7c42b86-16fd-420a-8b5c-d366e6cb1c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a50c56d-2a2f-4f95-99d5-d2d0a7d94d7f",
        "cursor": {
          "ref": "82d2b12e-d808-4326-8b86-73efc637af53",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d36d43e8-51a0-471a-a6a1-1fe7ee31dabc"
        },
        "item": {
          "id": "7a50c56d-2a2f-4f95-99d5-d2d0a7d94d7f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3878a89d-abf5-4587-93ad-62955b408c46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161913de-5f29-4cd0-a76b-f627a6891062",
        "cursor": {
          "ref": "7392d3df-5691-4fc4-b70c-9ba42bcecf29",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c317d688-0ff1-4c0d-acee-10d7a2f7387a"
        },
        "item": {
          "id": "161913de-5f29-4cd0-a76b-f627a6891062",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "400cd132-1b3c-43af-8b00-c5ae81f4b6eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a273bccf-2ef8-4bd7-8292-7d431a857d3c",
        "cursor": {
          "ref": "d199b666-33ca-4fb6-8b17-af01961d30d8",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e4438d57-5099-4e8a-8918-a80992d7a3c6"
        },
        "item": {
          "id": "a273bccf-2ef8-4bd7-8292-7d431a857d3c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "16357047-c037-4d08-847f-4f0d6252389d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebca21fa-a232-43b6-97ec-c0b045257d3c",
        "cursor": {
          "ref": "41b56eb8-3c34-4ce0-b92f-eb4cb53553a9",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "01c41fec-7e06-41c2-8110-11eec495adfd"
        },
        "item": {
          "id": "ebca21fa-a232-43b6-97ec-c0b045257d3c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6e79a7a0-65fe-4a70-8117-8ec4f41fb812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e63ac91e-10df-4650-90ea-f0b198cc1c97",
        "cursor": {
          "ref": "88dcd3bb-08f3-4742-9a5a-41ba4a992cf0",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ac4cb694-c1cd-4ad3-b279-b1b1fb925336"
        },
        "item": {
          "id": "e63ac91e-10df-4650-90ea-f0b198cc1c97",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f843986c-2b35-40e3-ad13-ab8a70a3e2cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5fdc14-3be4-401b-b0ea-7c42d97d6c36",
        "cursor": {
          "ref": "6bbc0c6f-f06c-4d0a-8144-3159edfc1f1a",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "7aa4b084-1ebd-412a-8f71-d8840d594437"
        },
        "item": {
          "id": "5d5fdc14-3be4-401b-b0ea-7c42d97d6c36",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "6db18193-2cfd-4975-a3d3-cb2c38b3ac94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06ad51df-aa8a-436d-97f7-8e20f1a24c75",
        "cursor": {
          "ref": "9f3a46d6-d8ae-4e0d-8d03-e51fff5ddd4d",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f48f3847-e737-4d3b-a524-e82a0df8e478"
        },
        "item": {
          "id": "06ad51df-aa8a-436d-97f7-8e20f1a24c75",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "79b672cb-9057-40af-8b51-f8ceeaea710d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63912545-6226-49c0-931b-1e79f2f1f3dc",
        "cursor": {
          "ref": "f2c96142-a53f-4a28-a618-1329a3d5d2fb",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b26771c7-16e1-4cf7-9b24-b01e90e7724e"
        },
        "item": {
          "id": "63912545-6226-49c0-931b-1e79f2f1f3dc",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5bcfee62-ea9a-4967-b8ea-4b57ca93c781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb945291-2692-4a3c-a041-09c12e68d0e4",
        "cursor": {
          "ref": "27a3193f-9da3-4599-9727-86703e1eddb1",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "71a39439-74dd-46fd-9116-8a5b9373521a"
        },
        "item": {
          "id": "fb945291-2692-4a3c-a041-09c12e68d0e4",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "acfbc45e-4cf6-42a8-8777-0656209b8577",
          "status": "OK",
          "code": 200,
          "responseTime": 567,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "f6d42c89-5216-4ad1-92a7-7f3195ea749c",
        "cursor": {
          "ref": "5f6a80f2-1cf6-4760-b1d3-0e181ee50093",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ae68f7e6-6843-4a70-9f14-f682e0add94f"
        },
        "item": {
          "id": "f6d42c89-5216-4ad1-92a7-7f3195ea749c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "105141a6-1752-4136-8789-08b121667c59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "228f0871-0fa2-420d-99df-fa3bf657534b",
        "cursor": {
          "ref": "7ce89f63-6714-45a1-902b-3a9d0f6de367",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "855835a4-a643-4070-b9e7-26f3444fdd9e"
        },
        "item": {
          "id": "228f0871-0fa2-420d-99df-fa3bf657534b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f5547486-c4ab-4291-bbb9-8e6eb7fef0b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a2a315e-b3fc-4b26-afe6-a04bce4e0b1c",
        "cursor": {
          "ref": "2c266337-dd31-4010-a078-9fc55d88ddd7",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "2614d40f-6016-4dff-8ad0-8827c09c7c42"
        },
        "item": {
          "id": "6a2a315e-b3fc-4b26-afe6-a04bce4e0b1c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "237330fb-204e-4f02-bce1-a557ce3b887c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 258,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b279ee-28b9-43ed-802d-dc0525c1afd2",
        "cursor": {
          "ref": "b2fbabbc-d690-497c-86e1-bc84b5662e6c",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6e7d2ea4-2bc7-4973-bccf-2f9b995d7655"
        },
        "item": {
          "id": "e5b279ee-28b9-43ed-802d-dc0525c1afd2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1bfbb28e-c95f-4847-9f38-e945d0408e0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 260,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d85b391b-b938-4d88-be84-97c9ec0896b1",
        "cursor": {
          "ref": "1d90e4da-afea-435c-bab0-2c1accc49780",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "64ad7b48-28b6-4bb3-892b-7bafde610bbc"
        },
        "item": {
          "id": "d85b391b-b938-4d88-be84-97c9ec0896b1",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "267be729-adbd-4d77-9a94-acb80d314561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e9b9dcd-73c6-4ecf-80cd-5f185a39c166",
        "cursor": {
          "ref": "4452a406-7f61-4be8-98f3-ad0aebb9e89d",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "553566bc-454b-486a-9018-3cbdf1c38e02"
        },
        "item": {
          "id": "5e9b9dcd-73c6-4ecf-80cd-5f185a39c166",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "65a55a4d-0fb4-46c8-959e-2e56caa3d568",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2257d9c6-8007-4403-80f7-58b4fca934f5",
        "cursor": {
          "ref": "a47c20d5-88e8-4263-a705-283cdaf02d1a",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "63fbd953-ca4a-4a6d-b300-c1358970d073"
        },
        "item": {
          "id": "2257d9c6-8007-4403-80f7-58b4fca934f5",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "758cc439-fa26-4f2a-b3e2-c051acf37f38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e91deb8d-33be-49fa-96f6-1c8bb0609de8",
        "cursor": {
          "ref": "a6ab42a2-523c-4502-acc4-ec87425604ee",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "60eafef8-2738-4286-91f0-bb72b0048018"
        },
        "item": {
          "id": "e91deb8d-33be-49fa-96f6-1c8bb0609de8",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "87e343ab-efc2-4983-aaab-a30bd655c023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b14a71e6-c4d6-48ad-8f20-d62e5bc979de",
        "cursor": {
          "ref": "2f3e4968-50d3-4fa9-9a89-ad9b65c5fe49",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "508b7229-0e09-4e07-8441-557d42cf9059"
        },
        "item": {
          "id": "b14a71e6-c4d6-48ad-8f20-d62e5bc979de",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a3e5a94e-0157-4410-b8d4-637e5aefe810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27d65034-4bb6-4ff7-822b-5ed75bbc6fce",
        "cursor": {
          "ref": "926aeff3-e4ee-40d0-bfa6-38148b4b996e",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d2c5facd-9686-4d93-be53-6548def796f4"
        },
        "item": {
          "id": "27d65034-4bb6-4ff7-822b-5ed75bbc6fce",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "dd5e104c-ae62-4b14-948e-2958045995c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bfa9c2b-3eac-4988-8900-1dd2791da5f0",
        "cursor": {
          "ref": "4def8d93-c42b-494c-97cc-be38f0331ba2",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "bd8a88ed-166f-438c-9ead-9a6fa17b1ba9"
        },
        "item": {
          "id": "3bfa9c2b-3eac-4988-8900-1dd2791da5f0",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "465e504d-f3a8-40a5-bdc1-9605a9c7c8a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "925dbd15-07ea-4988-8e6c-69192ac7848b",
        "cursor": {
          "ref": "4c239b24-2325-4c36-b448-b97281999ebc",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "76eae401-4c8a-409f-a0c6-dc78d4456585"
        },
        "item": {
          "id": "925dbd15-07ea-4988-8e6c-69192ac7848b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "40c366e0-f185-4511-86d4-4939c697242e",
          "status": "OK",
          "code": 200,
          "responseTime": 224,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "3d4c502b-7c9a-4adb-a87a-df8853f73867",
        "cursor": {
          "ref": "4833dcd0-4ae5-405c-b43c-ff19d4f5b486",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "7854c791-7ed6-4a35-b7e8-dd0424c15028"
        },
        "item": {
          "id": "3d4c502b-7c9a-4adb-a87a-df8853f73867",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "8312867f-fcb6-4913-931d-4ab1eaa668c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d2e6ca-2188-4d66-9078-26df901b7b2f",
        "cursor": {
          "ref": "ff6539f3-8001-4207-bf97-577a60c0511d",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "85a670e1-2b46-4319-b8dc-f493b91ab755"
        },
        "item": {
          "id": "58d2e6ca-2188-4d66-9078-26df901b7b2f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "44b1c6da-42b2-4e81-a89f-e8ddb68c68d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad5270f-43c4-4b72-909f-2a28536b481d",
        "cursor": {
          "ref": "d12f860a-a6f3-44f1-93a2-1658e2363854",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a237664f-2933-4e3d-8bb0-f904a48a6000"
        },
        "item": {
          "id": "fad5270f-43c4-4b72-909f-2a28536b481d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "74a1f21f-1b8f-480e-a7e5-12fe47221a78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ae8c55-513f-49cb-ba5e-19258926b7fd",
        "cursor": {
          "ref": "01ebd855-bb90-49da-b76e-7c22a85e77c0",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "322de75f-9b4f-4e54-a5a7-49448882a1d2"
        },
        "item": {
          "id": "94ae8c55-513f-49cb-ba5e-19258926b7fd",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "51a03c6a-cb21-48df-b450-6981e6148bed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d1f0e01-192f-44d7-bc0f-66a546804cf4",
        "cursor": {
          "ref": "2c562bb1-5636-4c45-a0e7-2d3754700899",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "082305e6-99be-4f65-9b11-ef9027483523"
        },
        "item": {
          "id": "9d1f0e01-192f-44d7-bc0f-66a546804cf4",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "478b554f-3108-46d3-8ff9-4e3a88b5ee6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62c90b8f-e8eb-4652-98a0-be4ac3ac50d9",
        "cursor": {
          "ref": "949b6eb0-9b41-45f4-b34e-f4626effebdc",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "abd9de4b-1b09-4a2e-b200-dc35ee3af1bb"
        },
        "item": {
          "id": "62c90b8f-e8eb-4652-98a0-be4ac3ac50d9",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "9a8be068-ae9a-4b8d-9248-6abd86dfb777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 252,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9101aa0c-cb28-4f4f-ab50-4bba827d4942",
        "cursor": {
          "ref": "863bdda7-85fa-405e-9e5a-5fdaf9f5a913",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "44d9c6d3-12e6-4b28-b352-8bc0cd8692dd"
        },
        "item": {
          "id": "9101aa0c-cb28-4f4f-ab50-4bba827d4942",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "dcc69bfa-b4f0-4ba7-80e2-c392dc70f97d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 259,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a0da103-0ebb-44c3-9a15-4188b085120f",
        "cursor": {
          "ref": "48e7310e-ef37-4ff6-bc71-9ed1c80058d8",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "aad3b366-7da1-4acb-afa1-58d93f79e560"
        },
        "item": {
          "id": "5a0da103-0ebb-44c3-9a15-4188b085120f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "78608fe7-0031-4f27-bc30-d25f42080a3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 254,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46ee4fde-f523-4bac-be70-949dce382c4e",
        "cursor": {
          "ref": "601b5e13-7db8-4e70-a150-b3c0f56809db",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c0f0c327-94ff-49ab-9a99-1f2cd6d946bd"
        },
        "item": {
          "id": "46ee4fde-f523-4bac-be70-949dce382c4e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "971d42d9-68cf-4157-8589-c4d34d10fb95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3156b07b-6212-43b5-bd9c-fb8c58b5f019",
        "cursor": {
          "ref": "6c35a42d-4e85-4ab8-88bd-aac6c9b3f3ee",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "452374a3-c84a-4287-aebe-6c8704b0ce97"
        },
        "item": {
          "id": "3156b07b-6212-43b5-bd9c-fb8c58b5f019",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6fd3d55e-a9ec-4b0a-9e15-e2b1b0696e81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 309,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2b87b79-01e1-4784-9e2b-d2489198b578",
        "cursor": {
          "ref": "9e249834-0524-49a6-ac27-0309a88c08f3",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "da8517d6-68c7-4174-83bc-1ecd31989f64"
        },
        "item": {
          "id": "a2b87b79-01e1-4784-9e2b-d2489198b578",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6cb1b433-1076-4712-9482-219ce0e0de37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 252,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7497309-9a41-48d8-933b-33f59927a113",
        "cursor": {
          "ref": "8839a55b-3d96-4526-88c3-1e6e71f3db8a",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "6b627a53-2b78-4227-89f9-e819eebba2d1"
        },
        "item": {
          "id": "f7497309-9a41-48d8-933b-33f59927a113",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "fc44bb73-16d6-4e71-87ca-1c41bbb3c068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 277,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3086a954-1297-4e49-b42d-cf5b00cfb06e",
        "cursor": {
          "ref": "7d829e6f-3e72-4d94-9c14-c38d46a1413b",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "867248b1-9bea-4f1d-9a76-19df9177752d"
        },
        "item": {
          "id": "3086a954-1297-4e49-b42d-cf5b00cfb06e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a4f61da1-1d41-46fd-91e3-b8768d874d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 244,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "156a6f8a-9f10-4cce-8659-6712ad147961",
        "cursor": {
          "ref": "932bc53c-6d15-4b1f-b6c2-c01759363903",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b56fa9f0-7cce-4f5b-a8a0-4ee0a1af9ec0"
        },
        "item": {
          "id": "156a6f8a-9f10-4cce-8659-6712ad147961",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "21b37725-c941-4778-8919-4a5a549d63f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f637e604-3089-4cd6-abb8-4fd88dc96fe9",
        "cursor": {
          "ref": "b804f833-a891-41d2-852b-29e17ea7c6bd",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "6df694ab-79af-4190-bfe5-b984034960ca"
        },
        "item": {
          "id": "f637e604-3089-4cd6-abb8-4fd88dc96fe9",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "02a3b081-69e5-4169-a37e-8828d9fcde75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "422ab930-1157-4369-a828-fe2bbd252212",
        "cursor": {
          "ref": "61060d0b-c1dc-4811-82cd-d67b430fdd6f",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "5a923b22-bf86-4a97-943f-f4d8eea87289"
        },
        "item": {
          "id": "422ab930-1157-4369-a828-fe2bbd252212",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a5fd688e-3ff1-4ff4-8263-1f2bffbefadb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 257,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e43492-428b-4004-8cac-2cc106271b0b",
        "cursor": {
          "ref": "4a30de75-30f2-4518-9894-80f840816103",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7950a221-2379-48ee-9248-36d9359b6113"
        },
        "item": {
          "id": "94e43492-428b-4004-8cac-2cc106271b0b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f36e3f98-c230-4302-b542-937ca043cc30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "801e30a3-e582-44fb-8e9a-4ff1fa9b5302",
        "cursor": {
          "ref": "8e8cb77c-7e44-438e-a214-d42b1b7b8767",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8b556544-08ea-4d13-a4a0-80f016d9d2f6"
        },
        "item": {
          "id": "801e30a3-e582-44fb-8e9a-4ff1fa9b5302",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1af5a17a-095b-4c4a-a6a7-4c69ed87c518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee9dd4c0-621f-405b-9aaf-3d9e645f0364",
        "cursor": {
          "ref": "2b6b7d95-a88d-4a3b-9ca4-5d46732cd0ac",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "c6a9e29e-6117-4d38-8dd9-d93f3af3208d"
        },
        "item": {
          "id": "ee9dd4c0-621f-405b-9aaf-3d9e645f0364",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "6ecb83bb-8cbd-4b64-9e9b-269df178e71a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb305870-1f6c-4dad-bd88-165647bcd048",
        "cursor": {
          "ref": "dca4b3a0-4f85-4b07-ab82-fa22c26556c6",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2115c5fc-22fd-44a8-9e9d-a4b5c597a1fb"
        },
        "item": {
          "id": "eb305870-1f6c-4dad-bd88-165647bcd048",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "06a74da4-e1cd-45c1-b3e5-f3e1202e0df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 240,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a372c68-b84a-4585-8930-ab157ccb8bef",
        "cursor": {
          "ref": "ff607174-fbf0-4c94-be0c-37d8c8524773",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9f3e5260-e3d3-4d64-9a0b-fe7bc800348d"
        },
        "item": {
          "id": "3a372c68-b84a-4585-8930-ab157ccb8bef",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e6ea795b-86af-4223-8267-625f0afaf322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 284,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f72c2d6-acb1-4adb-8379-6939fb3919a9",
        "cursor": {
          "ref": "d5a4b70a-1345-476a-8f6b-22a23043d318",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c458fc7f-750b-47dd-b873-cda71f41b620"
        },
        "item": {
          "id": "5f72c2d6-acb1-4adb-8379-6939fb3919a9",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "110ceb42-387f-4cd6-b405-0ad0217651ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 252,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad0cc04-b360-485f-8ffb-cedc7c59cd25",
        "cursor": {
          "ref": "37bc0baf-d554-47bf-ba54-abdf93228b04",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "95631de2-cc1d-4541-9dd3-7a680df73ba4"
        },
        "item": {
          "id": "0ad0cc04-b360-485f-8ffb-cedc7c59cd25",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ff6dcd93-921b-44e8-8b29-417472f22416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11954f42-86fb-4e91-ac91-e97c3667d759",
        "cursor": {
          "ref": "d3c7c198-16ed-4727-8481-6f580ecb1122",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "690b3a19-c958-4230-9dca-da1298822316"
        },
        "item": {
          "id": "11954f42-86fb-4e91-ac91-e97c3667d759",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "92498699-afb2-4a28-9c07-d1c8829adf05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9b04749-c5f2-40a9-830a-a142cfc289b7",
        "cursor": {
          "ref": "e1146a96-b4fe-40b2-b52e-ef8ccfbd1997",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5b19010e-9c04-45f8-be2e-0e71e4834866"
        },
        "item": {
          "id": "b9b04749-c5f2-40a9-830a-a142cfc289b7",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "fd1c59ce-039d-49fd-835f-a942e0f75012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e8f8a00-c4c7-4deb-a194-3054da0a0384",
        "cursor": {
          "ref": "a25e558c-cd35-4c67-b3e2-b5eb1a6cc589",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "8f1bee42-e73f-49a3-90a7-0914b10a5b0d"
        },
        "item": {
          "id": "5e8f8a00-c4c7-4deb-a194-3054da0a0384",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "fcd16652-b6fe-4846-b315-14469d8691ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a6c92d-192f-4f0b-8372-f2b0932ec72d",
        "cursor": {
          "ref": "3658c930-6b0f-42f7-8324-090b904a04e1",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "3d312fcb-1e4c-4072-bc33-95f73e9d2841"
        },
        "item": {
          "id": "d4a6c92d-192f-4f0b-8372-f2b0932ec72d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "25cb6731-249c-499d-a5b2-e10742095ee2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b62abfd-1861-44e2-a630-ab545306dd56",
        "cursor": {
          "ref": "7f4f31da-177c-46e2-ad18-a69821f648b9",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "637b03a4-f20d-4e05-bb27-c4a375b14073"
        },
        "item": {
          "id": "5b62abfd-1861-44e2-a630-ab545306dd56",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "6b8430a9-fc0a-4192-a127-7539ba7cf677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 254,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6a4175d-9c2a-43d9-a570-c44a984c3684",
        "cursor": {
          "ref": "92ca3a3a-de56-4b7e-ba69-5626d9bbf424",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "be9d602e-11a4-4570-a533-d4befad66801"
        },
        "item": {
          "id": "f6a4175d-9c2a-43d9-a570-c44a984c3684",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "de640e21-f812-4c91-82a5-d2f7909f3d08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16c3351-19c3-4c6f-8b2a-51b9e8aaf76e",
        "cursor": {
          "ref": "88768ae5-76df-4c87-8003-2674cee8e39d",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a27259a3-22ea-4016-b722-11c9dcc30986"
        },
        "item": {
          "id": "c16c3351-19c3-4c6f-8b2a-51b9e8aaf76e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d7adb6d4-86bf-493c-8b65-26512a78d7da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ef1bdc-77f8-4ced-bdb4-daa2fac8025a",
        "cursor": {
          "ref": "0d5109d2-a14b-49a8-bb76-a11d9d275ca8",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1279a6e9-2786-47ea-8e37-123e2240c675"
        },
        "item": {
          "id": "38ef1bdc-77f8-4ced-bdb4-daa2fac8025a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "ee4a59ba-28fd-415b-810e-0fbf0588a7b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "282d0ed9-a979-424c-969f-9d6da2eba92d",
        "cursor": {
          "ref": "1f124610-e1e5-4acc-a8eb-e63367ddf7e0",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0e8030ef-d612-40ef-a1f1-179f56db3cfd"
        },
        "item": {
          "id": "282d0ed9-a979-424c-969f-9d6da2eba92d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "749ab510-2144-4377-a0e8-7b38af666c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e16f8111-3fe4-442c-8598-ff4dc5225d99",
        "cursor": {
          "ref": "e3825f09-b45d-4b3c-8882-17f0f2aad61d",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "31867f51-822e-4df1-b9de-a78331746534"
        },
        "item": {
          "id": "e16f8111-3fe4-442c-8598-ff4dc5225d99",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e6416c39-eaa5-4614-af82-60155438c166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc7c276-2a71-423b-b4a5-d67136e84eb4",
        "cursor": {
          "ref": "ffa956c2-a813-4147-9f98-064a84e4e528",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "dd1bb4e4-e679-43fa-b401-b1d9367f20db"
        },
        "item": {
          "id": "bcc7c276-2a71-423b-b4a5-d67136e84eb4",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "177638e9-acf1-4de6-8a88-54c3b9083ba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bcf5b3d-090b-4f23-99f3-7003facf7530",
        "cursor": {
          "ref": "ef40a6d3-71a8-4371-84a1-a655e0b6948f",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "bb7c78d5-67e9-49c9-9172-3a7fafcdaa96"
        },
        "item": {
          "id": "8bcf5b3d-090b-4f23-99f3-7003facf7530",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f44e91f3-f693-4e2b-8277-3b2bd30d9ba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1af14fc-e8c5-48cd-96ee-8dfe57c5a9e8",
        "cursor": {
          "ref": "2bc4536c-7a07-4835-828e-560760230a91",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2e1cf4a6-ac23-4983-b75f-d6c648911686"
        },
        "item": {
          "id": "c1af14fc-e8c5-48cd-96ee-8dfe57c5a9e8",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "f0e60067-1cad-4e3b-a57e-d53636864be9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0887f80d-03ca-465d-b9a4-88b54f0f1e7e",
        "cursor": {
          "ref": "b1b6d3bb-6a0e-46d9-b379-71dfb88d9e2c",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f8ff47b4-4422-40e2-bef9-c7fe64172f5e"
        },
        "item": {
          "id": "0887f80d-03ca-465d-b9a4-88b54f0f1e7e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "453cf47f-8ceb-41bb-9f48-4c50e496eb85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d46522-085a-4658-8d30-88e1fb78a5c7",
        "cursor": {
          "ref": "051bacd2-99a6-4845-8f73-ba217fa879e9",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "88fd1be6-abb8-443b-a0dc-23a9768d0f81"
        },
        "item": {
          "id": "04d46522-085a-4658-8d30-88e1fb78a5c7",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "45732884-3736-4f9f-a36d-59384a1686ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce178786-e3a1-471f-931f-0e8e6b81d36d",
        "cursor": {
          "ref": "dfd3d0de-819a-4d49-9c04-16cc70822cf8",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d4b01a0f-3597-4d21-9fed-c6b5b3dee39e"
        },
        "item": {
          "id": "ce178786-e3a1-471f-931f-0e8e6b81d36d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "8568ade1-8cec-47a2-8545-f5371618bcb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4caa08fa-6705-46b7-a279-f7aa7a066edc",
        "cursor": {
          "ref": "6b1dee19-779a-48c8-9f20-9b32c9c65776",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "82d17d59-4288-43ed-9257-2ced936d074f"
        },
        "item": {
          "id": "4caa08fa-6705-46b7-a279-f7aa7a066edc",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b0d071f8-a158-465e-bfb8-f310bdb85c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4504b525-b823-48a2-bda3-d16c066cf654",
        "cursor": {
          "ref": "4e5d7914-c9db-42b4-8f2b-5267be0705c3",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "dc0f50fe-cfb7-4f8c-954a-110fa56b98a4"
        },
        "item": {
          "id": "4504b525-b823-48a2-bda3-d16c066cf654",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "101ddd03-f473-4637-88d8-f0f2a619ab3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca6d49f6-9b69-4821-b8cc-6350939edd68",
        "cursor": {
          "ref": "6bf957c6-d139-4e35-a5d1-0a6f2b57ca80",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e23c9003-9848-4c80-8940-f57852279ed8"
        },
        "item": {
          "id": "ca6d49f6-9b69-4821-b8cc-6350939edd68",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8d255b02-c313-407a-80ae-d8aa52b2dc66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fde4e98b-bb3b-43eb-b965-feb324de669d",
        "cursor": {
          "ref": "ed3b4f8a-ba38-4a94-b395-bc649f1fba5f",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "98389528-0f8b-4a09-b96c-bed0fdb1cbfe"
        },
        "item": {
          "id": "fde4e98b-bb3b-43eb-b965-feb324de669d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b3fda697-2b10-433f-93aa-a1f0ca01c432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2a754f-6c0d-4516-b605-5a2fcb4f9857",
        "cursor": {
          "ref": "a9969174-6d81-4689-a6e3-13dca92ccf52",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "826613e7-b178-44c4-bdc2-ac1e1a48d632"
        },
        "item": {
          "id": "7e2a754f-6c0d-4516-b605-5a2fcb4f9857",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "50a3c3c5-fcc3-4d7c-be05-b84e7493af55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18decf77-645d-476f-a89c-fee404a768e1",
        "cursor": {
          "ref": "722ee9cf-edff-48db-9a4e-2956823900aa",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "adcb5bfe-4717-415a-b0bd-ec9691588fd7"
        },
        "item": {
          "id": "18decf77-645d-476f-a89c-fee404a768e1",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "aab3f1a5-4f8d-4e04-a959-62f96deae5fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "284fc38f-8947-4124-b614-f47c6ab566f6",
        "cursor": {
          "ref": "a0a431d3-c726-403a-99ce-c829e8cb1de0",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "33d5e671-1894-49b6-b923-34f0d68ebb7f"
        },
        "item": {
          "id": "284fc38f-8947-4124-b614-f47c6ab566f6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "5442a79f-38be-4dc1-80fe-010b662ccdc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "504fc400-9e89-4dc1-ba8e-830eba372a6d",
        "cursor": {
          "ref": "b8963756-a49b-4714-9380-d0420896c419",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "df5c984e-8995-4342-b484-f279e328a99e"
        },
        "item": {
          "id": "504fc400-9e89-4dc1-ba8e-830eba372a6d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8c68fe42-1a3e-4b52-9c89-bbef3156fa68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36733bcb-70a1-494a-85f6-dfc3417784ab",
        "cursor": {
          "ref": "795724a3-7d00-434c-86a9-dc7ca9bdeacb",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "21c2ec0b-3940-4e42-a1e5-2df1037f1805"
        },
        "item": {
          "id": "36733bcb-70a1-494a-85f6-dfc3417784ab",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fd1bd30c-c87e-46fa-ae78-e26308ece898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db0d1bec-6a44-49d0-bb4a-4a0c8e9e5407",
        "cursor": {
          "ref": "77513ba3-d310-4cce-9801-1c6584e820f1",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e8055129-c8d7-4f7c-a88e-bfbe6af4b079"
        },
        "item": {
          "id": "db0d1bec-6a44-49d0-bb4a-4a0c8e9e5407",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "4ac474f4-ea0c-4ed8-849b-44b7c10961b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d432b3-f79e-419d-b633-c1f4bd743910",
        "cursor": {
          "ref": "bbea2099-b20f-4e5e-a923-a39ca92fb0bc",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "94320500-c2a3-42df-93dc-f1dd80e7d824"
        },
        "item": {
          "id": "c1d432b3-f79e-419d-b633-c1f4bd743910",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a6341bbf-362a-4c32-9b43-c31f14ef2a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aac9c4eb-1dce-4f80-b445-92ecd1c22fe3",
        "cursor": {
          "ref": "4e883e5b-3019-4f96-93b7-31cf493cc751",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7817bf35-387f-4429-a2ae-6735369c1bdb"
        },
        "item": {
          "id": "aac9c4eb-1dce-4f80-b445-92ecd1c22fe3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0ef63b5e-90a4-4a6b-875b-077a2e8364bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9191ce78-2f0f-4320-8543-e65dc99ebb77",
        "cursor": {
          "ref": "d85fc0eb-82f6-4be1-bb56-94c0d91e8531",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e57c8015-fef4-4fae-869a-632b1e62c3c7"
        },
        "item": {
          "id": "9191ce78-2f0f-4320-8543-e65dc99ebb77",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1715312d-3f38-4040-8b8f-fd64d99e06ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a63b5b27-b9ea-4f88-8b24-8fa157df7f24",
        "cursor": {
          "ref": "538a8868-47e0-4677-8484-f0f8e9b1fcbe",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "4264d549-1307-4c36-b0f7-0a9bc494e785"
        },
        "item": {
          "id": "a63b5b27-b9ea-4f88-8b24-8fa157df7f24",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "3e38b741-6c7c-403a-a366-32055eaa2f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "148fc465-c436-4308-b314-df26ffe60eb5",
        "cursor": {
          "ref": "37d22348-ef0b-4001-9bdd-c0cf62b7224f",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "cbecee1f-4c7c-47ef-a996-d2bee4d4246b"
        },
        "item": {
          "id": "148fc465-c436-4308-b314-df26ffe60eb5",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "164c8429-cebd-4274-9d78-c1bca0e633a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9446314-7c8c-4a90-bf6d-caca7fe91643",
        "cursor": {
          "ref": "e2f55a76-4134-4ddb-9991-eb4e5fe50a22",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5047e10e-4f80-4cd1-aac2-ed467a21b6ea"
        },
        "item": {
          "id": "d9446314-7c8c-4a90-bf6d-caca7fe91643",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ef0e997f-f108-42ac-873d-80f810f192e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d63baf23-fe02-482b-a08f-2b4e7eac553e",
        "cursor": {
          "ref": "75f77442-81ac-44be-8c82-5536a4ddf2c3",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6f10096c-a2d5-4090-9186-0f7ac99fcdc8"
        },
        "item": {
          "id": "d63baf23-fe02-482b-a08f-2b4e7eac553e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c9853da1-e597-4771-9ff6-009090915b08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee0745c2-68d6-4740-a149-09055109d249",
        "cursor": {
          "ref": "c822a90a-eb3f-4b5a-aeac-702f7955837e",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a3fe7fd9-ce4f-4c53-9495-6738ea267f17"
        },
        "item": {
          "id": "ee0745c2-68d6-4740-a149-09055109d249",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f6937980-4ffd-4fc7-b9ff-a83da24143a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3234a0c5-14e8-43f7-8762-71b20de2e0db",
        "cursor": {
          "ref": "ab86af2f-6e33-4090-ac81-58a2977dd8e1",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d07cb083-d6be-45a6-a6a8-084d15114d04"
        },
        "item": {
          "id": "3234a0c5-14e8-43f7-8762-71b20de2e0db",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9d5308e1-f66e-45e2-bd74-0e414384985a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b946774f-581a-41d3-8dac-efd057587f39",
        "cursor": {
          "ref": "26c189f6-a0a9-4dfe-a143-d7e9cfec521a",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f35cdafe-8cec-4b21-80fd-fe478a2bf86e"
        },
        "item": {
          "id": "b946774f-581a-41d3-8dac-efd057587f39",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "813b74bf-2cc8-4b2e-a356-9e4a312343ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0262be63-39fb-4323-b207-912ab1fac734",
        "cursor": {
          "ref": "00d80eba-e2d1-42a1-b8b9-8ae0b0f98f73",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c23b8702-3371-4016-97f5-30dcdde36f79"
        },
        "item": {
          "id": "0262be63-39fb-4323-b207-912ab1fac734",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2df7cf85-c6b4-410d-ad51-6645f8c59418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84541bd1-e762-46ce-939c-07b82fa85380",
        "cursor": {
          "ref": "cc48ed86-70d9-4535-b5c9-8523d0c943cb",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e137a7d0-363e-45b3-b9f0-b7d77d8d83ca"
        },
        "item": {
          "id": "84541bd1-e762-46ce-939c-07b82fa85380",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "74b132aa-b5d4-4bb2-9f0d-fff7f52c7d10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4763f85b-3ebb-4ee1-bb7b-0feb0f54bcba",
        "cursor": {
          "ref": "251bfc8b-23ed-4818-9d7f-88b3d532feb9",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7695157d-ba8b-4587-8924-0b02f76f42b6"
        },
        "item": {
          "id": "4763f85b-3ebb-4ee1-bb7b-0feb0f54bcba",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "573e7d9a-e97e-4151-83d1-98d3a3a31efb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a1502b4-0b37-4391-bcff-8a5a23b5062b",
        "cursor": {
          "ref": "e0c1ff22-781f-44bf-8d7a-ff2e5513a163",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9c809e47-057f-4a22-9a85-d781ca1e8e85"
        },
        "item": {
          "id": "9a1502b4-0b37-4391-bcff-8a5a23b5062b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "750d00c9-a65a-472a-8b8f-5b9a559f9945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bc08334-06b1-4473-b6fb-40a497691447",
        "cursor": {
          "ref": "3979b309-554c-40de-a9c8-68ee577e0a68",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "629c4acd-3d24-4cea-aebb-31d3ae397a34"
        },
        "item": {
          "id": "2bc08334-06b1-4473-b6fb-40a497691447",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4fb0c5ca-6521-4044-a7c7-2dde9541d8ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63744600-d268-4f4c-b62f-cb626b381630",
        "cursor": {
          "ref": "21864c26-8aac-4b9b-8365-c2712c82f77d",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "8a6b6bc8-acf9-426a-ad63-69e6fbc71dc8"
        },
        "item": {
          "id": "63744600-d268-4f4c-b62f-cb626b381630",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "288c91c9-c175-45eb-bd80-965518ee507a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7f3cad-1d41-4ac2-a5a4-3346591d1e7a",
        "cursor": {
          "ref": "5a035569-38ce-4245-a094-947a0f843f58",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "0dbc3002-bf63-45c9-b913-1ad25b20f4b4"
        },
        "item": {
          "id": "6a7f3cad-1d41-4ac2-a5a4-3346591d1e7a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "081a663d-a013-4324-8750-68b5d7435130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21379ee4-ad1d-4120-bdeb-94684329f321",
        "cursor": {
          "ref": "64b2bc0c-543b-4687-84dc-bf20bbdc5e09",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "98fc0ab4-5701-4a7a-b0b8-bb5a29e1e8c6"
        },
        "item": {
          "id": "21379ee4-ad1d-4120-bdeb-94684329f321",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5c719b53-33a7-4059-b9b6-c74dbf5c0681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a349b4d7-3d60-43c0-b8d7-7a10f8e896b7",
        "cursor": {
          "ref": "ff6dd8bf-e9f6-4da0-a864-73212f5a1893",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "6e312794-c828-4fe2-b416-5ebba7ea2126"
        },
        "item": {
          "id": "a349b4d7-3d60-43c0-b8d7-7a10f8e896b7",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "315b8a24-0688-49dc-9b66-49d4f6860b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d3319e3-eed5-4c52-979c-60f703eca79b",
        "cursor": {
          "ref": "c1cf8ba1-4fcf-4e24-a655-22f7a9dac2f8",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3cc7956f-fba4-4e85-9472-fefb6e27181c"
        },
        "item": {
          "id": "2d3319e3-eed5-4c52-979c-60f703eca79b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "bd1e6b53-2090-4b5e-9a51-b7badd46f12b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81815449-9ff1-4d91-bddc-5414770f103b",
        "cursor": {
          "ref": "6afdbdd7-7dbf-4b0a-8d4a-f9d9555d6256",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "944bd096-e22f-41a9-87f5-05303ea80ade"
        },
        "item": {
          "id": "81815449-9ff1-4d91-bddc-5414770f103b",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "0f64afee-555b-4042-b8ff-4bd400960726",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c06b5895-2a1d-4da9-88a1-a1dab91d85ca",
        "cursor": {
          "ref": "cf7c7672-1f2c-421a-92bd-c10abfb07c0c",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "3aa534f4-0cf2-4812-89cc-1f7238281a04"
        },
        "item": {
          "id": "c06b5895-2a1d-4da9-88a1-a1dab91d85ca",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "7c8b14f2-8e71-4f80-a07d-08ca632616b0",
          "status": "OK",
          "code": 200,
          "responseTime": 228,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a188786-080e-48fd-be63-9940e9296ea4",
        "cursor": {
          "ref": "44dd0818-800a-4ce6-bd59-14a13c290ff2",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8735b1a5-1245-4814-abf8-a424e85b7294"
        },
        "item": {
          "id": "0a188786-080e-48fd-be63-9940e9296ea4",
          "name": "credentials_verify"
        },
        "response": {
          "id": "744ab322-585b-4cf7-84a5-5b7df1fc47c5",
          "status": "OK",
          "code": 200,
          "responseTime": 590,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "40bd211b-9aa6-42c1-ba26-23a2eba0b17c",
        "cursor": {
          "ref": "b010dff0-6e7a-423a-b6a0-3d4491012435",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "0e5822cf-8469-4608-95ea-cb19519b3920"
        },
        "item": {
          "id": "40bd211b-9aa6-42c1-ba26-23a2eba0b17c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3a68412c-2568-42e3-b96d-f5914a76dd03",
          "status": "OK",
          "code": 200,
          "responseTime": 576,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8102ab29-3759-4cca-8337-792158c7e06a",
        "cursor": {
          "ref": "e33be7d3-5d35-4f0d-94e4-07f2970ee288",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0050cc32-3022-4bbc-859e-b3491e6c21b7"
        },
        "item": {
          "id": "8102ab29-3759-4cca-8337-792158c7e06a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c87cc75e-2065-41f4-b12f-2a5990b81531",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8102ab29-3759-4cca-8337-792158c7e06a",
        "cursor": {
          "ref": "e33be7d3-5d35-4f0d-94e4-07f2970ee288",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0050cc32-3022-4bbc-859e-b3491e6c21b7"
        },
        "item": {
          "id": "8102ab29-3759-4cca-8337-792158c7e06a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c87cc75e-2065-41f4-b12f-2a5990b81531",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8102ab29-3759-4cca-8337-792158c7e06a",
        "cursor": {
          "ref": "e33be7d3-5d35-4f0d-94e4-07f2970ee288",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0050cc32-3022-4bbc-859e-b3491e6c21b7"
        },
        "item": {
          "id": "8102ab29-3759-4cca-8337-792158c7e06a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c87cc75e-2065-41f4-b12f-2a5990b81531",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed192de-4096-4779-9df5-a2f09c14ca12",
        "cursor": {
          "ref": "52377122-4a3b-4a5d-b98e-160f32a89342",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "808bb3e9-f791-4ab7-80ec-bdfb6442172f"
        },
        "item": {
          "id": "2ed192de-4096-4779-9df5-a2f09c14ca12",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "b3c4a62e-6e8b-4e1a-8c35-3230ec9c4d1e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "577bfc1a-0777-4ea4-8ca9-ba3a625d46fd",
        "cursor": {
          "ref": "5217398e-d0dc-4997-bb08-5a724ad6b02a",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "215c8a9b-2a5e-453b-89d1-d083281b31f3"
        },
        "item": {
          "id": "577bfc1a-0777-4ea4-8ca9-ba3a625d46fd",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "055549a0-04c0-48a7-9b76-d375dd91a7d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "577bfc1a-0777-4ea4-8ca9-ba3a625d46fd",
        "cursor": {
          "ref": "5217398e-d0dc-4997-bb08-5a724ad6b02a",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "215c8a9b-2a5e-453b-89d1-d083281b31f3"
        },
        "item": {
          "id": "577bfc1a-0777-4ea4-8ca9-ba3a625d46fd",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "055549a0-04c0-48a7-9b76-d375dd91a7d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "587aaa46-9660-473c-a5c9-a7987996b272",
        "cursor": {
          "ref": "bafe6b2c-e82e-46de-a1b5-ffdccbd3a3da",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "77abc640-9593-4e33-b068-77b76fa139a3"
        },
        "item": {
          "id": "587aaa46-9660-473c-a5c9-a7987996b272",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "a81b4661-704e-4ab6-89ff-9a102cbb8f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "51dcc0a8-16f0-4199-a376-5e1e82f24716",
        "cursor": {
          "ref": "adfc40a1-9a0d-4b03-8391-d8751402063d",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "878b9b10-c29f-43a5-9ad4-751543c82786"
        },
        "item": {
          "id": "51dcc0a8-16f0-4199-a376-5e1e82f24716",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "aa36e0f2-a2cb-4097-93c0-b54add3126b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "51dcc0a8-16f0-4199-a376-5e1e82f24716",
        "cursor": {
          "ref": "adfc40a1-9a0d-4b03-8391-d8751402063d",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "878b9b10-c29f-43a5-9ad4-751543c82786"
        },
        "item": {
          "id": "51dcc0a8-16f0-4199-a376-5e1e82f24716",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "aa36e0f2-a2cb-4097-93c0-b54add3126b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "a8e72889-133b-490a-a853-4874f331cc62",
        "cursor": {
          "ref": "3dbdd2c1-9a8f-4122-913a-6fc1123b08f8",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "9d93253d-d496-4fe0-886e-9cfa0e1ab375"
        },
        "item": {
          "id": "a8e72889-133b-490a-a853-4874f331cc62",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "69b4097f-aa10-4104-af3a-cbf7e34541a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}