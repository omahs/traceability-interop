{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "bdc4c031-2202-4015-bb8b-c5cba623c195",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3c3e3c83-0cf5-4803-89a3-056225970fd8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2654742b-0776-467c-b194-82050fba64bc",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "86a37c22-ae71-437a-83c4-0b66c3bbacd2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "096fb730-1290-4bb4-a481-bba90b791a92"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "68401932-d4ef-4f2a-ba31-b1b614511559",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2e95f77a-43d2-4ae8-add2-104a26a64b80",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6cb4e1b5-310d-4cc5-8ec2-ded6bde8f0cb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "63210008-065f-4ea8-8337-57525e2be666",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ba4f2a-c81f-4d5c-a5a3-09c3b9f46d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "031656ce-4de3-463f-ac39-cefa8001d714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd0a14ad-af9c-4939-9ea4-961dc37d0677",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f948de-e00e-42f4-8aa0-5ee7e0b82b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f59cc5c6-693b-4e39-a47c-43372059ba22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d25a291-81bf-45bc-8503-dcabf1040eda",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6efca368-d2b8-4c7c-a62d-a6640375de18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6049b67c-627f-4778-a5c9-6f010386d600"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ef4f4706-20f0-420b-b0d7-d23bcf7f321d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f94617d6-e0f7-4ce7-abbd-5ece3b3da66d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "312b52f0-4ec4-4d08-857f-af5b8d0ba46c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b59c27a-5bbf-4d73-b07e-25847b627fe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d577a4f5-c671-4bd9-836e-24e867b3a657",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "989e31cb-0ce2-4ce9-95ef-ff804016488b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6713ad52-9f43-4b5b-8615-eccf6c23b450",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e569b479-9140-4049-b124-6b10dcc6b57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "37fad3a2-b9db-4cdf-99b6-ccaa6b834dc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11783f7b-38cc-443e-be3f-e8e8d4a7d65d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "4667dad2-05a9-4b9e-981a-e404e77ab224"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bf53414f-5fff-4341-b265-35c71847ce4c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d9dfc4dc-4f24-40f8-a7df-f6b79a86bdbc",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "924a6f04-e20c-4dd2-8ce2-04e1ea0d3f71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "07b4c031-2b8b-461f-a546-238870ef15f2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0001ee95-fa32-4a7b-b516-7573efe5af26",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "bd798d42-5f88-44c7-8994-6b8825fefcbc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6ba0ebb6-b806-460b-91b8-32f02b4a4152",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6d5bb06c-432f-4e68-9f69-6c49f1a53d3e"
            }
          }
        ]
      },
      {
        "id": "dc5da668-bbd2-4444-8ec2-7dc3a5cc2095",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1d1ce76d-bd09-411d-b490-e488431751de",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0373c7af-5270-4147-a251-6ce42b66dd49",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "3d8b02b8-7767-48da-bf25-778f994d4c12",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed70957-0358-4f77-9204-4ef552611688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31183f93-e9e1-4b1b-b46c-bdfa03775d82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb19c59f-2be1-4087-889d-6e5f5237d45c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10a8257c-c58e-452f-bfac-9e3dab221f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d23811-282d-4291-b9a7-28266aa3ac19",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d92bc0-9511-49c7-a4da-5962f2344106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6b5fbec-eaa2-48ca-a731-5e1cb510a8f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f0b1af7-95de-41fe-950e-aba0d5ef1b2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "337b964f-9f7c-4c11-94fb-52eb8bb722e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f3a512-9dd9-4bc9-a098-5451a2fbafd2",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e7b214-5b9e-4163-9c0b-a18223a732ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74be7541-7d58-4ae5-92ed-1f37a5ab01aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b29627b-5c89-42a4-83de-bdb40aba4764",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "583ef155-e7b8-4dae-aba3-c925002462d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c94c47-5418-4b9c-bbd5-525d443ed2c8",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d9bd61-1119-497f-91d0-2cafc10dd35a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70fe8d44-a269-41e6-b061-2897aaf9dcb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2d0d00e-f19b-4373-a928-6da5b216ef05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "944f63fe-a4bd-42e2-a164-1aab3b76c9e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d785e6c-064f-4797-9b74-222bd92a2f18",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dcbe7b1-b949-4b07-922d-f723bc6a343e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4129d0bb-cb67-4346-98b7-eabc1ceeef21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f6bc814-baa5-4fbb-89b2-5a1c7edee20a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb7ecf00-5281-43a7-a788-85d401f6611e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59de944f-167a-426b-a641-fea32868113a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27bc1a38-6ccb-4979-aca7-4f55f375c8e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e24b62d-0ef0-4725-af7b-e7a93269592a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec7bae17-6e69-416d-9337-35d41393aa3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55b1460f-f265-48d1-b763-6585d01989d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3cf1454-9523-4322-a7a0-e3659e139923",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ce6989-15d6-4a7a-8588-562e1d289526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df84bdb4-820f-4f1e-9d59-c49396e0f656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb291dc7-77b7-4eda-ab71-b78df29be4fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06c7c121-c217-4efa-a4e1-a1bd451d6fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccacc8cc-2799-4314-ae09-6eba3139b805",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0235f304-2d48-445a-a9f9-81967855fe5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c84e0372-173e-49ce-930c-709b67dc9a51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c0fda9b-d326-4964-b67c-6b669dfef52b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ab7576f-101d-4ed9-bfda-70e9a1b4ef9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c67e99b-ef18-4c6c-be33-b1043a3d385b",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0747a448-a863-4f15-98f2-3231ad5a31db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbe40e81-d5e9-4c8c-82a5-5f3f79d55209"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a6a940f-ea61-4b7a-a8ff-992524b3334e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ba9cf3d-5abf-45ca-b41e-e6129d8d4198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80102f6c-92cf-4b26-8916-148f88ab747c",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4246b6a3-31ef-4ba9-84e6-7910d5b22210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f1e5b91-9be6-4087-9e06-57c442ed6a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d36eb0e1-84fd-4f3d-b977-d1c00bdbd68a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25efd898-6424-4fe7-8789-2998cc69e44f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b17ca8b-9027-4d02-ae87-c73b9ccf9ef1",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "737978c8-754f-4aed-b6f9-d07c562b2d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b89ccce1-1273-4bc9-8f2e-2e9bb0b12219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a10ddd5-f195-4e67-8df9-5347cf911d64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "6c920bc7-4407-4b71-82ec-d74a215bdd9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e457b9fe-4738-45e3-96f4-41e17da1724e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c79411f-51ec-4aeb-8171-1b7134279ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6664c03c-11f2-4cf3-921a-505e6eebc571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f698b1-8117-4148-af03-2fb8c6efff3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "459beab9-26ac-4f8e-b0b3-3a66a76267d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f8df4d-214a-45af-858c-54f774a30231",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce7189e-1280-48d1-8254-d8731cb39ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f93aa86d-74b0-4596-98a1-e45a8ae47dc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995bc0b4-499b-419a-8708-28e8d5ff5457",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3057b28-d850-4f47-9966-fa5e795926d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0223c855-e32d-4008-a51f-a0ee834c4e3e",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac1935b-5dc0-4053-937e-bf135dff8ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cf5c7b3-c006-4a33-a51e-37bbb15c6504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ca4caf0-3adc-417d-8f1c-1f2e2bb9e305",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7af1877-2029-41e4-ae5e-3e7e457511a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dd6d8d0-d8b6-41c6-bfe0-d91a4cd0cf29",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d471330-d9fc-4bb3-8ada-4c20f5c87874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de3ef559-87ef-4710-b6d5-bf7e0fe963e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6571ccf9-da82-450b-8351-1a88dd1a92a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "afd82f21-079f-4247-a513-35b951c508ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc308b36-7ea8-4b26-a079-e39b042c2129",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b3fcf1-8a5f-4656-87b8-522d447a88e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55040ab7-19f6-4d8f-a287-728d5cda0771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf4c4ff-f001-4141-8bf8-e15b26ac2c61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "418ad94f-430b-4b83-b7db-d6925548c059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb8f536-e2f9-45ce-8dca-9c12c05e878d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e98fd816-3751-48ea-9184-cc0e56b448c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91e46cfd-9f2d-49c2-ace5-0e8bc64c05dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "addce2d6-4fae-4a0d-87a9-67b77d5e8396",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c5c7e35-dc14-4048-a5b9-5a16a5f4b21f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a3c311-67ef-44ee-8e04-f52e5052939c",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11bd7d8e-edbf-4a3d-b675-b38c9713d0bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3a1c387-c7c0-46eb-a0d1-d6f3469c9ecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5787908-c1ad-4599-adc0-413c36167c42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b404213-9ee2-4f57-a8da-45cff8a2ef68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4919cd23-c1d4-42ef-a69b-177156ddfbc0",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b2c941-40e7-4e39-945c-35f1dc23ecb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c77929d0-ef68-4b03-91e5-76d566e2b965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3189e5b4-ce71-4050-93bb-3e9bd1a426d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c4f6138-5a0b-4414-9972-ac8a8afe0840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc06c1d6-8ea7-499a-b363-bf68dbf247e3",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31041f19-b1a5-44bb-a309-a575a3a3d377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e69e735-6d23-4643-bb0a-f6680a84a59f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5117187e-b27d-4e98-a9fd-2fe31afc559b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d091c86d-4e1b-41b0-817d-e34fa379020e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f37abee-5765-476f-ab40-6b8f11372951",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7404bf73-57e5-47e0-a7b1-432d00cb0598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b35108b4-8f5f-4d47-b38f-749930185c6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba3ee743-11fc-451d-a635-2acc14b9285f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a52229ba-8856-4acc-8b2a-ec5c0872e2ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f0a1a87-0afe-43a5-b832-562e20d57b59",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "858126f3-ede1-4a8a-9eab-11860f6537c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47e30fa2-5225-41a1-aa1c-e9b55f8e2c36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26519e1-7af3-4594-a9a3-20b029e858c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ded00ee0-6c74-4dd8-b472-f4e051bc6e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e6da9b-7614-47a2-bfe2-eb0ed2baf068",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb8d43e2-b66f-4a64-b837-84e04f0fd82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c1bca5b-a3b4-4e6b-be6b-9c3d177e31ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ccdef0-b45e-4159-a166-df6f48cd7b0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8440b4a3-d19c-4b40-81b7-acc947ce78a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87760a85-f0a5-4f76-a30a-e01037803f5f",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e633724-49fc-4b13-b47b-3ac7c2f5098e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9409b622-ae90-4889-aa1f-62f2ab082b91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4083fe41-aa06-4ea3-bde4-57b6622e7e38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c7a0a3f-4c1c-4441-b85a-574355cd6fc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb63587-5088-4082-8312-f4a532b8977c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb7e22e-a8df-447e-a176-52356f4cb5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4e95ba4-eb7b-4df9-9467-64543f7bfd94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce42b08-0880-4abe-9740-2f3f4ef53505",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15e37d27-2883-4ae3-b36d-ec995850f0a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148b15ce-89bb-4243-941e-fdf27d108507",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09f5b3c0-0e69-43b4-af08-0d8130516fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "475c3620-ffd2-4598-85e2-6ae9971caf61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf2d452d-546f-4e0d-ade9-c1ac36c870fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54bd11cb-99f1-4d27-9cea-d28465382686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb1dc7dc-c4c4-4167-b98f-2bb6780e5edf",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc31e4d1-d5fe-4acf-898e-1569f6e833a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d9435ab-e867-4c95-863d-2e74ad7e46e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa046e7-32ec-4adb-be16-4e8f4a87b7ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "157ade6c-ceb2-4842-b01a-ef3df65cb5ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa7821e7-748d-4fd4-af84-47d46305cc81",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a278be7-c610-47ad-bcda-130a2d18ab26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebfd2b46-0112-43f1-a9ab-3a949093751f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf559c5-f18f-4f9d-a223-b59d464c908f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "005617fc-1ca5-4ce7-b351-e8da4e1ce5d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0788a9b9-7aca-4f96-8dae-372a988a7e16",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4329492f-07eb-45a7-854c-f7ff748eb4c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55594478-6c32-4d07-90c8-b29c7ce3baf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3efb8949-9336-400b-9848-1785c8748425",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3ed5b7b-22f8-4ca8-8bbd-2d58974d9361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3770fba3-558b-4c2d-9d73-7754f171176b",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43db7083-7350-4159-82cd-54b9aa515b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50a107ea-ddc8-42ad-9e21-695937742e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90dbb1e6-a0dd-44cd-9741-de14f9975a46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15248f2e-75cc-4e39-a9ab-134cc8cfd529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2705a4d-603e-485f-ab6d-0db0b13c6924",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e656d7-511d-4add-892f-5e08d9b41214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c4a0873d-db34-40b4-9a17-5707b2421584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0daf1d89-a24a-4e21-ae9a-058e03754e5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "624a9a32-3c96-470e-9b49-ab7fd717d8d6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "60c7d6b8-ed2f-447a-87c5-0fa09f6e56e4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f9225c99-0718-4952-aa92-7d09e5badc7a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d24bb707-5e3a-4040-8b43-8c95421216e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f3f79fa-b07d-4cd4-93b7-8b1da1aac70c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d443bf1c-6957-44b5-943c-e17cad986b9c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "201e30de-307c-4d9d-b342-5fd53a842beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6893f554-b17c-41ef-a59b-611fc616d34b",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42921dba-dad1-494d-9675-56b973561e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c75a7e9e-474e-4b84-8502-ffc51fcc7e7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "521e7c80-b9b7-4c42-baed-6bbe76d5f74f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "66d36b31-f3e8-4106-ae37-da0865fdc0b0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6eec43f1-ad6b-48cf-9ca9-95701f55893b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f1a9633e-cbc2-4b89-a9ee-f9baec86dfa2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6dfbc2c-9b4e-416d-93e7-9e90a12df870",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1e0a8c2-81d0-4422-89c8-181119187854"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4d5184bd-5186-400c-af81-74cb7bc008b9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fe5bb3d2-b5d6-4c32-b75e-ebea713ab168"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5e003ca1-9f1d-4492-be69-2562d10d004d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ee366736-f761-4768-94c1-829f1ce9552e"
                }
              }
            ]
          },
          {
            "id": "15431db2-72c4-47c9-b494-0761aaa4218d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "08607d83-c11b-4202-b183-0a3aa23f4696",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "26b14a1f-cbe1-4648-ac73-be8212f4abea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cea57484-2f1a-4d6d-9ee4-47c64b927a8e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f93f3f5f-1d26-4597-97b3-ed2f8412f2dc",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "42013d6b-dcb5-4616-ab87-37b0d43a8815"
                    }
                  }
                ]
              },
              {
                "id": "3602fb22-347b-40ba-ada0-dadb979de9e8",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bda5a20d-f095-464d-a693-6a38ca164052",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "823d7171-fd6b-4e42-9fb9-76e307fa95de"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7fc8f801-c14f-4ea9-bcae-31704ed3651b",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "796d2427-04e9-448d-bd8b-07fd7227684d"
                    }
                  }
                ]
              },
              {
                "id": "92a9ce6f-2d4d-453f-9f5b-137fba0607ba",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e66b4a3-8c97-4c3f-93dc-80dd7be4fcc7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4d36dbca-7829-47bf-9a39-36b1e4cb151c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a63b4464-acc6-48aa-abbc-2d0043eb8d68",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "5cd7603b-6dee-4372-a075-a842da1bce15"
                    }
                  }
                ]
              },
              {
                "id": "30b83658-960a-46de-9a33-54b7f2036932",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "311abcd9-bb3e-430b-9631-b40129eb3e45",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "398007d0-a393-48bb-825b-395580984ead"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "863a17bb-6546-49e7-a94b-1fc9bfd53d89",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "364fc1be-7ed2-4f44-8292-3cad1f364604"
                    }
                  }
                ]
              },
              {
                "id": "87086007-ce75-4fd5-8415-17b741b89b51",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0b35e33-1a42-4cdc-afdc-7f3d4ca0b17f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "c795ab80-be1e-455f-ac9a-482153db1d18"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "501592a5-8e97-48f1-8982-2aa9ba0f8193",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "703cdbc6-b8ac-4138-8c7b-d0b1e42b31f5"
                    }
                  }
                ]
              },
              {
                "id": "53d6c469-3087-4357-a730-a4836da7271f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d4dd81d-4a18-4c4d-8bea-094fd952d6a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ca4712fd-0f35-4eb0-b555-821c51e09e00"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4c90d3f-4ee3-475a-8f34-962f1238a6ce",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "c812dd43-30dd-4a7f-89eb-dbf4175556db"
                    }
                  }
                ]
              },
              {
                "id": "ea5afb0b-ca91-4e46-8860-f563eb559fa9",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6c7d8b57-ff05-4751-b48b-ffe9b7bdb6ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4c93461d-233f-4d32-81ac-735083380032"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e8546cb-bcc5-43de-8a1c-420b5d963921",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "d7f79ea6-7da0-4e0e-b20d-c0d302de0aef"
                    }
                  }
                ]
              },
              {
                "id": "6446f77a-b884-4e17-81fc-4133bffdbf57",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8f4130b-efa5-4caa-8d66-ca88f7f868bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dd0f5836-92d5-4362-a442-6b12203b723f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81742723-6d1f-456a-b643-2f11d6e8996d",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "ca8ec2f8-f770-4dcc-b976-a049c1f842bd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "64272e57-aca8-405b-b1bc-89833b25b2dd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ac0816f1-1e51-4fb6-905e-02e4795dedf1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "025771f7-0e23-4c33-963c-5f0de553eb64",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "93d0d200-0cb2-46d7-9f6f-6dfcbb178637"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "548089ff-0cbb-4abb-895a-13fac6a88c81",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {",
                "            \"id\": \"{{credential_subject}}\"",
                "        }",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "b962c4bd-b574-4347-9114-4e6b2cbdfa10"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "272b4b48-b307-4df0-bfa3-3ddbb30fbb0a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a1498e3e-7c6c-493a-a8df-4dab1ae4c6d2"
            }
          }
        ]
      },
      {
        "id": "d3b95788-d1a1-4b3a-85c3-185d076dde61",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c6acd925-5218-48b3-88b8-74290acdb988",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dccdcf1e-896d-4ac9-8a4e-a2d98743e855",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bc077d16-5c08-4f0b-88c2-f9d834e597da",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d14e0d3-62f5-4131-bbb5-1aa422d54872",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7f3b879-bb3b-4c55-9c7f-3a199cb0e34c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "500a764b-02c9-40bc-a0e2-c0e1800f3864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88a52292-d203-4979-af8e-81250cda7811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace51beb-ec65-49b7-b0bc-6cc44173b2b3",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed501ad-b75e-4d2a-836c-5087634e336d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "80261c2d-cff2-447e-9501-5e81730ddc85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58efa99d-751b-41df-9b96-ecd8f9c04523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6eaa899b-644f-42b9-b8db-a05afeb08122"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62080de1-2b2f-44e9-b98f-ce991a7b5d85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1eacab40-d08c-4023-b002-eda4b4745ab3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aff2ffc7-3a84-4540-b23f-bbecfbe133c2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "006799fa-ee15-42f3-96e3-14b608a34147"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bc991722-0be9-4673-86af-3e6dc0c5bc72",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "c735f350-e86a-4bcc-9a8f-b810cff9165d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9cdcd012-35c6-4c4d-a6fe-3f37cbddddad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c8fb4c8c-34f1-4a29-b609-0ac7b0cbeac8"
            }
          }
        ]
      },
      {
        "id": "7dc1d440-a108-47f5-b874-d79548ab246b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "124e1bdd-b6b1-46d9-865d-7a9f145dfa2e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4adbf7ee-024e-4ba4-801a-787006ef60ea",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f7aa913e-62a4-416f-af1e-d910eeb4e4fd",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "285d0837-22d0-49d1-a00d-1163479ced4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "216b12ce-3492-4ae7-be17-27469b599966"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c46a4df-73ec-476b-85a5-2d56babcf526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a75289dd-c3cd-4af3-98c1-bcbf3bb70a81"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f4c2487d-b05b-40f9-97b4-eec521c5d46a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5ceeef48-27e8-41c9-b86f-9ee6f8767499",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "683ced36-d575-4fb6-8851-f122894bb6d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "1454f89f-cb7a-471b-baed-956cf70320f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dbcf6d8-91a0-41ca-bc22-626242a37277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ecc5e450-4189-48d7-962d-0c0fa22e337a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e1e54e-60be-42b2-b38d-1fbff84eafd5",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb12e3b-a95b-4efe-8ee1-855de36def45",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "384bce0e-f2f5-4f59-a8ac-0d400d6a10c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f43be34-793c-4cc7-9c46-4e39571e8826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "233a28c1-12b0-4d68-844f-0ff43201d17a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "694c0dca-b7e9-47eb-963f-47901a01ef1a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ad701c1-0773-4aab-abfb-866f45782e4b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a3ce721-700c-47f0-8801-9defc332134b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8eb597ca-28a2-4401-80d0-f165076ea631"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "39f8d7b8-e971-433c-a1e4-312fdf47abd9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "15668d28-8fdf-46b8-8c8c-d5a4d5a605c9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "da5fcd36-d9fd-4332-ae58-130b64345c89",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9037e5a8-e9ae-4899-8491-347250dcfbb4"
            }
          }
        ]
      },
      {
        "id": "900730c0-6ff3-4030-ba41-cf8337f8d1b5",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "9ef86648-d06a-4952-bdb2-019118957adf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1af79a6d-f29c-4cec-86bb-c758c070a2fe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "788b9aec-8fa5-4ac6-b9fd-54eea24d60cd",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa6e958-6dad-4b4a-9347-ca74eb3c5962",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb6289bd-36a4-4329-989d-15feaec8934f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09d444c-a7a3-4af0-ab22-794e4d5fb7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b79be09-1aad-4724-9763-549df9937d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c87e647d-8c00-4d16-aaeb-caf14a3266a5",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "778ce147-b08e-4216-a204-414099b59a76",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "e1af6770-23b3-4d19-8813-f780f1909f95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b0f3a5-858d-4f67-88a4-2f281c220c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6e7799d-3baa-441d-bb81-74ef128836e1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad8c7212-eb42-4965-a6c0-ae429505b937",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aad39590-dd4d-451f-9068-9e45a01c2ce6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0205daf-3eaa-4918-ad01-1e72f35bb553",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6d5bc88-45cc-4bb2-9f51-7bf4c6e37800"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "be662820-0820-4fdf-98ca-651a6d2e173a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "18a30f9d-7643-48e8-9c33-65ff906e647a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e3c15971-0aa5-4555-8812-fdf4ea872427",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "74ca3732-9ee1-4e08-9c27-7c7aba535fa0"
            }
          }
        ]
      },
      {
        "id": "6a3076ce-7000-4f4c-a8d5-31dd4dd66413",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "243fdd8a-69d3-4bb6-8b2c-4a7d5ae2907b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "62793060-b824-4df4-9c87-da42086d21ec",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0044e2be-18bd-48a7-9584-069ffcb61923",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a44066cc-55c4-4055-a562-6753c1461964",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0de95c41-2093-4b4b-8d84-59d616213d97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c5f635-2296-49c2-ae32-59e8ebfa3720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a0ac21d-a9e2-40b6-a727-aa7d36cb6777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8178f0e-7532-42fe-abd1-544b8e98b7de",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aab9d46e-9ed2-4280-9a5e-0a3c22294204",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "0b40c1d9-1bd7-4b03-a9ca-e0677843d885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef4ce5a-452a-404e-a046-3ed44ea9526b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "98292e37-ace9-4c5d-bdee-f186880960a3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba4b4be3-a262-41c2-b659-84ec26e35e51",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8d78f45-fa53-4631-ad42-69d5284c1cfe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5638c0fe-8746-4177-ba4a-421ab3972c95",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f1db899d-bd98-48cc-8771-87120b458e45"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a095ef8-4c5f-4266-847d-c981f8fe0d06",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "30a6605c-ca24-4fd1-8a1c-e85da67fa17a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e36c94aa-6b74-4243-85de-ba6ed220eeef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "52d55880-bc79-4a5a-8139-ac78433288e1"
            }
          }
        ]
      },
      {
        "id": "2a7bb3ba-a285-4e4e-940e-de791e3a552d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b8259162-52b9-496b-a0c2-e708273f0598",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b4c87fef-58bf-48dc-879a-5a1948a31d6b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "61826a09-848a-40f5-9652-a56dc90023d5",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fcc5300-cfef-4225-8f0e-2b37251916a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1bee01d-76eb-4075-9a18-7db0abd3672c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc25fa9-a198-4056-8050-bd3cc23b8f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45edda9e-ecc8-4188-b6c9-a81e2252f2c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba0c061-e7de-44f6-9899-f93b12126088",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1183b68-b6b4-4470-9a9b-abb610ecac5d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "6e312f1e-44fa-47a6-b624-3e0c9b56366a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22272af9-818b-49e8-92a0-d73f7e46c093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f4047d92-3cdf-4407-bb46-652a34b5b065"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e982ae8-cd41-4abf-9858-e4bdeccf5260",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f0e9463-9abf-4816-87e3-3a77333d5f04"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8acb9ad-a24a-4918-b491-b903f0160859",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f55c9c1-4dd6-4274-b50e-92ebec7cdd3a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "82b51ca0-3e4b-4517-8f85-55a74abcf152",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "51a3390b-9174-4238-8a96-7574e89feace"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1fa099c6-67ea-485b-8f37-b513d7cf7ca7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8d4d131d-67c1-487a-86ff-33ebfbd900cd"
            }
          }
        ]
      },
      {
        "id": "aa5a5e73-3356-4e27-a590-7c1926c966ce",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "6dba3b0d-12c4-41f4-b3b3-5697b15d7c27",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 59,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 453,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 59,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 108,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 59,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 123,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 229,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 224,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 100.51851851851852,
      "responseMin": 67,
      "responseMax": 551,
      "responseSd": 56.94173134157041,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1662598193485,
      "completed": 1662598207891
    },
    "executions": [
      {
        "id": "2654742b-0776-467c-b194-82050fba64bc",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 59,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e53be2d2-1537-4fe3-99e3-5dc09bc31e24",
          "httpRequestId": "0ec26d3e-746c-4f6c-81e3-be15980337fb"
        },
        "item": {
          "id": "2654742b-0776-467c-b194-82050fba64bc",
          "name": "did_json"
        },
        "response": {
          "id": "1ce3fe51-977f-4d6f-b40f-62866361d04e",
          "status": "OK",
          "code": 200,
          "responseTime": 300,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63210008-065f-4ea8-8337-57525e2be666",
        "cursor": {
          "ref": "ef544f4a-295f-4506-b9f0-49969865554c",
          "length": 59,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "57e8d231-4472-44ca-a626-6c76ef97f29a"
        },
        "item": {
          "id": "63210008-065f-4ea8-8337-57525e2be666",
          "name": "did:invalid"
        },
        "response": {
          "id": "6c5c9f78-6ab0-4a77-8053-032c42abfbcf",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63210008-065f-4ea8-8337-57525e2be666",
        "cursor": {
          "ref": "ef544f4a-295f-4506-b9f0-49969865554c",
          "length": 59,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "57e8d231-4472-44ca-a626-6c76ef97f29a"
        },
        "item": {
          "id": "63210008-065f-4ea8-8337-57525e2be666",
          "name": "did:invalid"
        },
        "response": {
          "id": "6c5c9f78-6ab0-4a77-8053-032c42abfbcf",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd0a14ad-af9c-4939-9ea4-961dc37d0677",
        "cursor": {
          "ref": "d4db72f3-7268-4bd7-a07e-16b83aaab36f",
          "length": 59,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "71b76478-0973-4c6a-b03e-53a4c6c33ba9"
        },
        "item": {
          "id": "dd0a14ad-af9c-4939-9ea4-961dc37d0677",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2ad66d57-5225-4593-8236-108ce232604f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 157,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "2d25a291-81bf-45bc-8503-dcabf1040eda",
        "cursor": {
          "ref": "db209329-9dac-48c3-9da6-a55e1fe72aaa",
          "length": 59,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4bc4a9e9-3d39-457c-8623-79474e35c057"
        },
        "item": {
          "id": "2d25a291-81bf-45bc-8503-dcabf1040eda",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8de4856f-a175-449c-b323-e87190b30031",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "f94617d6-e0f7-4ce7-abbd-5ece3b3da66d",
        "cursor": {
          "ref": "09a4fd93-26ee-40d6-9d9b-d7d145293d7f",
          "length": 59,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c2502ac1-3f09-4456-b2e9-8167d71a67e9"
        },
        "item": {
          "id": "f94617d6-e0f7-4ce7-abbd-5ece3b3da66d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "60cae2d3-c87a-41ee-b781-96d9241fa618",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "6713ad52-9f43-4b5b-8615-eccf6c23b450",
        "cursor": {
          "ref": "b05b5616-9a7e-4c64-9552-a17e3ee6b575",
          "length": 59,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "46473128-6e02-4c1f-892e-e2518132a774"
        },
        "item": {
          "id": "6713ad52-9f43-4b5b-8615-eccf6c23b450",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9ef5eeca-6ef4-4a63-84f3-e065dc0b08cf",
          "status": "OK",
          "code": 200,
          "responseTime": 156,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "6713ad52-9f43-4b5b-8615-eccf6c23b450",
        "cursor": {
          "ref": "b05b5616-9a7e-4c64-9552-a17e3ee6b575",
          "length": 59,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "46473128-6e02-4c1f-892e-e2518132a774"
        },
        "item": {
          "id": "6713ad52-9f43-4b5b-8615-eccf6c23b450",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9ef5eeca-6ef4-4a63-84f3-e065dc0b08cf",
          "status": "OK",
          "code": 200,
          "responseTime": 156,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "d9dfc4dc-4f24-40f8-a7df-f6b79a86bdbc",
        "cursor": {
          "ref": "ec5f9674-f55d-4582-8958-2d07d1587364",
          "length": 59,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "17df3473-1c06-4131-8484-9db08610f51f"
        },
        "item": {
          "id": "d9dfc4dc-4f24-40f8-a7df-f6b79a86bdbc",
          "name": "identifiers"
        },
        "response": {
          "id": "db894497-7cfd-4d9b-8ac0-9c859e6d253e",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d8b02b8-7767-48da-bf25-778f994d4c12",
        "cursor": {
          "ref": "427ed076-2acb-43c7-9220-fa5c19a2213a",
          "length": 59,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "181d2d0e-8461-4ccf-b79d-5c9286cc3126"
        },
        "item": {
          "id": "3d8b02b8-7767-48da-bf25-778f994d4c12",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9ed7d2fb-e09b-4885-974c-1b023e536613",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 551,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "3d8b02b8-7767-48da-bf25-778f994d4c12",
        "cursor": {
          "ref": "427ed076-2acb-43c7-9220-fa5c19a2213a",
          "length": 59,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "181d2d0e-8461-4ccf-b79d-5c9286cc3126"
        },
        "item": {
          "id": "3d8b02b8-7767-48da-bf25-778f994d4c12",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9ed7d2fb-e09b-4885-974c-1b023e536613",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 551,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "3d8b02b8-7767-48da-bf25-778f994d4c12",
        "cursor": {
          "ref": "427ed076-2acb-43c7-9220-fa5c19a2213a",
          "length": 59,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "181d2d0e-8461-4ccf-b79d-5c9286cc3126"
        },
        "item": {
          "id": "3d8b02b8-7767-48da-bf25-778f994d4c12",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9ed7d2fb-e09b-4885-974c-1b023e536613",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 551,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "41d23811-282d-4291-b9a7-28266aa3ac19",
        "cursor": {
          "ref": "edb113e8-6eb1-45af-a890-1d260cd32372",
          "length": 59,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "15de9723-1361-4a19-b101-bd76531b211f"
        },
        "item": {
          "id": "41d23811-282d-4291-b9a7-28266aa3ac19",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f0656df2-9c8d-43b0-b200-d2c6e8e2a1db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 89,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "41d23811-282d-4291-b9a7-28266aa3ac19",
        "cursor": {
          "ref": "edb113e8-6eb1-45af-a890-1d260cd32372",
          "length": 59,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "15de9723-1361-4a19-b101-bd76531b211f"
        },
        "item": {
          "id": "41d23811-282d-4291-b9a7-28266aa3ac19",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f0656df2-9c8d-43b0-b200-d2c6e8e2a1db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 89,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "11f3a512-9dd9-4bc9-a098-5451a2fbafd2",
        "cursor": {
          "ref": "a38f0443-c932-4f9f-b5ef-b49f9030be55",
          "length": 59,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0cd56252-357a-45c5-8a11-a14bf1574c58"
        },
        "item": {
          "id": "11f3a512-9dd9-4bc9-a098-5451a2fbafd2",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "eb8ff970-96f4-4a20-9033-b5ed3d44ba5d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "11f3a512-9dd9-4bc9-a098-5451a2fbafd2",
        "cursor": {
          "ref": "a38f0443-c932-4f9f-b5ef-b49f9030be55",
          "length": 59,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0cd56252-357a-45c5-8a11-a14bf1574c58"
        },
        "item": {
          "id": "11f3a512-9dd9-4bc9-a098-5451a2fbafd2",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "eb8ff970-96f4-4a20-9033-b5ed3d44ba5d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "22c94c47-5418-4b9c-bbd5-525d443ed2c8",
        "cursor": {
          "ref": "5cd41a11-2b41-44e7-bdb5-8f3785799627",
          "length": 59,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e4052cc5-1014-493d-a97e-c754748daae9"
        },
        "item": {
          "id": "22c94c47-5418-4b9c-bbd5-525d443ed2c8",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "44c2f131-97d9-4608-a9e6-1195b3d3036e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 89,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "22c94c47-5418-4b9c-bbd5-525d443ed2c8",
        "cursor": {
          "ref": "5cd41a11-2b41-44e7-bdb5-8f3785799627",
          "length": 59,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e4052cc5-1014-493d-a97e-c754748daae9"
        },
        "item": {
          "id": "22c94c47-5418-4b9c-bbd5-525d443ed2c8",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "44c2f131-97d9-4608-a9e6-1195b3d3036e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 89,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "7d785e6c-064f-4797-9b74-222bd92a2f18",
        "cursor": {
          "ref": "a6fe80eb-bbfc-4777-993d-225b8575b3b5",
          "length": 59,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "656966fa-8bf9-44c8-b94b-1c6923b1971f"
        },
        "item": {
          "id": "7d785e6c-064f-4797-9b74-222bd92a2f18",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "40d942f6-7597-449b-9b61-eb7a8f239253",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "7d785e6c-064f-4797-9b74-222bd92a2f18",
        "cursor": {
          "ref": "a6fe80eb-bbfc-4777-993d-225b8575b3b5",
          "length": 59,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "656966fa-8bf9-44c8-b94b-1c6923b1971f"
        },
        "item": {
          "id": "7d785e6c-064f-4797-9b74-222bd92a2f18",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "40d942f6-7597-449b-9b61-eb7a8f239253",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "59de944f-167a-426b-a641-fea32868113a",
        "cursor": {
          "ref": "93dad154-c76f-4259-b341-76c23e4d24c3",
          "length": 59,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "25a91e0b-2567-4e16-9208-96bd380f0ca0"
        },
        "item": {
          "id": "59de944f-167a-426b-a641-fea32868113a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "094dfc7b-6be8-4f25-8124-f8ee5db61bcb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "59de944f-167a-426b-a641-fea32868113a",
        "cursor": {
          "ref": "93dad154-c76f-4259-b341-76c23e4d24c3",
          "length": 59,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "25a91e0b-2567-4e16-9208-96bd380f0ca0"
        },
        "item": {
          "id": "59de944f-167a-426b-a641-fea32868113a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "094dfc7b-6be8-4f25-8124-f8ee5db61bcb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "f3cf1454-9523-4322-a7a0-e3659e139923",
        "cursor": {
          "ref": "71b2f763-46ec-4693-8668-efa31339c865",
          "length": 59,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5999d2fe-335d-4e3f-babf-5e754cd18d6a"
        },
        "item": {
          "id": "f3cf1454-9523-4322-a7a0-e3659e139923",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "a5e8f486-7119-420b-b735-3e7d984d3f13",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "f3cf1454-9523-4322-a7a0-e3659e139923",
        "cursor": {
          "ref": "71b2f763-46ec-4693-8668-efa31339c865",
          "length": 59,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5999d2fe-335d-4e3f-babf-5e754cd18d6a"
        },
        "item": {
          "id": "f3cf1454-9523-4322-a7a0-e3659e139923",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "a5e8f486-7119-420b-b735-3e7d984d3f13",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "ccacc8cc-2799-4314-ae09-6eba3139b805",
        "cursor": {
          "ref": "23e00cb6-def7-402f-b2e9-8680d49adfc7",
          "length": 59,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "890e2bf0-52e4-47f9-ad1a-e6039b28c443"
        },
        "item": {
          "id": "ccacc8cc-2799-4314-ae09-6eba3139b805",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "d75a36dd-bae6-4373-8237-0a8e5675daab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "ccacc8cc-2799-4314-ae09-6eba3139b805",
        "cursor": {
          "ref": "23e00cb6-def7-402f-b2e9-8680d49adfc7",
          "length": 59,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "890e2bf0-52e4-47f9-ad1a-e6039b28c443"
        },
        "item": {
          "id": "ccacc8cc-2799-4314-ae09-6eba3139b805",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "d75a36dd-bae6-4373-8237-0a8e5675daab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "2c67e99b-ef18-4c6c-be33-b1043a3d385b",
        "cursor": {
          "ref": "f495d613-e39d-46a2-af91-38bf8ed2e357",
          "length": 59,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c6b22625-0f4e-4387-b365-abac1726691c"
        },
        "item": {
          "id": "2c67e99b-ef18-4c6c-be33-b1043a3d385b",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c345bacb-e3a3-4607-b6ef-270a02ed950c",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "2c67e99b-ef18-4c6c-be33-b1043a3d385b",
        "cursor": {
          "ref": "f495d613-e39d-46a2-af91-38bf8ed2e357",
          "length": 59,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c6b22625-0f4e-4387-b365-abac1726691c"
        },
        "item": {
          "id": "2c67e99b-ef18-4c6c-be33-b1043a3d385b",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c345bacb-e3a3-4607-b6ef-270a02ed950c",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "80102f6c-92cf-4b26-8916-148f88ab747c",
        "cursor": {
          "ref": "c0976a17-e6c5-40bd-81fc-c57ad8cad092",
          "length": 59,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "96f0913f-cf69-4cbd-bfbd-dba80da7b230"
        },
        "item": {
          "id": "80102f6c-92cf-4b26-8916-148f88ab747c",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "1a86029e-5507-4c1c-afc2-b0664b3a8031",
          "status": "Created",
          "code": 201,
          "responseTime": 115,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "80102f6c-92cf-4b26-8916-148f88ab747c",
        "cursor": {
          "ref": "c0976a17-e6c5-40bd-81fc-c57ad8cad092",
          "length": 59,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "96f0913f-cf69-4cbd-bfbd-dba80da7b230"
        },
        "item": {
          "id": "80102f6c-92cf-4b26-8916-148f88ab747c",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "1a86029e-5507-4c1c-afc2-b0664b3a8031",
          "status": "Created",
          "code": 201,
          "responseTime": 115,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "1b17ca8b-9027-4d02-ae87-c73b9ccf9ef1",
        "cursor": {
          "ref": "f4f0de75-01bb-49a6-ac07-384d26a14548",
          "length": 59,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "58bcc5c4-9a46-42e5-9876-0e4ec63c3ec4"
        },
        "item": {
          "id": "1b17ca8b-9027-4d02-ae87-c73b9ccf9ef1",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "6bf500e7-6322-4301-82bd-847967f9c9e7",
          "status": "Created",
          "code": 201,
          "responseTime": 92,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "1b17ca8b-9027-4d02-ae87-c73b9ccf9ef1",
        "cursor": {
          "ref": "f4f0de75-01bb-49a6-ac07-384d26a14548",
          "length": 59,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "58bcc5c4-9a46-42e5-9876-0e4ec63c3ec4"
        },
        "item": {
          "id": "1b17ca8b-9027-4d02-ae87-c73b9ccf9ef1",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "6bf500e7-6322-4301-82bd-847967f9c9e7",
          "status": "Created",
          "code": 201,
          "responseTime": 92,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "e457b9fe-4738-45e3-96f4-41e17da1724e",
        "cursor": {
          "ref": "ece17956-243c-424a-8a77-bb687b22602f",
          "length": 59,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8a3e8454-009d-4b6c-bd7e-c8bbdb42a2e3"
        },
        "item": {
          "id": "e457b9fe-4738-45e3-96f4-41e17da1724e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "095db4cd-b3d8-4535-afdb-e47c4dcbba46",
          "status": "Created",
          "code": 201,
          "responseTime": 97,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "e457b9fe-4738-45e3-96f4-41e17da1724e",
        "cursor": {
          "ref": "ece17956-243c-424a-8a77-bb687b22602f",
          "length": 59,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8a3e8454-009d-4b6c-bd7e-c8bbdb42a2e3"
        },
        "item": {
          "id": "e457b9fe-4738-45e3-96f4-41e17da1724e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "095db4cd-b3d8-4535-afdb-e47c4dcbba46",
          "status": "Created",
          "code": 201,
          "responseTime": 97,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "b5f8df4d-214a-45af-858c-54f774a30231",
        "cursor": {
          "ref": "8b75d6af-ae22-4dcc-afe1-177d5ccf8717",
          "length": 59,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "317edc39-cdb4-4ab7-85f1-6e3de8fc03c7"
        },
        "item": {
          "id": "b5f8df4d-214a-45af-858c-54f774a30231",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "11317734-d23e-4f41-ba5a-a259ad10f376",
          "status": "Created",
          "code": 201,
          "responseTime": 110,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "b5f8df4d-214a-45af-858c-54f774a30231",
        "cursor": {
          "ref": "8b75d6af-ae22-4dcc-afe1-177d5ccf8717",
          "length": 59,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "317edc39-cdb4-4ab7-85f1-6e3de8fc03c7"
        },
        "item": {
          "id": "b5f8df4d-214a-45af-858c-54f774a30231",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "11317734-d23e-4f41-ba5a-a259ad10f376",
          "status": "Created",
          "code": 201,
          "responseTime": 110,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "0223c855-e32d-4008-a51f-a0ee834c4e3e",
        "cursor": {
          "ref": "af7213b9-7708-4881-9d45-242a117febb0",
          "length": 59,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d2d5b320-9e04-40c6-bad4-54e31fe3e930"
        },
        "item": {
          "id": "0223c855-e32d-4008-a51f-a0ee834c4e3e",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "70c8af81-577b-4042-ae35-66b88a34c816",
          "status": "Created",
          "code": 201,
          "responseTime": 97,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "0223c855-e32d-4008-a51f-a0ee834c4e3e",
        "cursor": {
          "ref": "af7213b9-7708-4881-9d45-242a117febb0",
          "length": 59,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d2d5b320-9e04-40c6-bad4-54e31fe3e930"
        },
        "item": {
          "id": "0223c855-e32d-4008-a51f-a0ee834c4e3e",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "70c8af81-577b-4042-ae35-66b88a34c816",
          "status": "Created",
          "code": 201,
          "responseTime": 97,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "8dd6d8d0-d8b6-41c6-bfe0-d91a4cd0cf29",
        "cursor": {
          "ref": "7691fe63-715d-4d36-afdc-b03fface5d40",
          "length": 59,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9d964ba3-5028-4773-997e-174a8f525769"
        },
        "item": {
          "id": "8dd6d8d0-d8b6-41c6-bfe0-d91a4cd0cf29",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "fd7e275b-d65b-4399-8a6b-49471027a773",
          "status": "Created",
          "code": 201,
          "responseTime": 116,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "8dd6d8d0-d8b6-41c6-bfe0-d91a4cd0cf29",
        "cursor": {
          "ref": "7691fe63-715d-4d36-afdc-b03fface5d40",
          "length": 59,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9d964ba3-5028-4773-997e-174a8f525769"
        },
        "item": {
          "id": "8dd6d8d0-d8b6-41c6-bfe0-d91a4cd0cf29",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "fd7e275b-d65b-4399-8a6b-49471027a773",
          "status": "Created",
          "code": 201,
          "responseTime": 116,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "dc308b36-7ea8-4b26-a079-e39b042c2129",
        "cursor": {
          "ref": "bf698d84-af98-4389-97e7-660811da01ea",
          "length": 59,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "90862360-e356-4164-98fe-1888723464dd"
        },
        "item": {
          "id": "dc308b36-7ea8-4b26-a079-e39b042c2129",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "29a8b129-fcb5-4fa3-b0a0-155d76609f94",
          "status": "Created",
          "code": 201,
          "responseTime": 93,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "dc308b36-7ea8-4b26-a079-e39b042c2129",
        "cursor": {
          "ref": "bf698d84-af98-4389-97e7-660811da01ea",
          "length": 59,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "90862360-e356-4164-98fe-1888723464dd"
        },
        "item": {
          "id": "dc308b36-7ea8-4b26-a079-e39b042c2129",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "29a8b129-fcb5-4fa3-b0a0-155d76609f94",
          "status": "Created",
          "code": 201,
          "responseTime": 93,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "ceb8f536-e2f9-45ce-8dca-9c12c05e878d",
        "cursor": {
          "ref": "284205c2-e3a1-46e8-9c54-27177e0da87f",
          "length": 59,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0ada71f5-1f97-45d3-a891-7e8ab1a16558"
        },
        "item": {
          "id": "ceb8f536-e2f9-45ce-8dca-9c12c05e878d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e6648606-2f65-40d3-8b71-7531dd42f85b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "ceb8f536-e2f9-45ce-8dca-9c12c05e878d",
        "cursor": {
          "ref": "284205c2-e3a1-46e8-9c54-27177e0da87f",
          "length": 59,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0ada71f5-1f97-45d3-a891-7e8ab1a16558"
        },
        "item": {
          "id": "ceb8f536-e2f9-45ce-8dca-9c12c05e878d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e6648606-2f65-40d3-8b71-7531dd42f85b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "99a3c311-67ef-44ee-8e04-f52e5052939c",
        "cursor": {
          "ref": "cd5605a4-fbd0-4985-9bc5-372a41be305c",
          "length": 59,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "83b9b671-a65a-460d-ac6d-d1711fd466ae"
        },
        "item": {
          "id": "99a3c311-67ef-44ee-8e04-f52e5052939c",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "0531c5a1-73d5-43d7-97c2-a5bfe603162b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "99a3c311-67ef-44ee-8e04-f52e5052939c",
        "cursor": {
          "ref": "cd5605a4-fbd0-4985-9bc5-372a41be305c",
          "length": 59,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "83b9b671-a65a-460d-ac6d-d1711fd466ae"
        },
        "item": {
          "id": "99a3c311-67ef-44ee-8e04-f52e5052939c",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "0531c5a1-73d5-43d7-97c2-a5bfe603162b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "4919cd23-c1d4-42ef-a69b-177156ddfbc0",
        "cursor": {
          "ref": "bf0eae5f-8b57-4a1d-939d-e9d46260b950",
          "length": 59,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c7cad9f2-70f1-4820-8b37-71968dec5c67"
        },
        "item": {
          "id": "4919cd23-c1d4-42ef-a69b-177156ddfbc0",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0d5605a2-e988-4439-b96d-b2b29048d018",
          "status": "Created",
          "code": 201,
          "responseTime": 104,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "4919cd23-c1d4-42ef-a69b-177156ddfbc0",
        "cursor": {
          "ref": "bf0eae5f-8b57-4a1d-939d-e9d46260b950",
          "length": 59,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c7cad9f2-70f1-4820-8b37-71968dec5c67"
        },
        "item": {
          "id": "4919cd23-c1d4-42ef-a69b-177156ddfbc0",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0d5605a2-e988-4439-b96d-b2b29048d018",
          "status": "Created",
          "code": 201,
          "responseTime": 104,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "cc06c1d6-8ea7-499a-b363-bf68dbf247e3",
        "cursor": {
          "ref": "1935650b-b5dd-4090-bdd7-b1eb20d82d10",
          "length": 59,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6969e5bd-632b-46f2-884b-e09cd6498d90"
        },
        "item": {
          "id": "cc06c1d6-8ea7-499a-b363-bf68dbf247e3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a659b7e3-2f03-41ce-9a6b-8743fcc8a00c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "cc06c1d6-8ea7-499a-b363-bf68dbf247e3",
        "cursor": {
          "ref": "1935650b-b5dd-4090-bdd7-b1eb20d82d10",
          "length": 59,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6969e5bd-632b-46f2-884b-e09cd6498d90"
        },
        "item": {
          "id": "cc06c1d6-8ea7-499a-b363-bf68dbf247e3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a659b7e3-2f03-41ce-9a6b-8743fcc8a00c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "1f37abee-5765-476f-ab40-6b8f11372951",
        "cursor": {
          "ref": "4f4c997a-ea1f-45ff-966d-099eee6edc3c",
          "length": 59,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b867fbad-a3d2-4489-a8a0-4792b9a96168"
        },
        "item": {
          "id": "1f37abee-5765-476f-ab40-6b8f11372951",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "29cf08c2-c72c-417c-8c5c-e1c3504f966d",
          "status": "Created",
          "code": 201,
          "responseTime": 96,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "1f37abee-5765-476f-ab40-6b8f11372951",
        "cursor": {
          "ref": "4f4c997a-ea1f-45ff-966d-099eee6edc3c",
          "length": 59,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b867fbad-a3d2-4489-a8a0-4792b9a96168"
        },
        "item": {
          "id": "1f37abee-5765-476f-ab40-6b8f11372951",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "29cf08c2-c72c-417c-8c5c-e1c3504f966d",
          "status": "Created",
          "code": 201,
          "responseTime": 96,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "3f0a1a87-0afe-43a5-b832-562e20d57b59",
        "cursor": {
          "ref": "c79abfba-2325-4b14-8553-c934ce3a328f",
          "length": 59,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d8a918d8-98bf-4673-8fca-f4997b8797c7"
        },
        "item": {
          "id": "3f0a1a87-0afe-43a5-b832-562e20d57b59",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "b7328976-588a-4f84-ba3c-6861fa233f0d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 104,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "3f0a1a87-0afe-43a5-b832-562e20d57b59",
        "cursor": {
          "ref": "c79abfba-2325-4b14-8553-c934ce3a328f",
          "length": 59,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d8a918d8-98bf-4673-8fca-f4997b8797c7"
        },
        "item": {
          "id": "3f0a1a87-0afe-43a5-b832-562e20d57b59",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "b7328976-588a-4f84-ba3c-6861fa233f0d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 104,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "28e6da9b-7614-47a2-bfe2-eb0ed2baf068",
        "cursor": {
          "ref": "c30e650d-3890-439a-86f9-06e9df92c101",
          "length": 59,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7aa12eb8-cecc-487f-86b1-753e45bc5800"
        },
        "item": {
          "id": "28e6da9b-7614-47a2-bfe2-eb0ed2baf068",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "4b506846-4c71-4b43-9b7c-210cf7ece8ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "28e6da9b-7614-47a2-bfe2-eb0ed2baf068",
        "cursor": {
          "ref": "c30e650d-3890-439a-86f9-06e9df92c101",
          "length": 59,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7aa12eb8-cecc-487f-86b1-753e45bc5800"
        },
        "item": {
          "id": "28e6da9b-7614-47a2-bfe2-eb0ed2baf068",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "4b506846-4c71-4b43-9b7c-210cf7ece8ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "87760a85-f0a5-4f76-a30a-e01037803f5f",
        "cursor": {
          "ref": "534537ee-2a45-420a-88a2-763cc170d38e",
          "length": 59,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "afbf34be-c735-4964-9b73-3f6866e1b66b"
        },
        "item": {
          "id": "87760a85-f0a5-4f76-a30a-e01037803f5f",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "368ad586-e90d-45a5-be10-b3b2bb559abe",
          "status": "Created",
          "code": 201,
          "responseTime": 90,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "87760a85-f0a5-4f76-a30a-e01037803f5f",
        "cursor": {
          "ref": "534537ee-2a45-420a-88a2-763cc170d38e",
          "length": 59,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "afbf34be-c735-4964-9b73-3f6866e1b66b"
        },
        "item": {
          "id": "87760a85-f0a5-4f76-a30a-e01037803f5f",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "368ad586-e90d-45a5-be10-b3b2bb559abe",
          "status": "Created",
          "code": 201,
          "responseTime": 90,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "abb63587-5088-4082-8312-f4a532b8977c",
        "cursor": {
          "ref": "619001e6-4599-4e6c-b5e7-44c8cad0b7f1",
          "length": 59,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "65120313-b896-450c-b5f3-89acec77f7df"
        },
        "item": {
          "id": "abb63587-5088-4082-8312-f4a532b8977c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "37a7fa1d-fb05-4888-818c-6220805e0b68",
          "status": "Created",
          "code": 201,
          "responseTime": 108,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "abb63587-5088-4082-8312-f4a532b8977c",
        "cursor": {
          "ref": "619001e6-4599-4e6c-b5e7-44c8cad0b7f1",
          "length": 59,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "65120313-b896-450c-b5f3-89acec77f7df"
        },
        "item": {
          "id": "abb63587-5088-4082-8312-f4a532b8977c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "37a7fa1d-fb05-4888-818c-6220805e0b68",
          "status": "Created",
          "code": 201,
          "responseTime": 108,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "148b15ce-89bb-4243-941e-fdf27d108507",
        "cursor": {
          "ref": "5b212b92-177c-4537-822b-02cff30db674",
          "length": 59,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9c0142e0-d83c-4e4b-b72e-05840c742a65"
        },
        "item": {
          "id": "148b15ce-89bb-4243-941e-fdf27d108507",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "4945064d-0bfb-444e-bc8d-8499db29816d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "148b15ce-89bb-4243-941e-fdf27d108507",
        "cursor": {
          "ref": "5b212b92-177c-4537-822b-02cff30db674",
          "length": 59,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9c0142e0-d83c-4e4b-b72e-05840c742a65"
        },
        "item": {
          "id": "148b15ce-89bb-4243-941e-fdf27d108507",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "4945064d-0bfb-444e-bc8d-8499db29816d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "cb1dc7dc-c4c4-4167-b98f-2bb6780e5edf",
        "cursor": {
          "ref": "e5cfc13f-512c-4f8a-b2b0-11e9ad9338b3",
          "length": 59,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "03806f8f-cd36-4b13-8ccc-863032a2b642"
        },
        "item": {
          "id": "cb1dc7dc-c4c4-4167-b98f-2bb6780e5edf",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "fb27a877-0191-413a-a9c9-c69c24ba6e76",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "cb1dc7dc-c4c4-4167-b98f-2bb6780e5edf",
        "cursor": {
          "ref": "e5cfc13f-512c-4f8a-b2b0-11e9ad9338b3",
          "length": 59,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "03806f8f-cd36-4b13-8ccc-863032a2b642"
        },
        "item": {
          "id": "cb1dc7dc-c4c4-4167-b98f-2bb6780e5edf",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "fb27a877-0191-413a-a9c9-c69c24ba6e76",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "fa7821e7-748d-4fd4-af84-47d46305cc81",
        "cursor": {
          "ref": "d4a6fcee-ec97-44a8-b178-fc9dc643328c",
          "length": 59,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "618d50c8-6a0d-4978-b082-43764f0e2341"
        },
        "item": {
          "id": "fa7821e7-748d-4fd4-af84-47d46305cc81",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "7c001ccf-e79f-4e77-8ce5-9520091babc6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "fa7821e7-748d-4fd4-af84-47d46305cc81",
        "cursor": {
          "ref": "d4a6fcee-ec97-44a8-b178-fc9dc643328c",
          "length": 59,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "618d50c8-6a0d-4978-b082-43764f0e2341"
        },
        "item": {
          "id": "fa7821e7-748d-4fd4-af84-47d46305cc81",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "7c001ccf-e79f-4e77-8ce5-9520091babc6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "0788a9b9-7aca-4f96-8dae-372a988a7e16",
        "cursor": {
          "ref": "2c845eb6-affd-4767-95fc-fe9398763218",
          "length": 59,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "674e4016-5a9c-490f-94c1-a516f8803c13"
        },
        "item": {
          "id": "0788a9b9-7aca-4f96-8dae-372a988a7e16",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "c958ddf4-4d5a-4a58-9cf6-4e74b6c5ea22",
          "status": "Created",
          "code": 201,
          "responseTime": 95,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "0788a9b9-7aca-4f96-8dae-372a988a7e16",
        "cursor": {
          "ref": "2c845eb6-affd-4767-95fc-fe9398763218",
          "length": 59,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "674e4016-5a9c-490f-94c1-a516f8803c13"
        },
        "item": {
          "id": "0788a9b9-7aca-4f96-8dae-372a988a7e16",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "c958ddf4-4d5a-4a58-9cf6-4e74b6c5ea22",
          "status": "Created",
          "code": 201,
          "responseTime": 95,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "3770fba3-558b-4c2d-9d73-7754f171176b",
        "cursor": {
          "ref": "dac45a16-30fb-4eda-81d8-01e2b6b7ce1b",
          "length": 59,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "fce7ae9c-8058-4672-915b-46259e09681c"
        },
        "item": {
          "id": "3770fba3-558b-4c2d-9d73-7754f171176b",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "0cef6d99-e483-42b7-b539-42f4e2302969",
          "status": "Created",
          "code": 201,
          "responseTime": 99,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "3770fba3-558b-4c2d-9d73-7754f171176b",
        "cursor": {
          "ref": "dac45a16-30fb-4eda-81d8-01e2b6b7ce1b",
          "length": 59,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "fce7ae9c-8058-4672-915b-46259e09681c"
        },
        "item": {
          "id": "3770fba3-558b-4c2d-9d73-7754f171176b",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "0cef6d99-e483-42b7-b539-42f4e2302969",
          "status": "Created",
          "code": 201,
          "responseTime": 99,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "a2705a4d-603e-485f-ab6d-0db0b13c6924",
        "cursor": {
          "ref": "d770c881-fbc9-4585-b52a-5eac65bb7db4",
          "length": 59,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "77a05105-42b6-4057-842d-b9e6bace6db9"
        },
        "item": {
          "id": "a2705a4d-603e-485f-ab6d-0db0b13c6924",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "5034c211-58f8-4612-a87d-9272b7cd8b65",
          "status": "Created",
          "code": 201,
          "responseTime": 92,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "a2705a4d-603e-485f-ab6d-0db0b13c6924",
        "cursor": {
          "ref": "d770c881-fbc9-4585-b52a-5eac65bb7db4",
          "length": 59,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "77a05105-42b6-4057-842d-b9e6bace6db9"
        },
        "item": {
          "id": "a2705a4d-603e-485f-ab6d-0db0b13c6924",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "5034c211-58f8-4612-a87d-9272b7cd8b65",
          "status": "Created",
          "code": 201,
          "responseTime": 92,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "f9225c99-0718-4952-aa92-7d09e5badc7a",
        "cursor": {
          "ref": "a4343634-41c1-4df7-81ce-b08b58168a2e",
          "length": 59,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1b6916f9-6e3a-48e9-bf5a-761b107eb141"
        },
        "item": {
          "id": "f9225c99-0718-4952-aa92-7d09e5badc7a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "45a169ce-cddb-4f4a-a11b-7bc46f9a0dac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "f9225c99-0718-4952-aa92-7d09e5badc7a",
        "cursor": {
          "ref": "a4343634-41c1-4df7-81ce-b08b58168a2e",
          "length": 59,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1b6916f9-6e3a-48e9-bf5a-761b107eb141"
        },
        "item": {
          "id": "f9225c99-0718-4952-aa92-7d09e5badc7a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "45a169ce-cddb-4f4a-a11b-7bc46f9a0dac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "6893f554-b17c-41ef-a59b-611fc616d34b",
        "cursor": {
          "ref": "2a2609a1-c99b-436f-a3f7-40d9ef555072",
          "length": 59,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9f4f0451-c090-4777-a2eb-616bee4ed8ee"
        },
        "item": {
          "id": "6893f554-b17c-41ef-a59b-611fc616d34b",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "4db2c510-4000-4784-ae5c-6a599c672327",
          "status": "Created",
          "code": 201,
          "responseTime": 93,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "6893f554-b17c-41ef-a59b-611fc616d34b",
        "cursor": {
          "ref": "2a2609a1-c99b-436f-a3f7-40d9ef555072",
          "length": 59,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9f4f0451-c090-4777-a2eb-616bee4ed8ee"
        },
        "item": {
          "id": "6893f554-b17c-41ef-a59b-611fc616d34b",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "4db2c510-4000-4784-ae5c-6a599c672327",
          "status": "Created",
          "code": 201,
          "responseTime": 93,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "08607d83-c11b-4202-b183-0a3aa23f4696",
        "cursor": {
          "ref": "4c517834-19ba-451b-999b-625ae6957918",
          "length": 59,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ede17a9e-2c8a-4e32-a136-8bf83abb2d92"
        },
        "item": {
          "id": "08607d83-c11b-4202-b183-0a3aa23f4696",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d15b78de-93de-42fc-b0e6-351706867104",
          "status": "Created",
          "code": 201,
          "responseTime": 93,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "expected { id: 'did:example:123' } to equal 'did:example:123'",
              "stack": "AssertionError: expected { id: 'did:example:123' } to equal 'did:example:123'\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "08607d83-c11b-4202-b183-0a3aa23f4696",
        "cursor": {
          "ref": "4c517834-19ba-451b-999b-625ae6957918",
          "length": 59,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ede17a9e-2c8a-4e32-a136-8bf83abb2d92"
        },
        "item": {
          "id": "08607d83-c11b-4202-b183-0a3aa23f4696",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d15b78de-93de-42fc-b0e6-351706867104",
          "status": "Created",
          "code": 201,
          "responseTime": 93,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "expected { id: 'did:example:123' } to equal 'did:example:123'",
              "stack": "AssertionError: expected { id: 'did:example:123' } to equal 'did:example:123'\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "3602fb22-347b-40ba-ada0-dadb979de9e8",
        "cursor": {
          "ref": "92fb586c-dbbd-4170-96fb-3ae417ac188c",
          "length": 59,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "fbdbeca5-20b7-450f-aad9-9443ddfe3f00"
        },
        "item": {
          "id": "3602fb22-347b-40ba-ada0-dadb979de9e8",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "f374cede-b248-4d69-b41b-3d3a98abe096",
          "status": "Created",
          "code": 201,
          "responseTime": 91,
          "responseSize": 679
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "3602fb22-347b-40ba-ada0-dadb979de9e8",
        "cursor": {
          "ref": "92fb586c-dbbd-4170-96fb-3ae417ac188c",
          "length": 59,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "fbdbeca5-20b7-450f-aad9-9443ddfe3f00"
        },
        "item": {
          "id": "3602fb22-347b-40ba-ada0-dadb979de9e8",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "f374cede-b248-4d69-b41b-3d3a98abe096",
          "status": "Created",
          "code": 201,
          "responseTime": 91,
          "responseSize": 679
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "92a9ce6f-2d4d-453f-9f5b-137fba0607ba",
        "cursor": {
          "ref": "de751238-a583-40dd-a219-17c0d9912ae3",
          "length": 59,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "275570bd-cc99-4e19-9097-f75dd28f7274"
        },
        "item": {
          "id": "92a9ce6f-2d4d-453f-9f5b-137fba0607ba",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6f94c384-0102-41f1-bb08-c11f5a2a4180",
          "status": "Created",
          "code": 201,
          "responseTime": 96,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a9ce6f-2d4d-453f-9f5b-137fba0607ba",
        "cursor": {
          "ref": "de751238-a583-40dd-a219-17c0d9912ae3",
          "length": 59,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "275570bd-cc99-4e19-9097-f75dd28f7274"
        },
        "item": {
          "id": "92a9ce6f-2d4d-453f-9f5b-137fba0607ba",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6f94c384-0102-41f1-bb08-c11f5a2a4180",
          "status": "Created",
          "code": 201,
          "responseTime": 96,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b83658-960a-46de-9a33-54b7f2036932",
        "cursor": {
          "ref": "2931685e-ede2-4b63-9219-3b1154f058e1",
          "length": 59,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b118239b-2165-4ab1-a98a-4f78fcfac6d4"
        },
        "item": {
          "id": "30b83658-960a-46de-9a33-54b7f2036932",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "e94c2028-c96d-4ab5-8454-d02e3e660ec0",
          "status": "Created",
          "code": 201,
          "responseTime": 93,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "30b83658-960a-46de-9a33-54b7f2036932",
        "cursor": {
          "ref": "2931685e-ede2-4b63-9219-3b1154f058e1",
          "length": 59,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b118239b-2165-4ab1-a98a-4f78fcfac6d4"
        },
        "item": {
          "id": "30b83658-960a-46de-9a33-54b7f2036932",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "e94c2028-c96d-4ab5-8454-d02e3e660ec0",
          "status": "Created",
          "code": 201,
          "responseTime": 93,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "87086007-ce75-4fd5-8415-17b741b89b51",
        "cursor": {
          "ref": "cab3afc8-24d2-41f9-88e7-d232116bf272",
          "length": 59,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8c0bbe77-36f7-480e-9ae5-1f18ffdb4eed"
        },
        "item": {
          "id": "87086007-ce75-4fd5-8415-17b741b89b51",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "db61db68-e032-4222-8e63-1e468c1b1067",
          "status": "Created",
          "code": 201,
          "responseTime": 94,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "87086007-ce75-4fd5-8415-17b741b89b51",
        "cursor": {
          "ref": "cab3afc8-24d2-41f9-88e7-d232116bf272",
          "length": 59,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8c0bbe77-36f7-480e-9ae5-1f18ffdb4eed"
        },
        "item": {
          "id": "87086007-ce75-4fd5-8415-17b741b89b51",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "db61db68-e032-4222-8e63-1e468c1b1067",
          "status": "Created",
          "code": 201,
          "responseTime": 94,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "53d6c469-3087-4357-a730-a4836da7271f",
        "cursor": {
          "ref": "b3e3a91d-01bf-4bee-bff7-21c60998b862",
          "length": 59,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "457bd7bf-4135-41bc-b2b6-a6e1fff20114"
        },
        "item": {
          "id": "53d6c469-3087-4357-a730-a4836da7271f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "88027560-a51b-4f1a-a38e-51f2e3281ac9",
          "status": "Created",
          "code": 201,
          "responseTime": 92,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "53d6c469-3087-4357-a730-a4836da7271f",
        "cursor": {
          "ref": "b3e3a91d-01bf-4bee-bff7-21c60998b862",
          "length": 59,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "457bd7bf-4135-41bc-b2b6-a6e1fff20114"
        },
        "item": {
          "id": "53d6c469-3087-4357-a730-a4836da7271f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "88027560-a51b-4f1a-a38e-51f2e3281ac9",
          "status": "Created",
          "code": 201,
          "responseTime": 92,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "ea5afb0b-ca91-4e46-8860-f563eb559fa9",
        "cursor": {
          "ref": "8c3af811-5ff3-4831-92a3-486649f86a68",
          "length": 59,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0f3a86b4-4620-4149-a52e-054fe441916f"
        },
        "item": {
          "id": "ea5afb0b-ca91-4e46-8860-f563eb559fa9",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1a15c664-05ed-454f-a4e1-ad0b74f12e57",
          "status": "Created",
          "code": 201,
          "responseTime": 102,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "ea5afb0b-ca91-4e46-8860-f563eb559fa9",
        "cursor": {
          "ref": "8c3af811-5ff3-4831-92a3-486649f86a68",
          "length": 59,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0f3a86b4-4620-4149-a52e-054fe441916f"
        },
        "item": {
          "id": "ea5afb0b-ca91-4e46-8860-f563eb559fa9",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1a15c664-05ed-454f-a4e1-ad0b74f12e57",
          "status": "Created",
          "code": 201,
          "responseTime": 102,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "6446f77a-b884-4e17-81fc-4133bffdbf57",
        "cursor": {
          "ref": "39ca6d58-15f2-4aa6-b5ca-36223c7de3b3",
          "length": 59,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1bd9d128-e336-46a3-869e-51a23e89fbe8"
        },
        "item": {
          "id": "6446f77a-b884-4e17-81fc-4133bffdbf57",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "0303e422-faa6-45da-8536-22f61ee964d9",
          "status": "Created",
          "code": 201,
          "responseTime": 95,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "6446f77a-b884-4e17-81fc-4133bffdbf57",
        "cursor": {
          "ref": "39ca6d58-15f2-4aa6-b5ca-36223c7de3b3",
          "length": 59,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1bd9d128-e336-46a3-869e-51a23e89fbe8"
        },
        "item": {
          "id": "6446f77a-b884-4e17-81fc-4133bffdbf57",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "0303e422-faa6-45da-8536-22f61ee964d9",
          "status": "Created",
          "code": 201,
          "responseTime": 95,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "bc077d16-5c08-4f0b-88c2-f9d834e597da",
        "cursor": {
          "ref": "e157fe19-b9a5-4e7d-9be3-36a5be4d7cd3",
          "length": 59,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6f191521-f2d9-429a-ab70-344fbaf72feb"
        },
        "item": {
          "id": "bc077d16-5c08-4f0b-88c2-f9d834e597da",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "77eb2a68-7160-408f-93b5-026df252fcd5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "bc077d16-5c08-4f0b-88c2-f9d834e597da",
        "cursor": {
          "ref": "e157fe19-b9a5-4e7d-9be3-36a5be4d7cd3",
          "length": 59,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6f191521-f2d9-429a-ab70-344fbaf72feb"
        },
        "item": {
          "id": "bc077d16-5c08-4f0b-88c2-f9d834e597da",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "77eb2a68-7160-408f-93b5-026df252fcd5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "ace51beb-ec65-49b7-b0bc-6cc44173b2b3",
        "cursor": {
          "ref": "f3bc809c-0286-4c7b-9682-649ea3dac3b0",
          "length": 59,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1a657056-4bcb-4d28-8e6e-e40baecce961"
        },
        "item": {
          "id": "ace51beb-ec65-49b7-b0bc-6cc44173b2b3",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "215ed068-661a-43dc-9ee5-2ba40f4c438f",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 71,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "f7aa913e-62a4-416f-af1e-d910eeb4e4fd",
        "cursor": {
          "ref": "3096571b-4953-44f4-b45d-6c32b8b33a8f",
          "length": 59,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "be2fff5c-cb59-4dac-982c-42f4856dba47"
        },
        "item": {
          "id": "f7aa913e-62a4-416f-af1e-d910eeb4e4fd",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "cb283792-22d9-4e24-bcfd-0b2cb8aac2f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f7aa913e-62a4-416f-af1e-d910eeb4e4fd",
        "cursor": {
          "ref": "3096571b-4953-44f4-b45d-6c32b8b33a8f",
          "length": 59,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "be2fff5c-cb59-4dac-982c-42f4856dba47"
        },
        "item": {
          "id": "f7aa913e-62a4-416f-af1e-d910eeb4e4fd",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "cb283792-22d9-4e24-bcfd-0b2cb8aac2f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "5ceeef48-27e8-41c9-b86f-9ee6f8767499",
        "cursor": {
          "ref": "30b8bfdd-19d0-4028-bec2-7dc452bfc280",
          "length": 59,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "236ab752-5827-4d25-b64f-c350444daf73"
        },
        "item": {
          "id": "5ceeef48-27e8-41c9-b86f-9ee6f8767499",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0da3b03b-8327-4c1c-8c6b-8f72a27b05dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "17e1e54e-60be-42b2-b38d-1fbff84eafd5",
        "cursor": {
          "ref": "cfcc1ae8-6ee8-4636-8b41-74dc0d0c3f5a",
          "length": 59,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "3feaa07d-fb36-41c2-9c7b-5d3a09480973"
        },
        "item": {
          "id": "17e1e54e-60be-42b2-b38d-1fbff84eafd5",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "abcc6d84-9d0a-4fd8-8708-c2a61becc278",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "788b9aec-8fa5-4ac6-b9fd-54eea24d60cd",
        "cursor": {
          "ref": "f8f4d28f-e062-420e-a364-839b6f0daac4",
          "length": 59,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "0d5668c0-5fe6-4e57-820f-016ffefda320"
        },
        "item": {
          "id": "788b9aec-8fa5-4ac6-b9fd-54eea24d60cd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1e9ebf67-abe5-431c-8225-c2b01ff7d8d5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 70,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "788b9aec-8fa5-4ac6-b9fd-54eea24d60cd",
        "cursor": {
          "ref": "f8f4d28f-e062-420e-a364-839b6f0daac4",
          "length": 59,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "0d5668c0-5fe6-4e57-820f-016ffefda320"
        },
        "item": {
          "id": "788b9aec-8fa5-4ac6-b9fd-54eea24d60cd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1e9ebf67-abe5-431c-8225-c2b01ff7d8d5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 70,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "c87e647d-8c00-4d16-aaeb-caf14a3266a5",
        "cursor": {
          "ref": "a35f8d59-cc5d-45d5-8098-c8b9eb7d3679",
          "length": 59,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "86b0c6a9-3d5c-429e-b262-21b52c8b94a4"
        },
        "item": {
          "id": "c87e647d-8c00-4d16-aaeb-caf14a3266a5",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "22eabda0-17a6-46b1-b534-6725713fef07",
          "status": "Not Found",
          "code": 404,
          "responseTime": 70,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "0044e2be-18bd-48a7-9584-069ffcb61923",
        "cursor": {
          "ref": "dfecff73-9b93-4c16-90b9-8690fea3d21e",
          "length": 59,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ed5189ea-8edc-4c75-8b5f-c08c4817487e"
        },
        "item": {
          "id": "0044e2be-18bd-48a7-9584-069ffcb61923",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ae0c3cde-4f22-4cd5-a177-cf05314316be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "0044e2be-18bd-48a7-9584-069ffcb61923",
        "cursor": {
          "ref": "dfecff73-9b93-4c16-90b9-8690fea3d21e",
          "length": 59,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ed5189ea-8edc-4c75-8b5f-c08c4817487e"
        },
        "item": {
          "id": "0044e2be-18bd-48a7-9584-069ffcb61923",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ae0c3cde-4f22-4cd5-a177-cf05314316be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "c8178f0e-7532-42fe-abd1-544b8e98b7de",
        "cursor": {
          "ref": "5335130e-7db2-4f5c-9079-abd4305ac71d",
          "length": 59,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "849a59ee-2956-43d5-8660-94ca89522249"
        },
        "item": {
          "id": "c8178f0e-7532-42fe-abd1-544b8e98b7de",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "cdbebd4e-73b0-4475-a918-a54459053956",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "61826a09-848a-40f5-9652-a56dc90023d5",
        "cursor": {
          "ref": "b4c6506d-9989-4306-b278-90cd500789a2",
          "length": 59,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "cc1cad71-6e8b-40af-bf9b-bf97336a5c77"
        },
        "item": {
          "id": "61826a09-848a-40f5-9652-a56dc90023d5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ba40479d-2c25-47a7-9ffc-385c047d7d94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "61826a09-848a-40f5-9652-a56dc90023d5",
        "cursor": {
          "ref": "b4c6506d-9989-4306-b278-90cd500789a2",
          "length": 59,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "cc1cad71-6e8b-40af-bf9b-bf97336a5c77"
        },
        "item": {
          "id": "61826a09-848a-40f5-9652-a56dc90023d5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ba40479d-2c25-47a7-9ffc-385c047d7d94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "dba0c061-e7de-44f6-9899-f93b12126088",
        "cursor": {
          "ref": "e0027d1c-5444-4122-a9aa-464a2d93d015",
          "length": 59,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "c40ab3b0-a734-421e-9a72-cf34487b6bce"
        },
        "item": {
          "id": "dba0c061-e7de-44f6-9899-f93b12126088",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "0d3e83ae-d41f-446b-9021-f4e093d8777b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      }
    ]
  }
}