{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a300637f-7645-49d7-91f8-89a062ece16e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "9930aea1-a1f3-497d-8379-8c841de79752",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8ab8563f-33b6-405b-9560-52db1e420625",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "29a0d38f-9462-4476-aebe-7c8fa8f6c931"
                }
              }
            ]
          },
          {
            "id": "227faa78-52fb-4d9a-8731-d06955faba24",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cf077df2-a63c-498f-9eb1-14d8ef34001b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "55306526-cc24-476b-8d0b-0c9d17004300"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "65f63302-5e4f-4424-902e-7c6d3aa0c75d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "08006df0-2ed0-43d7-93a2-b2a4c3c7a7f5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "477ca508-eacc-41cf-84a5-24fb98d1e97c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5fca326c-f236-4538-a4ab-1cca596f1b95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "43f51dba-e159-40ee-bfa4-a9d890318172"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "81764b7d-1241-4ff3-9631-93e16bfb0931",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bce376b6-f06c-43ca-af64-469377ae140d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "144df19f-380e-44b0-ad98-dbb48e540119",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8c967f0d-dd59-4872-8c83-9641d178b8f8"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "106888db-6e90-41e7-9658-c012d613df89",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "75a7a75b-4d98-491e-9148-345d250377e4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "926798c6-8b24-4fcc-a8c7-5eb9e34e06c4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ba94ecdc-6999-48e2-87f5-ce2200b522ce"
            }
          }
        ]
      },
      {
        "id": "97b8c804-40ba-4a48-922b-bc46cedf2db9",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "bee618cf-ebe1-43e1-a0f6-1f82948018fc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "346196e3-e17c-4d6f-a262-41b59dd24985",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8840e2a6-ffc7-4b35-89d2-4a4a66fa11bf",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83a14d9-6981-4f7f-89a9-c7cbffdb05ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2bbffbc-76cf-47e2-910d-956c6edbbdb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59fc738b-7678-4008-ba47-01760e46a463",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a76cd067-9678-4c24-8e46-ac83e3eec9e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "269454b2-19e1-4cf2-ad9e-ae69f059e26e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33419a97-1609-448a-851e-aaf7545f53ca",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9394cdd-ed49-4873-bb08-98610e80fd81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75420fbb-db77-4fcb-acac-944852d83245"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "baad5fc8-e7f7-469b-84ab-f9e0aceb3b96",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "53fe9453-9cf1-45be-ada0-d85d816f808b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c8c68c-5ecf-4401-a14b-d43cb94ebe50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17791e13-0988-4c41-8277-9690673e17ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d97bbad-aed2-4ae1-adc5-b6b30e58a32d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8349d985-cb1f-4273-8482-6828d60e9616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1188d01-b097-4567-b05a-ef1987e0c70f",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "030b3afa-2203-41b5-a095-a2038ec12db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "276d4bfd-ac11-4373-9c82-7af495481890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e37dbab7-15b1-4e41-8133-ffaab8d9daa1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "9052b836-1085-4b99-b7a8-0e7565a899cc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f7d7fe9a-5e3e-45ed-ba71-7d80edb80053",
            "name": "Positive Testing",
            "item": [
              {
                "id": "35c79c1b-b6d6-4886-bf24-6ad774c82998",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac0eea02-66a7-412e-aac1-2b7a950f7369",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "515d0bd9-7cfd-47e7-8b1a-ff7a447463f8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "06183c79-139a-40db-b874-1415d2129ca5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "c6586558-c7d2-4341-80dd-509e94be35f0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2831080-0d3a-429b-bdb4-f354d8d3efcc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0bba9389-0dbb-49be-ae91-7c246e289460"
            }
          }
        ]
      },
      {
        "id": "f67e4edd-61b8-4b18-9354-0e998f98fdae",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "137f5640-0d89-4bd5-8c9e-8215753bc506",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4db0c252-112c-46ff-a25c-c473443df4be",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7d0c7622-2987-4320-a205-ecd4f8470654",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "235625bf-fe89-4fe6-91ca-6081983171e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41d776bb-41f9-4dee-8686-677e4791e3e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1daac39-5605-4ac0-8c73-44c56204b877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26bf6886-dd44-4c1f-9926-3fc0e7f49bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2bae66c-11be-4ba2-8090-76eb3231b64c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2a8c9e-d5a7-4ea9-8e33-ee92250da416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d1f3508-f442-404d-9354-e95d1a96b38e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b7f9f50-ff05-4d04-91a0-ec2aabedcc07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f85cd1e6-d745-4cee-b7cd-ba8fc10f03f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b21d3ff-9582-4c4b-984b-de7e739c2c75",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b1ce2a-9dc4-49b2-af33-031522dcaa38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09f8e78b-d46c-4784-9b57-bb1f900a7084"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdbb025e-1815-4831-9319-14355ddce29c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d0d0fa6-6022-4d99-9f05-2b164c65e2ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6f3c7e-aee0-47dc-b588-1cbe9f480d40",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47a2f5c4-1cab-4bd7-bced-ef9013d2b60f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43f9f2d9-85af-4fae-86e0-d5920d504587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e968f78d-868d-461f-b6b2-3960acd94e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95d1519d-8665-45ce-a0ed-929091b0182c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e78a724c-5229-4e91-a0f1-29f39386de9f",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c8c79d-f3e3-4d7f-8de7-7d1abfd9e713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "543282c7-ddc5-445b-9bdf-85f3b8bd8549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01729e99-deb4-408c-a90e-faeed868afe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "195b6496-cadd-4446-8709-5cc9debc5556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "001f83f3-457b-4103-9798-cfaa15e4d151",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "830b6907-e3de-4b3b-83df-ec2bc93698f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d82b514-4030-4fef-a066-e4760345ee8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13effd52-42b0-481b-b8cb-efcc821c9032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "971c6f11-b1ea-4f82-886e-decbacb63174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "facc3a2b-ad4d-446d-ae86-6a667f239b2b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbb162ff-ef1b-4d7c-b4d7-3a4b67907dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bc81532-a14d-49ad-a7bf-448cc59edfba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7568bab-0232-4545-95e6-fe71fb23481b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "468cbce1-4cf9-4e4a-aa69-ab26cd9bd599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bcfc41a-39e7-4cbf-94b5-164d33a6cf9c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff36ca8-a0ed-422f-b80c-65c7df0bb609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d35a84ca-7cba-4fd9-9c9f-1a04fa1e8a40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53e6329a-6173-4513-9bed-ddd8fad75ffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0430829-0e6b-47a1-bfd6-b5e58e29ade7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07137def-70c3-49e1-a4af-339189360f2b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba065f1-8715-49d7-b14e-99f380e39e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a34024f3-fa19-4ea4-b48b-9eb3beb897ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed435ee8-7980-40c3-8bcc-9a3f9b81f932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6540cc86-8f50-4e20-8019-43f106ea7d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "548265c1-42c7-43ea-a7e1-61e938302bc5",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5969e4d0-d767-4d21-ba72-352822b8c30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca409393-8c04-4201-8db1-a20809ff12e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ffd1ec-b125-4cfd-b145-522a3258223d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4b2d4f3-97e1-4b0d-a534-230b91bf1475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0362ff8-eb9a-44a7-93cc-7b26b5aec601",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4f6ee6-5880-42d6-94e7-702fa5c6a7c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2eb6cd0-ee8a-42dc-8a8c-a300057a02c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ab1838-9406-4452-a962-5939bb7d03ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3722485-65a9-41d0-9860-3d28e545be50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c08dca83-73a8-4272-bc32-c2f281042381",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5549cb2-9fa7-4d28-9de2-a109ed69d5b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "480acf2a-0bb2-48ab-876f-e9b2f22b5625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eff1f49-6bfc-4bbb-8e49-c2926686c8fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee23e7e3-b290-4272-b7dc-f7cf0a9da338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb66769-4792-48bd-9d6b-d5dbc8ff7822",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b685b2ca-7f5f-4395-84ba-32dd8b83af4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b899bf72-8a04-44eb-be95-510058fbd06e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd11c9e8-3259-4864-b333-d41fae1df719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b51e60d-3cb5-487b-b281-39e871af5c9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd1a853-0ae8-44b1-a02c-8e9f1c2d0275",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d037c46f-7c7c-4d28-8a5a-4d5c2b744d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "673e225a-3800-43f3-b1aa-9fed2a28125d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ac625b-b5d9-411d-b572-6be21788992e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bdd977d6-2b40-4756-a422-35a46f9f90e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b1f640-1f3d-44e5-8f36-58389e67edd0",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d554ea6-7978-437a-8d2c-b3b424de31d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba47c6e8-900c-43d7-872d-3f97f35ff7ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3936d0a5-a9f1-4239-a105-d9bd11558b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc5e1bea-a510-4230-ae28-9ee533fd9637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b87016c-aff1-434b-9fb1-2b0f017a49ef",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b4618df-7c93-40fc-84d5-e67397f2dad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb90fc0c-4d80-4924-a747-e567501c9009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a693d4ec-0805-4812-a53d-754bb114e5bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36932107-b91d-49c4-a8e5-8c8c240db38d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0657f0bc-ea54-4ca2-8539-64a0893e93e5",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "898a90ee-d4e4-4c8d-ab2b-37cf38c3c42e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23b19d46-a167-4a1f-a074-fc9da4d773ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f3fcfc-d56c-4cce-8dba-148678106614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "271281ff-d3e4-430d-8581-53f03bd9a6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84b09343-4a61-40dc-b077-90b0200a9c23",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcbb380c-f360-4210-94ba-933c9d856a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db7f1431-ef38-42bf-a603-4aea2246928e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a4fe1d2-bf06-4cf5-bb56-6cd629c4d583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "23f0de66-c16e-4252-8fcd-737ed214c57b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60107327-74ed-4679-a230-58613e6e4650",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6177e2f-7cd4-4560-83e8-de0977fca2c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdeb0216-b18e-4dc3-ac90-26de477cfa15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc6e4258-d780-4c62-80a8-8db241d3bb7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbcac1c2-4fdf-45c7-9898-55dd257eaa83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb192387-7441-449b-95b8-2b5719cd24dc",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70d2102-19ba-4eb0-9ec5-fbc245cac22e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5481f535-2fb0-4c95-9d1d-f4c0f4cc5ffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc59eaa-28d0-453c-afd7-3f0b52a07024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea6cfb9f-f807-41d3-8a18-a6d2e5b28bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a818c1d5-b098-4ce2-94bc-deb3d7d624ec",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cefe8eb-a939-49a5-b64c-fce41548e32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee93d178-8e9a-436f-99e4-9548372a5757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3060e787-5e47-4654-bd3a-7aa1f24b09bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffe8a2fd-c42e-4fa7-9fcf-3854d99c17f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b609d3a-1c76-4d75-8226-330a517b3179",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "201d6bb6-0a9e-4526-ab55-d2fe97ad4377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72dd0012-00fb-4ca0-b65f-00af54f44e3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0478029a-6415-46b0-9200-47bd8d033f89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "38e5f630-c0f0-41af-a357-70ce6f6772a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef886b63-76e3-4da4-bc33-34ad5277deb4",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b02378fc-80f6-4086-a71e-38d3a04d4327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "101285f4-d319-4e99-a286-92c0800ec7a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "782f7a1f-1ab8-4a55-88af-25d8ba9b281a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1e59fb42-e02b-49d4-880b-f0dbd03f4f73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79493ef1-e600-4f1c-98d9-e5cab00dbb81",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a96f65-5baa-4658-a227-da9c12d37121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3a4e230-3841-4bbd-a94d-9c24b8e26fd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06840c11-1f82-461a-8005-f608abbda3b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "45bb2b86-99ce-417c-921e-cedd18f608d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6219c1c-8d12-4ea9-86ac-4e0c617dead0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb826c3-d821-41f9-be05-7e3e205ca49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "222d9dec-3ac2-4f70-a2f9-74eded6079d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9102e89d-d30f-4911-9340-9ba2ece844a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "af3a254a-d271-49af-b13e-537b84e86384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9631726a-3105-457e-bb04-cd9b790bf28a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e66bfb-30cf-48bd-8d67-626b7f71d999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86aeefda-fe9e-4aa1-bb30-bc34a86225dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c11fb9b-0cd0-4f17-8055-360394f8bbfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "408c1b99-d0cf-4b6b-a9d7-6d4c763b0982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceeb99c5-bea7-40ec-9c5d-df2f499dbeb2",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8092ff1-2b29-42de-a385-bc7d723ecfe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80f4422b-0f27-4a6a-a494-328f949942db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82c456d-80c6-4823-81ff-80b692f747b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6b991b3-c011-40c4-b448-eda985e951b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c2e7b3-782e-41a1-a8a4-181f700def41",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d53d1f-0708-4645-9306-b662a129a9c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef3de040-1c90-42eb-8115-3e5b89b58ea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70ec620b-5194-4ca6-b240-0d83b342c2c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f480dd79-50ca-4611-baf8-d0db0d1a1226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2625a746-8c79-4f87-af93-bef13bd9a7e6",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d3fdf9-ffb2-4e4b-b9f9-f32b275a0643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50d4b1b7-5396-47c9-b790-90919855fd43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1874bba3-80e3-4d25-a927-d293be9df818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "094ff931-0169-494a-bf21-4aadb65ed446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933ac619-5301-418f-9e24-0deb426a2928",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7700ce-1cad-43e4-9831-4643bc21c305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1261df3-39df-4b6e-a297-ac46012535b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e5fcbe7-9eed-4531-b8a5-ba7a6f2b2f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f930390-554a-41d9-beae-ac18d3b9bc19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d7ebfd-9512-4a1a-bca5-c88534598816",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c9eb616-cad7-4dc4-9ff3-3678660253e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "083940bb-bb07-4171-9393-7f5365b45a1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d55af65-3d89-49e7-b508-35a8ee067a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9d71435-2e7d-4e1d-a290-b7671e771a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37feffdb-09d0-4f94-a810-74c59436b026",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "114aced8-e0e9-4e92-a01b-9da4acc0bd78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "101d4eb7-a59f-43cb-b8da-ebfe14b75878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "962be968-95b7-4479-bd45-429da5f1ce23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ec40b33-1e06-40fe-9e7e-aa6563d2771e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31de4b10-660e-4034-8888-bc52e8ec7837",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f54ad36-0df3-4ca4-bbbc-de71b0ed82fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aee2599-badb-45ea-89e6-dfb7320b16d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "affa367e-7f2c-454a-9dab-9d2a61cf8a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2798c82-d1bb-40e1-80c4-c1ef30339fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9800fac9-0e7d-4dbf-9629-cc32f2695ae5",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88d9f39-201f-42bb-9dab-3a603a3bc065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acf7754e-8b27-4dd0-b47b-9b3e2148cf83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d64a6179-1d4c-46cb-bb48-241ac103ac84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9f00ddc-d12b-420c-b476-798002250273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c0a611-1bf6-4819-9b6c-c7512422c70a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cdcc267-ab41-4c43-9dd9-367111ad3e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be01ccd1-2696-493d-a4d7-ac7f4b8132a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d0992c-a547-447b-86b0-40ae31ebaabd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "5ece3a52-f7d9-49f7-8c4c-788ca64c6347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f0634b-3be6-4071-967e-047621c1f3fd",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "322cbf33-ad3f-4919-af97-3e23ee6bda4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "310262bb-ba8e-45dd-9114-dde41dc21054"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28e420a-5832-42ba-a807-7ea666cbd491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5882f7c8-3f1b-4827-a4eb-bb23f34dafb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5493b74-8d45-4e54-80df-f368db5891cb",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d1b8ed-07f3-4817-aab9-2c788de5651c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "399d0b7f-d4db-4113-a2ef-3046f4c4871d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec27be84-3e8a-45e6-8089-ca6905ca1dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5dbc6312-ecf1-4991-907a-886bc85d4e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "114cc5ee-3186-4a23-8409-096ac849e114",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f79ac05-7eaf-4223-8f02-6d9d53ae8282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a709aec2-4057-4ff9-9be6-37bc1bd5b0d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547a926a-4fcb-4f32-9384-a362777afe9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5430e92-455d-4aad-973b-020a90e41350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff44a1b3-19b6-4e45-b3f1-9e2eeb8b7474",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "317c3aaa-4668-4183-ae3f-91c6f6d5d5cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5281f228-59c3-467e-99f1-6969d75b9c2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93dc121-8dd8-4b78-a468-9bc5900f243b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7009f11-1c3b-4bc7-81ce-81713c0a3b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be745330-1d50-4728-93c3-a9efacfebe4f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a4aa846-9fe5-46f5-bd48-b2035d1e2a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0596038b-71b4-48d2-8676-5070aff2b986"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40a85d2-027e-453b-91ae-31452b5bf1de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "be3971d6-080f-4d90-b10f-8bc23003677c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434769c7-c4a7-42c7-af11-98d91be6b4b9",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e15626c-7e92-4805-ac7f-6c2a2ffad057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1c1e27e-e156-4c2b-bc69-6ad1d58036cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca813cd-a845-4e2e-bfe5-373328799f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2978ca89-e3c2-442e-9693-c7c38393e0c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ad9683-7543-4a03-abcc-9847257ca478",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85182f7-5a57-4c83-a166-5281d4ad000f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fb30b0a-61b4-403c-a09f-b8191881080d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603e27f0-7b23-46e9-b57b-3774bd4fef97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3f111f35-a715-4b1d-b43b-7ab362c92bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa770a14-e593-4769-a1aa-a4099fef058e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03325019-5ed6-479d-8d1a-3e1fdb15413a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b18884f-69c5-4cf9-b243-cd58e04e083a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53bb2ddc-ffda-4b2f-bd38-ff695a478c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9a46ccc-b680-4c21-a3a8-5fc0c8bf5507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec85329-0cdb-4ae9-8717-d953802fef30",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a642c34e-cb52-4d4c-8041-6d5807eb859b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39930531-c966-4324-aefe-9c3a1ff2fedb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4134f491-3a6a-4747-942b-cbe3deeb78c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6ffae93-bbc3-4880-94bf-086d45d7ed25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa87b7bb-4c2e-46d8-b55d-b934dbed16dd",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c94c94a3-ef41-4d99-bbd7-69da9cfc6cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d55661a6-8f45-4eef-aea0-5f252b72dc9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df447131-8e7b-407d-b84b-ae77a3b1c123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d621a22-0b2d-4a50-9553-c4c79127452f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa2db24c-d24a-4412-a5ed-a0bd3893b738",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d566f32c-9f76-4a28-800f-95f74446242e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5fc0fb8-e5fa-4771-8635-17ae02e3d86e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "974fb932-e106-4fd0-a831-f06e6b220097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a341367-e2a6-4069-8dbb-2525e7259380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfbb4cac-5b56-488b-ab23-f87671206f2e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf1af06-72f4-4a67-8873-f91482b76f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef78be9d-64bf-4857-8c7b-0ca322874149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba1acefa-27a8-4fe9-95ba-56cd790af402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "34335660-2cb3-4b76-8e9f-970927ef37e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f796c13f-be99-4610-92d8-9d32a6851d06",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d9586f2-8fae-45b6-9b4f-894f73f001d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e0bf06f-e858-4434-a5e9-51a7d7a25723"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6457c07-9258-4cd1-a0c2-3c5e353359de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fc4a99e-3f68-4a23-b8a5-f979070e7ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0f854f-4840-41ee-a0b4-1e841d7a5521",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f0a5f6-6920-4599-97ea-e876552572a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81c121fc-681b-4baa-80cb-dba163f73161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc013a70-c897-4646-bda8-721678b751e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6f6fc84-df5f-4b08-8ad4-bcea30ba2c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c64f980f-4de0-45bb-b102-d6f3617a8d54",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a174ba-efa2-4971-a497-57777cee6e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b38d238-1d2b-4a97-9073-2172852508d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d48b980-c45a-4972-9297-c6cd0bdbe69d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2d9679f9-68fa-4942-9dbe-2f615e22800e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8342cccb-f190-4fd7-8dd1-869666b8b795",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "671b0071-550f-44e6-8f80-fce0c3fd5fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd679b4f-ea69-4526-aa90-19100672b16a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72bf7c0b-d21a-4b0e-89a4-8dc7d87fd739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e558dd17-38b8-40b4-89fa-249e1f1671db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "778fe3e2-90d8-4cab-9a80-951a4db68319",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f537e5-c2eb-4eb9-a97d-54328e9454b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d52b492c-ec82-4350-b26d-11dcf212d67c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063ed8f4-e82a-461b-9bf1-155ba1aab243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1412955-7620-48f8-b585-9d94c3d1a05d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f4a80a9-85ad-41d2-9d2e-a62d34a083c0",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe1369c-2911-4a6b-8af9-c24b60bc7dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "363ce9b2-40ad-42a3-b257-0d70d6c9193c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b8da505-e7bf-4eba-aa6f-ae298350ce7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "de4d7946-9017-4b60-9e9d-197659be2d96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4383ef78-f495-430c-96ed-a022650b35bd",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e3edb52-7daf-4cda-9488-844a7091c58d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8e52b94-4c85-4a32-914b-31fda63efe96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a30c703a-ef7f-4d83-bb41-a9c6c58769e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e331d89-c8eb-4db9-a545-bb9a054375bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c17b0d61-cf4a-477a-94d5-498730b37bb3",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79c25f4-9862-496b-b56c-7fe6779c2281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93863611-d54e-44e5-a5dc-23d221243641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0994532a-459c-4855-a0cf-95359c9a432c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdb43fea-67c5-4a36-b14b-15621cc1280c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c106e290-2bee-499c-88ae-7a9b38f5a24a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c0ad44-dae1-4cbc-b25e-4dbf8ec7db8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84072188-c9cb-45a7-bd3a-3eb90b552ab7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e2366e-e5e5-4f47-bbc1-a5d0d881d05b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "dd816788-6196-473b-a800-c9e65ad00c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a9edd34-e63c-4a2f-b04e-7d7b9170140c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c3730fe-e75d-43fc-965f-f445462a8e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "198c6f0c-1c98-43ea-b8ee-5706f2ceb097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6db835d-2497-4b4a-96df-f7bb4d24287a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "67970ac9-c225-4ccf-b493-1c5e58f416a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7103b854-9218-48d9-b9c5-6401e41f28b9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d767934-528c-454a-9c5e-ff432d30d2d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7b0703b-0caf-4bb0-be98-39f0aae00472"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f4b2747-e071-4d94-93ad-090b212f0aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb860d8c-57ff-4c3a-b596-d4ba19b26067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe80aa0-b037-46fd-94bb-6ede61c46816",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6f1a53-fab1-4d01-9d82-7c0053b8c39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a4550a3-cfca-4086-8f64-6a2e939b33b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b96239-3bf3-4977-a5cb-100460df9e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c0ad616-919c-4a82-b10e-8aa619df48bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38e70151-21a8-4db0-927f-aac840457c08",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c16e69-72b5-4671-ac07-e1418f4a1de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b984a092-408a-40b8-be90-3ea121ae6c06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c036cd-e26b-4dfa-951f-6726015c4051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd55896c-cff1-44f9-91ab-241edb7c4450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1cfc4a8-bcb6-4391-b7ee-c4347eda9605",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a22ea09d-5e59-41a1-8d4a-d005f4218fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae816ffc-7cb1-44a5-861b-b132ca8b0058"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74fafe74-5659-4585-a7ab-89e56bd24d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "96a669f6-7b7f-4958-9f92-f1f6573efc0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274221a5-d4ac-4816-9fa9-97bee5c18d41",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44ce1ab-c676-47aa-8f02-0e8764fd37d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd1b2f5a-4e13-41e1-8c79-8fe2ddafec45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9089cad8-4ad5-418c-9789-53cd117689bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e10605c-bd81-4153-8cd4-641cdee29636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce4b8b95-1860-4953-bc09-2836412ba2bd",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7647de43-2469-4896-87d7-a8d1ebc5684f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "117fb14d-9301-4948-96ef-fb1c926f747a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59997ea7-0ff8-4a80-b557-c4773dca1d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d6ca601-0476-4ba2-95a8-8abf94ac7130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6047dcb-a829-4175-88b5-02fff7d540e1",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6431fbaf-ab38-44c1-b5ff-e604ae4eafc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f6745f9-7822-450b-89b2-158f8e1981bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a23bd7-1272-423b-9d94-8cb2ad1c11a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c86fbf19-10a1-42b5-a551-6a83ead708a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a35e1d-ae01-4218-a338-f30f21bf21d3",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e02861ae-ddd9-4fc4-9130-2147370730d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c0c39e7-f93c-4f42-a309-5f2ab82a9484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91e067e1-b819-4620-88b8-ab7837274ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd5d2364-716d-4d2c-a67c-a7a79e42ac86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e177196a-7394-4d90-a1ef-af70b80ae5aa",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb75190-476d-4456-8d20-bb114503e4fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f3c08e7-c899-4911-a254-0e21e4a6809d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3affcd62-1dfe-4016-8972-f96b514cb448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf6ee571-5f7b-481a-85b0-1ac84c27868a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd0c765-fb82-4137-a699-03505b5c47f2",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e6c409e-46f8-4881-9a4a-81aee9c4c129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ea976ad-233e-4153-aee2-ad87b62ba6b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd185e8-206f-45e1-84fe-1ea2dd936459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ca090c9c-8573-45c4-926f-1bfdf7077309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "657b4e23-7b31-4d44-b96e-a86ebff0174f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32d0c07-136f-4fd3-aa0d-6db6b7657175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea480283-aeec-43f3-b611-27841df34fc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb1b947-47ab-495e-a888-5f89e56fb1df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "203ca2d3-0675-46fe-bb22-5b80eb548d6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37234487-1d99-42b4-a4b3-7b03e50327b2",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08bc80b0-8347-413f-9abd-a9d314e7fe1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58b0767e-2153-4eeb-9185-2bf8315468e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82cb6954-7f6a-4fc4-8aeb-05804ea5365a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf089701-e2df-4c3d-9bce-8732606031b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07e5234-2d5e-4bf0-a28f-6927da0cc96f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd6f4593-6078-4521-a85a-35c07e2d89bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06a83302-5a08-4618-a8f1-89d0159f090d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6d2a80-c3b2-4416-b48d-09d0ab175d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac8d8439-60d6-49c6-86dc-9a68ffe96c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5503b41e-6a35-4fae-8a97-52e4a83b418b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f07a68b9-51a8-4611-8e91-5c1d157121bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "285efd5d-07c8-4a38-9d7f-19111f951a88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a3805c-7259-459e-89dc-f7a888c2bf18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "09340536-6c50-4963-9f09-af7059133855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c78f61b-6093-4160-947b-fc63bcfa2499",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52af50c5-7940-49b9-8dd8-59ed82b0059d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8530bd9e-5aea-42ee-b9d7-bc3157ff2213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a05881e2-02f1-4a58-98cb-4e0ecdb9d982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "73c31075-939f-4524-a4da-1e4651d68662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d7503d8-0606-4f47-8fe5-938ada2e1316",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d1b7cfd-b3e2-4466-bc36-926763ae1bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd8503b8-eed6-40a5-8311-aa6b75029f3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cf05996-e202-4773-a753-20d1934021f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "35d0201a-980a-4de8-800a-8012370b59aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7defb36-b84a-43ad-bb3d-e44a88547a09",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0334f6c-2d3c-4887-b024-32fa2c7f4033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f060b036-7846-47f1-b345-55fe9e5a217b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e02ad96-139e-46ef-86bd-f843554d7b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0943dddd-d286-4def-8f77-4146e932b48a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a08b7326-1d0f-43df-b62a-1f1739303e5f",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac19333-4e48-4511-abfd-0deb32aa1d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2db0197f-2611-4633-9108-925921fc82b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee9c87b-1cc6-4c8e-a485-0a2abb6b20d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb6ba532-8739-43e7-81b5-81180c170d75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a35957e-f45f-426c-bcbc-18cd5ce1e1f3",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e650a0-590e-4d52-9ccd-67d3f2e93f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e293b29-9b05-46c4-ab1d-e5c5e56fa95f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61708ab4-34d3-4bf8-bc58-7fd04df4b6f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5eff6350-429c-4504-87d5-13734e0c7b02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0313336-4777-44bb-9446-b6eef9f53486",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6921b2-6c3f-4b64-ae93-7fbb07dc5467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f5ee0de-0734-42d6-984c-4734580df8c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f06789-7328-4a0c-b74f-4ecae46bad09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "19101d6b-d31c-4c1c-872e-4313d12ad7c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3f51d68-b658-4a4a-88d8-3816935cf67b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88e334b-5c39-48d5-bc8d-b6c433e4da6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e32cfc12-32e6-4324-90e7-6b479c2ab369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bea37fa9-9c3b-48bf-8c9d-304619d8ad3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a05cbda-42cc-4616-91db-e1c8d20cfb0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a715d5-8bc1-42e2-80ee-dc1ba3c36be7",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "782b75a8-2c30-450f-9195-fedbfaec102b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4d45426-30fb-4221-ae7e-3c96b1000ed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720f8682-940b-4d3f-aed6-52cd0018aac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "23edc005-7b20-42a9-a845-7129e0d92a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bebe4df-9fe2-42b4-8f05-cfca75318715",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b204f91-cf02-4c88-9f03-38c65ee10850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b450042b-8541-406c-a615-32f41ff0f981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bb85843-2ef0-4f02-8b03-444cad7dca10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fdd0ecf0-356f-4598-be0f-0728333efba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "928b72f1-6206-4124-8a9a-a564610a6dc5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a38db22-d07c-4f91-82fd-14576769dad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f1ab427-61a6-4122-9ec5-813ad8ee4568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc097303-fbe1-4e52-9f1a-bb534ceab147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b50ad1e5-83e2-4a38-86cf-20cffc2c2095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ab3ec17-d9fa-44d7-9324-c8042e562f75",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c70ba92-4ab0-42b6-a679-714800332bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfa9308a-1c65-40d8-9f92-8e789d3c9b5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c932a855-51c9-49b8-8c09-2017da404bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e154ba0-7486-4f6a-9015-1dc2300edbdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835a7958-ae03-4f88-ac7d-17d501ca6ef3",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0151bb-da98-4d1d-a3ec-4cc969323d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebdf979a-89ef-4eb9-8447-4570692d83c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "607eee14-ee3e-4f88-bb89-e323bde7db22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "327d95fb-b9b5-4990-8bbc-2398c68d37ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "826fbd5e-f182-438b-9b6c-3428e42088c8",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "748e85ed-88cb-4227-b81e-b8ca5b037fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "014f5a9a-fab8-4f0f-9da4-ef94280484d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b3ce2c7-1ee8-4fe6-96b8-3472ef3af959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac152512-b593-4d85-a560-a322b4a6016a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058ecf9a-20b1-42dd-b956-f70fd1f7fc3d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e68fda6-14cf-4185-ba1e-b5c29516cfed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d626c95-37de-4b85-b3e9-a21cf699bcbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "685c5e5a-dff5-456f-b837-d0f525e8ade2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "74aae894-0ed1-4055-9f1f-fa96aaf4fa07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a679d5da-3671-4afc-949a-f33c640b9d1d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6351286-5136-4f86-a569-13a3db4b364a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a0a2741-bcba-4bfb-ae64-cf0b768d7a16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b0fbf6c-4fe8-42a4-825c-87dbeea26a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "64bd7971-55ef-49bf-8ee7-b13319858c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa95c2e5-3575-45e2-9dd5-3eb13cf972c3",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c4f8a5-d66c-486e-b5a2-28776c29035c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "115f6635-1840-430e-84c5-cc737f7de97f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab41d6f-3e98-495e-97aa-0936fa553833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e85a537-60c3-403b-86e0-430901bcfeca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ecad11-6d33-4863-be8a-be2f64df21ea",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1926c5c0-9aa5-462e-8cbd-f58f6f77aa1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67927f7e-1168-451b-add4-6f965a14fdb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873e9d06-dc66-4520-904c-4bfeaca77e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e11975fd-0163-4cc7-8183-70620694f607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54b3fd58-a83d-40d3-89a4-789e4447758e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ae9310-2e84-499b-8f1a-d0c45324affa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5d4d56e-1a1f-4ac2-9c74-9354176ccb42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a4fe23d-36e7-4f9b-8db4-eea3548cf3ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2fb48c0-c41d-4fe5-94e2-685bb1dcd4a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b86cf35-d584-4f80-9efe-61da4c7350bf",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7197579f-be4f-4700-9365-8cbea64ca702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2acc89c-9b36-42d0-8971-b4a16573ee49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee98fa05-148f-48f4-a8a7-1f62400f1eb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "187b8770-836f-4a74-81b5-79a8e8e659bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86d6cecc-1e18-4601-bc9a-92509876ab75",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab6d68a-1478-481a-9bb1-19ed5a563841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a41655a-a3ae-4f72-9964-4947948a9f86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56eaf6b9-4023-4adf-9c23-57b1b352b4f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e89c4fc-2973-4b45-bbd4-3e1e51f81fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eee0ff0-e47f-494b-b93a-4dba73d94646",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "667e884c-d09e-4060-b24d-cab1e2e28015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "bd803513-8a95-4a92-af32-85b4da265967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cfbfa9c-2753-47ac-8870-728bb490040e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ade37f6-34e1-4fda-ac80-03136b26f74e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2c783c3e-a069-481e-b63c-18ec7433bcb3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6c21a78d-aeb7-43b4-a9f8-d05ee8d3cfd2",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91937b4f-871e-4b98-9101-b732353e2090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e683b615-d0c0-4a33-8cc9-1027e71532ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6319626a-4040-44de-9a05-4706527df2f1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "23714ba8-e075-4b01-bb29-c5281221c6a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040c12bb-7fa8-49b1-a48b-4667c22c804c",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68bf228b-3016-4fa9-83f1-071fc2fd1663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d6580f8-b1ff-4696-badd-1cc45a184fab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6016beca-db65-4f6b-afdc-37a98398257e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "dba52138-f744-481d-98bb-78339c69cbcb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d105f06d-ee80-4a5c-a7a1-3dfc7763a402",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "07f6430d-7669-49c7-aec0-6d916adb2d62"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cdf6694a-8823-4f0b-82ad-7818801e6fb5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5fbe4202-105e-42d5-ac51-a62c7b79aa36"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a7c1fc39-c3fa-4e45-91d8-eecff51d1900",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "41766c79-151e-4cba-9d2d-a2ed46508b06"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "edf95bca-6344-4c50-a6ba-0ede2a111e7c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9c02d4bb-84ac-4a03-8309-b7cf359ae423"
                }
              }
            ]
          },
          {
            "id": "862f7d60-40a1-4ca6-b313-041ae8021737",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7973a8f8-8b4d-424c-8d96-0dd04d140724",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d3fd26c-6444-4f1c-ad06-43a5a447c050",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "af270fae-6c58-48c8-a6cb-465e1e39b2b6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c8eba34-b8a1-4798-9692-19ae0be09ea6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cda44a3f-d1a3-4e7b-8ce3-ff5adad18466"
                    }
                  }
                ]
              },
              {
                "id": "eca4314c-d4bc-4216-957e-0aff163f11ca",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "40edb5cd-1fcb-48ba-b1dd-389c66f611ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "157a10e8-11e6-411b-82a8-66931b229c09"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93f7598b-421a-4619-9a84-83ad8d6355f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8afb868a-9f6c-4911-abbb-74f5d6faa304"
                    }
                  }
                ]
              },
              {
                "id": "625b6ece-bb8b-45e9-951b-147fe37e3ed4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d44fc428-ac1a-4ab9-a710-34db26fb67d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "521b4c3f-3f3e-4c15-bcf0-e015486668f9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f9cc0f91-eb8c-4c46-b701-e47df1c2467f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "15dff14d-244f-4ea0-83fb-46eb4628f236"
                    }
                  }
                ]
              },
              {
                "id": "14ec0311-4101-4315-906d-5507feefcdfb",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "10ae1a6c-7bdc-49e3-85be-a96bc3e98466",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "926eb614-c905-489c-8521-afd6d8259698"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8df969a0-37df-4470-addd-5cf079dcbf49",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b00fb377-a6b4-4a09-b935-455ce2436a60"
                    }
                  }
                ]
              },
              {
                "id": "80d1134f-69ab-4e52-8cbd-8cee7d31d8d4",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2356556-056d-46c9-88eb-c1e958d0d587",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "91e948c0-a4d2-45c6-b789-d5ddc6b7624b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21cc549e-1a41-4171-93a3-c7144e923bf0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "cd0140ea-952a-4e2d-9577-96d6cf0031ad"
                    }
                  }
                ]
              },
              {
                "id": "1b425ad3-4770-45fc-b8c0-1611e4a4ea3e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac6a14fb-f89a-4921-b282-b238f5fa54bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c210d264-d457-4443-9449-ce3c44e276c3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42377244-6887-47b8-8e27-2b1554c16936",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "19eadf9a-63dd-4578-8ecc-26e2e8e2124c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e384b36e-c03b-4a2a-af00-771f96640e8b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d64f21b0-9848-456a-bc9c-de043f3b7b75"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a35a31c7-c13f-47bd-b2cd-ca6bfaa729a5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "22e3bf1d-21f6-4aa4-98eb-0b45399a5072"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "65111754-d2fe-4257-be15-eed0064645ca",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "da8edb4d-bdab-4f98-9ca0-0ee4c10055c1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "65f1907f-cea8-48cc-ae32-8d912061edf4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a790f40a-77cc-4228-aa0c-9e1e2f6a2c7a"
            }
          }
        ]
      },
      {
        "id": "07d7cc56-4a62-4e0d-8d44-590f5ebd0f10",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0f02e86d-072f-45f6-b991-3e36578d3e10",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5edc694a-9e1c-440d-b926-419ada247640",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "272e83c2-f086-46c6-91e4-41f3b51b87dd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4016697-7569-42a9-8308-d28e59ee2a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4765e6e-9951-46b7-9024-3ffcfe00e335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d274df5-a1c4-4e86-9e86-4520c172eb75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ec520e2-78b5-4887-968c-3ced6c40a637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8adcf1bd-f044-476f-a970-87797cd7d8c5",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7778f4c1-3049-46be-b1bc-14f258e43fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f883285c-fcbc-4a5b-b389-b8e0798f0ce9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a5faf7-8756-4ae7-8945-9644d37c1495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d2c05be-5ab1-4a31-be21-4cb1c82e9ab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a65acb-ee36-4d65-b1c9-05aee8243f23",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb90fffd-bdbb-4880-af27-2b41f9a6e82b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5eb96c6-7425-4012-8cb7-164c2bbd29b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc01cf16-bf66-4fa0-818d-4c459fb41ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "81c50377-1dac-4bf0-a4e8-d49031f8e721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e8817a-e02f-47d0-9eec-47246391e6f8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec795d2-ed15-4f09-aa61-6d1cec43f331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3d393d5-7e2b-4ff9-b6d4-8f548cf0ffab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13403b43-28fc-4a2b-8e97-2b7011bca073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "054f9305-bb0e-4328-ba70-4234ecae6074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac54cfd-b772-4f7f-ba43-13bf015de433",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e7e22d-3dc1-463b-84b8-91c04a238ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6bf40e4-10ab-48bc-9bbf-d366617dd174"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ee0ef9-289b-460f-a95b-61aaa0233dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "41f03376-24f4-48aa-8f8f-7925e057baf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c54bf632-5769-4a8c-8962-39a6e0369ef3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "428a3aab-abf3-4416-9d23-d3434dc14cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ba637ca-bc55-4c12-9636-b8c1a1463caa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68481c93-761b-46a1-b521-1748dce47df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e9180c6-292d-4382-a7fb-f8528f832e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8aabc3d-1729-4485-971c-7bfda4ad78d1",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84fe9c05-2b2f-41c3-84b9-c3de5e914146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a14e5068-0687-4a70-b713-c0ebc21dc8a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f315bc2-c3a3-4921-85e1-ebe9980db3e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "986069b7-9db5-4787-87ea-dac9f71fba95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e611d1f3-677d-4c59-a5aa-72796bfd5a49",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b585ee-2241-4311-b580-e3c55309d858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4c1fa5e-5913-4b1a-b13b-0430599427d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1211db9-fc42-4d9b-afe8-c46f3bb8c5c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1aea89a9-7858-4be7-a154-9f633a8839f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d4dc7f7-f47e-4107-b3fa-9b9957b90a26",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d5297df-805b-483a-b993-bee6b81ae74f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a4a4db5-302e-4462-ac70-8e2e7e2cdf2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d63fb574-5190-4813-940d-2a8c1f82ff2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fee95e1c-3ee4-41cf-970b-26b8a009b0ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200964e5-9994-4afb-b624-f39f5264dbf7",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf9a5f6-5971-4747-b47e-9d81b3f3c69e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b071c1dc-19e6-4e34-8882-cb568a76a3f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aba2dbc-aed8-4100-a363-1c2c76528db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "460f963e-5a76-43a1-92aa-5f418087eb6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de3eb57b-ccb0-458a-8daa-a38b24c73f26",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d665330f-e2e1-4b4a-9233-83c20098cc7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c87bce5f-c0f7-4071-95e2-60ebdda82fd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9eac2de-79df-4016-b7d6-49e415d33580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "69cd9f5a-507f-47b8-aabd-9f4b38bd8d8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c7db55-4d23-4605-b201-051d26c5acba",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6058aa0-26d0-484f-bbf0-354b6ca9ae0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "193870b2-4fe5-4753-b911-9976783e2ae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f65bbb0e-1eb2-47de-b2db-79149978aca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "47fc7edf-9586-4f83-9b15-41b8cf919f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d588ce-7cc4-41bd-a60e-16d6e1e4c4a2",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6bd7c58-96e7-4f50-af80-abac67c554eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16d3bfca-d6f1-4984-b809-1b8c2743978c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d9d6ac-b9f3-4808-8305-d1f9d2a821c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "936a95a4-9c73-43bf-8d16-62100464349d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "186baaf3-0166-4ec9-ba1e-3751bfdc1f71",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "436fb0bc-abc8-4f27-87aa-993fb69b2b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fe3c389-fed6-4a33-8811-097ac057ef6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda765d4-88e0-4bab-bc97-04d53a45bc8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "eed48281-7601-442a-8060-0b864c0bc6c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f163c071-6af2-40c9-aff8-7eb84d7592f9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d6ccd2-01d6-482a-a8b3-8f7e844ab63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e493fa09-1abb-4059-b23e-ed58a4340db7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07043c6-422d-4d83-9bee-a2d29d5e4c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a15d818-5517-4012-ab81-13c0d69eb569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e459c4-d41f-418c-be02-7025d2e533c7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e45b3218-239a-43d5-a4e7-6df8374b0e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "331c89f6-2465-481f-871c-5e60c1c92838"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5f11064-2836-403e-acbf-91cdde7dd824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "06033a52-ea3d-40da-a9d0-6481c78fd7e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc19e51-f264-4cdc-8469-82157d3ae3e7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a26064-64a9-43bd-a09a-ef05536619d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a994f1c-88b9-429b-b7d2-669840563291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03cf24d7-3aaf-41f5-9605-313cfa3796c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c3f9f75-2eb3-4fd0-8c18-3f3f03244d51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28c0a91-3dbc-4a09-bd46-48089ad40003",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaccea5c-5b02-4e43-88e1-3b098b9429c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d8be212-9ef9-46b3-9ae7-99d3b980031b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ef6d20-b7fa-457e-bcde-e3faf4d97396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cac6785f-c0ec-4542-91c4-1e4d5ebe467c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f244314-7578-45ac-8f4e-ca96f9850eec",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8795d12d-109b-4c7f-8060-abcf2003e80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "977f2535-bc51-427e-81fc-73c367d37fd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f1bbc09-ff2f-42b3-ab82-434400919796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6f346fc-517f-437c-a054-24ce9ddf7145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6a6cf4-cf81-4012-8000-bfa0bd2d635d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f801867-3591-4f43-9678-beb704a968df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "029b3d76-051f-4fea-aec1-c2b5f3316589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d023ab4f-99ff-47a4-877f-34b1f0b58c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cf65244-7dcc-470a-b207-323723f89ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef356f89-496b-4aae-b63d-f9b461fc6126",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2204605-e77d-4659-9cff-6af9eb525497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8c42223-3df6-4a7e-bb4d-bb685ad6a061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "224f9e82-5802-4f50-9831-5bb3e853357a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd9bcca8-bd1d-4523-aebb-6d5883830ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ffc2b6-c2f0-4cd2-ade0-1017e9a0805e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed775242-eb1c-4aef-a7c5-cf708cf55f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55c86ca2-a672-419f-a69c-362bd3e93600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b67e5a24-e1f3-47d7-a10d-72f73afc0849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ac182fd-5c3a-4017-be76-a887cac7192c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd5992e9-b46b-4a07-bcea-166f021b310b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "934de221-e1d7-470b-9fe8-ce5549c6e786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb2bf335-8c16-47c6-99d3-78c6218e59a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c38dc4-0713-4a87-854c-d20584d5de9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c03f0e59-1f1b-4db4-b677-7fc459c1b101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c588167-2cd2-4f58-8364-f6545a0625de",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a02033-90dd-4c14-a773-8e8dde446f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "254b193a-e093-4883-8fb2-b6b2b2965109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bfd5591-5878-4693-8416-77992ef58296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "011efd00-b045-4c3e-bd8b-e17f13659ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a28fab0-cc8e-499d-baae-167aec56b7e2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88252ccf-d24b-4734-b3de-9d6a0fd47453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08c3eeca-d7d6-4016-84a8-28bd27ef1fc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ba239d-264d-44c6-83eb-bcf496b90480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "784283c0-51e6-45e4-87e5-ca0ce8048b23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd23a72-84a4-4d47-8983-13477e23b85a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "577a8c0a-a12d-4337-852b-720585b54f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee390a7b-9059-41c0-88c3-ad63dadac385"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6225f7a-1397-4ca3-acf7-1346dc7a041f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a46b6aae-70d3-4bed-b087-40317d5bc9b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3b9e1a-cd5c-4c55-9439-d3e7421a1291",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a405b84-7081-44cc-aa70-434ce6b22c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3260c8c-1540-4201-a39b-4a3170d72de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "076c9e9e-72ea-456e-b53f-5200d31dd927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c3c41b4-5fb7-4d5e-9a0c-701ca002fc03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5dfd3db-35a8-4560-b476-7cfab146e594",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98810b10-5387-4231-912d-f9272bdf4abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7e4e7e2-8562-4e5d-96ee-434836dd96dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4da604db-34f9-484d-b2cb-da11af5514ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fe4398b-6bd4-44da-974e-b02b6ab0e485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f285c52-b8cd-44b7-ac1c-23de74cf7014",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f5f967-64db-4aa8-b781-6763021757b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f84aba74-3066-4c2a-938c-b7b3b3db915e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92be9631-0b4b-4ad2-a8e5-6cd9f23ddaca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40fb9ac6-b23c-4101-9356-51a83ce9cb2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5201e724-d699-4e07-a8b8-30a14ef08ae8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "731c300c-2f71-4e27-bb57-1856c6195e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "691f4696-06b3-4086-8a19-6a0a21817ebf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d971a94b-bd74-44d8-ba95-c1e6dbe619f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "497c6795-d31a-4bf0-a8db-19cdd4c931c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b99c230-081f-4d9b-bb88-0c582285579d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b27259-be66-4e65-aef9-bb55cc9b6553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2e567db-0bf0-49f5-bf8f-5e909f3654e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df0ba4f-fab7-44ce-9bbf-a075ad4f8d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1daf4619-509b-4bdc-9144-1ed5e11def0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2acc6266-b49c-40e4-a67e-0f09272e79d0",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c50b0d7-d0ad-46c3-a71f-ebd0f8a23a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57845963-8485-4d1b-955b-b403c16e1bde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f983a9db-5ee1-47e4-9c72-bf67163bf7bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e79dbc1-def5-4204-8462-96904d7c6565"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "af26a58c-2411-4ddf-b2f1-f4c84a2350cb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0a2ad5d8-efd2-47c1-8eba-73d77e81eaa1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca6ae8d-7163-40f4-8473-23f5f737bb19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2027e73d-c20a-40ba-8874-fb7ca9c30f44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c2a2b8b-0909-4076-8d0c-bc45391eed05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "13d40eb5-5b7f-475c-91c6-3aad7e1aa3f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5afb598f-0efc-45a8-8e06-e3cc33811114",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c55a4ad-48fa-4b79-9c0d-9ef74c57c482",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "401b8b75-a931-4fab-b345-0070f09447c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d177466-1b33-48f0-a6db-2d5948580393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bc2b7d99-8ced-469d-96f8-20f2b3932d1b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5afb578-f57e-4ea8-8a83-4a7312e60fab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2d0ab8d-cd8a-45f2-a4b1-8b0269056d66"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a222c16-7c8c-46d1-b538-8d4d0806340a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb31d0a1-1365-439c-9be9-38cc3f14220b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1acf4ebc-4b11-47f8-a485-7e576ff85870",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c0e30eb0-1ca3-4bf5-b3a5-dd8f4aa4618d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05d70841-eaa6-485c-8579-f16d880c3adf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b1d6ffdf-e97d-4567-b0b4-1079ab306a4a"
            }
          }
        ]
      },
      {
        "id": "9bca504a-ec64-4de9-a81c-8ba09404c99d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "147d1d3f-7c37-4d83-a3d7-128f9868e7a3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a5f5565f-e714-4b1c-83d5-7b143f83c5d6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d4abdaaf-d499-4e9d-b05d-d761660be279",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d3ead5-277d-45d6-bf26-a622a30f0f28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8db1daab-59d6-4725-bb9e-dfe2c11e2eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1be4bab-b688-4ad4-8bda-bb544783f231",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e97b14-ab68-45f7-acff-1003895217f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21e71922-f4b9-4def-8c03-d7b81407b455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9d767e-68a2-4331-955c-e2c380ecf438",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a1d4a2-078e-40ae-9f0f-601f81fe602b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac389a2a-09b2-4179-b1d0-d7c68641cf8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719994cb-822f-44d3-a8bb-430f449c89ed",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e311d942-baee-4978-aca4-bca21518572d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "312cfcf3-78db-45b1-8484-734d5e35d297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ef96a0-ffc6-4799-8cfc-f36251b55072",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33745f5d-32b5-4612-9f81-93c2484b7e0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "976e6c15-d74b-4bb1-9c0c-d392b1255a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be25a498-b72f-4d0e-b8fc-474bd057e925",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd4fb58-404c-4dfd-9cd3-55e459585ec3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf0c492f-bf8b-4d02-afdc-f85c96f3faf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78df3159-1ef1-4161-9889-5819e0f8029d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aafd4b70-b1fd-4f46-a5b2-c42532786662",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b0e8e5e-524d-4ac8-abf5-058ebb10edf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bd868f8-2c83-48af-b76c-ceb802a6da91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30e2fa55-3498-422d-8645-23254727b244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfb065f4-7af3-43d2-9eee-f2d951c9ad80",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2984ccc5-2afb-4ecc-9cab-76a7187f2f42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51e78cee-4412-42d6-a73b-5b0445fb944b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ecf18a-f69e-474f-860d-bfe41ed678e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e16ac5e0-8072-43b4-b9d2-bdc42dc61189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf133d53-380b-43bb-8973-ea78cf2671db",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a1ffdce-f0f5-45c0-afdb-901ffeda6690",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8c73596-464d-49dd-9973-5bd39d7eac17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26d963e1-3b20-48a7-9399-bdf89280c128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "791e76f8-5bd3-487f-a049-3ac7b3e3f616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00bd74fa-f4d2-4135-8acf-17943b27e3a4",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d7fd92a-4600-4fb7-acce-6a936134ebbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4faf46e-c14b-48bf-87dc-875c1ff1db84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7fa352c-950f-4532-90df-a3f1a3e8d392",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca184640-e4c7-4452-b2c1-b177a9af3c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "044d0850-26b0-4df9-b081-ce9577dea601",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3aee3f6-6f78-4fd2-a701-e24ce157e6d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8335d4f-a7a3-48ee-bc3b-45111a073828"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c78fc320-a28a-4a99-afbd-d5202e8ce8f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6584dd0-0f19-4e77-b09e-03d20c0e26bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41e632b6-535a-4149-a484-45bf2ddc9832",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d46cce-85f2-4756-9f31-82e9a4d2b5fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "830a3782-4f40-4f46-9179-ae98418a9f05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c174f96d-1477-40ef-a5c6-31dd7b46dd2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24981696-b3a5-4ae6-a00d-7a04c46e10ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e98cab0-258b-47fe-b5a6-4b231a0146f1",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c84fffa4-de15-47de-a8de-230e4162b83b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2135f7cb-8567-4778-ab99-c5c8cb589f49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bdd5132-0933-4579-8f97-f199dd5b65d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83ffb8fc-a205-4a2c-a2ca-04c1d31154bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e588cac-1fe0-42b6-b8e3-0c0a00507f4f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c0cdb85-2cac-4310-8dcf-033f0833675d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a1330d4-8952-4f4e-9b87-53398328cf7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d295ca-0760-49ea-af16-11ec2036c842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05db3831-4493-460d-a5e4-073e8edf7d20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e2edf7-3943-4c9a-8d54-14fa9b07ac68",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f40f618-ba0c-4b2e-8d2b-a89cebd27971",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e323007c-0c4d-4ff7-83e6-9683cbf94e9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2969a845-7464-4472-8be1-de46091a1a10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83b8844b-7b94-46b6-87f8-401c08d798f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba2b35f-4777-4a99-b363-1eeee7d772c5",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "355f7248-59ff-4735-8808-5c9fa81c5fbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a5d64cd-c59f-4e18-9a48-33e6a9080e32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb5c253-2abf-42b7-ba97-521378ff2baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "216755a5-34e0-4eb6-9649-36b5ad3089e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9726cfe1-50f7-4c02-9399-42269122705f",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb7a5477-a2cb-4eae-8225-08989f0c82b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a10ead17-48ec-457d-ad4f-14503b3cf556"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f962a80-da88-404a-b07c-3811560254bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8afaea13-2f5c-41aa-b861-da0693559276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e1009c-d121-49ef-b741-2b383ca07347",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e9fcfc-b0c4-414f-ae98-d9055214a7f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbd67bd7-19c9-4b02-960f-aee99ab1b306"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c91b94-971e-434a-808a-8be268db4079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "472f17ac-7106-44a4-8c6b-1deb965c0e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe4c787-b468-48cf-8b47-dd03b984680f",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60be800b-d601-4700-82cb-39b7ec8310d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "347e1299-bae1-46fd-9969-dfee266804b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c1ea32-89f0-4344-8d79-1cf1bbbf2fa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0283ad55-9ed2-4ed2-82bf-bef5fb6fec1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59760905-ae03-4e47-b80b-84e8a2fe65a7",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fa50ca2-7186-411f-bff8-888a74d8a435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b5bba40-1bac-4321-a44b-9307dc9af5ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd242a9-63b4-4dce-a868-1b01f987ed05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb3b3b86-647a-4833-886a-10c19917c881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527a4ee6-0e6a-483b-9f7b-ebf7b4eb3573",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab75ea1-016f-4012-ba9a-e116508c22ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3c6faa7-9296-4af1-8f8a-122e99dd9f90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d48072-9c8c-4ba2-a09e-d7cfa83e5b0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfcde36c-fcad-42fe-b3fe-453a52a51c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "683b3ac5-d577-4b52-8a1f-ecb7489673e4",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b162b76e-dae9-4f2a-8ba2-28420cc8ab33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e1df578-801a-44f0-b153-e5fd7d85fc44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b7b1d7f-364b-40b2-9a4c-d819b1773db2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f64ca3cd-db44-4d92-b5f9-015dfb4ee9d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5502d0c-22ba-42ce-b86c-627141febf11",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6df45a-db5c-4b65-acfe-50967e2b1d48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77d7139e-af6e-4a73-8111-433044c80024"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e1aa7c-6814-44ca-bb4e-dd03c64f9045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6189e921-8f71-4e2b-8bf4-bed473c15663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c01ab95-c47b-466d-9935-d7aeca538b3c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d377ea-6294-4a9f-8e80-d0ea69bce095",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d2c5252-a25e-4b73-b212-8cace422a00b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc6a904-d9fe-4b13-b373-234d797d256f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13043f9c-fd8b-423c-9e8e-e049803e536e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d640c830-b33c-420a-847f-0f8a8154ac59",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a23494-1166-42dd-ba88-9b57a15c37bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a253191c-d472-4287-a933-dd9e7659f894"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5064fc5-18e1-43b2-bd15-e8e112b928bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a360eda-d4b0-4b64-bff6-d7b7f37323b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bbd3971-c93d-4518-8423-0a3d39d3c267",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c822316-17cf-4715-b206-4daf16ee33f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6061e626-812d-439a-a475-6098b27cd96e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c3e910-67da-4e7b-bd1b-3c60b7476be4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "847f6dbe-c23c-4112-8840-0eae3e8b8421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52363ac1-ba79-4504-8800-6ad91900e086",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cf36835-459d-42ce-bccd-abbdbafdae60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6cd81bc-ec87-44e0-b384-1e94756801d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8906dae-6376-4a34-8180-ec811ca81c08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91ddb02a-4fdd-4169-9b25-31e83c3da868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cda50cb-d80c-4b50-81d1-cedb612df1fc",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc4c0a0-d001-4b8f-b798-ab671afeff5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b73b2077-2ded-42bb-a50f-a6b8b5ce5d6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d82b28-946f-4439-9322-f1dd24c6eb95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d527e98-cc8a-482e-bdc3-bca4028e7983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b4e3ee-842f-475d-a409-0d93b7238a99",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1be87bfb-6eb7-424f-9a13-fe17a9bf995b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54829f35-acdd-4304-a815-7f02d0c11a35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee0a60e-d6f7-46ae-907c-7451e1689950",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b15e72b4-e0f4-441b-be64-cb0e6077c259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa49a4a-53b5-4a3e-a3f1-202581ae02cb",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ad1958-847e-4959-b906-1e149b5b6969",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6699ffd9-faf6-4267-a10b-9e92b9b2f6b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca07fda-cd70-4b53-b858-0d02d69c4890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8883f91-2668-4ac9-b2f3-edacef156648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845e5311-dbb4-4500-9faf-0c121dc0bbe2",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c30258-489d-4ef4-90ea-730d9037e1d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29061b5f-05da-498f-aa7f-a5380ef9b771"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c80bde-fdf3-45e1-befe-2f9138496d2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b22d1d02-ed1b-44a5-90fd-a2d69c41da67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb966d6b-46bc-4b0a-a907-6030c1034992",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d79c29b4-b58b-4975-a585-c6f8f122d752",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "486b9ba1-a823-4876-8c47-4870dae69523"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c09026a-d6b2-4687-aa90-11f153f8e9c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fd5db9c-f4d3-4a0f-8896-b81a55763b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f18fcfbc-8c89-4f34-815a-292bceea3967",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "809cdf3e-8219-4f60-aa3f-58d5124ab09e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c503525-8042-4c9c-980b-2c61792a3a10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b133b6-f0d8-4aa4-8f81-179148bb987d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ee2809c-c627-43fe-94aa-376bd6672993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa909d82-3ee4-4571-bdb6-75e44a8f9383",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c80e82a-5687-4fd1-a1f6-b128de24c222",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67c0d23d-d90c-478b-b8bf-eef24a34b3b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d0f698-5d3e-46c9-962e-917c5331b86d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6598364-223e-4692-8c3a-38dbed4275eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a925554-cd00-458d-9e2f-f1fc446e71a3",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c93ee887-46c2-4032-85a5-bb2e96adaf33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5c219d7-eb59-4419-94ee-0d58246bb328"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d48dee4-f0fc-4057-9c2a-5ab705fb3a6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58bbd9f2-cf06-4ef1-aa3e-c19de14c6d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a02979-7d1c-4b24-b937-89db482bb0b4",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b49bf3d-8249-4af1-813e-8620aca36c10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34c59472-f0f4-4b4d-9426-9e41ac69266c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01af6f29-2438-4b4d-932c-180ad1206c5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b33d315-eded-42ce-97d8-26d046943a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d5c1d37-883a-4b05-a6f2-832bfdaa719d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9137dbc9-675c-45e0-af71-507018fb7ea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0576e35-a10f-414b-bec8-731e735d3d8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0f00d9-39a8-4088-8b30-7bac8673a7a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b21f885-7a02-4bec-a535-00e858855ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01610f46-f761-4aa7-be98-58147423be12",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a4dd85-c70e-41f7-8b03-fb37fc0bf549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca55de09-3aba-47fd-aa46-f80e6658a7b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d3b054-7268-46af-a608-7b0acdb2e6a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42d7de12-f921-49a4-bef0-57e48a536790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c3dcd98-00de-4527-b776-98f3512b16fe",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c21eacf1-a9c7-499e-987b-38de0b374693",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc4160a6-3e6a-4682-985b-fc95624a5e50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e240e9d5-af1d-4f6b-8bf5-4268985b13d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "456c90cb-4278-49a1-b60f-a8b6c7609f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87ab36f-d641-437c-9d2b-c7ce25d2c39f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9457670-6df5-4703-8e51-0ed8ae6881c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fdf37d6-c56b-490f-91ad-2e0273631cbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f2f36d-1623-4154-a5e9-1ca36aaa32c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24b60d88-7a03-4174-9645-7e4ec4f44a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa237415-99ef-401c-90d8-6c558e9e1924",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc08d848-79ba-453a-89d2-8eb432696f0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "293949fe-217d-4196-8f07-545dd72c3957"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "238ec9d5-420b-40f6-9078-1e593c848ca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53b4488c-7219-4dbb-aac8-212b645986b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ac5882-308f-4f72-80f3-dbfdd1833a1f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed7554d-705e-484a-9b9d-4be0919bb08a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dfc2d1d-c393-4983-ad09-f2981d153af5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c0b3a53-b18c-4bfb-b8f8-022817046e50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e1bbb9d-739c-4f18-a329-b648ffde5a9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e022fbf4-f90b-4ac6-9a8f-1a2789004a7e",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1123238-4991-4af0-a6d9-6057234fd4b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05f832c3-096a-48e3-ad99-2d1394274091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bbe51fd-f136-404d-bdc3-d6875c2c0268",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99953ddf-40ee-4255-985e-1a49dbf12b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "449c7879-2e73-4bc0-953f-ffdd60fe86c8",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f5da229-b92f-4ec5-a452-5b4737e6b240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "551f6ed5-1200-4c71-9026-d82026d34130"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fb1b5ce-4264-47f2-9ada-da6b0a2f85c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20d92266-2b7d-4ae6-bb4e-a0afad0b0ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "111d04c3-91cf-4770-873b-afc57f5869c6",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d5f73d4-37f5-4323-9fce-9b83c69897f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cbc316f-eec4-4656-875e-fabb1bcebb37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc3bc7b-2990-4bd4-9ebc-3dcdc5c0985e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "319a5610-7f26-4c97-bd70-5c6adc8d16ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67c6532c-92a3-4c61-94f6-1d8d59fc0bfd",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bffe0a4e-a549-4c9d-b13f-2acf44883965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8358cef5-ce13-44ad-a074-f7e8cbbe84f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "128f3564-985d-4c9f-811f-4e87c50f8c8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7f23c66-025a-49f7-9a18-7a26603fe38d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e8c5eed-4810-4738-bb11-d8cd96b9d3e4",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50136b09-ea38-4f30-a0f6-83aede7a2651",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bce08270-33b2-42ad-9cc3-a2f180e7344f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc8c150-1c98-43ed-860b-2edcbf293ff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f71c99d5-0021-4046-8cea-6867484cb60c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45446899-c605-4dcf-915a-dae996dd1972",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f1bcda-32a5-454a-93fb-c51c793853c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a43668-02af-4f2c-afb5-b8b4d028514a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b674a7b1-e802-4b4c-b121-24beb0f9bae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "394ba332-ac29-4643-a03e-e4ffddcc6eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0780fd7f-9b9e-49c1-86a5-e1cad8f50101",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7591a09-8f94-4ac9-b5f0-5dfb770fc1af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41e2b828-0d90-4316-a93b-be56b2a4b67e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b9f4fff-fe2d-4ce5-9ad3-88a93f58028a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "662bfd09-93ec-4310-9a95-ca73e0e5b9dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a8ea157-c5fa-4e29-9060-c95930cd9d8c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4965d3f3-b66f-4a08-a837-1164e78ded5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57aa3297-ff24-4ddb-8322-7d7bbcff54b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd4f286-4d2a-4749-bd9f-9163885a8f70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6de2e011-52e9-4484-84cc-f60d504dfdd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd445015-b750-4b5a-9d11-b06f79b0a823",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f0fb52-2b2e-4796-aac1-df7285fb4329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c1000f8-7afa-4069-9753-d33e3761180e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "565595c1-7ad8-4710-a8e1-586320a1f303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c4af760-6cae-409e-94b3-6c95a505d924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e07e614f-ca76-468c-8268-73a34532db50",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cdaa133-257f-48e2-be28-5fe6548192b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6129c79-896b-4f00-b8c7-d8694bd6d3d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31275e4c-5873-4763-b83c-8f9e8914258c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "567900dd-910c-475f-b0eb-04b48b38778b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a248b5a5-2677-40e6-9bc1-b2774b363707",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c2bf79f-47ee-4720-98ae-0e0c95db3626",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51c80fc2-5559-4254-9991-bc901d136cc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9df6e8d-b7ce-42e8-bb55-940e6bfcbd8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d98778c-c072-4ecf-bb86-5840eb81a076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8d051e-eb91-46bf-9214-2c81d36ff60d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e6e294-efab-4a41-baeb-c5e6586b686c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b6e2eec-1c10-4eec-9806-ba5e3dcc2a37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a31e509-4f1d-45f3-ac1d-5b381f522561",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d02d2a7c-244c-40a5-8424-99a41ede5b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f39219-53e6-485f-b5a2-4dc58a85f9c4",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d2a091-5a81-4aed-b971-f344af974a79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57e53a93-61c3-444a-8920-e0a4d1f8396a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "395dd0f1-e897-4dc1-96fc-6408c35c18fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16a46832-66e4-4f6e-bc28-a3998bdcb8de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edaa1f7d-d73a-4d04-83a6-168df2ea4632",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "051a9d66-3a91-49e7-b78f-8de4b1500486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a781b48-5e64-4eb5-83c1-d81f1d186be4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "428757f5-8e34-4969-af15-85843609ab4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efd339a9-385d-40bc-bbea-76bbaed5b39f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20bed2ba-64a8-4461-ba35-f118f8373913",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21351f62-e8fb-44ca-9489-feaa465c1f6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "399a147b-5400-4164-b63c-a97ae0994a44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5cd25dc-3f84-461d-a610-8a662f686f06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2abfbb11-2b94-4a77-95c2-70dfd249fba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b60b9c5-2215-4378-957f-2cf61893ccd9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3066cfef-a0e8-4290-a6b8-ce79c87235c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acc775c7-d82c-413c-978c-55d6ea644064"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df237f61-10b2-4d04-a0c2-c3cad6ccacc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9df838f-53fb-4c6e-862b-e0124bc577de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e40726-f38a-45ce-b7ab-7e6b2fc94123",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f010826c-ea08-490f-887f-02b4845a7b48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a40c29d-c817-4770-9d3b-0ad8f6612528"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3535b27-9898-47c4-bdc0-02ac75cb0e9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb25b6a9-a145-454b-b157-c178edd05acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f283e8de-b81e-4889-81c4-acda2ec88380",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d93d76bc-c4ed-49d5-879c-4d5f41c18851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44826b12-f0a8-4221-83b9-223bbbe90313"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a816c796-2bc1-4a5c-9cdd-7b137c20abea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58978e03-1c79-41f8-b884-80512e3afbce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf31c1d-51c8-470e-b033-b8e19d565e4c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d07f75-b48b-45bb-b163-becfffbfcc6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c4efd85-9865-43a3-93f3-c191ce2f15cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a9986d-5c78-4a54-bf4f-279dd96ce52c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2de3cb89-5cde-4280-b0e0-d4a5e72fcbb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0763855e-8c06-4b02-a8c6-20c826a1475d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e7e29fb-e7f1-418d-8e50-a7b74cb29d23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59fcd722-b7ed-467d-866b-4a24aa33b811"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1905648c-2ecb-445a-bde3-ae96b783f267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a65344d9-42c4-44ae-ad79-a762a444b163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db56e30-7644-4959-8d1d-25f49e65b0cd",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc52ae2c-c489-4eb6-9f2e-97ad44a2b3d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76a81e04-18b4-4409-9a7b-3500d07cbdc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96882cfa-67c4-4c0d-af40-97c3abcc717a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c8fc7e8-441e-4291-8cd4-1272b8fbee18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adfe8b66-24a3-423f-baa9-bc86505c7440",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe2bc413-cfb6-4e50-a566-f7cb540a3716",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3873c775-a577-483e-9736-528ab7ae293e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8fe5ddc-84ee-4620-b84d-85e963bfc21a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d14b22e3-c327-499a-9544-e2105177cc61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e07883-d69f-4a7c-b2dd-98ad6003d0b6",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e88840fd-e154-47be-abaf-c776b996813a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d4cc1e4-e1bc-4ff0-8b6d-07ed6b027094"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4888e2a0-466e-4476-8598-9c32d6dd1cd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94b06974-f1fe-4def-8c72-9b08b06d5079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92888f84-6f7b-4193-b285-ffcab8c803cd",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e18253-8e1d-4e54-aa2c-12419f209fcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98caa502-5c40-4074-9c53-b06e010f3567"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6558ecbd-860a-45b7-82fc-1892338550f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dca40426-a32a-49cc-b864-f71b6cfaf4e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21005e6b-5c4c-4bc3-8410-3887462d8abc",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a0ac8ee-8ee9-4914-b7a7-450d1bb9f018",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "687549f4-2b26-4621-b2a8-14111341ae00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da68378e-8f5b-48a6-a3fe-3209dbb0cdeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38e7989c-1986-485d-96e1-6005ef24dc03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb2dd436-7dbd-4772-b35d-10f7846b510f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b37297-8292-40d9-9733-364af0e0d627",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4de5032-30b5-4c7e-ba48-47ff116cca77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c40f26-358a-458b-9e53-0c91e81e8400",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7159753e-64bf-4246-88fb-d8ecb358a30d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7ac6123-61a1-4c78-b263-0d401064635e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f09451a4-101d-4f6b-86e5-218e19b9c0f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df91c59b-b3f4-422b-809c-f0ce4bf32bc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c892ea3b-20ee-4ae6-b6f5-53d5c869a035",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86d85afe-4f9f-4775-8095-6450b16d52aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3eafbb4-a51e-4c99-8002-b98873e0f10b",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e78e1f-da1a-474d-84e6-780f4ae27925",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19d27c4d-dcf5-491a-a118-d13bb43175b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0310e4d3-0837-4955-9ac2-7a30496f916d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdd4598b-88f2-4724-8d50-21990f6b0a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c7949fa-47a4-4393-ad88-783b30426261",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d34253e-ae66-4295-b72b-337cb7c65e7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3279db8-e3aa-44db-952f-0b94ef2ae829"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9325ab75-7f35-4762-b20d-9a7111ca077a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e13ad483-081b-4b34-a9bf-0958693083fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56353ee-729a-4eeb-8d31-c2f22b3bbf78",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b12c3e-e0e4-42a9-9fad-e6c75ccdf95b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2f12370-b298-4a36-814a-618ebf2fbf83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5451e98-e0cb-46df-be86-d8df7e104221",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cfc8a00-3c5c-46f4-a6b1-c4ab87489ec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35d7dac-1fa3-413d-aef8-51ead4cea267",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d46ee295-cd5e-424c-9cb0-ab0335acf7c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f98afce-10a0-442d-b36e-a9cdbe0b82c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffd41d81-a84a-4a01-a6d9-7f091c52d123",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19f66e55-3585-427a-b4e5-083fc7358d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b52a2853-5915-4684-bf93-f6d154ce0d1a",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fadd96d5-a482-41cc-9eb0-537bc50bde29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00eedef8-78a8-40e5-a39a-7b439ef2640e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8edb048f-8349-4513-8c27-f7f4c136ae1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a62ffef-21d1-47d0-becf-fba16cc77dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc40af7-410b-4a7b-8d92-7efd2193a0b4",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be97f91-15a6-4fa6-8af8-87fa185eb3c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "987946db-a7d6-4338-a543-32a0ce3a07b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd87f3ac-be0a-4a32-aca9-ab424abfd72b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b801046f-5091-429d-8ff4-db7184578bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b3bc84e-0aff-4ad4-9489-57310a85c33f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73118e43-8aa0-4873-8cc3-8e2deb654b5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87c258c9-67dd-4f47-8a6a-ef4a86901e21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb03005-92b7-408c-ab81-9f928469de3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93932206-caf2-46b4-87c0-3701f56282fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3654e4bd-1bc1-4918-9920-ef305534220f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fb36c34-4c58-4f61-8a1b-53932d8f9770",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4339278c-3555-42cd-b343-f5ea14f07da2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "707e7ce3-4d71-456e-bb57-cb965171119a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9296b4a1-95b0-4594-b139-f61d6362364d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "622a735c-a46a-4e35-8df8-acad5768cd92",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec11bf6-745a-4ce7-9d62-bd09220bb56f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a557bd3-9411-4cc4-9ce0-26d0c1d6ac5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1224caf6-7836-4f20-bc54-9eb22c62a4fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "325baa3e-ba32-46f4-b9d5-f412ab8fbb34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff82ee77-50fa-4377-85f9-c7c6c5c57fc2",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31362402-b8d4-4485-8670-570983e9330a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdf8d31b-63a7-48e0-b944-e790f6857242"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cacd241-e1e7-4a2b-8291-721d076c5391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8868d515-0a49-40ad-b588-397b0b035721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df77300a-409a-4005-af45-42e2875ba5fa",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17193ba9-3dc5-49c0-a642-24de39746159",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1b62a72-d4d8-4c20-aa78-6206df1731f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc2f287-f9a6-41cd-9991-ddbc1e4e1390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d80d5cf-8a33-4483-9fd6-255aa8b11ed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f41c458e-0e8c-47b1-963d-cb303046392a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "540ea188-118d-443d-9731-6112362ecd1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70730877-26d4-420b-bcf7-a38dfbca0f83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9686567c-e326-4828-8b50-4754ae45267c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7c47963-de2b-4319-a999-7f59a9f38288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad2c356-df1e-4725-aa2d-77798fe258dd",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29dfc6b-ac37-426f-866a-c3d14a89fff9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67b72975-267f-4142-8cee-ac4d7257e50a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab5ec74-1232-4690-bfb1-bd203cf0db05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "634d69f0-9674-40f4-b0ae-f8814e5d6b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c1829f-0473-4368-b5d8-0c43a2be77f6",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0502e24-3117-487d-aabe-54f4c44bb5b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0b61af5-ecc1-4ff0-a17f-c317d62dd4ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9098e9b8-7ae0-4ad5-a3e8-f2ac6fe2f311",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1913f6a2-a811-405b-85c6-f567b9022aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7523c217-1718-4316-ac10-8d47b11179b5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6524449-94b6-4bbb-96fc-c013962ca867",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb289cc4-71c2-4298-9101-10c409eae502"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f9b0e4a-7b5d-4b3f-ba00-dcb281821fef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81497a39-4349-4854-bd61-4b6bb3018ecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "063c1e3b-d864-4605-9418-6343d2b97c52",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9441a91-a141-49ef-9c51-e09d789c24ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06d42d30-8b9f-4924-a60c-ed86f6b97f71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e659d7-2711-416f-817f-be91c787b402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d1c6312-5fcc-4e43-8035-1fd1277d5f02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e216a142-444f-410c-b42b-c7d9fff7c99b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c094547f-0372-4367-9112-6e4e3c975aa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23965bc3-784f-4eeb-b940-b63a33798f68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b30f7d-0f5c-4570-b008-84efbe749bdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73880ddb-6dae-4ce5-bd73-35f0bf88ffb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8bd18cd-e350-4238-956a-b27bd18e7aef",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f2b2d8a-13ba-4f59-b6b1-3c9af581a73d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "882e68be-3ab6-49f7-979f-0a37fa45a7d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a74519-d9a3-4b14-9112-3d156e82498d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1b69b9d-2744-4635-9894-79adff3216bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a3742b-8f68-464c-81b0-09f5a695739e",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "176bde92-400c-4f4f-93d3-6ad4bef5327f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "882fe984-77c7-4c35-a7d3-634f7a8301f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3bfae95-f313-43e6-83ec-bce4dc2b45d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b16998e8-8b1a-44b8-9a94-7cc2e86fbd29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5f0588-7544-4d14-ba74-9c23d7e517b8",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec82a579-90e5-405a-b4c1-932065f3543f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3715569-ee51-446f-932a-e338e8ff3cc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cae055c-f2f9-42a6-919d-1cb203ecc6f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d00d494-af46-4161-9417-33871efd7377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0452e22-e0ed-48b7-baa7-44b508123c75",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef10732-da76-4d6d-96b5-ed572da66b9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f24f82e-3045-4c19-9361-a91d3cb9e9a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "932c36f3-0b22-4d2c-aafb-9bbf53d052b4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c2a1649-aa7c-4e29-aa7d-960da0e2cc2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f599d1b-e56f-493c-b244-4b6ef95ca117",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba7793b7-e8c7-4c14-bb5f-31218dcefdf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f55a71b3-8e79-47c2-8e29-ace836c73262"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1120c68-e403-430d-9e31-d91a51e1d08e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29382599-b7da-4cc6-aa60-148bbe482c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58e5b87-a15c-48bf-8668-61dec1d6a61f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887d818b-5bc9-4fa1-a4f6-00cc7fc517b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f2f4236-45d5-4f97-823f-7f04fe11e1f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b65fe4a9-68e9-471a-8bc6-3df1dbb56f1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edef234a-93f0-475d-94e2-ae984591f28b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca56f33f-118a-43bc-a3e7-77f672a246e0",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c25af9-f932-40c8-9db6-0b6857e439ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f53ecc49-feb6-4426-af44-9eea30cab42c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc8cabe-1b71-4feb-9994-c36a25813d19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cce746da-cc8e-417b-99d8-7c53f07683d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a8ec0a-aec3-4c93-b726-1936c292b871",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72fa2ebf-80cb-4fd4-ae66-026e897764d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e38e593-fbdd-49f7-af8f-31b4f7a5682e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14bb7b65-c282-4d66-9f10-039cf86ded63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae1bfeba-4cf1-4c11-ae3e-9cc9063eadda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b7d7a5e-b899-46ac-8a78-3b464b462f16",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9611f8de-4b9e-47df-91c1-b6ee78b4f718",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98303e80-f659-4670-9a24-f2d910dc25bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d89b129-ca48-4dd5-83a1-6993ad437207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6fdb52f-4f97-4a25-ac66-e9344d831c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0054947c-2829-45f1-86c7-22308e298050",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a6a282-a81a-4caa-a4e4-0f24c35eb4de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a71fc4c-c404-42a9-85d8-79f53502d511"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab82fa54-5bcb-4178-8807-130b83b2636a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e711b66-3fc9-48fb-bd5d-a0fbf8dcf558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10af1279-ef0b-4997-9719-a93c8986cd3b",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ffe5284-2008-45d2-821f-838a3ed1aa3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d0f20b2-9031-433d-9e26-389af5601b9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c607a3f-aa27-4842-a7ff-d12e3327af3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0268632-5a34-4fc4-95e8-298f1e4b0f6f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa1e45bf-c1ff-4cac-a238-9f2950277f34",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "561461b9-2d84-45ce-875c-99bd4abf7b3a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c00d2764-7b61-428d-b84e-b571e759563d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7cb69f0c-886b-4b99-a207-66dc14592981"
                    }
                  }
                ]
              },
              {
                "id": "720a4e30-0c59-4df3-b2bf-37674f28c5b3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8cdf8241-51d5-44a6-8b3e-e42bdff56f33",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6b707b-9c7a-4102-9d68-f2a44d2d2df1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "cc34263d-f623-44ba-920f-11b1c3ff2fe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95564e51-6ab0-44fe-9255-3082710d98ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "92bce3a7-b548-48b3-8eda-52d82f5bb533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32af18dc-4233-4bf5-9b1e-4ba78582c345",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "605a6e33-a1af-4700-b8e1-a9e7e48c3f85",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7e5f603b-7564-43f1-8554-57c010a00982"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dccdc6a-5b3c-4e9a-982e-24f6e658dcf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0592bfdc-c8e1-4f7d-9312-58f3f08bea94"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c56014f2-36e9-4206-9f65-6e43f9605b71",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3edbabd6-fae1-42b2-b939-b3ccf83e37d2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "19722611-cc71-49f3-9ae2-bda7e49b9063",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a4fc8bc3-2397-48b3-9489-6d209ff92fa6"
                    }
                  }
                ]
              },
              {
                "id": "99b4710e-fc6b-446f-a910-52ef21b8ac52",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "3015864c-fa03-4049-8982-3f2669b73b53",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "add9f9bd-d703-4e8c-b814-d5700bb1402e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "7b137398-df2d-4042-abe5-5c75c4440cd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce40fba-cc33-4791-a2ca-e5ca5fc9c4eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59335ea2-b107-4140-b4a8-8a468134a997"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c0a1f01e-0c6d-4ece-9ae0-0a8cf73ad156",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fda60a8d-d17f-4fbb-8956-c1c03da6baf1",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c294cef0-ca62-42d5-9ee6-bf9d6c8de834",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "26f4b43b-0c6a-4992-abcb-2264900bd343"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9efbc1a4-62d7-4d97-9d62-6e3c870b4a41",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c08dec3a-808c-4ad1-a69d-31e93ae78eb4"
                    }
                  }
                ]
              },
              {
                "id": "5c4573f7-99e8-4700-8bb2-73f0a6c0d7b7",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d94c5a6-0f8a-450c-8824-aa3e6eb428e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0b70b94a-bbf2-41af-8fc9-ff6ffe09c96e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d5bd1db-025f-4464-92c3-d576d0e3e1e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28f8da39-c8a4-4185-bd12-aaca22f19d68"
                    }
                  }
                ]
              },
              {
                "id": "c87c591c-6ee7-433a-bd58-f998bc64040d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f9dd125-1bdb-4def-ad04-2a73bc51ff9c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "54ab3d6d-93d9-4cf7-a8b9-fc3c7bcfb241"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "902c9b3f-2674-4ba7-ba39-94cafaa9355b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4bfc34b0-1181-44a9-92e7-3bf73f2799db"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e7d697e9-c80a-4379-9174-0bd995c26d01",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "64671e11-5836-4e8d-bc8a-24eb8bd2b85f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0232e4a6-bbd0-4c77-82c5-2aa6ddb13b5f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7b82d232-7d50-4e04-abcf-427e205bd68d"
            }
          }
        ]
      },
      {
        "id": "b74ec90b-fbcb-4a19-a190-616feec8158c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "65b7ede5-2088-4462-8ad8-93abb8b30237",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0ccbc603-165a-4dcb-92bc-46bc22b4281a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d9d6365b-34d2-4732-a9e2-4ab2352f5574",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c2a88b-d3f8-4c66-a924-dec0922f8be6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "41d0edde-53b0-4a89-b737-f7b44425f180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33513fd0-ba18-4474-acc9-c1a137d2d237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "273ddbf8-2036-4a1f-8e98-d2afdc5ac357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d79402-cd5c-4c13-996e-ed79e865d859",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a93f1c-7e73-44cc-a86d-33ef422be445",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d974ea07-dc71-476d-a471-eb9976c0bde2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c70f642-9807-43bf-a0bc-01da5f3598aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7adb088b-4df5-480d-9e10-bf5ace7ecbad"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "94e449f7-c9f0-4a34-aaa8-83a4a459d036",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f69a8323-e52f-4aec-aefb-9e7ebfb1322e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "24a92bcd-6640-487a-830d-337b3b7ab90e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3635a13f-9d74-4823-93c0-4585938a27f7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7949ad50-a716-40b4-92d8-4ae11054288f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fb95c2af-dbd1-4344-bb9e-f0c78563bf41"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ccb45f1d-bbc9-4f3d-afcf-cb4bf06f02ed",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bda3621a-b6e2-48fb-9bb1-ece1ef839250"
            }
          }
        ]
      },
      {
        "id": "00d65682-94b2-4b21-b01b-b6ce7ff4f75d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "004628f6-53f6-49ec-8732-22b3bb332bfb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "48d5f02d-f182-4922-91eb-48c5168e331e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4f4691f5-cde6-4532-8321-6f80ea9f5436",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f65deb-575c-4596-97dd-3733e51159ca",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3ef5cbbd-c453-4042-a242-0466027d5e05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b301051-700a-46d4-875b-49f727ed9b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc8fac6e-2f2f-480b-809e-5a7b8fe0d4a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fcd1442-d57b-4a84-8f1a-b20acf555b39",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a0c7e8-fd09-412d-a0a1-7e2aaaff5e3a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e23bafc7-dbeb-4f6b-aeab-85f05a82e43b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05422c73-3d3b-4b99-9147-68eca0c0a63e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e62a12af-357e-4eb5-b876-6116a23d1749"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a6a9815-060e-4151-93d2-0a92f70c6021",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "509e99af-5394-48ea-bd00-821ed4493351"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a70d8b5d-45f2-42be-ba74-94f68b4438fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e285642-794f-43e8-b9a3-50dd46a8d75d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9e7544a8-eb02-42a3-a6b1-4b7d4af3163e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "43790d39-6d73-4601-99b8-6bd1634dc8f7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "13fedf75-c5fa-4bd8-a24a-e000aecc73f6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "53d0b56f-56cf-4f72-9554-be2bf27c6611"
            }
          }
        ]
      },
      {
        "id": "b4d1e628-f244-40b1-a4d8-6c89bfdda185",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8f51adda-1d29-4076-93ac-dc05ee54d1db",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2f9b6f09-5009-4881-90bc-ec6123e195f7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eb02af11-58e9-47d4-a4a7-93d1b78b52a5",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d303b0a0-802e-4337-96f4-5159adae45b6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "01b10609-e1e4-4a35-8a64-b4135b373ee0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7671e5a3-a1b6-4120-aaf8-f71e7fea0042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5289870f-d63a-4f59-a125-931edfa9eaac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a459165-6e62-459e-874a-9ce1bd2529f2",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32cc7862-cc1b-4bc0-aff7-c9dbf566c7c4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2bffd845-cd1d-4578-9155-bd3b618668e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f178fcb-3f67-4fda-bf9e-a48d19c88cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "35d39be8-a904-4015-ba6e-c4c1f06c1812"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5eb579da-2757-4cec-887e-44db2d2b1c87",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a62b681-04db-46d5-94f8-4fa06a479100"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6927fa98-038b-4693-b43f-c48c260da305",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5143ec6-95ea-4438-b0f7-68a5dcd21952"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed8306ee-0728-49d1-8287-52de0225b453",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "10cb995b-c9ff-48c9-a9c2-94a3b9720a49"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f019a43-aed7-436c-bfa9-b91f32ab4976",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b96332f2-c991-4a06-9660-78a667d73321"
            }
          }
        ]
      },
      {
        "id": "6095632e-57f1-4cb4-be90-5db830e1e7da",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5285bf48-ad29-4a5d-9f8d-f30972284dd7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "109e6e1c-5eb0-4af1-bde2-32f360dfc78d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "5d125b99-0acd-4655-98c7-26f5d3779e0b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9b044a5f-6e1f-4918-ba92-c2d86684d927",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2bb39049-baeb-4272-a29e-fcfa519a4912",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 61.3793103448276,
      "responseMin": 4,
      "responseMax": 704,
      "responseSd": 109.98299151465595,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1670200672204,
      "completed": 1670200698861
    },
    "executions": [
      {
        "id": "9930aea1-a1f3-497d-8379-8c841de79752",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f58f8fce-fef4-4706-a950-677a9785164a",
          "httpRequestId": "b6295183-b26d-404e-9e8d-9700cedb6a3c"
        },
        "item": {
          "id": "9930aea1-a1f3-497d-8379-8c841de79752",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9af5afe8-131b-4544-9ae5-3706bb8c7bf3",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 0
        }
      },
      {
        "id": "227faa78-52fb-4d9a-8731-d06955faba24",
        "cursor": {
          "ref": "5192aa45-83fc-48cb-a745-ac457d0119fe",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7a1af30e-e460-4f2e-916e-92ef0ddb1dca"
        },
        "item": {
          "id": "227faa78-52fb-4d9a-8731-d06955faba24",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "918c2710-4b4c-49d8-ba66-0a8c509241d4",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 0
        }
      },
      {
        "id": "477ca508-eacc-41cf-84a5-24fb98d1e97c",
        "cursor": {
          "ref": "ed0995aa-2d74-43ca-8012-33686c3a92c5",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cadef187-b196-4bf4-810c-f54d5723edb9"
        },
        "item": {
          "id": "477ca508-eacc-41cf-84a5-24fb98d1e97c",
          "name": "did_json"
        },
        "response": {
          "id": "24c8c83e-8925-4e40-aba6-e6ab979b65a6",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8840e2a6-ffc7-4b35-89d2-4a4a66fa11bf",
        "cursor": {
          "ref": "d6f37b71-17ff-4209-8a17-1d94efa907fc",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e2da78cd-80c2-4794-9b5d-88156cec7541"
        },
        "item": {
          "id": "8840e2a6-ffc7-4b35-89d2-4a4a66fa11bf",
          "name": "did:invalid"
        },
        "response": {
          "id": "a8021703-7398-4500-ba62-f42d2322b3cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8840e2a6-ffc7-4b35-89d2-4a4a66fa11bf",
        "cursor": {
          "ref": "d6f37b71-17ff-4209-8a17-1d94efa907fc",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e2da78cd-80c2-4794-9b5d-88156cec7541"
        },
        "item": {
          "id": "8840e2a6-ffc7-4b35-89d2-4a4a66fa11bf",
          "name": "did:invalid"
        },
        "response": {
          "id": "a8021703-7398-4500-ba62-f42d2322b3cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59fc738b-7678-4008-ba47-01760e46a463",
        "cursor": {
          "ref": "d1534e30-7513-4402-b8c1-644a30da8894",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9186b5bf-23d2-443f-8767-928419466bc1"
        },
        "item": {
          "id": "59fc738b-7678-4008-ba47-01760e46a463",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f9b3f768-f032-48b5-abc4-41b93a832395",
          "status": "Not Found",
          "code": 404,
          "responseTime": 155,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33419a97-1609-448a-851e-aaf7545f53ca",
        "cursor": {
          "ref": "b6e483ab-32fd-4149-a3ff-dad8614078d9",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "cf8d6f67-0e0f-4680-a57a-05d55344fcfc"
        },
        "item": {
          "id": "33419a97-1609-448a-851e-aaf7545f53ca",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a9123ef9-4708-45a3-a290-4d0477587f07",
          "status": "Not Found",
          "code": 404,
          "responseTime": 6,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53fe9453-9cf1-45be-ada0-d85d816f808b",
        "cursor": {
          "ref": "0ccc5d52-4004-414b-99dd-dcc52a67e7b6",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d397b90f-a9ca-4f3f-aac9-f6cec2343964"
        },
        "item": {
          "id": "53fe9453-9cf1-45be-ada0-d85d816f808b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f6fe4357-7f81-4ca1-8fc0-9e53a577d335",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1188d01-b097-4567-b05a-ef1987e0c70f",
        "cursor": {
          "ref": "bc0b6bc9-0fdf-4350-9f52-5a7f0281ddb8",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cc7e00fc-e84e-4f57-9bc0-4d01e3914e76"
        },
        "item": {
          "id": "a1188d01-b097-4567-b05a-ef1987e0c70f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b15d3dbe-2975-4dd3-837d-df0f1e1ebb03",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1188d01-b097-4567-b05a-ef1987e0c70f",
        "cursor": {
          "ref": "bc0b6bc9-0fdf-4350-9f52-5a7f0281ddb8",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cc7e00fc-e84e-4f57-9bc0-4d01e3914e76"
        },
        "item": {
          "id": "a1188d01-b097-4567-b05a-ef1987e0c70f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b15d3dbe-2975-4dd3-837d-df0f1e1ebb03",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35c79c1b-b6d6-4886-bf24-6ad774c82998",
        "cursor": {
          "ref": "a497837b-5806-47e4-accc-b0c219bcfef0",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0248bc45-b430-4ad6-b378-20b0b272c2d3"
        },
        "item": {
          "id": "35c79c1b-b6d6-4886-bf24-6ad774c82998",
          "name": "identifiers"
        },
        "response": {
          "id": "09355a89-ff7e-4f24-bee1-abc20d473691",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0c7622-2987-4320-a205-ecd4f8470654",
        "cursor": {
          "ref": "838600d7-7448-421d-9a1a-5caec877f993",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "86f87cb0-3472-4b3f-a264-3432c56da384"
        },
        "item": {
          "id": "7d0c7622-2987-4320-a205-ecd4f8470654",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4bd7729e-a6ea-460d-a5c4-f39042fb4ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0c7622-2987-4320-a205-ecd4f8470654",
        "cursor": {
          "ref": "838600d7-7448-421d-9a1a-5caec877f993",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "86f87cb0-3472-4b3f-a264-3432c56da384"
        },
        "item": {
          "id": "7d0c7622-2987-4320-a205-ecd4f8470654",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4bd7729e-a6ea-460d-a5c4-f39042fb4ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2bae66c-11be-4ba2-8090-76eb3231b64c",
        "cursor": {
          "ref": "0f0c637f-9b87-493e-9c2b-1957b621448f",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "42c06080-a443-4773-903a-33ff15c06069"
        },
        "item": {
          "id": "c2bae66c-11be-4ba2-8090-76eb3231b64c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "66c952c3-0f24-46af-86fc-4f0ee82cfb25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b21d3ff-9582-4c4b-984b-de7e739c2c75",
        "cursor": {
          "ref": "3b13ab42-4def-4ab4-b99b-1da25683be65",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6288075c-5b36-4b0e-97e5-d7e43e74518f"
        },
        "item": {
          "id": "9b21d3ff-9582-4c4b-984b-de7e739c2c75",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "de07f20c-b59a-4c6f-9abb-3bd714aaf5d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a6f3c7e-aee0-47dc-b588-1cbe9f480d40",
        "cursor": {
          "ref": "c66f2284-64da-4bc6-818b-a7e81a89cc07",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "0bb7e06b-845e-4397-aee5-914eca650d63"
        },
        "item": {
          "id": "9a6f3c7e-aee0-47dc-b588-1cbe9f480d40",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2fb257d9-9527-47fb-95a2-2a0ba3dd8aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e78a724c-5229-4e91-a0f1-29f39386de9f",
        "cursor": {
          "ref": "4c02ecef-09a3-444b-b4e9-4cfe5e7507be",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a091774d-b017-42d6-af3b-64988fcc0303"
        },
        "item": {
          "id": "e78a724c-5229-4e91-a0f1-29f39386de9f",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "9f45288e-6200-4e66-8c00-309b903154cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "001f83f3-457b-4103-9798-cfaa15e4d151",
        "cursor": {
          "ref": "db997d52-c0bb-4b0c-9060-2af40ff8c5a7",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5b002f1d-aede-4210-b99b-6d49459c00b6"
        },
        "item": {
          "id": "001f83f3-457b-4103-9798-cfaa15e4d151",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "87323870-21e5-459c-b3e4-c3fd04229efb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "facc3a2b-ad4d-446d-ae86-6a667f239b2b",
        "cursor": {
          "ref": "a53edf26-f6d3-4329-a5bb-3914a4bf7d79",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5f346d08-7a32-476e-b72b-a9e1feb9748b"
        },
        "item": {
          "id": "facc3a2b-ad4d-446d-ae86-6a667f239b2b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2f192d54-20ba-41be-9de2-67e8d2db0c80",
          "status": "Created",
          "code": 201,
          "responseTime": 445,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "0bcfc41a-39e7-4cbf-94b5-164d33a6cf9c",
        "cursor": {
          "ref": "43f01397-1a28-418d-9b67-b999b232eeae",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b0fcd699-e6a8-46bc-9b1b-8c545811ff67"
        },
        "item": {
          "id": "0bcfc41a-39e7-4cbf-94b5-164d33a6cf9c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8c03d776-4812-4059-8e75-31fad77248b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07137def-70c3-49e1-a4af-339189360f2b",
        "cursor": {
          "ref": "8f823fb2-edaf-425f-9bd0-535078e9e4ba",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f7dc3907-5a59-4a30-8a0e-28c7cfd1c651"
        },
        "item": {
          "id": "07137def-70c3-49e1-a4af-339189360f2b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f22c5048-5aa7-4ad9-bccc-73cacbc90654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "548265c1-42c7-43ea-a7e1-61e938302bc5",
        "cursor": {
          "ref": "3a6920b2-ba5b-4394-8a65-f52b7daaf5b0",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "44a2aacf-5396-4ef1-b0e7-3425e37ea07c"
        },
        "item": {
          "id": "548265c1-42c7-43ea-a7e1-61e938302bc5",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d7cd5603-26f8-4e1b-ad3a-d1725a21a4e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0362ff8-eb9a-44a7-93cc-7b26b5aec601",
        "cursor": {
          "ref": "24c97d9a-33c7-45e4-b329-196ec03674f0",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0518199f-632d-4fd1-a2b1-41a8079a0e01"
        },
        "item": {
          "id": "d0362ff8-eb9a-44a7-93cc-7b26b5aec601",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "2c74f20a-c6f6-452d-81f0-57d31c98a121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c08dca83-73a8-4272-bc32-c2f281042381",
        "cursor": {
          "ref": "aa7db92a-2eda-4231-88dc-ee08b21b711c",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3a419f0a-a1cf-489f-a9a1-9d45a99f3408"
        },
        "item": {
          "id": "c08dca83-73a8-4272-bc32-c2f281042381",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f2fb9845-ed8f-4f3a-ad6b-06db3beae62a",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "1fb66769-4792-48bd-9d6b-d5dbc8ff7822",
        "cursor": {
          "ref": "d7a0a918-18fa-4c85-8eec-34f85dd1051b",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3f1b682d-f35c-455a-b275-6a048e2fe2a5"
        },
        "item": {
          "id": "1fb66769-4792-48bd-9d6b-d5dbc8ff7822",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "68a0b194-783a-44f9-b012-7ceb0657e701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd1a853-0ae8-44b1-a02c-8e9f1c2d0275",
        "cursor": {
          "ref": "31eff5d7-00e4-4d22-918d-596962863187",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8b3531fa-2ad1-4292-b3f7-ddf50386d242"
        },
        "item": {
          "id": "4cd1a853-0ae8-44b1-a02c-8e9f1c2d0275",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b2c3688d-e08a-42ca-8251-d9534ea47f02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b1f640-1f3d-44e5-8f36-58389e67edd0",
        "cursor": {
          "ref": "86011cb9-d739-4bfe-ac80-fb0fd9fc1cb3",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "30ac5f3d-5132-48d0-a134-a45421ad54eb"
        },
        "item": {
          "id": "30b1f640-1f3d-44e5-8f36-58389e67edd0",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6e52382c-4cc9-4365-a606-8a5c65412a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b87016c-aff1-434b-9fb1-2b0f017a49ef",
        "cursor": {
          "ref": "d44e4d44-2b6a-42ad-95aa-936b13ea477a",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b5893949-f18e-45a9-9384-2919430bbeb2"
        },
        "item": {
          "id": "7b87016c-aff1-434b-9fb1-2b0f017a49ef",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "0badeab3-e483-4d83-925c-d5a66639fa90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0657f0bc-ea54-4ca2-8539-64a0893e93e5",
        "cursor": {
          "ref": "5643e1ec-6cf0-4c16-be14-9e143276a6f6",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "04fec97f-934e-4e50-ad4a-a5a0b90c2feb"
        },
        "item": {
          "id": "0657f0bc-ea54-4ca2-8539-64a0893e93e5",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1a874c50-2396-49ae-b4ba-4a0b17ce41c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84b09343-4a61-40dc-b077-90b0200a9c23",
        "cursor": {
          "ref": "fa67fbe8-bb91-456b-a822-7a3e8d30a0f7",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "eeb33b98-cf35-4243-a445-696989e4ad0f"
        },
        "item": {
          "id": "84b09343-4a61-40dc-b077-90b0200a9c23",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9996ba74-b1d5-472f-b6b0-13ea275fea61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60107327-74ed-4679-a230-58613e6e4650",
        "cursor": {
          "ref": "c6daa744-3fde-4c5b-8d10-bd400e93269e",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f882098f-64af-46b8-99fb-091cf171fecb"
        },
        "item": {
          "id": "60107327-74ed-4679-a230-58613e6e4650",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "95a11d3c-e933-4b6b-9235-82ac98afc7a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb192387-7441-449b-95b8-2b5719cd24dc",
        "cursor": {
          "ref": "40290cac-4b60-40d5-a7ca-6f94b3ad9bc3",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "571707db-3dc4-43d7-9040-dba6b0681dcc"
        },
        "item": {
          "id": "bb192387-7441-449b-95b8-2b5719cd24dc",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1ea31427-3cf9-4dd2-a307-0b941cb3ce8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a818c1d5-b098-4ce2-94bc-deb3d7d624ec",
        "cursor": {
          "ref": "4b917ff5-7839-4f79-b214-c83896fa9849",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7a60b522-37f8-47d1-93b7-352735d54ca3"
        },
        "item": {
          "id": "a818c1d5-b098-4ce2-94bc-deb3d7d624ec",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ca84c7d9-3602-451a-b4b7-419c9b8d7597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b609d3a-1c76-4d75-8226-330a517b3179",
        "cursor": {
          "ref": "c479f1d1-79ba-4938-892f-f42728490fe8",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "63f9c803-2faf-4a9c-873e-a6854818e732"
        },
        "item": {
          "id": "0b609d3a-1c76-4d75-8226-330a517b3179",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b9b1d78e-be0b-4100-b738-95a58855ee53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef886b63-76e3-4da4-bc33-34ad5277deb4",
        "cursor": {
          "ref": "06283a7a-46ac-4225-a23b-49b5aabce413",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d68ce967-500e-4b53-805e-b2fd9c6df791"
        },
        "item": {
          "id": "ef886b63-76e3-4da4-bc33-34ad5277deb4",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b8463d65-e232-4005-a8a3-7fdac689e367",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "79493ef1-e600-4f1c-98d9-e5cab00dbb81",
        "cursor": {
          "ref": "507a54a1-c416-45c2-b146-367bf9b06106",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "eb334cb2-f225-477f-be42-3adf34ddd961"
        },
        "item": {
          "id": "79493ef1-e600-4f1c-98d9-e5cab00dbb81",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "9c0ae55b-7768-416b-adad-25e2d216e5e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6219c1c-8d12-4ea9-86ac-4e0c617dead0",
        "cursor": {
          "ref": "61dbb444-742f-4b42-a33b-5c5a938e6ff2",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "70deafec-0acc-443e-a2f3-d7de3440f995"
        },
        "item": {
          "id": "a6219c1c-8d12-4ea9-86ac-4e0c617dead0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e60c1096-338b-43d8-9c91-f6541affe7cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9631726a-3105-457e-bb04-cd9b790bf28a",
        "cursor": {
          "ref": "16e3f948-3121-42dd-bd56-f7efb332862f",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d2811b10-ec86-4634-ad79-cb7cd7d1181b"
        },
        "item": {
          "id": "9631726a-3105-457e-bb04-cd9b790bf28a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "eeb0de20-c1b1-4730-967e-f4151c00ebb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceeb99c5-bea7-40ec-9c5d-df2f499dbeb2",
        "cursor": {
          "ref": "2dcc90c2-272f-4c75-9892-e40fc2ae2c66",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "484d2212-db84-40ea-af10-b536de6035fd"
        },
        "item": {
          "id": "ceeb99c5-bea7-40ec-9c5d-df2f499dbeb2",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "04cbfa1a-b14c-4cde-b1a3-322bcc180684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1c2e7b3-782e-41a1-a8a4-181f700def41",
        "cursor": {
          "ref": "e1823742-52ef-4b1a-8d05-cff8904c9838",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "d03bc913-355b-496d-b093-57fe6bce7725"
        },
        "item": {
          "id": "d1c2e7b3-782e-41a1-a8a4-181f700def41",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "41ec930e-b46a-4323-8251-8c3222395493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2625a746-8c79-4f87-af93-bef13bd9a7e6",
        "cursor": {
          "ref": "3ad13fef-32d6-4b43-a8ad-7823c69258c7",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "55b796a6-50ca-4ec1-8863-441c8519a157"
        },
        "item": {
          "id": "2625a746-8c79-4f87-af93-bef13bd9a7e6",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "1944ed58-ee48-47ab-b3ba-52d7ab770ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933ac619-5301-418f-9e24-0deb426a2928",
        "cursor": {
          "ref": "1b588362-dd17-493e-8b43-0a6bc2a9ba77",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "db703c0c-01e4-4c78-bcc3-e53ec9e57328"
        },
        "item": {
          "id": "933ac619-5301-418f-9e24-0deb426a2928",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "28c00198-161c-4ad8-a00f-044e0fe40eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7d7ebfd-9512-4a1a-bca5-c88534598816",
        "cursor": {
          "ref": "b6edf0b9-a0e6-468c-b639-0f8c56f49c44",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5bcda813-303e-44b4-b109-05d1a1dbf4ff"
        },
        "item": {
          "id": "d7d7ebfd-9512-4a1a-bca5-c88534598816",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "2e06f57a-d638-4b66-b8cd-3d3a526b977e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37feffdb-09d0-4f94-a810-74c59436b026",
        "cursor": {
          "ref": "1ff518ee-5539-4f9e-8c0f-4b290100d090",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0c24f568-559d-4dd5-97c9-2ac7c5db2420"
        },
        "item": {
          "id": "37feffdb-09d0-4f94-a810-74c59436b026",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "10940c52-56e9-45d3-a66c-09a058e39e5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31de4b10-660e-4034-8888-bc52e8ec7837",
        "cursor": {
          "ref": "b5dd664e-5e6a-41d4-90b5-531215f4e09e",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "42f7ad29-827f-4ed9-b00f-1e8f8d81cb3d"
        },
        "item": {
          "id": "31de4b10-660e-4034-8888-bc52e8ec7837",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2daac504-679b-453a-bcda-0d650072cd09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9800fac9-0e7d-4dbf-9629-cc32f2695ae5",
        "cursor": {
          "ref": "2da8d85e-dcc2-4380-92d3-7bd986e8e67e",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a944cfd6-7825-4e49-aa6f-610f3fc48aa3"
        },
        "item": {
          "id": "9800fac9-0e7d-4dbf-9629-cc32f2695ae5",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b01c5387-b907-40b6-8634-bb489d4fa9a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c0a611-1bf6-4819-9b6c-c7512422c70a",
        "cursor": {
          "ref": "ac2dc6ae-6a29-4256-89b3-60c9d7887d76",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f794ea31-2e8f-4e01-8bf0-cd72cf7111e4"
        },
        "item": {
          "id": "b2c0a611-1bf6-4819-9b6c-c7512422c70a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "6158f079-bb7a-48b8-95d0-69729277385f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f0634b-3be6-4071-967e-047621c1f3fd",
        "cursor": {
          "ref": "a3f35772-ba65-4939-9f86-3c6e97027543",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "44988519-a3fe-49e5-acd7-75d323a9cadc"
        },
        "item": {
          "id": "08f0634b-3be6-4071-967e-047621c1f3fd",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6ed0172b-e31a-49bd-9189-6eff04e02861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a5493b74-8d45-4e54-80df-f368db5891cb",
        "cursor": {
          "ref": "969811be-08a3-4c78-9c27-1affd76498ab",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6e780cab-6b62-4c87-9c36-53898c29df20"
        },
        "item": {
          "id": "a5493b74-8d45-4e54-80df-f368db5891cb",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5d27ba8b-9773-49e4-be6d-e0b2747b012c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "114cc5ee-3186-4a23-8409-096ac849e114",
        "cursor": {
          "ref": "b020b27a-1d9d-40e0-98cb-374127a0b43f",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "49aac1b6-55c6-4a85-9d5f-9a3de6108000"
        },
        "item": {
          "id": "114cc5ee-3186-4a23-8409-096ac849e114",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "688620a7-3c43-4e85-8485-b7f1a83f4323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff44a1b3-19b6-4e45-b3f1-9e2eeb8b7474",
        "cursor": {
          "ref": "fad78fc4-f3bc-45a5-b5c6-5041912da436",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ba7c3f3f-77c8-403a-9932-7f04304c621d"
        },
        "item": {
          "id": "ff44a1b3-19b6-4e45-b3f1-9e2eeb8b7474",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "d4568708-040b-408d-9ec4-29b002ff0764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be745330-1d50-4728-93c3-a9efacfebe4f",
        "cursor": {
          "ref": "4e598582-7650-4169-972b-9bfdecb0c34c",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "78cf63df-f6b0-458a-aa71-ab2d5f58b64f"
        },
        "item": {
          "id": "be745330-1d50-4728-93c3-a9efacfebe4f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2a17d3e5-19e7-4f04-ab5d-8dd191a25d9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "434769c7-c4a7-42c7-af11-98d91be6b4b9",
        "cursor": {
          "ref": "59df39e5-31e4-4155-9512-4fa1b9e7f4a8",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "c24f06f2-f95e-4c7f-8758-df2be6aadc43"
        },
        "item": {
          "id": "434769c7-c4a7-42c7-af11-98d91be6b4b9",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a6b28981-dcab-431a-b0e9-555e59a00589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ad9683-7543-4a03-abcc-9847257ca478",
        "cursor": {
          "ref": "9635bc5b-9f9a-4616-bbb6-3df52a7cb727",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2a834862-24bc-43a5-bb32-33e197a86967"
        },
        "item": {
          "id": "09ad9683-7543-4a03-abcc-9847257ca478",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "7df1683d-5315-4344-8156-d0c147d1a65e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa770a14-e593-4769-a1aa-a4099fef058e",
        "cursor": {
          "ref": "436620b1-c853-43f7-92a1-2ca5f8ffab3b",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f01246e5-8f45-4925-b0fe-323e905665ef"
        },
        "item": {
          "id": "aa770a14-e593-4769-a1aa-a4099fef058e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f5f95f3a-a25e-4703-96e3-f40eeaa6666f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "6ec85329-0cdb-4ae9-8717-d953802fef30",
        "cursor": {
          "ref": "e0b8857f-97ab-4950-98ca-af178f2516b3",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a1b7773b-7a24-481e-bc72-a1b878e710e8"
        },
        "item": {
          "id": "6ec85329-0cdb-4ae9-8717-d953802fef30",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ba22a204-af5e-4ae5-8f58-3843519728d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa87b7bb-4c2e-46d8-b55d-b934dbed16dd",
        "cursor": {
          "ref": "2f530665-1b70-466f-934c-72eeba42b947",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "381385b8-c1fb-4e35-8f56-df0a768f5513"
        },
        "item": {
          "id": "fa87b7bb-4c2e-46d8-b55d-b934dbed16dd",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a1fc41db-a3a3-4305-baae-22bcf1556b01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa2db24c-d24a-4412-a5ed-a0bd3893b738",
        "cursor": {
          "ref": "c9256b4b-383f-4efb-a8f4-1a807c99dd35",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "12da16c6-90ea-4578-adfb-bf5293ff4d77"
        },
        "item": {
          "id": "aa2db24c-d24a-4412-a5ed-a0bd3893b738",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6498b3f2-3828-4f52-af23-854f5afcec55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfbb4cac-5b56-488b-ab23-f87671206f2e",
        "cursor": {
          "ref": "aeaf4e43-28a0-4bb0-aabf-00a7f147c15b",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3d788a7d-509b-4c1c-a80e-1711ed896b02"
        },
        "item": {
          "id": "dfbb4cac-5b56-488b-ab23-f87671206f2e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "81171834-e6d0-4853-91f4-bf6588685be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f796c13f-be99-4610-92d8-9d32a6851d06",
        "cursor": {
          "ref": "fc6deb78-bc46-41ff-a293-5e2301ced185",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "31679ddb-5cd4-40f0-9e21-7b0b20911b0d"
        },
        "item": {
          "id": "f796c13f-be99-4610-92d8-9d32a6851d06",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d4a7a786-25f4-4fc1-8d1f-ab06d0e65e7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a0f854f-4840-41ee-a0b4-1e841d7a5521",
        "cursor": {
          "ref": "9ed0d036-5170-445f-8e41-8c0b9e79df29",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d54ca336-b7c5-4fd3-ab89-4e4174508c67"
        },
        "item": {
          "id": "8a0f854f-4840-41ee-a0b4-1e841d7a5521",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9e53d51e-c4fa-4dab-81d5-9f16cf2b96a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c64f980f-4de0-45bb-b102-d6f3617a8d54",
        "cursor": {
          "ref": "ac7cc69c-cea5-4f67-a0f2-d1370a006c42",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "0c3261f1-772e-42de-881b-0b65695d9899"
        },
        "item": {
          "id": "c64f980f-4de0-45bb-b102-d6f3617a8d54",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "594bcc57-d795-46eb-b67d-66edcc45610a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8342cccb-f190-4fd7-8dd1-869666b8b795",
        "cursor": {
          "ref": "a79177f6-3fb3-4d56-bb92-ffd43d5f2d4e",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "8ca070f4-a6b5-4534-9aaf-64a9a893270d"
        },
        "item": {
          "id": "8342cccb-f190-4fd7-8dd1-869666b8b795",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ea398478-650a-41d3-91ca-bbda8a715a8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "778fe3e2-90d8-4cab-9a80-951a4db68319",
        "cursor": {
          "ref": "5221157a-b9c4-4be9-b6f5-9141947da0b0",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "fd146d62-e751-4bf1-ad4b-28741cf19429"
        },
        "item": {
          "id": "778fe3e2-90d8-4cab-9a80-951a4db68319",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d1f45213-4f00-4d96-a250-b6b0127783ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f4a80a9-85ad-41d2-9d2e-a62d34a083c0",
        "cursor": {
          "ref": "0f359cf1-eee7-46ad-baf9-65e754934e99",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "4728fb84-3239-4164-88e9-11c04c7533da"
        },
        "item": {
          "id": "3f4a80a9-85ad-41d2-9d2e-a62d34a083c0",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "206364be-f402-4ae4-b25a-472d5475d223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4383ef78-f495-430c-96ed-a022650b35bd",
        "cursor": {
          "ref": "3adecdc5-9ed4-4f33-87e0-d2f5f7cc404e",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8e78aa0c-bca5-4fa9-acf8-ead25ccf81ba"
        },
        "item": {
          "id": "4383ef78-f495-430c-96ed-a022650b35bd",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "890028b0-f1b6-44b5-9e22-1e58c02a2d58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c17b0d61-cf4a-477a-94d5-498730b37bb3",
        "cursor": {
          "ref": "a9d16db1-09b0-4d13-84d8-e19e055e92a8",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "af419fd2-68c3-487c-9523-681a17244802"
        },
        "item": {
          "id": "c17b0d61-cf4a-477a-94d5-498730b37bb3",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5f0fad9b-3ced-43aa-a4f6-948f1291e43c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c106e290-2bee-499c-88ae-7a9b38f5a24a",
        "cursor": {
          "ref": "7593fee1-8662-465e-8b5b-355b888775f4",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4d911503-0909-4bba-9aaf-7b7c5adf2b0c"
        },
        "item": {
          "id": "c106e290-2bee-499c-88ae-7a9b38f5a24a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "157eb5d9-aea8-4caf-ac5d-b19d0445f92b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a9edd34-e63c-4a2f-b04e-7d7b9170140c",
        "cursor": {
          "ref": "865e16c7-ecdf-44d2-82aa-698033b4774a",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "85f5632a-1ea1-4ab1-a6cb-b7057aa28a86"
        },
        "item": {
          "id": "7a9edd34-e63c-4a2f-b04e-7d7b9170140c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "5b9bfd5b-08cc-4d6f-97ca-680ddee13fe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7103b854-9218-48d9-b9c5-6401e41f28b9",
        "cursor": {
          "ref": "4f9f81bf-4e6d-430e-a881-380a25e558c0",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "364f9dc9-df40-4e93-a692-777257bc51c2"
        },
        "item": {
          "id": "7103b854-9218-48d9-b9c5-6401e41f28b9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "172bc267-0216-4906-9811-273b92cb9be8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afe80aa0-b037-46fd-94bb-6ede61c46816",
        "cursor": {
          "ref": "3bb72c1b-f539-404c-85d3-4b6ebd111785",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "267a0170-3160-4a7c-b1be-45101777f956"
        },
        "item": {
          "id": "afe80aa0-b037-46fd-94bb-6ede61c46816",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "23b02a74-f64b-464b-b043-f48312aa37a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38e70151-21a8-4db0-927f-aac840457c08",
        "cursor": {
          "ref": "115019a1-e857-4c9e-a43a-628b52c2cd97",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "fc549a70-b7c7-4b76-b350-978590c35ded"
        },
        "item": {
          "id": "38e70151-21a8-4db0-927f-aac840457c08",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "55087863-b0a0-4881-95fc-9df296d07656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 348,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1cfc4a8-bcb6-4391-b7ee-c4347eda9605",
        "cursor": {
          "ref": "bf545eb6-89e9-49c6-9e6f-a560555dd30c",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "11da88ec-7983-482e-a8ef-e973203d4a9f"
        },
        "item": {
          "id": "c1cfc4a8-bcb6-4391-b7ee-c4347eda9605",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "00dbccd9-4e0c-499f-ad17-28e33904b620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "274221a5-d4ac-4816-9fa9-97bee5c18d41",
        "cursor": {
          "ref": "1147a5d2-786c-4c48-9972-e10d18d0330e",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "10879651-3a09-4d03-b943-cd85e28e7af7"
        },
        "item": {
          "id": "274221a5-d4ac-4816-9fa9-97bee5c18d41",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "371607f7-74c9-4665-872b-d6bb76956ccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce4b8b95-1860-4953-bc09-2836412ba2bd",
        "cursor": {
          "ref": "68b8858c-0a2b-45f3-852f-b6ae00e8a891",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "39871821-32a0-42d0-9298-3a998d2788c1"
        },
        "item": {
          "id": "ce4b8b95-1860-4953-bc09-2836412ba2bd",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "069aae6a-ffc8-453b-a5c2-2ea137875a92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6047dcb-a829-4175-88b5-02fff7d540e1",
        "cursor": {
          "ref": "85a8916a-96c7-4877-88aa-5c20439a6fc1",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "594760b6-82f8-45fd-9eda-8229a6e8ddab"
        },
        "item": {
          "id": "b6047dcb-a829-4175-88b5-02fff7d540e1",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "9ef1cd49-969b-43a1-bd90-77c6f23ed388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a35e1d-ae01-4218-a338-f30f21bf21d3",
        "cursor": {
          "ref": "aa1a8444-12f6-4ad2-b9fb-09d79e23fe73",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a6f832a0-f155-4351-9b1e-da1ad6b6fac3"
        },
        "item": {
          "id": "49a35e1d-ae01-4218-a338-f30f21bf21d3",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1758a242-8b8e-4dc5-9870-425cbb4c5885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e177196a-7394-4d90-a1ef-af70b80ae5aa",
        "cursor": {
          "ref": "13d1de3d-a5b5-4c3a-ac21-a9bed3e97674",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c6ac85b0-def9-44ef-8ca4-b0a6f1911aea"
        },
        "item": {
          "id": "e177196a-7394-4d90-a1ef-af70b80ae5aa",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9fdd3b9f-ae2e-4c72-a0fa-622022b8f683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd0c765-fb82-4137-a699-03505b5c47f2",
        "cursor": {
          "ref": "434f82ce-03ea-4757-aeef-8a7b1aabf217",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "43e18b68-70e8-4da7-9f2c-a66d44e4906c"
        },
        "item": {
          "id": "3bd0c765-fb82-4137-a699-03505b5c47f2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "42cbb769-3077-4a95-a4ee-59d192cf4a5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "657b4e23-7b31-4d44-b96e-a86ebff0174f",
        "cursor": {
          "ref": "27b18efa-b54a-441a-984f-0deee7c2b878",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1d98c150-e65c-4bbf-9cf2-d2f0c65abe3e"
        },
        "item": {
          "id": "657b4e23-7b31-4d44-b96e-a86ebff0174f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "80700cd5-7757-45d1-a83c-2d05653c5aef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37234487-1d99-42b4-a4b3-7b03e50327b2",
        "cursor": {
          "ref": "5978ca00-e07f-4aa5-a6f8-b1aaa93fceec",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "190eeb3d-d249-4022-8c15-bb2fda61f426"
        },
        "item": {
          "id": "37234487-1d99-42b4-a4b3-7b03e50327b2",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ee1d9760-8a31-4258-871d-1ce79aa97eb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d07e5234-2d5e-4bf0-a28f-6927da0cc96f",
        "cursor": {
          "ref": "deff58d4-9ef2-44e8-b759-9af6d36f55f4",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d0bb59bd-1b86-431b-a685-0b2e8f852697"
        },
        "item": {
          "id": "d07e5234-2d5e-4bf0-a28f-6927da0cc96f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "0ef7b24f-6fa1-4e28-8f7b-6baf6ec5a832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5503b41e-6a35-4fae-8a97-52e4a83b418b",
        "cursor": {
          "ref": "eb5dba7e-70a3-4850-bf3d-f7e01300f496",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "39e938e3-0d6b-4df6-ad41-bf8c02f85002"
        },
        "item": {
          "id": "5503b41e-6a35-4fae-8a97-52e4a83b418b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "2a4ad56a-885d-4be0-8039-d7019de5fc75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c78f61b-6093-4160-947b-fc63bcfa2499",
        "cursor": {
          "ref": "39a13446-0a67-474c-b78c-f874544554cc",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c61bfd87-8c2e-4145-b527-2ac02271ba78"
        },
        "item": {
          "id": "9c78f61b-6093-4160-947b-fc63bcfa2499",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "08fc2edf-3ee9-4e1a-a379-679df5b8e087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d7503d8-0606-4f47-8fe5-938ada2e1316",
        "cursor": {
          "ref": "4c61f208-be85-4f69-b326-7dd26b565e1b",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5046b8a1-a91b-4340-8063-2e6e2e862a8e"
        },
        "item": {
          "id": "8d7503d8-0606-4f47-8fe5-938ada2e1316",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "cc873779-64dc-467a-bbe9-af09dad9d01a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7defb36-b84a-43ad-bb3d-e44a88547a09",
        "cursor": {
          "ref": "da68881d-4631-41ef-99c6-6cc4e9093a8c",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0fd0ade2-c227-46ae-b480-51fe4a5f60d7"
        },
        "item": {
          "id": "b7defb36-b84a-43ad-bb3d-e44a88547a09",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e9de15de-5720-4cca-b6de-10cc61d88b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a08b7326-1d0f-43df-b62a-1f1739303e5f",
        "cursor": {
          "ref": "4c8788d7-5861-4f47-86d4-83c486fa7b3d",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d9aa5abc-7656-4e27-9450-0ea0255df7f8"
        },
        "item": {
          "id": "a08b7326-1d0f-43df-b62a-1f1739303e5f",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e2c364da-2c7a-4c8c-9d39-3c129e10620e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a35957e-f45f-426c-bcbc-18cd5ce1e1f3",
        "cursor": {
          "ref": "e0811cf6-ca18-4610-b493-a539cbb2bbda",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0173abdb-afe1-4729-8c70-e6caba0b61e0"
        },
        "item": {
          "id": "1a35957e-f45f-426c-bcbc-18cd5ce1e1f3",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "4082d48c-6690-48d6-a5a5-a7a38c457664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0313336-4777-44bb-9446-b6eef9f53486",
        "cursor": {
          "ref": "60348f40-aa9f-42bd-b13a-d41cbb1e2d80",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b5a49661-225d-4cbe-8f40-4edf192818e5"
        },
        "item": {
          "id": "c0313336-4777-44bb-9446-b6eef9f53486",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a3184f07-bef5-4ed4-b210-0fb327ac2fff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3f51d68-b658-4a4a-88d8-3816935cf67b",
        "cursor": {
          "ref": "41a43561-4d7e-4549-95a1-8d6caeb7470e",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c24205d6-85ce-475f-8c5d-5afecf3e2ba5"
        },
        "item": {
          "id": "e3f51d68-b658-4a4a-88d8-3816935cf67b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1e111da4-0172-4401-bd59-8f8904023755",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "19a715d5-8bc1-42e2-80ee-dc1ba3c36be7",
        "cursor": {
          "ref": "7e8403eb-e8c0-4bab-a8c3-1ac6dfd546df",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f3fdaeb5-2e87-46d9-bf04-e782bb26de60"
        },
        "item": {
          "id": "19a715d5-8bc1-42e2-80ee-dc1ba3c36be7",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0e61ed49-1d0d-421f-8306-7baa1aa33c56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bebe4df-9fe2-42b4-8f05-cfca75318715",
        "cursor": {
          "ref": "dc04a8a0-af2d-4d4a-83f7-9eca0f75d86f",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "18252a85-be77-4449-872d-cf7707da892d"
        },
        "item": {
          "id": "4bebe4df-9fe2-42b4-8f05-cfca75318715",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "adc75a77-cc16-41b1-a6c5-6f381aff286c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "928b72f1-6206-4124-8a9a-a564610a6dc5",
        "cursor": {
          "ref": "ac8fa2c8-dc6b-4a2a-aa24-db4470e3bb18",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f09f6d45-b91a-4874-a191-0b610094768f"
        },
        "item": {
          "id": "928b72f1-6206-4124-8a9a-a564610a6dc5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4a2ddc26-fab1-4197-a8ae-ec43f9d58932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ab3ec17-d9fa-44d7-9324-c8042e562f75",
        "cursor": {
          "ref": "8722b9af-e905-4991-a087-4290ef560fe6",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "87b6171c-2fa4-4c99-a14b-050ed7578915"
        },
        "item": {
          "id": "5ab3ec17-d9fa-44d7-9324-c8042e562f75",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "ef4580bf-92ba-437c-b66e-fa6019310238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835a7958-ae03-4f88-ac7d-17d501ca6ef3",
        "cursor": {
          "ref": "db30e220-6387-4f2b-903a-ecc1ad44cd5d",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "13bc8040-0b9f-42c5-a334-c86ae22ce768"
        },
        "item": {
          "id": "835a7958-ae03-4f88-ac7d-17d501ca6ef3",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "fd654cab-aad7-4bc3-ae89-d882e189d8f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "826fbd5e-f182-438b-9b6c-3428e42088c8",
        "cursor": {
          "ref": "d2cd023b-0b23-4723-a814-e0d60b0823ac",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ad1a3ebc-ccc7-40c9-8049-ca7bdbb30968"
        },
        "item": {
          "id": "826fbd5e-f182-438b-9b6c-3428e42088c8",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "3d8e25ea-0168-4594-ad1c-f566cea40376",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "058ecf9a-20b1-42dd-b956-f70fd1f7fc3d",
        "cursor": {
          "ref": "1bda7b7b-1d7a-4b5a-ad98-0133b29f0547",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "785dfcac-01c0-4ae1-865d-811426d81baf"
        },
        "item": {
          "id": "058ecf9a-20b1-42dd-b956-f70fd1f7fc3d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "7c9f45f6-18b3-47fd-8cf0-00985c94267a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a679d5da-3671-4afc-949a-f33c640b9d1d",
        "cursor": {
          "ref": "3801a625-4eb4-4877-9a53-a07b99ca5e91",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "0c8ee1d7-3231-43cd-84f1-29723d138510"
        },
        "item": {
          "id": "a679d5da-3671-4afc-949a-f33c640b9d1d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f6bcf84a-57cd-4992-a082-8fa660d0ad70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa95c2e5-3575-45e2-9dd5-3eb13cf972c3",
        "cursor": {
          "ref": "e4ce3e0c-4dad-477e-9907-27f54a69a829",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "fdfee69f-f9d9-4a97-af46-f9b835b92579"
        },
        "item": {
          "id": "fa95c2e5-3575-45e2-9dd5-3eb13cf972c3",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "4fa3a510-c5ca-42b7-9635-f92c4dd2281b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ecad11-6d33-4863-be8a-be2f64df21ea",
        "cursor": {
          "ref": "a28c39dd-d5e5-4986-9971-c1478cee331c",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d4b24985-c9c4-41a6-9c20-d911208ed4f8"
        },
        "item": {
          "id": "73ecad11-6d33-4863-be8a-be2f64df21ea",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "1649fb2a-ea32-4cd8-9ea6-22fdffc6eaf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b3fd58-a83d-40d3-89a4-789e4447758e",
        "cursor": {
          "ref": "cb1f4764-37f7-4921-ae90-efbbd53bc931",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "6f33ba8a-2b04-4349-8e02-52d4e137b624"
        },
        "item": {
          "id": "54b3fd58-a83d-40d3-89a4-789e4447758e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "7b4c85e3-f981-43a3-8db0-5c1b59f3dd78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b86cf35-d584-4f80-9efe-61da4c7350bf",
        "cursor": {
          "ref": "d7411775-b6d5-478a-8bc2-186cbf9626e9",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a42714df-4845-43e8-98c3-a2599b9c47ca"
        },
        "item": {
          "id": "2b86cf35-d584-4f80-9efe-61da4c7350bf",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "19ea45d4-23bf-4b25-8aef-b144ec61657a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86d6cecc-1e18-4601-bc9a-92509876ab75",
        "cursor": {
          "ref": "4ce3c4ae-26ed-41e1-b9bd-2cfcb16826e1",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "da6b08df-cdf8-4700-8c3c-b4b2c50b039e"
        },
        "item": {
          "id": "86d6cecc-1e18-4601-bc9a-92509876ab75",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e810fa55-8f9c-4a40-b2be-cec0b40d34a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eee0ff0-e47f-494b-b93a-4dba73d94646",
        "cursor": {
          "ref": "fefd28db-6609-4faa-ab72-e2622be78841",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e8d24465-5ab0-4e9b-a7ab-b276c9193a8d"
        },
        "item": {
          "id": "8eee0ff0-e47f-494b-b93a-4dba73d94646",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a07d9acd-29e2-4077-9ec0-b4afc507ae70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c21a78d-aeb7-43b4-a9f8-d05ee8d3cfd2",
        "cursor": {
          "ref": "677e1472-a901-4436-b307-f4d7a1c4ae09",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "58aeeee0-4c2c-4d7c-89fc-000e64c944f6"
        },
        "item": {
          "id": "6c21a78d-aeb7-43b4-a9f8-d05ee8d3cfd2",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "568f589e-61d6-41ef-b03f-fc37761dea2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "040c12bb-7fa8-49b1-a48b-4667c22c804c",
        "cursor": {
          "ref": "d9352a2e-c290-442d-b908-c8625fc3805b",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "888456c4-e316-459e-891e-fe9b9c089eda"
        },
        "item": {
          "id": "040c12bb-7fa8-49b1-a48b-4667c22c804c",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "87820fc1-2fd4-4c95-9aab-910108541c5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "7973a8f8-8b4d-424c-8d96-0dd04d140724",
        "cursor": {
          "ref": "b9f5cea0-66bb-4d65-87f0-a96c85e63f66",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "b5ae45ff-6828-4523-a472-82026cca151c"
        },
        "item": {
          "id": "7973a8f8-8b4d-424c-8d96-0dd04d140724",
          "name": "credentials_issue"
        },
        "response": {
          "id": "772bb334-cc91-4120-81ee-7fc7dada6604",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca4314c-d4bc-4216-957e-0aff163f11ca",
        "cursor": {
          "ref": "e40ec4e1-eb3f-401e-8911-6dad3cbc59da",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "38339f53-8ec5-427a-b57a-d2ad0ebede8c"
        },
        "item": {
          "id": "eca4314c-d4bc-4216-957e-0aff163f11ca",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "545f3d82-783c-4d17-a887-c43be730dcb0",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625b6ece-bb8b-45e9-951b-147fe37e3ed4",
        "cursor": {
          "ref": "22b34514-6c72-4e14-9577-af24cb93f8d9",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "eabec5bd-0a35-4ad0-868c-e9d5ec4bc993"
        },
        "item": {
          "id": "625b6ece-bb8b-45e9-951b-147fe37e3ed4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "13131782-6b07-433e-873c-a2ac59751f0a",
          "status": "Created",
          "code": 201,
          "responseTime": 418,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ec0311-4101-4315-906d-5507feefcdfb",
        "cursor": {
          "ref": "861d8bed-e647-4f8c-a0f1-75c08d0fe8d3",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c26659fd-fcb7-4866-892e-02543e456244"
        },
        "item": {
          "id": "14ec0311-4101-4315-906d-5507feefcdfb",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8800bc70-c3de-4e70-934a-42aef5cc4ee4",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 659
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "80d1134f-69ab-4e52-8cbd-8cee7d31d8d4",
        "cursor": {
          "ref": "c905abad-0934-4a02-93eb-b46060f716e5",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "afbc07e3-b3fd-4737-882f-f835f560a1b0"
        },
        "item": {
          "id": "80d1134f-69ab-4e52-8cbd-8cee7d31d8d4",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b05a8e6e-8d6d-4054-aff0-cb6e7f312edf",
          "status": "Created",
          "code": 201,
          "responseTime": 384,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b425ad3-4770-45fc-b8c0-1611e4a4ea3e",
        "cursor": {
          "ref": "000f6bc8-e2e9-4c33-a0a7-b72a08f191cd",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "cc7574ac-25bb-4e31-a6ac-4396942b73cb"
        },
        "item": {
          "id": "1b425ad3-4770-45fc-b8c0-1611e4a4ea3e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "121523a3-90b3-405f-b52a-16b81a8ce032",
          "status": "Created",
          "code": 201,
          "responseTime": 406,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "272e83c2-f086-46c6-91e4-41f3b51b87dd",
        "cursor": {
          "ref": "fb852e20-e0ae-49d4-9518-7b3b1fad2584",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7b7ad8ff-1741-413f-92c2-6683fdb0d495"
        },
        "item": {
          "id": "272e83c2-f086-46c6-91e4-41f3b51b87dd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e8aa048c-a860-4732-aa2b-74c138015909",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "272e83c2-f086-46c6-91e4-41f3b51b87dd",
        "cursor": {
          "ref": "fb852e20-e0ae-49d4-9518-7b3b1fad2584",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7b7ad8ff-1741-413f-92c2-6683fdb0d495"
        },
        "item": {
          "id": "272e83c2-f086-46c6-91e4-41f3b51b87dd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e8aa048c-a860-4732-aa2b-74c138015909",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "8adcf1bd-f044-476f-a970-87797cd7d8c5",
        "cursor": {
          "ref": "4d3fefa3-b738-4926-bd3c-478bda15db0b",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "85f8df59-1938-42c5-92c8-9329de98e675"
        },
        "item": {
          "id": "8adcf1bd-f044-476f-a970-87797cd7d8c5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "40d663a8-3499-4806-bab6-3ac5cac9df9d",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "10a65acb-ee36-4d65-b1c9-05aee8243f23",
        "cursor": {
          "ref": "06b72aae-ee07-40c7-a0bc-5d14ebee814d",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ed77363a-8aec-4a9a-bb3b-da9922d888ae"
        },
        "item": {
          "id": "10a65acb-ee36-4d65-b1c9-05aee8243f23",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "30e56fb9-5731-43d5-8141-a26a488df359",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "49e8817a-e02f-47d0-9eec-47246391e6f8",
        "cursor": {
          "ref": "4f4d1fea-4e62-4122-974c-9224e11a99dd",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "492bfe4c-ee27-4c6c-8d6b-a9318fd442ea"
        },
        "item": {
          "id": "49e8817a-e02f-47d0-9eec-47246391e6f8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a825459d-526a-439b-9599-60c1853552a2",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "eac54cfd-b772-4f7f-ba43-13bf015de433",
        "cursor": {
          "ref": "1219b48f-153e-4fef-a2dd-bc2e95b6ff16",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3e0988ce-e62b-451f-ba13-d9789ab27b8d"
        },
        "item": {
          "id": "eac54cfd-b772-4f7f-ba43-13bf015de433",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "88465502-7d1f-455f-b0e1-61f804c2c5bf",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "c54bf632-5769-4a8c-8962-39a6e0369ef3",
        "cursor": {
          "ref": "544cd8f3-b6ad-474f-a0fc-f3550c19af79",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "c9423af9-0d9c-467f-8f72-8f44895cea9b"
        },
        "item": {
          "id": "c54bf632-5769-4a8c-8962-39a6e0369ef3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1e254a9f-09c9-45e5-8e44-d0e61f91eb26",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "f8aabc3d-1729-4485-971c-7bfda4ad78d1",
        "cursor": {
          "ref": "03781f63-b067-4eb7-abfd-ffaeb02f99cf",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6318f927-72e7-4560-8f7d-e8a30d9f81c4"
        },
        "item": {
          "id": "f8aabc3d-1729-4485-971c-7bfda4ad78d1",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4bfaa71f-5359-4dbf-90dd-df47d55bb8b9",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "e611d1f3-677d-4c59-a5aa-72796bfd5a49",
        "cursor": {
          "ref": "2e40005d-ca6a-4345-b582-9993b0a9a1c4",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d1d3c416-6fb6-4270-9286-4ca3aae848ec"
        },
        "item": {
          "id": "e611d1f3-677d-4c59-a5aa-72796bfd5a49",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "14977129-62ef-4d8f-abb2-5c0d2d45cb57",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "9d4dc7f7-f47e-4107-b3fa-9b9957b90a26",
        "cursor": {
          "ref": "1c76573c-7a17-4439-a630-03695fcbe087",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f923e831-0c6b-43d2-942d-7ad45241a9e3"
        },
        "item": {
          "id": "9d4dc7f7-f47e-4107-b3fa-9b9957b90a26",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "97d763fa-a690-41a3-aa0e-251a619d64a7",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "200964e5-9994-4afb-b624-f39f5264dbf7",
        "cursor": {
          "ref": "c300d655-2554-4c4b-8e81-7cfc2fc29c51",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "717d8f52-0ab0-43b1-9628-e039114d279c"
        },
        "item": {
          "id": "200964e5-9994-4afb-b624-f39f5264dbf7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d701cabc-660d-4a01-88a9-0ab667711bb8",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "de3eb57b-ccb0-458a-8daa-a38b24c73f26",
        "cursor": {
          "ref": "781625e9-8b34-4c31-b040-443ee0449b6a",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "dab90f3c-cf56-4cd8-9e8e-58785f4f9082"
        },
        "item": {
          "id": "de3eb57b-ccb0-458a-8daa-a38b24c73f26",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c3b93772-f2c2-44ae-9da8-e6740eedfb70",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "08c7db55-4d23-4605-b201-051d26c5acba",
        "cursor": {
          "ref": "8f81cb1b-ec13-4865-a32e-3e5e449616b8",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8dda729a-1755-433f-ab42-3c8b93a58cfd"
        },
        "item": {
          "id": "08c7db55-4d23-4605-b201-051d26c5acba",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7ec5eea1-a245-405c-bfbb-51524da35e98",
          "status": "OK",
          "code": 200,
          "responseTime": 27,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "f9d588ce-7cc4-41bd-a60e-16d6e1e4c4a2",
        "cursor": {
          "ref": "ab9d4c83-b38c-442b-92f9-5244ce048f27",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a0d6064c-26fe-4c6e-8bac-10fd8894419b"
        },
        "item": {
          "id": "f9d588ce-7cc4-41bd-a60e-16d6e1e4c4a2",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c7bc0d5d-7680-44d1-926f-395e46f63c6d",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "186baaf3-0166-4ec9-ba1e-3751bfdc1f71",
        "cursor": {
          "ref": "151c64b4-bba9-43e9-9544-a304a1acc405",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "5b4d0e78-3265-4694-9fd8-43f94557114b"
        },
        "item": {
          "id": "186baaf3-0166-4ec9-ba1e-3751bfdc1f71",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c8c2d97e-ce15-4858-b935-d617085bcabc",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "f163c071-6af2-40c9-aff8-7eb84d7592f9",
        "cursor": {
          "ref": "6924acb9-9366-4f17-b4bf-ad610f415556",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6b5ede7c-f4fe-4474-82fc-b1f67051a232"
        },
        "item": {
          "id": "f163c071-6af2-40c9-aff8-7eb84d7592f9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e5dcf6dc-7beb-42c1-a209-2838d6fe1e05",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "b1e459c4-d41f-418c-be02-7025d2e533c7",
        "cursor": {
          "ref": "607d9bcf-5e80-4f98-83dc-18322ce9975b",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c32c9532-f373-4f86-82c0-eb8857b0176f"
        },
        "item": {
          "id": "b1e459c4-d41f-418c-be02-7025d2e533c7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0c5cff5e-f1e8-47b0-b94a-370f6208bf48",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "fcc19e51-f264-4cdc-8469-82157d3ae3e7",
        "cursor": {
          "ref": "a27b30e0-d60a-4455-929e-1d21640fc04e",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b01b680e-d6c2-4485-bb5d-c90b6bdd2672"
        },
        "item": {
          "id": "fcc19e51-f264-4cdc-8469-82157d3ae3e7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "33f29d5a-c51e-48ac-ac29-6ba7c531722a",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "a28c0a91-3dbc-4a09-bd46-48089ad40003",
        "cursor": {
          "ref": "ab650dc9-e893-41d0-99c3-f3e7dcfdf209",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "a170c0a1-13cd-4d19-a4ad-0157e3d0f1f8"
        },
        "item": {
          "id": "a28c0a91-3dbc-4a09-bd46-48089ad40003",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b8a55b27-21b9-4610-8e9e-6b1156d35964",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "2f244314-7578-45ac-8f4e-ca96f9850eec",
        "cursor": {
          "ref": "98dba1a7-8c54-4012-a64b-e2d187668b4c",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e677f03e-14c7-4f5e-bffe-2adf041e1ab7"
        },
        "item": {
          "id": "2f244314-7578-45ac-8f4e-ca96f9850eec",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f8f7bcc5-aa71-4f48-a2d4-a7a1770d21e3",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "6f6a6cf4-cf81-4012-8000-bfa0bd2d635d",
        "cursor": {
          "ref": "61e30b3d-ec59-4835-9c8f-c92d9ba79b5e",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9a8a415f-033e-4148-9a5e-269ce60c1834"
        },
        "item": {
          "id": "6f6a6cf4-cf81-4012-8000-bfa0bd2d635d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "562e470e-8ec6-4d7d-8ff0-ea28e848a043",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "ef356f89-496b-4aae-b63d-f9b461fc6126",
        "cursor": {
          "ref": "5793857f-54e9-467d-9a81-fae58211f3ea",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "5a918649-8075-4d8b-908a-2b468fcdc580"
        },
        "item": {
          "id": "ef356f89-496b-4aae-b63d-f9b461fc6126",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a0c7c996-374a-4ccb-98b3-e136c0d7537f",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "38ffc2b6-c2f0-4cd2-ade0-1017e9a0805e",
        "cursor": {
          "ref": "2c5b7cac-ff04-4e71-9f05-353c054d5023",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "23cc0e5d-7bcd-4665-ba14-e3c8e1fb7071"
        },
        "item": {
          "id": "38ffc2b6-c2f0-4cd2-ade0-1017e9a0805e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2f7240c9-df9f-45aa-acaa-10c91fc187a0",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "bd5992e9-b46b-4a07-bcea-166f021b310b",
        "cursor": {
          "ref": "3a8345e7-0eec-421b-9178-ab528bfe72b2",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e7f1e355-2afd-4688-89d7-a5ded3a4042e"
        },
        "item": {
          "id": "bd5992e9-b46b-4a07-bcea-166f021b310b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6ccc3674-f5d4-463b-88d2-8b88067fd044",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "3c588167-2cd2-4f58-8364-f6545a0625de",
        "cursor": {
          "ref": "1d589940-3303-4fb7-84b6-7ceb8c178871",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a6e88006-d3e5-462e-a625-5ea132f50b38"
        },
        "item": {
          "id": "3c588167-2cd2-4f58-8364-f6545a0625de",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e68bc0ac-dc31-4b47-8d6c-fed78b74bf22",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "1a28fab0-cc8e-499d-baae-167aec56b7e2",
        "cursor": {
          "ref": "ed48d098-a4e4-473f-ad29-a30464289be1",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9f478e62-af34-42af-a46e-9a15f38e33b2"
        },
        "item": {
          "id": "1a28fab0-cc8e-499d-baae-167aec56b7e2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5477827c-1c55-4bd4-a38c-bd4c5df5736b",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "abd23a72-84a4-4d47-8983-13477e23b85a",
        "cursor": {
          "ref": "be4af303-913e-4f26-80c3-ebd67f8eed70",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "987ae8c2-938e-4af2-b4e1-47aebb8c98eb"
        },
        "item": {
          "id": "abd23a72-84a4-4d47-8983-13477e23b85a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8dd81886-2dd9-4a86-9747-fc735c42fd6c",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "1b3b9e1a-cd5c-4c55-9439-d3e7421a1291",
        "cursor": {
          "ref": "54bdd9d7-3a8c-468d-a80a-9d6829196fd0",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c618722d-89a5-4178-94b8-79a3568832ed"
        },
        "item": {
          "id": "1b3b9e1a-cd5c-4c55-9439-d3e7421a1291",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7123159a-e4d5-4cff-b0d9-17dc271817b8",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "e5dfd3db-35a8-4560-b476-7cfab146e594",
        "cursor": {
          "ref": "c6278adb-8219-470b-85f7-40023f52ad7a",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b67dc1c9-be6f-43f3-9990-f39b2d42c193"
        },
        "item": {
          "id": "e5dfd3db-35a8-4560-b476-7cfab146e594",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8c7047ed-4bb5-44e4-b238-df1bfb3ba5fa",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "0f285c52-b8cd-44b7-ac1c-23de74cf7014",
        "cursor": {
          "ref": "74f10b92-0275-40a2-87a9-ce9842df34a0",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "7509ca64-d603-4dfe-9823-388f17bafe71"
        },
        "item": {
          "id": "0f285c52-b8cd-44b7-ac1c-23de74cf7014",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1801afbd-bce7-48a5-bad4-fb3e01ff6cf0",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "5201e724-d699-4e07-a8b8-30a14ef08ae8",
        "cursor": {
          "ref": "b780ccd2-4caa-43c7-98fd-6c9f22d73ab9",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c24cc0cd-e839-4d34-8eae-a7d747c2a09d"
        },
        "item": {
          "id": "5201e724-d699-4e07-a8b8-30a14ef08ae8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8da19344-7c65-47e8-8d9f-7b1833b666bc",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "9b99c230-081f-4d9b-bb88-0c582285579d",
        "cursor": {
          "ref": "44b55af4-018c-4074-a2b5-999a45dee2e6",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "73be2442-0f9f-4bf6-b4f3-e99bbc36c9f1"
        },
        "item": {
          "id": "9b99c230-081f-4d9b-bb88-0c582285579d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "25ec90ef-66e6-43a4-9883-73450e2183fe",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "2acc6266-b49c-40e4-a67e-0f09272e79d0",
        "cursor": {
          "ref": "4e299bcf-c7da-4181-aa30-7f3ab9467ec0",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c7101842-2996-4215-a4c8-2f9d0f685222"
        },
        "item": {
          "id": "2acc6266-b49c-40e4-a67e-0f09272e79d0",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "afd623c4-809e-4ac3-bad0-4152a4da3f3a",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "0a2ad5d8-efd2-47c1-8eba-73d77e81eaa1",
        "cursor": {
          "ref": "133a2aa9-9f01-48c1-856a-416c777ab989",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "462f1b1b-8c75-4f56-80a2-9d1849af50e2"
        },
        "item": {
          "id": "0a2ad5d8-efd2-47c1-8eba-73d77e81eaa1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7b34c2f5-bd1c-463f-a7a3-2b59de343d8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5afb598f-0efc-45a8-8e06-e3cc33811114",
        "cursor": {
          "ref": "5da07fd8-172c-4dd0-906d-bd63f7cd6b70",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "35f08830-addb-4a19-a8b6-867146f88139"
        },
        "item": {
          "id": "5afb598f-0efc-45a8-8e06-e3cc33811114",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "7b63ca1f-9585-43d8-95f3-82b848461e72",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4abdaaf-d499-4e9d-b05d-d761660be279",
        "cursor": {
          "ref": "432f5a2a-441b-41ba-9cce-6bf44cfaa458",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "63c9488e-b094-480b-a104-63d1210ab647"
        },
        "item": {
          "id": "d4abdaaf-d499-4e9d-b05d-d761660be279",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "14fda7a0-7909-451e-ab73-5ad7d059db63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4abdaaf-d499-4e9d-b05d-d761660be279",
        "cursor": {
          "ref": "432f5a2a-441b-41ba-9cce-6bf44cfaa458",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "63c9488e-b094-480b-a104-63d1210ab647"
        },
        "item": {
          "id": "d4abdaaf-d499-4e9d-b05d-d761660be279",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "14fda7a0-7909-451e-ab73-5ad7d059db63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1be4bab-b688-4ad4-8bda-bb544783f231",
        "cursor": {
          "ref": "ac95e3ca-4b7a-41bc-8efe-f044c5f49817",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "35b7439b-aa17-4a92-b14f-bcd8698997a0"
        },
        "item": {
          "id": "a1be4bab-b688-4ad4-8bda-bb544783f231",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3d3d4d12-b398-4ff0-97d2-aba8c62768d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9d767e-68a2-4331-955c-e2c380ecf438",
        "cursor": {
          "ref": "8b6d2b83-02f3-492e-b040-c11dcd27c140",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "04f5c6fc-faef-49ff-b015-daf0b2249270"
        },
        "item": {
          "id": "de9d767e-68a2-4331-955c-e2c380ecf438",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "88c8db79-b4bf-4b38-82f9-271f38d79728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719994cb-822f-44d3-a8bb-430f449c89ed",
        "cursor": {
          "ref": "13a8f541-c9de-4e6e-aae8-3dcce4c9a935",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f20b2f4e-222e-4c69-8a38-50393799ee60"
        },
        "item": {
          "id": "719994cb-822f-44d3-a8bb-430f449c89ed",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "2a53c0f9-90c3-4f80-9ef8-1aecab58f197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ef96a0-ffc6-4799-8cfc-f36251b55072",
        "cursor": {
          "ref": "3182764e-a8fc-479c-8d1d-1f755ac27719",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a1c7ece9-9696-4b03-ac3d-bdd36c2276ad"
        },
        "item": {
          "id": "33ef96a0-ffc6-4799-8cfc-f36251b55072",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "55ba78cf-bc10-4710-9377-3e5034c8785a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be25a498-b72f-4d0e-b8fc-474bd057e925",
        "cursor": {
          "ref": "14731687-ee69-4dac-b1cf-1c3e60a1ce6b",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "89c6cc24-4218-438d-8a1d-e664ea313a5d"
        },
        "item": {
          "id": "be25a498-b72f-4d0e-b8fc-474bd057e925",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b80772ef-2008-4df9-9d51-667aa511bf4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78df3159-1ef1-4161-9889-5819e0f8029d",
        "cursor": {
          "ref": "1f878c3c-c9e6-49c6-a1b0-aab382764de6",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e2ef6d49-b949-43ef-94c3-6eb9fcc9d985"
        },
        "item": {
          "id": "78df3159-1ef1-4161-9889-5819e0f8029d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "0ca5c7f3-c9ac-4ac2-895f-ace8eb6f9baa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 519,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfb065f4-7af3-43d2-9eee-f2d951c9ad80",
        "cursor": {
          "ref": "50b383aa-f13b-45c6-bc37-e917e95b4b5f",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "03468df3-bce7-469d-98c4-d1a13c32a80b"
        },
        "item": {
          "id": "cfb065f4-7af3-43d2-9eee-f2d951c9ad80",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "7d74946f-217f-48c4-a2da-32ed3b79274a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf133d53-380b-43bb-8973-ea78cf2671db",
        "cursor": {
          "ref": "b34360dd-6c6f-4810-96d0-00329682c09f",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "98d03bf1-dd3f-40f2-9011-6a380185620c"
        },
        "item": {
          "id": "cf133d53-380b-43bb-8973-ea78cf2671db",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e39717b4-f724-4759-88d8-7fccc652f0e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00bd74fa-f4d2-4135-8acf-17943b27e3a4",
        "cursor": {
          "ref": "92a1aae9-335a-4aa9-912d-6a0ad0d4cb17",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "36c415fc-eeee-43e1-b823-15115a19f4ec"
        },
        "item": {
          "id": "00bd74fa-f4d2-4135-8acf-17943b27e3a4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "101ea814-7963-4a9f-8d6b-da3b32a6c06d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "044d0850-26b0-4df9-b081-ce9577dea601",
        "cursor": {
          "ref": "87b40711-479e-4808-99a2-849f6b5adbb0",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "4449cff9-9aee-4626-b263-bcc4a7af0740"
        },
        "item": {
          "id": "044d0850-26b0-4df9-b081-ce9577dea601",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c3f394c4-c56f-4781-8249-7ce8644bf8a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41e632b6-535a-4149-a484-45bf2ddc9832",
        "cursor": {
          "ref": "7fb89cd3-3d64-43de-afd1-58f9a08427a7",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4fdbbffc-1315-43f8-b391-8b7e907fce94"
        },
        "item": {
          "id": "41e632b6-535a-4149-a484-45bf2ddc9832",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "30fed35e-66c2-4e40-a977-6f09afbdc9b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e98cab0-258b-47fe-b5a6-4b231a0146f1",
        "cursor": {
          "ref": "6ec373c3-a8f6-4a88-8854-ad92d62e65ca",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a7dba956-89a2-40c9-90ae-50fe1c7f79a2"
        },
        "item": {
          "id": "0e98cab0-258b-47fe-b5a6-4b231a0146f1",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f48cdd04-1050-4369-9233-48896609a962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e588cac-1fe0-42b6-b8e3-0c0a00507f4f",
        "cursor": {
          "ref": "a3054b06-8e2f-488c-a03c-a00a208806c1",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "de343da9-9918-4f5d-8f4a-283926d25d16"
        },
        "item": {
          "id": "3e588cac-1fe0-42b6-b8e3-0c0a00507f4f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a5925f10-e547-4107-b5f5-f26dee22a2f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e2edf7-3943-4c9a-8d54-14fa9b07ac68",
        "cursor": {
          "ref": "49b70446-779d-47eb-ad28-eb078efc6cb4",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "7a68a5e5-fed3-47b7-9055-41b55e9e70dd"
        },
        "item": {
          "id": "20e2edf7-3943-4c9a-8d54-14fa9b07ac68",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "71fd05fc-321a-48e7-a59f-bfd684827768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ba2b35f-4777-4a99-b363-1eeee7d772c5",
        "cursor": {
          "ref": "e4d606ef-f57a-4284-b061-2e3d392949d3",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "072090ec-6ada-451f-a0b3-c973054d6d29"
        },
        "item": {
          "id": "6ba2b35f-4777-4a99-b363-1eeee7d772c5",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "171912cb-08ad-47b1-a8fe-cd17001edd16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9726cfe1-50f7-4c02-9399-42269122705f",
        "cursor": {
          "ref": "af80e879-7460-4b88-acc9-dc3ac4a4d20f",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "bb08fc5f-cc17-42e2-bb98-be845c378046"
        },
        "item": {
          "id": "9726cfe1-50f7-4c02-9399-42269122705f",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7d601392-a7f9-4223-986e-cbae58c74da8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e1009c-d121-49ef-b741-2b383ca07347",
        "cursor": {
          "ref": "f86f1495-cede-4e1a-a36f-7eeba8e6bd8c",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "4c2e8d44-e2f6-4414-b513-041441125de0"
        },
        "item": {
          "id": "17e1009c-d121-49ef-b741-2b383ca07347",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0ae1e6fa-647a-4572-b597-47f30d6fd10b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 358,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe4c787-b468-48cf-8b47-dd03b984680f",
        "cursor": {
          "ref": "2cb4cc59-0d1c-424c-8d7c-8b789f845d65",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "65548376-357e-44bc-81fe-76add012a3ed"
        },
        "item": {
          "id": "1fe4c787-b468-48cf-8b47-dd03b984680f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "824ae2fd-fb86-4f36-b1e7-582a37d94971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59760905-ae03-4e47-b80b-84e8a2fe65a7",
        "cursor": {
          "ref": "76425549-3ca0-4c03-a0e9-92eff57b510a",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "58294888-cd2a-4b8d-80cb-c642a0b18e50"
        },
        "item": {
          "id": "59760905-ae03-4e47-b80b-84e8a2fe65a7",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "950cd7af-d8d2-4aed-8731-0e407f9e7a03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 175,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "527a4ee6-0e6a-483b-9f7b-ebf7b4eb3573",
        "cursor": {
          "ref": "062a717d-1f91-42fa-a27f-bfe449b1b9ee",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a1fea287-c63f-4f19-8d22-d5f601e38d39"
        },
        "item": {
          "id": "527a4ee6-0e6a-483b-9f7b-ebf7b4eb3573",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4f8cabf2-f68f-4127-b103-bec85c540c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "683b3ac5-d577-4b52-8a1f-ecb7489673e4",
        "cursor": {
          "ref": "8b69d468-7205-4196-87b7-6c070b67d8bd",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8e1074c7-6798-4fb3-844f-3d242a1bbcf5"
        },
        "item": {
          "id": "683b3ac5-d577-4b52-8a1f-ecb7489673e4",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2d19de60-1f27-421c-928f-bee456397ff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5502d0c-22ba-42ce-b86c-627141febf11",
        "cursor": {
          "ref": "8ea679c4-571b-43c9-9366-0348d4a4713b",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e68a5c2d-5f94-4540-bded-2f90931419cd"
        },
        "item": {
          "id": "d5502d0c-22ba-42ce-b86c-627141febf11",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "bdd1a78c-04b9-4a2b-b80c-58b27be64d68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c01ab95-c47b-466d-9935-d7aeca538b3c",
        "cursor": {
          "ref": "595617ee-0b27-4c58-9d76-c1a9242160a3",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d050ce61-9b71-4804-b184-16c83e89a548"
        },
        "item": {
          "id": "1c01ab95-c47b-466d-9935-d7aeca538b3c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "bf75404b-f94e-4682-a720-6c3c978fac0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d640c830-b33c-420a-847f-0f8a8154ac59",
        "cursor": {
          "ref": "4515e5b1-dbf8-40e1-b27c-065a183b7387",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "80366b61-86c0-4ecd-b221-5cd67ff003f2"
        },
        "item": {
          "id": "d640c830-b33c-420a-847f-0f8a8154ac59",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ed3cc9a1-c366-44c0-a477-3d1ef0a4bb62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bbd3971-c93d-4518-8423-0a3d39d3c267",
        "cursor": {
          "ref": "0fd7cfff-9d3a-4138-8752-7ae0e2f16de8",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f66fe6bf-5a99-42e0-b081-2364f239d039"
        },
        "item": {
          "id": "7bbd3971-c93d-4518-8423-0a3d39d3c267",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a04dd3c2-1be3-4068-9c30-f0a17bc7f088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52363ac1-ba79-4504-8800-6ad91900e086",
        "cursor": {
          "ref": "63e087d7-9522-4d16-985a-f1ca539f0695",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ce0a1e8f-f8b9-4e78-bae0-da7a0f75030f"
        },
        "item": {
          "id": "52363ac1-ba79-4504-8800-6ad91900e086",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3bfac25b-606b-4f0e-ad3d-478b761ea20f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cda50cb-d80c-4b50-81d1-cedb612df1fc",
        "cursor": {
          "ref": "d81eaae7-033c-40e0-9331-93c367c86880",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0e760cd9-603c-444b-b05f-2ecf16a336ee"
        },
        "item": {
          "id": "3cda50cb-d80c-4b50-81d1-cedb612df1fc",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "300a7b0c-54e3-4778-a865-e538ef379e1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b4e3ee-842f-475d-a409-0d93b7238a99",
        "cursor": {
          "ref": "81370b48-f3f8-4318-8017-2e216132952b",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0578603b-c215-4308-8c67-c4497b185354"
        },
        "item": {
          "id": "45b4e3ee-842f-475d-a409-0d93b7238a99",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "7e4ead97-e6e5-4a4a-a6f9-1acbf99c0f6a",
          "status": "OK",
          "code": 200,
          "responseTime": 183,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "9aa49a4a-53b5-4a3e-a3f1-202581ae02cb",
        "cursor": {
          "ref": "9e59310a-bc2b-4cdf-96c6-f9bf1bae0319",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "cbc49274-db36-426f-9e6e-8cfefd07d470"
        },
        "item": {
          "id": "9aa49a4a-53b5-4a3e-a3f1-202581ae02cb",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "64bd7510-5096-4794-80cb-25bd38e21b99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "845e5311-dbb4-4500-9faf-0c121dc0bbe2",
        "cursor": {
          "ref": "92e7e8ba-7d98-479d-bd86-646006de0eee",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a890599b-53d1-410d-99ef-d59f4cd45670"
        },
        "item": {
          "id": "845e5311-dbb4-4500-9faf-0c121dc0bbe2",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "5f9f9e94-3490-495b-aca1-ca8b7b40daf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb966d6b-46bc-4b0a-a907-6030c1034992",
        "cursor": {
          "ref": "52a893fc-3f48-4a35-bc6c-5428ec816162",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "bc36b90a-0eb0-47a6-a606-082162232c25"
        },
        "item": {
          "id": "bb966d6b-46bc-4b0a-a907-6030c1034992",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6ed51015-1a7b-4be6-a8e2-95451a346932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f18fcfbc-8c89-4f34-815a-292bceea3967",
        "cursor": {
          "ref": "6ebf0b6b-566b-47d4-8034-c4db46b464a0",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "bf1c174c-da63-4dc7-9318-64c490524305"
        },
        "item": {
          "id": "f18fcfbc-8c89-4f34-815a-292bceea3967",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9cdd3143-f445-480e-8dee-674e80e13258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 168,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa909d82-3ee4-4571-bdb6-75e44a8f9383",
        "cursor": {
          "ref": "5f37f611-ecb7-46c7-885a-539f0b91c914",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "015056e3-4c79-49e8-904e-0f1f12b94a91"
        },
        "item": {
          "id": "fa909d82-3ee4-4571-bdb6-75e44a8f9383",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f5ceef90-c210-4d37-867e-868c4cc78484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a925554-cd00-458d-9e2f-f1fc446e71a3",
        "cursor": {
          "ref": "4649999b-3675-46f8-9fa1-f63a79747bc2",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b66d8411-f1bf-48fb-8b71-edb98f2e45ad"
        },
        "item": {
          "id": "5a925554-cd00-458d-9e2f-f1fc446e71a3",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "33cd75ba-00ee-4b56-af0d-69136752c96d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a02979-7d1c-4b24-b937-89db482bb0b4",
        "cursor": {
          "ref": "35a74684-2209-4e99-ab2b-fc47fd74df09",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "70b9ffe7-29cf-4dbc-8365-1407372c77af"
        },
        "item": {
          "id": "f7a02979-7d1c-4b24-b937-89db482bb0b4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1e9925e2-5581-4c75-acce-c8deda6fa2e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d5c1d37-883a-4b05-a6f2-832bfdaa719d",
        "cursor": {
          "ref": "b9bdea40-de4b-4a25-bf7c-b6def27987a0",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "cd9e2d00-5850-4ea1-bd92-31f3cd7b97ba"
        },
        "item": {
          "id": "4d5c1d37-883a-4b05-a6f2-832bfdaa719d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "4017dabf-e5f2-478a-a8e4-dcb306aa5ffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01610f46-f761-4aa7-be98-58147423be12",
        "cursor": {
          "ref": "7b9b2a4a-53b9-4caa-b808-0fa0c6cb939f",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "42cf49d9-a1bb-4beb-a732-334448be3566"
        },
        "item": {
          "id": "01610f46-f761-4aa7-be98-58147423be12",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "505cdbd2-538d-4dd8-8517-e2f925ce692f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c3dcd98-00de-4527-b776-98f3512b16fe",
        "cursor": {
          "ref": "4a3638fb-62c7-453c-bc4e-420db7ba4b47",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "97edde3e-3b4b-4f18-bb40-c224b3c39634"
        },
        "item": {
          "id": "6c3dcd98-00de-4527-b776-98f3512b16fe",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "394091d3-991e-49e3-9df1-e3668f3ca052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87ab36f-d641-437c-9d2b-c7ce25d2c39f",
        "cursor": {
          "ref": "8422b302-bcc1-4e86-8392-bdc03535d2c9",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "71a2f9b9-13e4-4fa9-a682-815d70a4bafa"
        },
        "item": {
          "id": "b87ab36f-d641-437c-9d2b-c7ce25d2c39f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "47cb5bbf-de00-4952-bff3-603b6e331e32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa237415-99ef-401c-90d8-6c558e9e1924",
        "cursor": {
          "ref": "9f7b3418-45ad-48e0-9836-8a7f98fb9eed",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ad9cecd0-d22a-4c18-a5f8-08ed70296e2b"
        },
        "item": {
          "id": "fa237415-99ef-401c-90d8-6c558e9e1924",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2a8a6b8a-f339-4f96-9840-20e36c94e954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ac5882-308f-4f72-80f3-dbfdd1833a1f",
        "cursor": {
          "ref": "59c18f28-b6b5-441a-88e7-67381246c11b",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "dc28f6b2-433e-4a81-bf4a-f2db89a75d4f"
        },
        "item": {
          "id": "c4ac5882-308f-4f72-80f3-dbfdd1833a1f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "33d4ff13-3d69-4557-9fcd-60ca73eaa7a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e022fbf4-f90b-4ac6-9a8f-1a2789004a7e",
        "cursor": {
          "ref": "a423a90b-98de-4369-ae38-ece188c0da4e",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "1a387d08-c8b5-47be-bbf4-1c2aa4463a1b"
        },
        "item": {
          "id": "e022fbf4-f90b-4ac6-9a8f-1a2789004a7e",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "039c3a5d-fe55-43fa-88ed-4a17807bb6fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "449c7879-2e73-4bc0-953f-ffdd60fe86c8",
        "cursor": {
          "ref": "e216c5fb-b48f-4059-9bf4-93599ffde704",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a231e221-ef2c-4a0e-bd81-4a13aff1cae6"
        },
        "item": {
          "id": "449c7879-2e73-4bc0-953f-ffdd60fe86c8",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "615dde6a-215b-4813-8f2b-39c7217b6679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 209,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "111d04c3-91cf-4770-873b-afc57f5869c6",
        "cursor": {
          "ref": "a3fa633a-dcfd-42cb-8819-8f50301ddda4",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3589a9e2-fbcb-40da-a191-a6ebb2d0535b"
        },
        "item": {
          "id": "111d04c3-91cf-4770-873b-afc57f5869c6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "73e1438d-9af5-4693-81a7-7205bc13a0f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67c6532c-92a3-4c61-94f6-1d8d59fc0bfd",
        "cursor": {
          "ref": "8d5c4cc1-55c4-494c-858c-282cc80cfec2",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f3390293-a59c-4b05-845a-3b05988b457c"
        },
        "item": {
          "id": "67c6532c-92a3-4c61-94f6-1d8d59fc0bfd",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "76322ff6-35e6-45f1-b29f-ee35bfd2e491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e8c5eed-4810-4738-bb11-d8cd96b9d3e4",
        "cursor": {
          "ref": "64bacfef-9d9b-4105-a7c0-af4838f4a6c3",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "26d75517-fc54-4fcd-a799-53ca3b979829"
        },
        "item": {
          "id": "1e8c5eed-4810-4738-bb11-d8cd96b9d3e4",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "cf7c67cf-9800-4262-928d-14c089b157ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45446899-c605-4dcf-915a-dae996dd1972",
        "cursor": {
          "ref": "9b5b5343-8a83-4fd5-b6af-e0f1cde44691",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "759ee92d-72a5-4539-8ef4-0f42b2334d18"
        },
        "item": {
          "id": "45446899-c605-4dcf-915a-dae996dd1972",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c16802f3-ca44-47d1-b43f-71000b0b4b5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0780fd7f-9b9e-49c1-86a5-e1cad8f50101",
        "cursor": {
          "ref": "a2083439-a408-4cf7-9cf9-3ffb992379a2",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "99be77fe-c8cf-4582-b773-412c2d9d43dd"
        },
        "item": {
          "id": "0780fd7f-9b9e-49c1-86a5-e1cad8f50101",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c9879d28-9ae7-461f-9d5a-186168be33a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a8ea157-c5fa-4e29-9060-c95930cd9d8c",
        "cursor": {
          "ref": "2d8dbb58-449d-4010-ab51-6c5912ecbdc9",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "252c7dbe-2142-447c-aa7c-bcd3f9946768"
        },
        "item": {
          "id": "8a8ea157-c5fa-4e29-9060-c95930cd9d8c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6816572f-a143-49bf-af92-2b3eaedcbf1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd445015-b750-4b5a-9d11-b06f79b0a823",
        "cursor": {
          "ref": "722717e7-b85e-482f-a662-6ec16428197c",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "0ff8471c-82fd-4c76-8a55-fcaac835d00c"
        },
        "item": {
          "id": "cd445015-b750-4b5a-9d11-b06f79b0a823",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "a4530c9d-6819-4d16-944d-0986c174ef77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 182,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e07e614f-ca76-468c-8268-73a34532db50",
        "cursor": {
          "ref": "12f95ba3-4436-4122-ae96-0b2ac361da4b",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4a9aa74f-486d-45ee-9e9a-d291cc912803"
        },
        "item": {
          "id": "e07e614f-ca76-468c-8268-73a34532db50",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "35af1132-94c1-47e6-bd3b-7454cb524006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a248b5a5-2677-40e6-9bc1-b2774b363707",
        "cursor": {
          "ref": "6429da22-cd50-4c5c-b58a-55b0ad3c5026",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "cbeea944-3f12-472f-bba2-d0213869f1b3"
        },
        "item": {
          "id": "a248b5a5-2677-40e6-9bc1-b2774b363707",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "cc22807d-1daa-47cd-8a9d-56ca12db4607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d8d051e-eb91-46bf-9214-2c81d36ff60d",
        "cursor": {
          "ref": "0a9e9c97-2a3a-4ddb-95e3-29ab4fcdd742",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "51810fd4-4de4-45c6-a1a9-8e4547869f56"
        },
        "item": {
          "id": "0d8d051e-eb91-46bf-9214-2c81d36ff60d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2e3182ff-02af-463a-88b6-2de0d55f9bef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f39219-53e6-485f-b5a2-4dc58a85f9c4",
        "cursor": {
          "ref": "f9cf6399-0732-4049-8633-a85442366e20",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "92589a19-281c-41cc-951d-8beaa18f9117"
        },
        "item": {
          "id": "40f39219-53e6-485f-b5a2-4dc58a85f9c4",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "31dc6ee7-6c22-404b-8db7-dd49d304684a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edaa1f7d-d73a-4d04-83a6-168df2ea4632",
        "cursor": {
          "ref": "2c7fb6ae-9858-45e8-a845-c1f0a089c11e",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "632c1ef8-956e-400a-acf3-3492e0c63b10"
        },
        "item": {
          "id": "edaa1f7d-d73a-4d04-83a6-168df2ea4632",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f283542d-ce3b-4417-a790-ecd479834b73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20bed2ba-64a8-4461-ba35-f118f8373913",
        "cursor": {
          "ref": "9f6a7882-7130-4293-8490-4378ba1f5264",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f0dc2106-b53d-40a1-b242-816277abe128"
        },
        "item": {
          "id": "20bed2ba-64a8-4461-ba35-f118f8373913",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d0473eb8-bd6a-4405-a174-aee867d87b73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b60b9c5-2215-4378-957f-2cf61893ccd9",
        "cursor": {
          "ref": "8e762ae1-401a-47be-8452-b96bff26044a",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "102e059b-15eb-4830-9dd2-0dd7ec7ecbd2"
        },
        "item": {
          "id": "1b60b9c5-2215-4378-957f-2cf61893ccd9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3e3b8a3b-7093-4d1b-a121-f61518236e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e40726-f38a-45ce-b7ab-7e6b2fc94123",
        "cursor": {
          "ref": "199660d0-3459-408d-8876-d56b80789a40",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "7e11e2c1-2ba1-4fb6-808c-7cafb13a9942"
        },
        "item": {
          "id": "e8e40726-f38a-45ce-b7ab-7e6b2fc94123",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "27c6bc47-b939-48ab-8dd0-c86cbc59ee37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f283e8de-b81e-4889-81c4-acda2ec88380",
        "cursor": {
          "ref": "03e7004c-d405-4840-99f1-bed4f9830245",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "76a581ea-3d98-4be5-b0a3-8b7aeecb46fa"
        },
        "item": {
          "id": "f283e8de-b81e-4889-81c4-acda2ec88380",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b908c183-3022-4450-a713-8a6a736ebca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf31c1d-51c8-470e-b033-b8e19d565e4c",
        "cursor": {
          "ref": "650e6129-41c1-4814-882d-6a75bdda0906",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6a7e5477-13c9-40f5-9a95-c4f55a15504b"
        },
        "item": {
          "id": "bbf31c1d-51c8-470e-b033-b8e19d565e4c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b4bbfe85-a3f2-4d77-869b-9c11571f4c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0763855e-8c06-4b02-a8c6-20c826a1475d",
        "cursor": {
          "ref": "2bbf6aa8-acf4-425c-8f8e-4fb350f74eb2",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1fca6c48-72e5-4026-b596-c7b3246e47f2"
        },
        "item": {
          "id": "0763855e-8c06-4b02-a8c6-20c826a1475d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8db7ce25-3fcd-41c9-9811-b6c55f84c76b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db56e30-7644-4959-8d1d-25f49e65b0cd",
        "cursor": {
          "ref": "5e3d9109-dd2d-46fa-b3d5-abf3515238be",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "65daf33e-abdb-4b93-8570-f9fb64f2a8af"
        },
        "item": {
          "id": "5db56e30-7644-4959-8d1d-25f49e65b0cd",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "dac78883-36b5-48c3-9327-3573fd738818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adfe8b66-24a3-423f-baa9-bc86505c7440",
        "cursor": {
          "ref": "e8c88c30-e33b-413e-abaa-5fb9a5fc1176",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "3df76f40-edbc-43ce-a922-2af59ecb710c"
        },
        "item": {
          "id": "adfe8b66-24a3-423f-baa9-bc86505c7440",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "06c4aef5-7326-4d93-8f67-d130ddd112a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e07883-d69f-4a7c-b2dd-98ad6003d0b6",
        "cursor": {
          "ref": "9e5fc03b-d674-4a2b-9ca3-a42c9c35c201",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ecf59971-78fb-4792-b5fb-89f6cac3d7ea"
        },
        "item": {
          "id": "25e07883-d69f-4a7c-b2dd-98ad6003d0b6",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4be2142a-3fcb-4eb0-8a55-f6172d736bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92888f84-6f7b-4193-b285-ffcab8c803cd",
        "cursor": {
          "ref": "89cb0901-ac03-4b5e-946f-5dc7890e1f2c",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3499f67e-bb47-4a25-ac54-01ea47c60009"
        },
        "item": {
          "id": "92888f84-6f7b-4193-b285-ffcab8c803cd",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "33fcfe90-3404-49d2-926b-9939265bc79c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21005e6b-5c4c-4bc3-8410-3887462d8abc",
        "cursor": {
          "ref": "c418931f-0682-4ef2-8b03-c97c65636682",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "52d09b2c-8d51-45ab-8655-9291d04aeca0"
        },
        "item": {
          "id": "21005e6b-5c4c-4bc3-8410-3887462d8abc",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e5b4c462-6a4e-4c83-9eac-5f067dc3d6bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb2dd436-7dbd-4772-b35d-10f7846b510f",
        "cursor": {
          "ref": "38fb5789-b68f-443c-9dc3-f28190083da7",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "832db7ad-bf89-463d-a66d-63295aeef5bf"
        },
        "item": {
          "id": "bb2dd436-7dbd-4772-b35d-10f7846b510f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f533cf56-f6f8-4b9e-8af4-9dabcf824ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7ac6123-61a1-4c78-b263-0d401064635e",
        "cursor": {
          "ref": "14a8a7bc-a901-4a9b-850a-edd9d19e64fe",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "fbb04011-35fe-43fa-b4eb-0e690e81df31"
        },
        "item": {
          "id": "d7ac6123-61a1-4c78-b263-0d401064635e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "de2755e4-3598-4457-a295-3373ec2d7a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3eafbb4-a51e-4c99-8002-b98873e0f10b",
        "cursor": {
          "ref": "13cd5204-727c-4959-af43-0cc9a2fa7df7",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "25d92651-166d-405b-b5ec-386a851f580e"
        },
        "item": {
          "id": "b3eafbb4-a51e-4c99-8002-b98873e0f10b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "993e3db9-0728-4e60-80f7-3a6d114fcf9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c7949fa-47a4-4393-ad88-783b30426261",
        "cursor": {
          "ref": "d3b90dbf-5479-4a23-ab30-922c51597edd",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "fca7bf5d-2dd4-403c-8821-13c2c8a17ccb"
        },
        "item": {
          "id": "4c7949fa-47a4-4393-ad88-783b30426261",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "75ca42e0-033a-40bd-a413-480e475080c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b56353ee-729a-4eeb-8d31-c2f22b3bbf78",
        "cursor": {
          "ref": "8e859493-36cb-460b-99fd-beca07d209ad",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2f647b43-e8f4-4560-ad4b-76222228edc8"
        },
        "item": {
          "id": "b56353ee-729a-4eeb-8d31-c2f22b3bbf78",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5b701f9d-b8bc-487d-9bfe-3261993df766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d35d7dac-1fa3-413d-aef8-51ead4cea267",
        "cursor": {
          "ref": "5989e43d-6319-4c40-984a-5a1183e6bc5d",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "94e6dc0b-3902-4d88-863d-c4fc151938f9"
        },
        "item": {
          "id": "d35d7dac-1fa3-413d-aef8-51ead4cea267",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "cc7b18a3-1d5c-49ec-87ae-183020352469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b52a2853-5915-4684-bf93-f6d154ce0d1a",
        "cursor": {
          "ref": "f72fac67-a427-4ced-a29d-72a350b8aade",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8d728c91-5c1d-4d4f-9f77-60645163149f"
        },
        "item": {
          "id": "b52a2853-5915-4684-bf93-f6d154ce0d1a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "fc88f229-06b0-4851-8360-fb0bb91e3f7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc40af7-410b-4a7b-8d92-7efd2193a0b4",
        "cursor": {
          "ref": "441d05ff-f739-42dc-897b-b19f26d2e6bc",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "db256a89-16e1-47cc-b909-ce200f20b7a4"
        },
        "item": {
          "id": "0cc40af7-410b-4a7b-8d92-7efd2193a0b4",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "bc0628ec-09d4-41df-b451-dae595d7022e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b3bc84e-0aff-4ad4-9489-57310a85c33f",
        "cursor": {
          "ref": "734e4765-2087-457c-965b-5417cc2f725b",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5ed35f5c-8855-4bc5-9dfd-b8b6064fe756"
        },
        "item": {
          "id": "7b3bc84e-0aff-4ad4-9489-57310a85c33f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "019b0dd6-9d19-44c0-8e6d-fbc6a541405c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3654e4bd-1bc1-4918-9920-ef305534220f",
        "cursor": {
          "ref": "fea52be4-a427-46c7-b55d-22826c17d2aa",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6278f7e6-2ef9-4e3f-8b65-95a50f071b17"
        },
        "item": {
          "id": "3654e4bd-1bc1-4918-9920-ef305534220f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "19deba5e-57c2-4416-ae1d-1434bb49bb2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "622a735c-a46a-4e35-8df8-acad5768cd92",
        "cursor": {
          "ref": "60fa2f3d-1df5-4b2b-9fea-3b4ea09bcd3b",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6828ed33-f730-4799-abad-a33483b55269"
        },
        "item": {
          "id": "622a735c-a46a-4e35-8df8-acad5768cd92",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3b0db368-30b7-4707-b0bc-477f57e03906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff82ee77-50fa-4377-85f9-c7c6c5c57fc2",
        "cursor": {
          "ref": "74b231d6-1ab6-4960-998c-7958dd7e1d47",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "13181f3d-f13c-452f-9c1d-cf5eba43dbb7"
        },
        "item": {
          "id": "ff82ee77-50fa-4377-85f9-c7c6c5c57fc2",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "22be31ab-fa52-48d0-b550-975f09d7de7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df77300a-409a-4005-af45-42e2875ba5fa",
        "cursor": {
          "ref": "c5e9f922-8424-4c04-b1fa-a7a92212304a",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f5a82fa7-935b-415d-b2d0-ad3670583b24"
        },
        "item": {
          "id": "df77300a-409a-4005-af45-42e2875ba5fa",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "8e56eff1-0bf5-4c65-98c6-7e4908b2a61f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f41c458e-0e8c-47b1-963d-cb303046392a",
        "cursor": {
          "ref": "65b34005-890d-46a6-b936-26cf3418b0e5",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "9988f6c3-b7e8-49c4-8868-b1f4234d3752"
        },
        "item": {
          "id": "f41c458e-0e8c-47b1-963d-cb303046392a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d760b39b-6619-474e-815d-ff54e478f5cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad2c356-df1e-4725-aa2d-77798fe258dd",
        "cursor": {
          "ref": "801d7dda-262b-462f-a478-f3fe9a931098",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "f9c9e0db-f4b6-49a2-8494-5e8120a5fb3b"
        },
        "item": {
          "id": "cad2c356-df1e-4725-aa2d-77798fe258dd",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f1312461-94e2-4a6e-a904-d5fbbe352b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c1829f-0473-4368-b5d8-0c43a2be77f6",
        "cursor": {
          "ref": "1fe76f26-fd36-4d1a-8c1d-92b3a8f1c078",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c0fce266-b0ae-45d0-9785-2ef17c2903c2"
        },
        "item": {
          "id": "b3c1829f-0473-4368-b5d8-0c43a2be77f6",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "45b93ef5-827d-49f4-834a-db9161e88fd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7523c217-1718-4316-ac10-8d47b11179b5",
        "cursor": {
          "ref": "323e6cba-285e-4f04-bd3f-68c377d44bbb",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "95e201a8-2b41-4ae7-90ed-d92b55a2219f"
        },
        "item": {
          "id": "7523c217-1718-4316-ac10-8d47b11179b5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "622ccd47-d363-4c04-a946-816f29a9e2d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "063c1e3b-d864-4605-9418-6343d2b97c52",
        "cursor": {
          "ref": "d6a2cc89-3d70-4af5-abdd-23aab8f2e506",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "fd78ed37-8747-49a3-adda-448aea1e0770"
        },
        "item": {
          "id": "063c1e3b-d864-4605-9418-6343d2b97c52",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "149b4dd0-6d37-4f08-bdd5-63e12ec4dac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e216a142-444f-410c-b42b-c7d9fff7c99b",
        "cursor": {
          "ref": "8036db05-99d9-4272-a9e8-38d368889294",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f4c709e3-08ae-400d-89f4-1063a18b29dc"
        },
        "item": {
          "id": "e216a142-444f-410c-b42b-c7d9fff7c99b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "93a18001-92b5-4d0f-ba7c-00a7836e2a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8bd18cd-e350-4238-956a-b27bd18e7aef",
        "cursor": {
          "ref": "8d94fcd1-dae7-4798-93aa-1d8574ec54bb",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "18f2ad3b-6add-4e1b-88b5-08c132edd033"
        },
        "item": {
          "id": "f8bd18cd-e350-4238-956a-b27bd18e7aef",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "57f181a1-3a8c-40ef-a2a2-9403871dc9a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26a3742b-8f68-464c-81b0-09f5a695739e",
        "cursor": {
          "ref": "36b96196-3c0e-4c7c-b9e2-3a654f57eb23",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "970311a5-d28f-4f45-a85d-3022a1d86715"
        },
        "item": {
          "id": "26a3742b-8f68-464c-81b0-09f5a695739e",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9ababb61-65ef-4b60-b763-d95663281ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad5f0588-7544-4d14-ba74-9c23d7e517b8",
        "cursor": {
          "ref": "c7c2d600-678f-4af7-beaf-e042a72ceeb6",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "07773a7c-cdbc-4220-91fc-0954d7e1caf3"
        },
        "item": {
          "id": "ad5f0588-7544-4d14-ba74-9c23d7e517b8",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e2e1fe4a-ce9b-4cb8-b164-50c983aa5dbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0452e22-e0ed-48b7-baa7-44b508123c75",
        "cursor": {
          "ref": "2f917988-755c-4099-99c2-9060d40de746",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e0160694-17e2-4982-b725-710762c5ac57"
        },
        "item": {
          "id": "b0452e22-e0ed-48b7-baa7-44b508123c75",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "522dd28b-a09f-4dd7-ba35-bae6b4e79f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f599d1b-e56f-493c-b244-4b6ef95ca117",
        "cursor": {
          "ref": "1abc7539-9591-46fa-850c-1bd5164fc7db",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "66ea54b4-756b-4d77-bf6d-0040b4321a81"
        },
        "item": {
          "id": "2f599d1b-e56f-493c-b244-4b6ef95ca117",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "249c0e7e-183b-4845-8cca-1833d6707cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e58e5b87-a15c-48bf-8668-61dec1d6a61f",
        "cursor": {
          "ref": "fe1b0fdf-6009-4ab9-b999-9f1ccf227df5",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c319a607-9a5f-44bf-a0af-a2fd343fe1c8"
        },
        "item": {
          "id": "e58e5b87-a15c-48bf-8668-61dec1d6a61f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "282f9198-e2ba-4ac4-959c-bf96cf03ff43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca56f33f-118a-43bc-a3e7-77f672a246e0",
        "cursor": {
          "ref": "ce12ad5a-13ac-4ad7-9828-5f722a93c17d",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "6ef68958-5067-4703-b08b-5d75bb30a3d9"
        },
        "item": {
          "id": "ca56f33f-118a-43bc-a3e7-77f672a246e0",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1487667b-a26c-475f-8788-6943ff3aa58c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a8ec0a-aec3-4c93-b726-1936c292b871",
        "cursor": {
          "ref": "68f12af9-4969-4d0f-89df-f7e6ab96712c",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "80e58c8f-e659-43f8-85ea-48cea515423e"
        },
        "item": {
          "id": "e6a8ec0a-aec3-4c93-b726-1936c292b871",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "676b3578-b7c9-4919-bbdb-08154e74587c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b7d7a5e-b899-46ac-8a78-3b464b462f16",
        "cursor": {
          "ref": "bd97de11-6429-4db6-9c86-aaee8dc27032",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e50eea6b-61d4-43ac-8cbc-b61f3148cb93"
        },
        "item": {
          "id": "5b7d7a5e-b899-46ac-8a78-3b464b462f16",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "483d5973-079f-420e-8147-e97bc5805d46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0054947c-2829-45f1-86c7-22308e298050",
        "cursor": {
          "ref": "f4670971-e681-47ee-9a1a-f4265d34542d",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3acbc5ac-e8d3-4422-b918-c996d1e9ed60"
        },
        "item": {
          "id": "0054947c-2829-45f1-86c7-22308e298050",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2b5bff08-11ed-4aa1-b9c7-913659f7f6cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10af1279-ef0b-4997-9719-a93c8986cd3b",
        "cursor": {
          "ref": "32816dd1-2008-4d6d-8ab1-11b2cb802fb2",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a19f5ab4-ce9e-4423-91b3-f2ee7d6cc9d9"
        },
        "item": {
          "id": "10af1279-ef0b-4997-9719-a93c8986cd3b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a1e8ece2-2e9f-4324-853d-00aefdec9c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cdf8241-51d5-44a6-8b3e-e42bdff56f33",
        "cursor": {
          "ref": "dc8ce83d-f94e-46d4-bb92-61b253159a4c",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c5222de0-56a5-47df-b82b-729072ff5e68"
        },
        "item": {
          "id": "8cdf8241-51d5-44a6-8b3e-e42bdff56f33",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e768433b-f997-406b-9929-19a62444e7a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32af18dc-4233-4bf5-9b1e-4ba78582c345",
        "cursor": {
          "ref": "8f6a0848-391c-46e5-a1f4-19380ecca37c",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f44c83fd-2b76-4c18-9d77-e7de3ff24b8d"
        },
        "item": {
          "id": "32af18dc-4233-4bf5-9b1e-4ba78582c345",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "e214fb30-6931-4a4e-86fb-641138dfc7eb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3015864c-fa03-4049-8982-3f2669b73b53",
        "cursor": {
          "ref": "eddbb922-4e26-475a-babe-93f94c65326a",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "057c89b5-069c-4006-ad1f-2465fb6ee1b9"
        },
        "item": {
          "id": "3015864c-fa03-4049-8982-3f2669b73b53",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d88f51f1-4739-460d-80ef-a50dc15f338c",
          "status": "OK",
          "code": 200,
          "responseTime": 315,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda60a8d-d17f-4fbb-8956-c1c03da6baf1",
        "cursor": {
          "ref": "da1af9ac-9b6f-4ef5-b5e8-4ae19f17e308",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "33ddc88f-c3a9-4070-9c7c-ba1e87932b9f"
        },
        "item": {
          "id": "fda60a8d-d17f-4fbb-8956-c1c03da6baf1",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d152742e-86ac-449a-bd1f-7557f15f90ca",
          "status": "OK",
          "code": 200,
          "responseTime": 299,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c4573f7-99e8-4700-8bb2-73f0a6c0d7b7",
        "cursor": {
          "ref": "23d3376d-d7ba-48f6-a9fb-394982719684",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8d0716fc-801a-4e07-9c6b-4109e2b138df"
        },
        "item": {
          "id": "5c4573f7-99e8-4700-8bb2-73f0a6c0d7b7",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "268df29c-3b70-49fe-8e94-a226f7d867ad",
          "status": "OK",
          "code": 200,
          "responseTime": 704,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c87c591c-6ee7-433a-bd58-f998bc64040d",
        "cursor": {
          "ref": "90e7e0c3-e95c-4e12-9a08-3627a2d6c480",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1c58e574-be59-41bd-b32d-7e8591818f31"
        },
        "item": {
          "id": "c87c591c-6ee7-433a-bd58-f998bc64040d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5d760311-6983-4004-8aa3-e047dd168402",
          "status": "OK",
          "code": 200,
          "responseTime": 329,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9d6365b-34d2-4732-a9e2-4ab2352f5574",
        "cursor": {
          "ref": "e93d3311-1154-429d-8475-3d0d3f37bdd8",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "483fa4c5-1b61-4a5a-9c81-cdbe54cd784e"
        },
        "item": {
          "id": "d9d6365b-34d2-4732-a9e2-4ab2352f5574",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "743cb737-cd24-42c1-a7d9-c9f9e4bb6215",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9d6365b-34d2-4732-a9e2-4ab2352f5574",
        "cursor": {
          "ref": "e93d3311-1154-429d-8475-3d0d3f37bdd8",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "483fa4c5-1b61-4a5a-9c81-cdbe54cd784e"
        },
        "item": {
          "id": "d9d6365b-34d2-4732-a9e2-4ab2352f5574",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "743cb737-cd24-42c1-a7d9-c9f9e4bb6215",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9d6365b-34d2-4732-a9e2-4ab2352f5574",
        "cursor": {
          "ref": "e93d3311-1154-429d-8475-3d0d3f37bdd8",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "483fa4c5-1b61-4a5a-9c81-cdbe54cd784e"
        },
        "item": {
          "id": "d9d6365b-34d2-4732-a9e2-4ab2352f5574",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "743cb737-cd24-42c1-a7d9-c9f9e4bb6215",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d79402-cd5c-4c13-996e-ed79e865d859",
        "cursor": {
          "ref": "0720b5c4-7dfe-4787-a4d4-9855a7d68e1f",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e8e35f44-a5c4-4288-8d36-b09ddba06065"
        },
        "item": {
          "id": "60d79402-cd5c-4c13-996e-ed79e865d859",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "101cac18-75a6-42b2-b970-a2067f7e3390",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f4691f5-cde6-4532-8321-6f80ea9f5436",
        "cursor": {
          "ref": "c0f94e71-658a-4b05-8fb3-36b284f53db0",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "715f094d-9e4a-43e2-bb44-5871d5b10d59"
        },
        "item": {
          "id": "4f4691f5-cde6-4532-8321-6f80ea9f5436",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c471c3b3-1c7f-491c-9194-f0d40526fb04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "4f4691f5-cde6-4532-8321-6f80ea9f5436",
        "cursor": {
          "ref": "c0f94e71-658a-4b05-8fb3-36b284f53db0",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "715f094d-9e4a-43e2-bb44-5871d5b10d59"
        },
        "item": {
          "id": "4f4691f5-cde6-4532-8321-6f80ea9f5436",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c471c3b3-1c7f-491c-9194-f0d40526fb04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "0fcd1442-d57b-4a84-8f1a-b20acf555b39",
        "cursor": {
          "ref": "cfb4af4d-eb69-4b1e-b9f8-9d627fbc74b9",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ad88d008-657b-4f51-ae01-5846b0782c77"
        },
        "item": {
          "id": "0fcd1442-d57b-4a84-8f1a-b20acf555b39",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "4db5665b-cfa9-4c2c-b00d-9f446c700569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "eb02af11-58e9-47d4-a4a7-93d1b78b52a5",
        "cursor": {
          "ref": "e4a69374-724b-4943-83ab-5051721314c4",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d8d1ecf5-12ca-42db-aa80-fea90b16dba9"
        },
        "item": {
          "id": "eb02af11-58e9-47d4-a4a7-93d1b78b52a5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b6cf7a4b-c720-4af1-bd7d-7126ce0e0d6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "eb02af11-58e9-47d4-a4a7-93d1b78b52a5",
        "cursor": {
          "ref": "e4a69374-724b-4943-83ab-5051721314c4",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d8d1ecf5-12ca-42db-aa80-fea90b16dba9"
        },
        "item": {
          "id": "eb02af11-58e9-47d4-a4a7-93d1b78b52a5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b6cf7a4b-c720-4af1-bd7d-7126ce0e0d6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "2a459165-6e62-459e-874a-9ce1bd2529f2",
        "cursor": {
          "ref": "50694056-97a0-41fc-bde0-500389da0d88",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "9f45ea97-92b1-4470-9c10-df13783934a3"
        },
        "item": {
          "id": "2a459165-6e62-459e-874a-9ce1bd2529f2",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "65b4b98e-8340-4f70-a64c-1614e82bb94b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}