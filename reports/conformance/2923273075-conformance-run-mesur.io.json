{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "de3923ce-f3e1-4d83-940b-af310d5a7428",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "547dc7e3-39c7-4de5-9de1-2c7cabb4aada",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6499f42b-f622-46a8-942c-448f4e0a2816",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d769a6a2-f275-4653-8302-95efb2b066ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5bdc49a7-a7d1-44df-a7f5-e099a21b0bec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "ccba5995-4397-422c-9fa0-f71656b35c7e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "781f9814-206d-41b3-925a-9d0ecce1af08",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6e30c880-735f-4ec8-bbfd-545eeb269fb8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ad08e1d0-017b-4877-8613-826995d2a360",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dce45eb-1b08-4eef-8da0-8a7bc481bd72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c29fe91c-16c1-4605-988d-86b89a911ec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7dd65cd-a3a2-4e82-9115-1e0d55a828b0",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ad2b2a-3212-46da-929b-9314bab637c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "407d7539-dbe8-4af7-973f-c331719bca00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "729ece93-554e-4b80-9a3f-8ed242b393de",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe089b5-4e92-45e2-900b-5a51a13122a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "431508dc-e922-4be7-92dc-e1e837abee9e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "91220edc-56bf-4578-933c-3a84c2505210",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "392375ed-144e-465f-89d7-09f6e31ce7b0",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7097affd-a4d4-463a-8f9d-d70c84c997e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "35d72cdc-5a5f-46c4-8c06-15d1f1e5c332"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6b1ede-9cc6-4d01-bc19-7333ae37ae3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78bcfaf2-7710-4052-a74e-fd96b828491d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca6fcd1-0e15-462f-b5ae-447f69aec121",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eccffdf9-4487-431b-a2ee-2089012801a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "22ee9b77-28b6-4b35-93c4-1b15ec400cb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce0e8791-af88-4163-a61e-f65047504a05",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "fbe8d405-fa1b-43a1-ae97-13d5f38069c4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bf16b222-4413-47ad-b230-b40b506bb3a2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "23dd8b31-5efa-4244-949a-a575fe1deb06",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4b07365-8588-4de4-9374-41664721fff4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "122648e9-2492-4417-b395-1ef348bbe37a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "75ab4d2f-e445-4c04-b40b-421eedeb69c4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "562f2bee-4a52-4717-8fa6-be6cf8180549"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3ccdafb2-939d-4afb-a39f-86dd03b3aab2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4edcb505-717b-4c70-bbbd-93942839393c"
            }
          }
        ]
      },
      {
        "id": "f961c085-2ce7-4986-b8ed-fd6372ffe048",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "fd55efd2-0fe4-4659-8777-2cd559b32312",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5d3f20a0-5aa0-4b61-8872-cae8f323f9eb",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "01fa1990-2473-4db1-83c1-1c96fb791ac6",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "306b3e6c-6397-40ac-8d8f-6334e09729b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51e48ecb-c808-4e3e-8354-ee9bddd31204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da6988f-fc22-436e-a72a-903f3fca7fcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fd397ce-3972-4cba-9a2d-9a9f7f4c6612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d0a6b5-40fb-49a8-a2f4-4a02278d8a29",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a9e2e6b-eb44-457b-9ece-4090c7d73746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bc7b8dc-b92c-4814-a9d1-c8bb68b49507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd52b7f-5034-48d7-99c3-19c97d8317cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a54c429-c2cc-44ef-b24b-e45e07dd6d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bed27ba-6a96-4df4-b69c-15bbc05610e5",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b062535d-48d4-424e-b37a-35a9b6202ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a324ec1-1551-4254-a6c6-cd63efd67006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e45442c5-aac6-4c7c-a091-0b1cdefdcb97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1433466e-dcc2-4b8c-8a32-0e582c313ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b159e9-647c-430c-ab91-6fa0d994e007",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0648813b-02ef-407b-ac49-26d142298798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "627f03f2-027a-4fba-842c-f3e4a4714f93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "176aaf31-c22e-4192-a2c8-411577a1bea2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f281fcdb-9047-4c61-9f92-82c22afcccdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15115a92-787d-469c-bf20-56ed5d4034d8",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0216b668-cbeb-44f4-8300-2edca70d8ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6970a2a-2469-40bb-87d9-c63bf1761a61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d407db-d3c5-42fc-833b-48abfb618f37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ab27bf0-a080-46ed-abfc-6df28a3f545a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ffe34a4-3803-4c9a-b1f2-04dff538b772",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3adac0e4-9703-44fb-ad45-253a7a0071ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45a72826-21a1-4749-ba7d-312c0787245f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1132dd9d-30df-4c24-bf20-84bf104bed35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "073a1b6c-92e1-4db0-86b0-9b2223f4e92d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4446a09e-aaf2-466e-b9d9-40ce2460eca2",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd156753-c519-4612-8e7e-e63246373902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b30311d-788d-4911-8737-e3beead529fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5ba098b-8896-4460-99f8-982ad1f1925d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5415c13-209c-4dae-81ab-ce97582f8697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b9a3bab-04a7-44d4-9757-34aa30164601",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8bfb97c-d744-444a-bc73-7c6cfb2689d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95324537-b168-49c7-874e-299427bcb608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a32de87-6f0e-480d-a32c-ddad7b891843",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0456e0c-78a3-4163-8ea5-7197b3ce7548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d4cd894-0303-4bd7-ae2c-9920a83a87c3",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0572901e-72a6-4631-8335-086968fe7c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5b2df95-8695-4fee-bc05-bc8ac798d9c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e72401-e7a3-4b13-be4c-49efb7f47a02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d084724f-8111-4391-a035-1333d0f696a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "503a4bdb-93d9-47e2-beed-523f9c751425",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e1acbab-b340-479e-93a7-d6e9b8e1507d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f610191e-0b02-46f0-b5e9-09eba03a0286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f82acba-847a-4078-aa61-6becd271d18b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8df5dc39-16ef-4699-a374-51de542b456d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d9e4c8-cf14-4365-babc-5f30cebd4435",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd2ec3f6-d229-49f3-b905-df134bcdb64e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6a35912-ce08-43ff-a503-1854401b2e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb07105-3428-419b-8078-75c032471035",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "63ad8d85-bd89-4b32-acbc-96de37d41a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba538e1-3adf-4000-9182-7830760ea649",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c00b2542-49ab-4859-b7a1-d3283e0b4067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f8eae34-b498-4fad-831d-3893f291febb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f725ba56-9ec9-4351-8747-645c41f662c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "685f93d2-08a6-4b3b-900c-6a9fb681e0c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f1cef2-3404-4ee4-9295-c70422e9e567",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cffeddf-7c4f-4c15-8bfc-fd7ae6cb57bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c7cd99c-2a56-46fe-901f-b98e1ca50ec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d22e41d-9792-47e9-ac13-607a6eef31c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aae4d12f-4b3c-43df-bdce-4ec03883f5ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd1096e-c34d-4ddc-b0f2-de2d1c75e1dd",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d52d61-06ce-4c07-9bfc-2182675e7859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25424bd5-617a-4a2e-ad9c-5c37ab03fc1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ceba0e-ba4f-4775-98cc-3cc3e9608294",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36f00478-7cab-40d7-bc8c-3b3c70dbbb22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdcf523c-f124-4cda-af7a-23ceb2a7e741",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44feed8d-1349-4f7c-9fef-a3932164b4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "813a89b2-53a7-472f-a527-399945155052"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b66eb42-9d48-44a6-972c-2ce15a552005",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "03790d4c-6eb5-4a77-bfc5-f6111bda33d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca79283a-6ab4-4900-91fa-b166d61ae718",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f23595d-1b15-45a1-b5f5-cd89233acb2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc6b78fa-55cb-4ba5-bd1c-2c7de91f95e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a76db9-42d5-4201-a615-4fe67a9d8f58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "512758e7-7288-4a1b-a20a-0d92c4822111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5489524c-f839-4ca3-965b-a8a6e93be468",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35533e0b-812d-420b-9840-b592d0b4838a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "144769c0-e847-4b3b-8f7d-1a2de61a5fbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7deb2fab-47d2-4513-9f15-b418bf0a90fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f61b0d5b-8e07-431d-a23a-67d796b86387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4afad61-0263-47dc-9aef-960048c39cbc",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e33bd94-0f05-4d03-aaba-628d2e37c883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78fae4e3-f557-40ae-9a03-3bfb842b6af8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d601027-c302-4bee-b16f-63115c4ffbba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74d77313-1871-48cd-bef6-505f261d5564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e3420b5-ea38-443c-885b-832d59753ec4",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "468e425e-4dd4-4ff1-8626-9de0b25e1989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74b907e1-873e-4a24-a446-5cb44e4e210f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff037c1f-0244-4e8b-8cb0-1fd5dbaa3e1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06418756-7b2a-4b45-9a73-57f0daaba0f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b9c10e4-5c93-4a3c-a2d3-4f9a97c8ad6f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65491f14-64c8-4dff-b969-fe9f1afac86a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b261db90-fa24-4a2a-b1a8-d5bdb336d455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e12c054-618e-4a43-bc9a-0b17aa3b15e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19696a8b-b450-4c53-b7fc-3db954b5c855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0069da-b2b5-4d5b-ac78-c38d6d85e884",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d6b3ac4-9666-4afd-bcb7-d7331f8c65a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b8157a1-8476-4740-b3d0-3733c29d0eb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c4a69cb-35d4-497c-8dd5-e16a47bc1dc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0dd5625-5afe-4391-a150-dbe910b56497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "556650a8-d0c6-4bb0-94eb-e2ac4435a37d",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "025c4323-906b-418b-87ab-803408ef34a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "facbf438-e2dc-41c8-9cd1-63a2a49ed921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e3871c-6278-4e24-916a-8686ddf0e5de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "695af50f-27e9-4779-97d3-15da39d5ddef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd0eabfa-b6bc-4ad8-afda-a612aa737ba7",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b18136e-e487-4713-a861-ca28df0586cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d64b8395-ea9b-4257-b1e1-4343f14fd35b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de4c1a6-8bb3-4cb5-a3f4-8b8fbadcd8fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eda7f73b-e1ec-4e77-9eaf-04d1f1fe963a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78ef840e-b219-4fbd-a3d3-59edd5391b71",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "849b86c2-3c2d-4b7b-bdd8-993ecadc0cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d79cd888-c9a3-424f-8880-8e233f13ed19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b93fac32-af17-47ae-9b00-d53057532e97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "391da94f-081a-4a71-99c6-3f58fcf014e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd71b158-a9cc-4de5-925c-c9c3823a96da",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69085bc-fbfb-4837-bd4a-f9a835e7d398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb188907-4f58-453e-9f26-a558e3b50e61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9794862c-78ac-4fd8-bd51-67c2f60bb1da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ede7d496-b48b-400a-84df-a5b5396c49b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db7ac5c3-25e6-462b-bd77-3b9aef456142",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2294fd5f-3dbe-4839-8574-650e0a3a3d26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb68a363-953d-4ae3-9e68-1ed67746163f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e5a80fe-bbc1-446f-a036-8a6912922cf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1aa3357-504e-4746-90ca-60a3bccf7cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1b910ba-671e-4a78-ad3f-578bba820a7c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f25509e0-3b70-4de7-94a3-a69cba8594bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "981c7435-3ec3-43f0-99f7-bd039a936f4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e29c1a8-83f8-466f-a017-2647765a7b02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "799beaf7-5ddb-4afd-8cb9-b332ef8bced5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a76329-7d5c-4fe2-a0ac-e2bc376cc48c",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "959e1dbf-91eb-47b0-b89c-1f0f94633202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "563c6fb1-5b13-4a72-9273-5a51ccc50d12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5015469-0c9e-4030-8435-c4fe2d165407",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "590b2591-7bfc-4242-bbf8-643449a542ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d6f507a-cc4b-4dcf-a7ce-ee840dfc5d53",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f228154-65e0-4017-84f9-3d5db575cfad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "080c8a5a-725e-4cd3-bfc9-23dbc99993ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0561a3f7-5449-4b6d-9746-903ae3bb4732",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12165f87-dab0-4c70-8990-4145661d89b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e211d978-7e56-4beb-bbd2-d8370d36e555",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9365080d-c19a-44d9-b467-a3c414f1f068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a52144c-8d50-48c8-a634-4577672b379f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0fefe09-6c35-43bf-8034-ac2af2a0f75d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c15742b8-1b13-4ba3-8c7e-bcfbd30df461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d020bf-addd-496b-8cc3-d83ac5ed1133",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b13c2b3-f520-4ed7-a7dc-38698e073212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "eb3a677c-cd2e-4fa8-9020-4134a919b86e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6acfe2ec-47e0-4b66-a704-b63baeda5c4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b96d6ce-edb0-43c2-8407-a9eb8f3c1641"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "587ef681-c861-479e-a58d-0dc30aa38d72",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a37381f9-036a-4f46-a04b-d69820ad75a6",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca70b1a-9d25-4a42-b805-87b267d43c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "64d10e9a-37bb-4f1f-9cd1-4238a8df1aee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f48a6896-6bb1-45f5-857e-2c5739a6c542",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "d1484f77-bc99-43e8-a951-9b47db2ca5f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c8253b3-0ec7-4701-a6f9-e992356dcadb",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f13f7aa3-5b78-4cbb-9124-4716f8d11238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ef18397-2429-41ca-98cc-e89acc1148d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b3bea1-5b39-406d-b6a7-66073e87534b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "7c51de23-0a54-4451-9ed5-11751608bc9d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9f8b030-366a-4c9c-96f9-9fc2695d44ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c3bb7e6c-a2be-417d-9743-6033bfebf866"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b1b6a68-f103-49b6-bb57-668c27f9ca56",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d810dc4-91f5-4dae-aba1-62fc54e2c245"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "721f34cc-eb3c-4a16-8d24-b411624833c6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4de10cb0-b9a2-4862-a70f-5550f5f533f2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "02b14e0c-dac3-4cf8-b498-facaccc6c0cf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9f54de91-a56d-4906-ba67-df5db586e3e1"
                }
              }
            ]
          },
          {
            "id": "f1769855-e6da-4603-a1eb-bd620469d098",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c399907c-ac98-4934-8b2b-51eed764db84",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a0f9433-f3e3-46b2-a55a-ad909597ca23",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fc356c67-ced5-4d7b-97c7-115ef77f6609"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a052eb9-a78f-4887-986b-49a56f930531",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "b97c9326-9f5c-4296-a8c4-7faef61e68a3"
                    }
                  }
                ]
              },
              {
                "id": "00b9ea96-8aa6-4f09-8598-4e5edfecd82d",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9cfc81aa-9b31-4e75-8878-b489c8beacbc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f732326f-0835-4c14-a730-81c26c681564"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "17563a4e-eda4-49cd-af14-930512922ba7",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "ce12b789-6bde-4348-b5af-53a3d389d467"
                    }
                  }
                ]
              },
              {
                "id": "6bd816af-2933-4a87-b452-263eef03f512",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "733c868e-27ec-4771-8733-96147e76ef7b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "39f41866-699f-4d93-8e88-e31b33f7c9a5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ce1b707-f524-47ec-b4e6-06a7419d044d",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "f47d10b3-70aa-49ed-9ed7-e920f9575e73"
                    }
                  }
                ]
              },
              {
                "id": "89430a86-0aa1-42d2-8ac7-74d19ed54233",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4269730-5dff-4e74-be9e-ffbdb69967d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "49193eab-79c4-4390-84b9-5dae6030251d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df591afb-dd76-4417-a9f9-424ff3109ee5",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "2d25f092-c623-40cf-9862-a9a95e605dee"
                    }
                  }
                ]
              },
              {
                "id": "51cbbd69-865d-4fda-965c-6ce0a1fdee26",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a674a700-1db6-4a15-96cf-44c44312e3e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "c638ae4f-fa38-427a-8666-189299a9c996"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4a9c236-f80f-46f3-917f-4101dbc1a6fb",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "34d70aae-6ada-42a8-80dc-a04b6a764cca"
                    }
                  }
                ]
              },
              {
                "id": "5a07922a-59a8-4bd3-a4cc-12e53c78813e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d31eec85-c6ae-4669-a009-46b67039ab7f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9fcf05c5-2a40-4b1a-a14f-2a8ef5761ea0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dfdcfbbb-de48-48c4-a9ef-93b6178cb243",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "7e28919c-0ca0-4b89-a28f-1067e843f0d6"
                    }
                  }
                ]
              },
              {
                "id": "80365e9d-6a41-4d2b-8c74-4c00efebc865",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef470b9a-fe85-414f-8bab-116322ef0979",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ce0a388f-4ff0-4c7e-903f-295ced960a0d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5fc7db2b-2248-4abf-97e0-75ed9b3b157e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "5583748a-ab6d-4dbb-84ac-9e7d118b9d7f"
                    }
                  }
                ]
              },
              {
                "id": "c3f0d501-8731-42ae-808a-b5553d1efb80",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "14ba64ff-d478-4803-8188-a7ffc4a4c44f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6da4705c-ba6f-4c1e-84f7-40015dd0cb74"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2d6955b-e844-4d07-8c41-cee8da358696",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "420b3a69-723a-4983-a1e6-ca517dabc7e1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1e6c7b1e-37f5-49b7-8484-7affb5c29ea6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2b645d2e-882a-4eaf-9a03-0219caafa0bd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c05d41e8-4447-4b0c-80ee-d50ce705ba64",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8caeb257-a47f-4572-9d97-fe8af59d6a49"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "62fb6d93-d067-4935-8b0e-17b7bde7c49f",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "1ba72eb1-2cf4-4719-90e1-ea9f9a09e53b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba122edd-97ae-42e1-8deb-b65c0a8b7a8c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ffdbe4f8-49c6-4a27-bb5a-4c3efc21ab58"
            }
          }
        ]
      },
      {
        "id": "186412c0-204a-4c6f-ab81-05994742867c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e44b8445-a3c1-450c-bf76-a4609b3700de",
            "name": "Negative Testing",
            "item": [
              {
                "id": "86e5aa62-de72-442c-835a-42a9f5e4f81c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c00042a6-b993-4ad0-82b8-8c74b609e328",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f214f22f-4098-4988-a82d-3dc7b266bbca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e772ee3-3684-4652-a9eb-cab09176c68a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2f95c0-e5c1-44a4-b1d3-4501151e38cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bcce11ab-5a9d-4fee-b96b-64335b5f39ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bfd4460-c05d-4630-acd4-83126c41003a",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07008c1c-2c8d-4338-a9d4-6c4d88c32c7c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "f0f2ebc7-e5b6-452a-90d6-f05936c97fb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dad36a6-9e1c-4462-84f0-6d31e74ea8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f189e048-dd75-4900-b517-404020bbff35"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fabbad42-88ea-449e-8374-dce15866cd6f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6d9ff7c-a518-40dd-98f3-a9d9793f5e4f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "77d934de-9ace-4586-9619-2cbd659b601e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa984998-1d39-4843-a5ba-4c1c0194ff78"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "34a28dff-548c-4ba7-93b8-f3cf4ea99e6b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "ea38e3a2-70be-46d3-8166-bc3da6c35a1d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "69a12a16-2dbe-4b5e-a28d-014d12bbb00a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f6291e65-470a-42dd-90e2-7d8193ab2b41"
            }
          }
        ]
      },
      {
        "id": "28be62be-64c4-4d4c-b58e-616f571e5153",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ccea1af5-0269-4069-9e00-e2e24b561fef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e10cc4c9-c831-4dcf-afce-04711bdb089a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ea5f0383-cbc1-462e-8d96-a738c663b4d4",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e93c8a0-77a6-4369-8450-bbe9a8a0ba48",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "c08f2b19-cb41-4316-8065-42396f035694"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d3dde6-8238-4cc4-b1f8-dc2603977cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0592586-10d8-4bc0-bad4-cdb71d074576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a1e112-1f33-470d-be5a-e13d60128856",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2e5180d-0704-4728-be8d-5fb3b564e556",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "df380dfd-f454-4c31-99e3-ffa8ad76c6be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d01a41-3bc6-4df6-ac46-eeb14427548f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "36e1dbcd-ad6e-41d4-b371-1062894c0fc4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "20129a0f-6eff-4bb3-ab7f-e01409ff0ded",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d51df1c0-461c-49af-a0d4-53b3a3b67af0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "30195e44-714f-47ca-a751-61507de230e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "265a8fc7-4dca-4b9c-8c3f-9873f45e75aa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "17592186-7c1f-4fa1-9ff1-7f4431f15e14",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "710c3c3d-ad8f-48cb-b1ad-28055ebb905c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9e2abee6-6be6-414e-9759-2338ffe4d525",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc4a1b1b-d0ee-4646-b019-8c05f6923823"
            }
          }
        ]
      },
      {
        "id": "f1f1252e-8332-4df6-b827-4c251a86fdc6",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b9e2a9a1-4c50-444b-a82f-4410731b43f7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2d8f31c1-59a6-4269-ad64-cee69c2948e5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d553dfec-f3a9-4cd7-94af-70b128495604",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0827e42c-53fe-47fa-93ea-ccbb9121904c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb6cbd66-1ee4-4863-92a5-a7789625fd46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "710d18b1-a302-4c04-92d2-e525607872a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "51925145-da08-4ed5-97ab-e0bb94294f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b372f93-b4c0-489b-b72d-c5205ab77006",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae3ee43-727f-4594-a895-b5da7320d515",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "1ba4e1db-11ef-45ed-8a28-8a546cb07378"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f610ef7-6115-4f7e-ad96-dbb03f05e9c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8977443a-22f6-4b98-9a61-4c58aecab31e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e2644f8-96b0-4ec0-b490-235b5ed0be6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d734550e-89b5-425c-8f18-a43564fc25c7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7f0eb05-9121-477e-8374-fd0ed7484f35",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0666f75-3ee8-40b1-a4ce-0cc9077ee119"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5a6a6a57-ade8-46eb-b1ec-f50e165785c5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "7386daca-29c1-42fa-a4e9-1febbe5d4a25"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6cca7042-880a-4540-b177-c26b1b951be1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e4e5b1e9-4d0e-4114-b81a-1a538c29e7aa"
            }
          }
        ]
      },
      {
        "id": "f4e5c126-267b-435b-b318-50b2bfc09e16",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "4222b2b3-50a1-47ac-91bc-9042c9a5ae38",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7b43c657-6475-4465-abb8-78fa231589f3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "36a7fa09-2d26-4c94-894b-aaf129d8c73c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b017a3-b7a8-405b-80ee-041b9b646482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cb520bd-bc3a-46a6-8452-38aab5b9b69f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddbc2179-cac6-4f97-9936-77d61d13b6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0722c94b-30af-4439-93c9-35cb64308199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cda37248-a5d1-4901-b64f-2dc4a30f64a9",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe0cede7-475a-42f2-923f-2be6be1f40aa",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "697cbdae-9b44-499a-8ef0-7af8215b867c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58fc7228-85f9-4860-81dd-e57b237978c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "41b265c5-1ba7-45fd-a29e-26904cb035f0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6175be5d-20db-4390-bbae-824d771d0ec6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24756408-57c4-4ec8-9209-439e1e3b2b98"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "be50ad57-746a-4f21-b734-5d3a0f6a868d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6bc14645-d189-48b3-90ea-6527e535752a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0c1421c1-7893-4c7c-853c-e5c78a44b0c2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "9d4b9485-652f-43de-a4cb-6f96c3b1eaa5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c15d1331-c109-4c71-84e7-0960e70102a7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4efc850a-b16d-4d54-8415-ef78f025a96c"
            }
          }
        ]
      },
      {
        "id": "0dd20eb5-4415-42c9-9107-9feeb4026fde",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "2b34a7a0-e30e-4e34-bbea-7e4700816c3f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2a5f97b8-ba39-4b42-ad9a-abedf8bf5eb2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "193d2cca-5477-4ef8-859c-1edf585f9b17",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f69e53-8d29-4e94-8baa-bbd5dc1877d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4ec1c52-2922-4788-91b2-876894e54b6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47f460ec-2c48-4b38-9523-739f16c1cea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "650faa3f-0269-4d1f-9ba1-66278ac51471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56231642-9af9-477e-aa1e-24e583e75669",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b24fec95-e511-476d-99e3-fa8c10d48ba9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "ab935a47-7000-4bdb-8b1c-f336af546c54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d42805-5fd7-4dae-b7b7-4f570581bd26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4df68e6-00a1-4552-8382-d1514eac780b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2218588-226c-44bb-ac2e-be866ea57e77",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c922d894-36ae-43c8-8793-b03c2dc23d72"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a803c0d-f2dd-467c-8a60-8f5b51f1182b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b446adbd-3496-44e7-99fe-c802f0d4fa8b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "47e56998-9294-4a7f-8592-54cd7d5f66ee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "71a5e1b0-7bcd-42fd-b93c-a943b30d3a91"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dfbade39-2ec2-469c-8605-8dfa2c2b3cd2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a1a8e7ac-abd9-4058-be8a-f9e25d1802d3"
            }
          }
        ]
      },
      {
        "id": "1977995c-7fee-47dc-8ecb-eb8c54cb1c39",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "daffef4b-9616-4318-bddc-077688a83ad3",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 107,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 98
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 50.252336448598136,
      "responseMin": 6,
      "responseMax": 407,
      "responseSd": 71.02139909953212,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1661388863831,
      "completed": 1661388872136
    },
    "executions": [
      {
        "id": "6499f42b-f622-46a8-942c-448f4e0a2816",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "edfe0819-c601-40b3-a7e6-6231f5b49006",
          "httpRequestId": "d414cf20-5da9-4093-88c2-2dd2cbd0cc1c"
        },
        "item": {
          "id": "6499f42b-f622-46a8-942c-448f4e0a2816",
          "name": "did_json"
        },
        "response": {
          "id": "e9a9cd5a-c781-4ed9-bea1-0b09ebed4512",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad08e1d0-017b-4877-8613-826995d2a360",
        "cursor": {
          "ref": "9368ef96-a210-4ee4-bd8d-9f5add29b88f",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4a0016d0-4a27-4374-be39-93b882cb9d44"
        },
        "item": {
          "id": "ad08e1d0-017b-4877-8613-826995d2a360",
          "name": "did:invalid"
        },
        "response": {
          "id": "d8be8948-9a25-479f-b713-339cbdc44d91",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad08e1d0-017b-4877-8613-826995d2a360",
        "cursor": {
          "ref": "9368ef96-a210-4ee4-bd8d-9f5add29b88f",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4a0016d0-4a27-4374-be39-93b882cb9d44"
        },
        "item": {
          "id": "ad08e1d0-017b-4877-8613-826995d2a360",
          "name": "did:invalid"
        },
        "response": {
          "id": "d8be8948-9a25-479f-b713-339cbdc44d91",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7dd65cd-a3a2-4e82-9115-1e0d55a828b0",
        "cursor": {
          "ref": "c80173ce-6f03-4b49-8b0b-2b56c01b8367",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f6554a90-cd9a-432d-b5cf-2f6905f01397"
        },
        "item": {
          "id": "a7dd65cd-a3a2-4e82-9115-1e0d55a828b0",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "918cded2-d6f2-43c0-a125-14b8dc7efaa2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 287,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "729ece93-554e-4b80-9a3f-8ed242b393de",
        "cursor": {
          "ref": "4782cbbb-26f7-40a9-bc27-0cf1d6e92c38",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "562f7abb-0d07-4785-8d8c-97b7c80d8fab"
        },
        "item": {
          "id": "729ece93-554e-4b80-9a3f-8ed242b393de",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "47fce902-7f5c-4369-ade2-057d32b4c514",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "392375ed-144e-465f-89d7-09f6e31ce7b0",
        "cursor": {
          "ref": "8992b4f9-e49f-4080-a3b2-3cb8066c4ce1",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a61ba476-f776-4070-a7c0-c056aa7835a2"
        },
        "item": {
          "id": "392375ed-144e-465f-89d7-09f6e31ce7b0",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "39ab0c25-fe2c-4752-a53b-f372d38d43eb",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "6ca6fcd1-0e15-462f-b5ae-447f69aec121",
        "cursor": {
          "ref": "3ced65a3-a260-4470-b304-11a325dea28f",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7a8bb735-2516-4cf5-90ab-43caa0c0638e"
        },
        "item": {
          "id": "6ca6fcd1-0e15-462f-b5ae-447f69aec121",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c75449f6-3e91-4e57-a6d8-999cf2027da7",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "6ca6fcd1-0e15-462f-b5ae-447f69aec121",
        "cursor": {
          "ref": "3ced65a3-a260-4470-b304-11a325dea28f",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7a8bb735-2516-4cf5-90ab-43caa0c0638e"
        },
        "item": {
          "id": "6ca6fcd1-0e15-462f-b5ae-447f69aec121",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c75449f6-3e91-4e57-a6d8-999cf2027da7",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "23dd8b31-5efa-4244-949a-a575fe1deb06",
        "cursor": {
          "ref": "5d644f06-4e8b-4c07-a1b6-bfa631e3fab9",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "be013efc-0191-452e-b08b-bda7161e0e84"
        },
        "item": {
          "id": "23dd8b31-5efa-4244-949a-a575fe1deb06",
          "name": "identifiers"
        },
        "response": {
          "id": "278844e6-bbcb-4f49-8572-a0c93cf49355",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01fa1990-2473-4db1-83c1-1c96fb791ac6",
        "cursor": {
          "ref": "c6801021-7285-4aec-a6d6-f0d26b544269",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "44f94ee6-0f96-4ae2-b07e-996ad78f20f3"
        },
        "item": {
          "id": "01fa1990-2473-4db1-83c1-1c96fb791ac6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "20787b09-ce2f-460b-aca1-0efd6efeef32",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 240,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "01fa1990-2473-4db1-83c1-1c96fb791ac6",
        "cursor": {
          "ref": "c6801021-7285-4aec-a6d6-f0d26b544269",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "44f94ee6-0f96-4ae2-b07e-996ad78f20f3"
        },
        "item": {
          "id": "01fa1990-2473-4db1-83c1-1c96fb791ac6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "20787b09-ce2f-460b-aca1-0efd6efeef32",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 240,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "01fa1990-2473-4db1-83c1-1c96fb791ac6",
        "cursor": {
          "ref": "c6801021-7285-4aec-a6d6-f0d26b544269",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "44f94ee6-0f96-4ae2-b07e-996ad78f20f3"
        },
        "item": {
          "id": "01fa1990-2473-4db1-83c1-1c96fb791ac6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "20787b09-ce2f-460b-aca1-0efd6efeef32",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 240,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "20d0a6b5-40fb-49a8-a2f4-4a02278d8a29",
        "cursor": {
          "ref": "0943fa82-9a95-41b2-81f3-230ffff04695",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "d2fe53c3-ed43-4833-80d1-205ba7fb9e90"
        },
        "item": {
          "id": "20d0a6b5-40fb-49a8-a2f4-4a02278d8a29",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d3daa248-cdc0-4c26-846e-2a52378150b0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "20d0a6b5-40fb-49a8-a2f4-4a02278d8a29",
        "cursor": {
          "ref": "0943fa82-9a95-41b2-81f3-230ffff04695",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "d2fe53c3-ed43-4833-80d1-205ba7fb9e90"
        },
        "item": {
          "id": "20d0a6b5-40fb-49a8-a2f4-4a02278d8a29",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d3daa248-cdc0-4c26-846e-2a52378150b0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "6bed27ba-6a96-4df4-b69c-15bbc05610e5",
        "cursor": {
          "ref": "f0b93eb7-6c7b-415e-a7d8-251db5fb1afd",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "661f8f8d-3256-48e7-8829-b8250b4a1bda"
        },
        "item": {
          "id": "6bed27ba-6a96-4df4-b69c-15bbc05610e5",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "414a9b42-d272-49eb-878a-4c3add592543",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "6bed27ba-6a96-4df4-b69c-15bbc05610e5",
        "cursor": {
          "ref": "f0b93eb7-6c7b-415e-a7d8-251db5fb1afd",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "661f8f8d-3256-48e7-8829-b8250b4a1bda"
        },
        "item": {
          "id": "6bed27ba-6a96-4df4-b69c-15bbc05610e5",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "414a9b42-d272-49eb-878a-4c3add592543",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "b0b159e9-647c-430c-ab91-6fa0d994e007",
        "cursor": {
          "ref": "2ba26aee-0d93-475e-9bc9-a15d1acacae6",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4506021d-8849-4213-9ed8-b06d233500f7"
        },
        "item": {
          "id": "b0b159e9-647c-430c-ab91-6fa0d994e007",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "15550e27-7121-4764-887c-2abfe516173e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "b0b159e9-647c-430c-ab91-6fa0d994e007",
        "cursor": {
          "ref": "2ba26aee-0d93-475e-9bc9-a15d1acacae6",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4506021d-8849-4213-9ed8-b06d233500f7"
        },
        "item": {
          "id": "b0b159e9-647c-430c-ab91-6fa0d994e007",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "15550e27-7121-4764-887c-2abfe516173e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "15115a92-787d-469c-bf20-56ed5d4034d8",
        "cursor": {
          "ref": "f57cf6e8-3de4-4e7f-b7b8-bc274562af0b",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "7233f0d2-f436-434e-9c21-febe1171df9a"
        },
        "item": {
          "id": "15115a92-787d-469c-bf20-56ed5d4034d8",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "3c154e62-a801-47df-8abd-6ea5f243a7ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "15115a92-787d-469c-bf20-56ed5d4034d8",
        "cursor": {
          "ref": "f57cf6e8-3de4-4e7f-b7b8-bc274562af0b",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "7233f0d2-f436-434e-9c21-febe1171df9a"
        },
        "item": {
          "id": "15115a92-787d-469c-bf20-56ed5d4034d8",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "3c154e62-a801-47df-8abd-6ea5f243a7ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "0ffe34a4-3803-4c9a-b1f2-04dff538b772",
        "cursor": {
          "ref": "3a69ad7b-a244-4cc1-91cd-d2843354bf77",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "848a3652-9bbf-4b64-ad9a-c6462960bb53"
        },
        "item": {
          "id": "0ffe34a4-3803-4c9a-b1f2-04dff538b772",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0acdcc64-92f1-4e0c-ad90-f55bb19ac3a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "0ffe34a4-3803-4c9a-b1f2-04dff538b772",
        "cursor": {
          "ref": "3a69ad7b-a244-4cc1-91cd-d2843354bf77",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "848a3652-9bbf-4b64-ad9a-c6462960bb53"
        },
        "item": {
          "id": "0ffe34a4-3803-4c9a-b1f2-04dff538b772",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0acdcc64-92f1-4e0c-ad90-f55bb19ac3a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "4446a09e-aaf2-466e-b9d9-40ce2460eca2",
        "cursor": {
          "ref": "9abecd4d-6a37-4fa4-b7aa-3ed6ecf2dbd7",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9108027f-f414-45d8-b9e7-63d22026cc75"
        },
        "item": {
          "id": "4446a09e-aaf2-466e-b9d9-40ce2460eca2",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "fcb3760c-f799-4498-a2cd-6f22b23c4fbf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "4446a09e-aaf2-466e-b9d9-40ce2460eca2",
        "cursor": {
          "ref": "9abecd4d-6a37-4fa4-b7aa-3ed6ecf2dbd7",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9108027f-f414-45d8-b9e7-63d22026cc75"
        },
        "item": {
          "id": "4446a09e-aaf2-466e-b9d9-40ce2460eca2",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "fcb3760c-f799-4498-a2cd-6f22b23c4fbf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "5b9a3bab-04a7-44d4-9757-34aa30164601",
        "cursor": {
          "ref": "79c2bf07-52fa-47a3-9d42-2396ec6f4ea3",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9a0bad23-967d-49e6-99f5-ad19975c724c"
        },
        "item": {
          "id": "5b9a3bab-04a7-44d4-9757-34aa30164601",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "84faf46d-1aaa-47fc-a1db-d623d84db6b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 111,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "5b9a3bab-04a7-44d4-9757-34aa30164601",
        "cursor": {
          "ref": "79c2bf07-52fa-47a3-9d42-2396ec6f4ea3",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9a0bad23-967d-49e6-99f5-ad19975c724c"
        },
        "item": {
          "id": "5b9a3bab-04a7-44d4-9757-34aa30164601",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "84faf46d-1aaa-47fc-a1db-d623d84db6b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 111,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "7d4cd894-0303-4bd7-ae2c-9920a83a87c3",
        "cursor": {
          "ref": "df424007-8fcd-4727-9a0a-21a2a5f66ebf",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ef98f8f4-23d7-4bef-ac53-9c48f1750e58"
        },
        "item": {
          "id": "7d4cd894-0303-4bd7-ae2c-9920a83a87c3",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6f0b75b4-7d82-4733-b82c-267588bf7d6c",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "7d4cd894-0303-4bd7-ae2c-9920a83a87c3",
        "cursor": {
          "ref": "df424007-8fcd-4727-9a0a-21a2a5f66ebf",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ef98f8f4-23d7-4bef-ac53-9c48f1750e58"
        },
        "item": {
          "id": "7d4cd894-0303-4bd7-ae2c-9920a83a87c3",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6f0b75b4-7d82-4733-b82c-267588bf7d6c",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "503a4bdb-93d9-47e2-beed-523f9c751425",
        "cursor": {
          "ref": "f94496b1-e34f-4ea4-920d-56596badde5c",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d80a58e2-b485-4a6b-b818-06e1939cb147"
        },
        "item": {
          "id": "503a4bdb-93d9-47e2-beed-523f9c751425",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "a8fb8b67-3a33-4b43-9348-c3332a3df2ef",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "503a4bdb-93d9-47e2-beed-523f9c751425",
        "cursor": {
          "ref": "f94496b1-e34f-4ea4-920d-56596badde5c",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d80a58e2-b485-4a6b-b818-06e1939cb147"
        },
        "item": {
          "id": "503a4bdb-93d9-47e2-beed-523f9c751425",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "a8fb8b67-3a33-4b43-9348-c3332a3df2ef",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "c2d9e4c8-cf14-4365-babc-5f30cebd4435",
        "cursor": {
          "ref": "43974da7-3276-4189-96a6-6bed0b1b778b",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "297bd78b-c56b-4b3f-bfb6-147afc9aa95d"
        },
        "item": {
          "id": "c2d9e4c8-cf14-4365-babc-5f30cebd4435",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "e635fa29-55bb-4bbc-a93a-38b34a1002d1",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "c2d9e4c8-cf14-4365-babc-5f30cebd4435",
        "cursor": {
          "ref": "43974da7-3276-4189-96a6-6bed0b1b778b",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "297bd78b-c56b-4b3f-bfb6-147afc9aa95d"
        },
        "item": {
          "id": "c2d9e4c8-cf14-4365-babc-5f30cebd4435",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "e635fa29-55bb-4bbc-a93a-38b34a1002d1",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "6ba538e1-3adf-4000-9182-7830760ea649",
        "cursor": {
          "ref": "18ec540e-053d-4a77-9015-03cf8c5016e0",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ba8b5bc6-8891-49b9-99bc-ed9a581af99d"
        },
        "item": {
          "id": "6ba538e1-3adf-4000-9182-7830760ea649",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "92cb0eea-78fe-4d7a-b3b9-5a2c2f7eaafa",
          "status": "Created",
          "code": 201,
          "responseTime": 42,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "6ba538e1-3adf-4000-9182-7830760ea649",
        "cursor": {
          "ref": "18ec540e-053d-4a77-9015-03cf8c5016e0",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ba8b5bc6-8891-49b9-99bc-ed9a581af99d"
        },
        "item": {
          "id": "6ba538e1-3adf-4000-9182-7830760ea649",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "92cb0eea-78fe-4d7a-b3b9-5a2c2f7eaafa",
          "status": "Created",
          "code": 201,
          "responseTime": 42,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "a6f1cef2-3404-4ee4-9295-c70422e9e567",
        "cursor": {
          "ref": "29bf4414-0e3f-46c7-a463-26939fb8bf98",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "34aac5e5-16b1-442a-8104-3c0bb4485deb"
        },
        "item": {
          "id": "a6f1cef2-3404-4ee4-9295-c70422e9e567",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b7a7ed89-754d-4df8-a6f9-4f109657897f",
          "status": "Created",
          "code": 201,
          "responseTime": 47,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "a6f1cef2-3404-4ee4-9295-c70422e9e567",
        "cursor": {
          "ref": "29bf4414-0e3f-46c7-a463-26939fb8bf98",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "34aac5e5-16b1-442a-8104-3c0bb4485deb"
        },
        "item": {
          "id": "a6f1cef2-3404-4ee4-9295-c70422e9e567",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b7a7ed89-754d-4df8-a6f9-4f109657897f",
          "status": "Created",
          "code": 201,
          "responseTime": 47,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "3fd1096e-c34d-4ddc-b0f2-de2d1c75e1dd",
        "cursor": {
          "ref": "c67c5e39-8814-45d4-885d-651844db7ff9",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6fe8ade9-eee6-4e8c-b7f4-5179e761a4c3"
        },
        "item": {
          "id": "3fd1096e-c34d-4ddc-b0f2-de2d1c75e1dd",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "a217746f-fdcc-42d4-8e20-329df5e910fa",
          "status": "Created",
          "code": 201,
          "responseTime": 54,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "3fd1096e-c34d-4ddc-b0f2-de2d1c75e1dd",
        "cursor": {
          "ref": "c67c5e39-8814-45d4-885d-651844db7ff9",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6fe8ade9-eee6-4e8c-b7f4-5179e761a4c3"
        },
        "item": {
          "id": "3fd1096e-c34d-4ddc-b0f2-de2d1c75e1dd",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "a217746f-fdcc-42d4-8e20-329df5e910fa",
          "status": "Created",
          "code": 201,
          "responseTime": 54,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "cdcf523c-f124-4cda-af7a-23ceb2a7e741",
        "cursor": {
          "ref": "21655e28-29f2-4375-89e4-ccd31a4c827c",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "84770384-902b-44cc-a752-5e8f994bb99c"
        },
        "item": {
          "id": "cdcf523c-f124-4cda-af7a-23ceb2a7e741",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "dbbcee95-c5fe-4fb1-8aa7-df42c81a5c39",
          "status": "Created",
          "code": 201,
          "responseTime": 30,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "cdcf523c-f124-4cda-af7a-23ceb2a7e741",
        "cursor": {
          "ref": "21655e28-29f2-4375-89e4-ccd31a4c827c",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "84770384-902b-44cc-a752-5e8f994bb99c"
        },
        "item": {
          "id": "cdcf523c-f124-4cda-af7a-23ceb2a7e741",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "dbbcee95-c5fe-4fb1-8aa7-df42c81a5c39",
          "status": "Created",
          "code": 201,
          "responseTime": 30,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "ca79283a-6ab4-4900-91fa-b166d61ae718",
        "cursor": {
          "ref": "7ef1a4e7-688c-4283-97d5-e42ff4c89f7d",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c79b7196-9018-44e0-99dc-b0bdca3ad372"
        },
        "item": {
          "id": "ca79283a-6ab4-4900-91fa-b166d61ae718",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "87831e0c-b457-436a-9a7c-b5506cfc98f5",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "ca79283a-6ab4-4900-91fa-b166d61ae718",
        "cursor": {
          "ref": "7ef1a4e7-688c-4283-97d5-e42ff4c89f7d",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c79b7196-9018-44e0-99dc-b0bdca3ad372"
        },
        "item": {
          "id": "ca79283a-6ab4-4900-91fa-b166d61ae718",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "87831e0c-b457-436a-9a7c-b5506cfc98f5",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "5489524c-f839-4ca3-965b-a8a6e93be468",
        "cursor": {
          "ref": "cdb21032-91c6-4bbe-a775-ff6acee293c0",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "cfdc7853-d5dc-4ecb-b1d1-99169678db19"
        },
        "item": {
          "id": "5489524c-f839-4ca3-965b-a8a6e93be468",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ab6b4cb4-55da-46c2-9270-ec5a868cf52d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "5489524c-f839-4ca3-965b-a8a6e93be468",
        "cursor": {
          "ref": "cdb21032-91c6-4bbe-a775-ff6acee293c0",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "cfdc7853-d5dc-4ecb-b1d1-99169678db19"
        },
        "item": {
          "id": "5489524c-f839-4ca3-965b-a8a6e93be468",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ab6b4cb4-55da-46c2-9270-ec5a868cf52d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "e4afad61-0263-47dc-9aef-960048c39cbc",
        "cursor": {
          "ref": "6f8cc525-642d-4d05-a76e-fcbdb8e87301",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f49bc650-c10e-4ad3-82d0-6bc57ae38c83"
        },
        "item": {
          "id": "e4afad61-0263-47dc-9aef-960048c39cbc",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "601c6f96-e8ed-401f-a1d2-33e8338b8444",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "e4afad61-0263-47dc-9aef-960048c39cbc",
        "cursor": {
          "ref": "6f8cc525-642d-4d05-a76e-fcbdb8e87301",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f49bc650-c10e-4ad3-82d0-6bc57ae38c83"
        },
        "item": {
          "id": "e4afad61-0263-47dc-9aef-960048c39cbc",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "601c6f96-e8ed-401f-a1d2-33e8338b8444",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "3e3420b5-ea38-443c-885b-832d59753ec4",
        "cursor": {
          "ref": "3d8d80c1-6ab7-44ca-bb67-f87cd4eefc53",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e07651a0-48ef-40d1-9a27-2bdfe062691b"
        },
        "item": {
          "id": "3e3420b5-ea38-443c-885b-832d59753ec4",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "891dd146-8249-45e7-8df2-a3f30a343cb9",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "3e3420b5-ea38-443c-885b-832d59753ec4",
        "cursor": {
          "ref": "3d8d80c1-6ab7-44ca-bb67-f87cd4eefc53",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e07651a0-48ef-40d1-9a27-2bdfe062691b"
        },
        "item": {
          "id": "3e3420b5-ea38-443c-885b-832d59753ec4",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "891dd146-8249-45e7-8df2-a3f30a343cb9",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "1b9c10e4-5c93-4a3c-a2d3-4f9a97c8ad6f",
        "cursor": {
          "ref": "5b53d844-b31e-41b1-9631-b7f0a2194124",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "81c56a20-2a3c-482d-8ca9-64841a58ad51"
        },
        "item": {
          "id": "1b9c10e4-5c93-4a3c-a2d3-4f9a97c8ad6f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "567c41ea-fdcc-449f-a9ed-3055623b94ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "1b9c10e4-5c93-4a3c-a2d3-4f9a97c8ad6f",
        "cursor": {
          "ref": "5b53d844-b31e-41b1-9631-b7f0a2194124",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "81c56a20-2a3c-482d-8ca9-64841a58ad51"
        },
        "item": {
          "id": "1b9c10e4-5c93-4a3c-a2d3-4f9a97c8ad6f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "567c41ea-fdcc-449f-a9ed-3055623b94ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "bb0069da-b2b5-4d5b-ac78-c38d6d85e884",
        "cursor": {
          "ref": "33cadd6a-77d8-48d8-9c29-ae81eb6b19ba",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0e6bc641-048a-4081-804f-62f0c2cfbd7f"
        },
        "item": {
          "id": "bb0069da-b2b5-4d5b-ac78-c38d6d85e884",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "2c7ad3df-8d66-4267-ba64-f7dfccc24fe8",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "bb0069da-b2b5-4d5b-ac78-c38d6d85e884",
        "cursor": {
          "ref": "33cadd6a-77d8-48d8-9c29-ae81eb6b19ba",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0e6bc641-048a-4081-804f-62f0c2cfbd7f"
        },
        "item": {
          "id": "bb0069da-b2b5-4d5b-ac78-c38d6d85e884",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "2c7ad3df-8d66-4267-ba64-f7dfccc24fe8",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "556650a8-d0c6-4bb0-94eb-e2ac4435a37d",
        "cursor": {
          "ref": "254c2d22-99ec-458a-8771-719e1f6db5a9",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a9b10c4c-f474-4317-b0d1-f4174c4ff4da"
        },
        "item": {
          "id": "556650a8-d0c6-4bb0-94eb-e2ac4435a37d",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "f2c572fd-4c37-44fe-a7b7-3b7d6f1ed8d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "556650a8-d0c6-4bb0-94eb-e2ac4435a37d",
        "cursor": {
          "ref": "254c2d22-99ec-458a-8771-719e1f6db5a9",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a9b10c4c-f474-4317-b0d1-f4174c4ff4da"
        },
        "item": {
          "id": "556650a8-d0c6-4bb0-94eb-e2ac4435a37d",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "f2c572fd-4c37-44fe-a7b7-3b7d6f1ed8d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "fd0eabfa-b6bc-4ad8-afda-a612aa737ba7",
        "cursor": {
          "ref": "10f3146a-3306-410b-af37-6c6d85a08e07",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3142ec93-1e2d-461e-8be2-e65431176c58"
        },
        "item": {
          "id": "fd0eabfa-b6bc-4ad8-afda-a612aa737ba7",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ef9991ff-ae95-4c20-a6dc-eb8dd650b701",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "fd0eabfa-b6bc-4ad8-afda-a612aa737ba7",
        "cursor": {
          "ref": "10f3146a-3306-410b-af37-6c6d85a08e07",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3142ec93-1e2d-461e-8be2-e65431176c58"
        },
        "item": {
          "id": "fd0eabfa-b6bc-4ad8-afda-a612aa737ba7",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ef9991ff-ae95-4c20-a6dc-eb8dd650b701",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "78ef840e-b219-4fbd-a3d3-59edd5391b71",
        "cursor": {
          "ref": "332542ed-533c-4fe4-bfdf-5f9b456ddd78",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "607bca33-6e79-484f-9e3e-4322ce8cd085"
        },
        "item": {
          "id": "78ef840e-b219-4fbd-a3d3-59edd5391b71",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "1552cf20-5abe-4a3f-a0a0-bf9d0ce7f26e",
          "status": "Created",
          "code": 201,
          "responseTime": 34,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "78ef840e-b219-4fbd-a3d3-59edd5391b71",
        "cursor": {
          "ref": "332542ed-533c-4fe4-bfdf-5f9b456ddd78",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "607bca33-6e79-484f-9e3e-4322ce8cd085"
        },
        "item": {
          "id": "78ef840e-b219-4fbd-a3d3-59edd5391b71",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "1552cf20-5abe-4a3f-a0a0-bf9d0ce7f26e",
          "status": "Created",
          "code": 201,
          "responseTime": 34,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "bd71b158-a9cc-4de5-925c-c9c3823a96da",
        "cursor": {
          "ref": "daea0c93-800b-45cc-8788-675b7e110170",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1c60e694-1793-4d10-b5a7-a6b3e180e31a"
        },
        "item": {
          "id": "bd71b158-a9cc-4de5-925c-c9c3823a96da",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "209cbef9-5493-42d0-b67d-bd9b1cd42e81",
          "status": "Created",
          "code": 201,
          "responseTime": 31,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "bd71b158-a9cc-4de5-925c-c9c3823a96da",
        "cursor": {
          "ref": "daea0c93-800b-45cc-8788-675b7e110170",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1c60e694-1793-4d10-b5a7-a6b3e180e31a"
        },
        "item": {
          "id": "bd71b158-a9cc-4de5-925c-c9c3823a96da",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "209cbef9-5493-42d0-b67d-bd9b1cd42e81",
          "status": "Created",
          "code": 201,
          "responseTime": 31,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "db7ac5c3-25e6-462b-bd77-3b9aef456142",
        "cursor": {
          "ref": "324dcbfb-fe69-42fe-b2f4-bb122d2d97ba",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "986d870a-f449-4965-abe0-75385f3882e7"
        },
        "item": {
          "id": "db7ac5c3-25e6-462b-bd77-3b9aef456142",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "6bac744d-1d64-40ce-82be-d1e34a1cc356",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "db7ac5c3-25e6-462b-bd77-3b9aef456142",
        "cursor": {
          "ref": "324dcbfb-fe69-42fe-b2f4-bb122d2d97ba",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "986d870a-f449-4965-abe0-75385f3882e7"
        },
        "item": {
          "id": "db7ac5c3-25e6-462b-bd77-3b9aef456142",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "6bac744d-1d64-40ce-82be-d1e34a1cc356",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "f1b910ba-671e-4a78-ad3f-578bba820a7c",
        "cursor": {
          "ref": "1d4a071c-53f6-458b-a12a-2e0fe00c2e2a",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ce476377-1dba-49ca-a7b9-cfe046f25d74"
        },
        "item": {
          "id": "f1b910ba-671e-4a78-ad3f-578bba820a7c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4392d254-fb83-43ba-808f-e876fd48f2db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "f1b910ba-671e-4a78-ad3f-578bba820a7c",
        "cursor": {
          "ref": "1d4a071c-53f6-458b-a12a-2e0fe00c2e2a",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ce476377-1dba-49ca-a7b9-cfe046f25d74"
        },
        "item": {
          "id": "f1b910ba-671e-4a78-ad3f-578bba820a7c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4392d254-fb83-43ba-808f-e876fd48f2db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "03a76329-7d5c-4fe2-a0ac-e2bc376cc48c",
        "cursor": {
          "ref": "a2113f6f-2cd0-4d0b-b007-82d1257187ef",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a3788221-d9cc-44f6-8001-ca9b973b8198"
        },
        "item": {
          "id": "03a76329-7d5c-4fe2-a0ac-e2bc376cc48c",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "09d039cd-a916-48d2-81c7-0e21ac6241d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "03a76329-7d5c-4fe2-a0ac-e2bc376cc48c",
        "cursor": {
          "ref": "a2113f6f-2cd0-4d0b-b007-82d1257187ef",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a3788221-d9cc-44f6-8001-ca9b973b8198"
        },
        "item": {
          "id": "03a76329-7d5c-4fe2-a0ac-e2bc376cc48c",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "09d039cd-a916-48d2-81c7-0e21ac6241d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "2d6f507a-cc4b-4dcf-a7ce-ee840dfc5d53",
        "cursor": {
          "ref": "cabe79fc-ebf6-4266-ae56-10419eaaf267",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "69de02a1-5325-4044-932f-571531a2912d"
        },
        "item": {
          "id": "2d6f507a-cc4b-4dcf-a7ce-ee840dfc5d53",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "97d7fb6e-de40-4fdd-9429-3d82cb153c6a",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "2d6f507a-cc4b-4dcf-a7ce-ee840dfc5d53",
        "cursor": {
          "ref": "cabe79fc-ebf6-4266-ae56-10419eaaf267",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "69de02a1-5325-4044-932f-571531a2912d"
        },
        "item": {
          "id": "2d6f507a-cc4b-4dcf-a7ce-ee840dfc5d53",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "97d7fb6e-de40-4fdd-9429-3d82cb153c6a",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "e211d978-7e56-4beb-bbd2-d8370d36e555",
        "cursor": {
          "ref": "a8cf7530-4852-46ae-8256-5517520b9487",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c43f2ed2-d150-47e0-936a-519eb28d3544"
        },
        "item": {
          "id": "e211d978-7e56-4beb-bbd2-d8370d36e555",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "f06f1b7f-c833-492e-b6b3-573c5ed47baf",
          "status": "Created",
          "code": 201,
          "responseTime": 34,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "e211d978-7e56-4beb-bbd2-d8370d36e555",
        "cursor": {
          "ref": "a8cf7530-4852-46ae-8256-5517520b9487",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c43f2ed2-d150-47e0-936a-519eb28d3544"
        },
        "item": {
          "id": "e211d978-7e56-4beb-bbd2-d8370d36e555",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "f06f1b7f-c833-492e-b6b3-573c5ed47baf",
          "status": "Created",
          "code": 201,
          "responseTime": 34,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "36d020bf-addd-496b-8cc3-d83ac5ed1133",
        "cursor": {
          "ref": "31e137d7-d8e6-44ea-ab13-4aacb3e105e9",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "0a11910d-cbb6-47c8-bfc8-8e49ddb013c3"
        },
        "item": {
          "id": "36d020bf-addd-496b-8cc3-d83ac5ed1133",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "233948d9-fceb-491e-b92c-ce25359a2ddc",
          "status": "Created",
          "code": 201,
          "responseTime": 34,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "36d020bf-addd-496b-8cc3-d83ac5ed1133",
        "cursor": {
          "ref": "31e137d7-d8e6-44ea-ab13-4aacb3e105e9",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "0a11910d-cbb6-47c8-bfc8-8e49ddb013c3"
        },
        "item": {
          "id": "36d020bf-addd-496b-8cc3-d83ac5ed1133",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "233948d9-fceb-491e-b92c-ce25359a2ddc",
          "status": "Created",
          "code": 201,
          "responseTime": 34,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "a37381f9-036a-4f46-a04b-d69820ad75a6",
        "cursor": {
          "ref": "25d70213-c40e-4441-ba85-8b94845e2974",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "79fb1005-5e3a-4302-a9b3-fa8ea79e526d"
        },
        "item": {
          "id": "a37381f9-036a-4f46-a04b-d69820ad75a6",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "44c77259-a47a-4f58-b09c-1b13dcd81e94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 8,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "a37381f9-036a-4f46-a04b-d69820ad75a6",
        "cursor": {
          "ref": "25d70213-c40e-4441-ba85-8b94845e2974",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "79fb1005-5e3a-4302-a9b3-fa8ea79e526d"
        },
        "item": {
          "id": "a37381f9-036a-4f46-a04b-d69820ad75a6",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "44c77259-a47a-4f58-b09c-1b13dcd81e94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 8,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "6c8253b3-0ec7-4701-a6f9-e992356dcadb",
        "cursor": {
          "ref": "676ae231-e518-47d0-b8d5-29af4311446d",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4ca5ef06-aecc-473d-adf2-f07259b968bd"
        },
        "item": {
          "id": "6c8253b3-0ec7-4701-a6f9-e992356dcadb",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "c6fc237d-3fc0-4451-862e-1ca21d4b8e23",
          "status": "Created",
          "code": 201,
          "responseTime": 34,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "6c8253b3-0ec7-4701-a6f9-e992356dcadb",
        "cursor": {
          "ref": "676ae231-e518-47d0-b8d5-29af4311446d",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4ca5ef06-aecc-473d-adf2-f07259b968bd"
        },
        "item": {
          "id": "6c8253b3-0ec7-4701-a6f9-e992356dcadb",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "c6fc237d-3fc0-4451-862e-1ca21d4b8e23",
          "status": "Created",
          "code": 201,
          "responseTime": 34,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "c399907c-ac98-4934-8b2b-51eed764db84",
        "cursor": {
          "ref": "ca0fbe03-40f7-4158-8220-8a64b1696c3b",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b3aac3df-4181-4e24-9fdd-703964821d1c"
        },
        "item": {
          "id": "c399907c-ac98-4934-8b2b-51eed764db84",
          "name": "credentials_issue"
        },
        "response": {
          "id": "1a3855bd-c660-4fbc-8e1b-fd36984fea21",
          "status": "Created",
          "code": 201,
          "responseTime": 53,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "c399907c-ac98-4934-8b2b-51eed764db84",
        "cursor": {
          "ref": "ca0fbe03-40f7-4158-8220-8a64b1696c3b",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b3aac3df-4181-4e24-9fdd-703964821d1c"
        },
        "item": {
          "id": "c399907c-ac98-4934-8b2b-51eed764db84",
          "name": "credentials_issue"
        },
        "response": {
          "id": "1a3855bd-c660-4fbc-8e1b-fd36984fea21",
          "status": "Created",
          "code": 201,
          "responseTime": 53,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "00b9ea96-8aa6-4f09-8598-4e5edfecd82d",
        "cursor": {
          "ref": "79356c45-d233-407f-883f-6edddc1c1ed9",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5f6077c0-d003-4a49-994e-8bbebdac5b83"
        },
        "item": {
          "id": "00b9ea96-8aa6-4f09-8598-4e5edfecd82d",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "60bc4810-f438-47c4-9d0a-9d4312263b23",
          "status": "Created",
          "code": 201,
          "responseTime": 33,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "00b9ea96-8aa6-4f09-8598-4e5edfecd82d",
        "cursor": {
          "ref": "79356c45-d233-407f-883f-6edddc1c1ed9",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5f6077c0-d003-4a49-994e-8bbebdac5b83"
        },
        "item": {
          "id": "00b9ea96-8aa6-4f09-8598-4e5edfecd82d",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "60bc4810-f438-47c4-9d0a-9d4312263b23",
          "status": "Created",
          "code": 201,
          "responseTime": 33,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "6bd816af-2933-4a87-b452-263eef03f512",
        "cursor": {
          "ref": "8b46d354-b311-4099-bbfc-4b878eea2f66",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "160a7d83-9fd6-40fe-81fc-3f13e30ed0aa"
        },
        "item": {
          "id": "6bd816af-2933-4a87-b452-263eef03f512",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "4b5fdf88-1955-4860-826a-1ad0878e92ee",
          "status": "Created",
          "code": 201,
          "responseTime": 31,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd816af-2933-4a87-b452-263eef03f512",
        "cursor": {
          "ref": "8b46d354-b311-4099-bbfc-4b878eea2f66",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "160a7d83-9fd6-40fe-81fc-3f13e30ed0aa"
        },
        "item": {
          "id": "6bd816af-2933-4a87-b452-263eef03f512",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "4b5fdf88-1955-4860-826a-1ad0878e92ee",
          "status": "Created",
          "code": 201,
          "responseTime": 31,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "89430a86-0aa1-42d2-8ac7-74d19ed54233",
        "cursor": {
          "ref": "febde389-2f60-49dc-b1a3-229355a2a8ee",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "cede7591-b2a7-492c-a767-f84e95be89bf"
        },
        "item": {
          "id": "89430a86-0aa1-42d2-8ac7-74d19ed54233",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "a31fc65b-92e8-42df-90ac-04b2de58a97e",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "89430a86-0aa1-42d2-8ac7-74d19ed54233",
        "cursor": {
          "ref": "febde389-2f60-49dc-b1a3-229355a2a8ee",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "cede7591-b2a7-492c-a767-f84e95be89bf"
        },
        "item": {
          "id": "89430a86-0aa1-42d2-8ac7-74d19ed54233",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "a31fc65b-92e8-42df-90ac-04b2de58a97e",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "51cbbd69-865d-4fda-965c-6ce0a1fdee26",
        "cursor": {
          "ref": "48409454-8006-486e-ab6d-c1b9cc75d791",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8f223572-a21f-4fe1-9d34-c23fb410e120"
        },
        "item": {
          "id": "51cbbd69-865d-4fda-965c-6ce0a1fdee26",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "97ed645c-f9d2-45d4-8cf8-dc6377b8a652",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "51cbbd69-865d-4fda-965c-6ce0a1fdee26",
        "cursor": {
          "ref": "48409454-8006-486e-ab6d-c1b9cc75d791",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8f223572-a21f-4fe1-9d34-c23fb410e120"
        },
        "item": {
          "id": "51cbbd69-865d-4fda-965c-6ce0a1fdee26",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "97ed645c-f9d2-45d4-8cf8-dc6377b8a652",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a07922a-59a8-4bd3-a4cc-12e53c78813e",
        "cursor": {
          "ref": "e33a9c2d-6679-41b2-a506-002014f61736",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b809f571-a2fe-42f6-a5c5-8b29e5f05e7e"
        },
        "item": {
          "id": "5a07922a-59a8-4bd3-a4cc-12e53c78813e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f3faa418-2b8e-42dd-9a26-17d8019272d8",
          "status": "Created",
          "code": 201,
          "responseTime": 31,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "5a07922a-59a8-4bd3-a4cc-12e53c78813e",
        "cursor": {
          "ref": "e33a9c2d-6679-41b2-a506-002014f61736",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b809f571-a2fe-42f6-a5c5-8b29e5f05e7e"
        },
        "item": {
          "id": "5a07922a-59a8-4bd3-a4cc-12e53c78813e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f3faa418-2b8e-42dd-9a26-17d8019272d8",
          "status": "Created",
          "code": 201,
          "responseTime": 31,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "80365e9d-6a41-4d2b-8c74-4c00efebc865",
        "cursor": {
          "ref": "73c1ba54-c01c-4a69-be6d-d763aebbfb17",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a879c36f-8430-4959-9936-33071bec575f"
        },
        "item": {
          "id": "80365e9d-6a41-4d2b-8c74-4c00efebc865",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "379c9767-963a-45a5-8561-c442686a2254",
          "status": "Created",
          "code": 201,
          "responseTime": 51,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "80365e9d-6a41-4d2b-8c74-4c00efebc865",
        "cursor": {
          "ref": "73c1ba54-c01c-4a69-be6d-d763aebbfb17",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a879c36f-8430-4959-9936-33071bec575f"
        },
        "item": {
          "id": "80365e9d-6a41-4d2b-8c74-4c00efebc865",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "379c9767-963a-45a5-8561-c442686a2254",
          "status": "Created",
          "code": 201,
          "responseTime": 51,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "c3f0d501-8731-42ae-808a-b5553d1efb80",
        "cursor": {
          "ref": "8a7bd9c4-2eba-4198-a3ee-31df28d74bbf",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "da6a62aa-b4e4-4387-b1f2-9ab225369d67"
        },
        "item": {
          "id": "c3f0d501-8731-42ae-808a-b5553d1efb80",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "68066f53-b6a4-4dd9-bb92-4dc8615b39b0",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "c3f0d501-8731-42ae-808a-b5553d1efb80",
        "cursor": {
          "ref": "8a7bd9c4-2eba-4198-a3ee-31df28d74bbf",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "da6a62aa-b4e4-4387-b1f2-9ab225369d67"
        },
        "item": {
          "id": "c3f0d501-8731-42ae-808a-b5553d1efb80",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "68066f53-b6a4-4dd9-bb92-4dc8615b39b0",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "c00042a6-b993-4ad0-82b8-8c74b609e328",
        "cursor": {
          "ref": "0fb26ce3-49a2-4624-bfe1-7f26c6a06974",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e26083f5-ae2a-4dd5-9e15-16c8ca327b2d"
        },
        "item": {
          "id": "c00042a6-b993-4ad0-82b8-8c74b609e328",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "15b88863-7cd5-421c-a2e0-3492c82dcde6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "c00042a6-b993-4ad0-82b8-8c74b609e328",
        "cursor": {
          "ref": "0fb26ce3-49a2-4624-bfe1-7f26c6a06974",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e26083f5-ae2a-4dd5-9e15-16c8ca327b2d"
        },
        "item": {
          "id": "c00042a6-b993-4ad0-82b8-8c74b609e328",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "15b88863-7cd5-421c-a2e0-3492c82dcde6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "1bfd4460-c05d-4630-acd4-83126c41003a",
        "cursor": {
          "ref": "0864a3d7-7c75-4c22-974a-28b08ae3038a",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "eb45e695-705d-40f6-98e2-35899efbc6af"
        },
        "item": {
          "id": "1bfd4460-c05d-4630-acd4-83126c41003a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "054cdfca-bf31-440c-84a7-c3fcb3ef85e2",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 9,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "ea5f0383-cbc1-462e-8d96-a738c663b4d4",
        "cursor": {
          "ref": "cb6fc308-c252-46c7-b416-198aff081ae6",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6931ccc9-b37c-47b2-8b0b-aa5b67140bda"
        },
        "item": {
          "id": "ea5f0383-cbc1-462e-8d96-a738c663b4d4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2dda93b7-dddf-440b-82c5-baa722d8eb98",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "ea5f0383-cbc1-462e-8d96-a738c663b4d4",
        "cursor": {
          "ref": "cb6fc308-c252-46c7-b416-198aff081ae6",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6931ccc9-b37c-47b2-8b0b-aa5b67140bda"
        },
        "item": {
          "id": "ea5f0383-cbc1-462e-8d96-a738c663b4d4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2dda93b7-dddf-440b-82c5-baa722d8eb98",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "35a1e112-1f33-470d-be5a-e13d60128856",
        "cursor": {
          "ref": "8508ea2c-bfd5-4941-a77d-1be0026ffceb",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d5fe49c6-49d9-4243-9f6f-c1b8decdeacf"
        },
        "item": {
          "id": "35a1e112-1f33-470d-be5a-e13d60128856",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "e42da9c7-3988-4ca6-add6-e72337a84452",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "d553dfec-f3a9-4cd7-94af-70b128495604",
        "cursor": {
          "ref": "8c6f6d72-40ba-4199-9622-9af91e3ae3bf",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "51479c2e-c78e-4e3c-917c-1472749ef506"
        },
        "item": {
          "id": "d553dfec-f3a9-4cd7-94af-70b128495604",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4bd6bf54-6669-4cb1-af7d-06f514ea81fd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 9,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "d553dfec-f3a9-4cd7-94af-70b128495604",
        "cursor": {
          "ref": "8c6f6d72-40ba-4199-9622-9af91e3ae3bf",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "51479c2e-c78e-4e3c-917c-1472749ef506"
        },
        "item": {
          "id": "d553dfec-f3a9-4cd7-94af-70b128495604",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4bd6bf54-6669-4cb1-af7d-06f514ea81fd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 9,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "5b372f93-b4c0-489b-b72d-c5205ab77006",
        "cursor": {
          "ref": "4acc1331-108b-4929-aa05-5d2a8b068a01",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2604c420-8731-43b8-b2b0-f9b0d4985d67"
        },
        "item": {
          "id": "5b372f93-b4c0-489b-b72d-c5205ab77006",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "2213c08d-c896-4450-b4ff-f6bf802ef65b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 7,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "36a7fa09-2d26-4c94-894b-aaf129d8c73c",
        "cursor": {
          "ref": "cc853a58-60f9-4cae-9d63-e61573d028e9",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "bdce35fd-bf7a-464f-9447-437537191dd4"
        },
        "item": {
          "id": "36a7fa09-2d26-4c94-894b-aaf129d8c73c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "14a80262-9f2e-4ac4-bb8a-e4c76ce039d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "36a7fa09-2d26-4c94-894b-aaf129d8c73c",
        "cursor": {
          "ref": "cc853a58-60f9-4cae-9d63-e61573d028e9",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "bdce35fd-bf7a-464f-9447-437537191dd4"
        },
        "item": {
          "id": "36a7fa09-2d26-4c94-894b-aaf129d8c73c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "14a80262-9f2e-4ac4-bb8a-e4c76ce039d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "cda37248-a5d1-4901-b64f-2dc4a30f64a9",
        "cursor": {
          "ref": "5c278cf8-63ba-4d67-93f1-78b6c84cd638",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "768a4742-4815-453e-92aa-321d7da7b1bf"
        },
        "item": {
          "id": "cda37248-a5d1-4901-b64f-2dc4a30f64a9",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "757051da-2e76-4381-8d82-c6b31d89a8e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 6,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "193d2cca-5477-4ef8-859c-1edf585f9b17",
        "cursor": {
          "ref": "23412a9d-7fed-4522-a7e7-e601b1893ac8",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "777d1d18-a1db-45c1-9de3-f3ab897219c9"
        },
        "item": {
          "id": "193d2cca-5477-4ef8-859c-1edf585f9b17",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "3a65a047-5689-4c19-8e2f-1b45aa9fc1a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "193d2cca-5477-4ef8-859c-1edf585f9b17",
        "cursor": {
          "ref": "23412a9d-7fed-4522-a7e7-e601b1893ac8",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "777d1d18-a1db-45c1-9de3-f3ab897219c9"
        },
        "item": {
          "id": "193d2cca-5477-4ef8-859c-1edf585f9b17",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "3a65a047-5689-4c19-8e2f-1b45aa9fc1a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "56231642-9af9-477e-aa1e-24e583e75669",
        "cursor": {
          "ref": "5dc10579-1ea6-4dc1-a38f-75012829de0e",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "a7503bb8-3908-40ea-b74f-69286e507518"
        },
        "item": {
          "id": "56231642-9af9-477e-aa1e-24e583e75669",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "7eff8afe-bb8c-47dc-b6db-bd57adab7780",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 6,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      }
    ]
  }
}