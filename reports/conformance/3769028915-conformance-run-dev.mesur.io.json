{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9f5a0002-1d55-4949-9701-5ee583b710bb",
        "name": "Clear Cache",
        "item": [
          {
            "id": "176ddc83-7a29-4a7a-a9c1-a8ead10558ae",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9457fc50-2f75-4c43-bd98-06243642a732",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f8d5cb29-ef12-4763-99b7-1cfa1e8366fe"
                }
              }
            ]
          },
          {
            "id": "46d34677-59bf-4c0a-9327-3af3d0b21c9c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "12ce59f8-348d-467c-bb32-f0de5552fd16",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c4446334-7c53-4e3d-a2de-107d054eedc4"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "392ce823-c680-451b-b235-e3bb4126ec49",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1e04401b-12e2-4d40-8af3-80a93b8b520c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a3ff092f-95ea-4a27-82e0-ec29ef4bad53",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "97e12fc1-8b98-4a81-b6ad-87c0f92eaaf4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bd77c020-1be1-4a21-8e8b-32f1ce12cbc5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "595a3941-f08c-4d02-85e1-cbe52f140aae",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9cd75e83-b5c0-4236-8962-b51b46fd005c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "36b27d40-c21c-4d25-a7f7-b10b855cf107",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dd516a52-aec5-4226-98b4-4b53ad7e621c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "347bfc2a-bb8f-4611-9d9b-9e7cce62e128",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0112aa03-c931-4900-bd37-ba322c29b226"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f05e905a-f54c-44dd-a0f1-bbc35e13f3f5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cf0290a7-7736-41f9-8e8d-3db5f2296e8b"
            }
          }
        ]
      },
      {
        "id": "1472d292-7c52-4421-bb7f-30ac0326ed9b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "071801c3-d488-41c8-b5a0-9e952e56cce5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "598a168b-9a8d-4695-ae9d-b1c000460c2e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "380a18cf-54e3-4d03-8dab-a8e35f4f1e94",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeafc013-2dce-40be-a2e9-6ad206e90c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "78b2bc57-fb48-4747-b7c0-c740b661bbc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "815657b6-97a8-42b7-b137-7a46187231b0",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b457f5e-76a5-49e5-8bd1-be4545c04a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "110ff306-bb21-4294-b916-b06d9124507c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f1edca-a770-4556-b119-597a425eca7e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c7fb46-5c34-4ffa-8e7b-8635ee22fa3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c88bdbe0-77a8-469f-9ae3-4734c795872b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bc3193b2-06b4-4411-98e7-4458beceecf4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0c8c16d9-9ea5-45e2-9711-a662c60b6c43",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7b5a80a-f2c0-4706-8331-06a809682c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "202f66bd-0e9d-46bf-8020-3b0125afd7fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "595bb37f-3d96-47ac-98c0-76e7fd8b564e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99f0e44a-a801-496c-a932-79f153b7b7ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c78d7c-ae91-43cf-b875-92d49284dde6",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28935545-e65a-4a69-850c-5ab6a02b1e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "acb5bde2-bb1d-4a23-8c17-649739fed12c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0aa9d6-012c-496f-8a9b-3f3bf4580968",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "bfef9584-c08b-4088-8eae-9a4325bb3998"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6e93a21d-a179-4377-8c09-73b21bf04ca5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7175ce6b-5293-4508-bbdb-ca4d93a808bb",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0ffd88f-a508-4bf7-a2c8-4c4a86e24f3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b7e62514-bd42-4c95-8163-b8f36773f7ca"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a64d11a1-d506-4dca-a53d-029830d6aa74",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "428e033e-1a3d-4633-95b2-5f75fc66ebe1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6d61124b-8560-4cbd-8b1a-3aaa0ad8e8bf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c552b405-6f1b-40cc-9563-d50787e04df6"
            }
          }
        ]
      },
      {
        "id": "a5fc618e-95da-46f0-8427-b92d1a73f901",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ad46d667-9899-4b93-aa5b-2c4205ae1e08",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0fdaad70-48cf-4431-96e4-8f7e028bedf5",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7361dbae-3e90-454d-b10c-38e2de9d77cc",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90408a41-643d-49fe-b317-3910d941343d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "970ee5a4-a2db-43da-b08f-74ba38c06807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f68379-7033-4d9f-b7e0-b77136456ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16d436ab-e1c4-4a88-8d4b-4fa7fd654b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a175abdb-90a2-485c-a756-0b07ec169e6e",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fea35ab2-75a1-436d-858c-7b9d8f971f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41f773d2-ba06-4402-a201-207a635fb971"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bafc798-c9ca-420d-b701-bb26d2dfc9c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b70390f2-3c18-4f2b-b016-aea7ab52e5ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e2bab6c-4f26-49a7-aa1e-813e4cbde938",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "788b3702-d3a8-4283-b9b3-f21dcadb499c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ce7a574-8c99-4194-90b8-11280bbb34d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf968432-1d15-45e3-b1a3-2a49836409f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db746133-463a-4e93-9737-e52e911bc382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d285c0c-f850-4ed3-97fa-882a59562bda",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "099f5003-c1ff-4995-aeb7-0c22db7da43c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ef25357-26b3-4f4b-95f8-54dd09dc17c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44a6eb4-57d8-421d-939e-d65463e37f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8fc8e872-3baa-4b8b-8047-4c2063091658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "345d34be-5533-4e70-820c-860619128ecf",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20362b07-433f-4b32-b21e-0b159e5f8579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d46ee70-609d-42b3-8cdc-b17751179864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d636dd63-21fe-47f8-881f-3d06acb1c29e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10cce65f-221e-4035-aad1-b44f79eced9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a7bed4-db51-4a58-8f83-d406b981d3c8",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "556dc0e5-c120-4484-b6df-13eccf62dc1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acb982fc-021f-474d-a107-f3dbfd8a64f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c92f5bf-0edd-4b94-91ed-0c6088fcf599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd57baaa-1685-4205-9c5c-ffb07565605f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "640cd5d2-7483-4315-b026-0ed9e47e7d24",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de6b4313-2d21-43b8-9c62-588f8f54a614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbd70211-b20c-46c5-a68c-430cbdcb6c0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c14223-da21-40ee-99cc-42432c6e34c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3d468cd-777d-4247-8441-bac8c8392a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44085035-f226-40cd-955c-43d571669897",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb89d84f-3c75-452a-9584-dbd445f93187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9a2a80a-e9ea-4034-9ea3-cf766fa261c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72fdd777-28d4-46be-bfe7-4001a5ad8bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6af0acca-4527-4310-8140-fceecd2e7a4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40aa6c52-35e2-4e63-9b57-a7b632efcbff",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de03a646-755c-47ee-87eb-be1fe059fbad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "997aa2d4-13df-4983-a90d-7ff2af5d27be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "432418e8-cb8e-4ef7-ae70-3afadd889236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ac9f105-9d75-43fd-a846-87468992bc29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be2ccb9b-d78f-44e9-894d-b6e6addeb3af",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62003c9e-9f42-4461-a853-0db43793254f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ca8339c-a094-4f74-928c-9c4600469869"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb82aed-21fc-414a-983a-e1be1760b0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e69b2e6-ecfe-40c5-8d59-c54e5cb34d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e77202-03a0-4f68-82af-cdba4a63eff6",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e01765e-9700-44d0-9841-d0376530b172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f053aa6-83fe-430d-91a5-0fb364775ad0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc257930-4362-43eb-9053-e33e596134c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "430d5a85-0dcb-4568-9ad9-470bde7cd39a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ae06a1-8f06-440b-8166-09be8a613473",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8419e6-d453-4d0c-a132-fc7398533f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ce85051-767e-4519-9c63-20b799730e92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7f7949-a808-48ad-b59a-50b54a7e6907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa60fcf1-616f-42b8-9482-84451c673cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d5f71b-9797-4162-a249-edc8282e7414",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac5d865a-236b-43e2-b15e-8d9371103bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "705c43bc-2d0f-48ad-a04f-b875dbf6cd46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff1e28c-4e4f-4a31-9a02-0eb10180de22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1eb31dfe-5c3a-40e6-849a-dec7984ba62f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0967e86-e769-4491-a43d-2a4883e76280",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f7a8ad-719b-42cc-a285-8356e68211a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1e247ff-cdc8-4f85-b423-9e7cd78f965f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be3819d-b9ba-4104-a643-2ca98d817df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "47aaade9-54ce-49ab-97ca-894ec3362413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbeba193-d2b8-4a78-9e04-6bba6e2aeab8",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4adeb7d4-d23f-4872-8eb1-5a358a89ea45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c32f6d9-e367-4918-89c9-54c940d15690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f22810-3822-4171-bf75-5a5b99b58806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5d5063a-52a0-4b83-b3a8-fdf02fa1762c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "544d1052-797e-465f-bc8f-a97f6bf2c3e9",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae9fc05-14e0-446a-b403-aee86ad67f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "719f3943-f7bd-49a3-b541-29430444a0b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2558fd5-aadb-47ee-b3b2-e2c8b481fb52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e25a073-3af6-4ee9-8051-e94c0ae0860d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae14e85-d7a2-4b52-aa8a-8128f4461fc3",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd074df7-c0d6-4f0d-8138-2dd1b36c9afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51477f8b-42d0-44ea-addb-df5cd4f1c15f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6051a29-e53e-4494-a678-97366d773956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65155deb-3610-49d9-b0ea-728ca9a440a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a169dda-0432-4a6a-bef3-5cd6d2f10fee",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8210f09-dab2-460a-876e-5701189be3b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf68b35e-2703-4bed-a16c-06ca78e79f96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94bc1ab1-f93f-4935-835e-b777893a1c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d2c6a45-7060-4250-833f-3641156de972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f676b0-64b0-4d0e-a2ca-de2905ce0304",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e2a931-29d3-4428-a64d-e35f84af23da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "972ac354-5da1-4ab8-ac98-3977d2eec9fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea31a96-3be3-40e2-8e82-ccbc455071b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e43a64d-82b4-4b74-83cf-32ee50d64da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2441d20c-e2ac-48ec-b10c-10602d22582d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f4ee9e2-f714-44df-a63f-d52c74c5b63a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d669f18b-2067-480d-902d-75b55bca628b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e95a07b-3285-4497-805f-805e37587ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "24fa6a0a-f75e-467c-b09b-ffd4bdf360c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c15b60-b429-41a7-aade-ad3169ac7741",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1949f118-bcd8-46d7-8994-b5c55c61c916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cc30467-7ccf-4fd8-8626-2c3d8283757e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300114de-b7f7-4548-ae1b-6e102fea9ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e447732f-deaf-4e5f-ba42-fdda5140ab64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc69bde-79b2-4014-9caa-68704cf69bdc",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cefc5857-90ee-401f-a5b8-3f2f66a0f658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "713d1a2c-1702-44d0-af4c-63db0a5b6704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1846a1b3-e934-4300-8364-fc9d7af96aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7e652b4-4dd2-44fb-a3f1-11a1e6b67af7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4a2e17-4344-487a-872a-2f53c0179fae",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d955d0ef-da64-4945-824f-3abc3fc58ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc737471-27b8-4705-913a-f06563da8a1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1762199c-690f-4afa-b10d-10b798944224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ceb33ad-0e6c-4cdd-a2a5-371446e65031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5976f9ef-0635-4a9a-82f4-afadc0a05162",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c12c34-a90e-487f-a567-8915bbc97154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc833b1b-3c54-4232-977b-4b4e61a8688f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c6a2f78-c7cf-46ca-ac66-d5219cd27eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "834263c0-f2d3-4b11-b5f5-2a71b2c06368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03823abb-ac4f-4a23-968f-244b8cfcb6e6",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb870ba2-bfff-4f1d-bb40-fd968c1c35b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fff0ddc0-403b-4b87-8b16-c9466c526e30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f1bc37-af9d-4816-9e09-254d5db33142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a30526c1-9971-4401-b6fe-7bc8e7a63d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1e5133b-6b65-435c-a989-14db71e9edea",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "198706db-90ae-4b1d-87d0-f8491d3f0954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b63c93dc-bfbf-4907-85a7-73a1afbe13ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9b3c32-083e-4779-aee2-3ff56ceaa944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "922dc158-7765-42cd-9767-b46024dbb13f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dcb9b85-c03f-4f29-bde2-d812cf0bd116",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "578e5adc-1a06-4b38-9c1e-9c64dd3651a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85b8a3ca-be72-4054-be47-c36e00000c9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd70cbb6-76cf-4a43-bc1f-03fce2181b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a934474-6b18-40e7-b614-8ce5db179b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30959d06-8608-4590-9cd2-cd715ac99dc5",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba9fa83-f4d8-4a7c-9bf2-c0aebe0dd7f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2df7ad1f-9f8b-4934-98d9-b8485981b829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51356db-d63c-499b-a0be-bbbb2b29e72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "31318d9a-6834-4a78-befd-d3af70970663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca85ab7-c260-4602-bcc2-0281b62c2e78",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dcbb279-b303-457b-8788-bd9ba3fd9f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d0fcf55-50a4-4fe8-8740-e016e7daf9c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f4287b-e9b0-4ae5-99e2-35910f28c897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "81790175-4c13-49ff-8c07-4542fe0983f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55bcce10-d03e-4500-aff5-fc85bb4db197",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e610c078-afcd-48e2-8bb7-c30aebc5a07a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47cebf6d-58e0-4b08-aad5-26ed620c8679"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87a682d0-09bb-4eb2-bfd9-2666c243462e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "08d49479-626f-4779-8232-f9b6a458e29d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "021f7724-3b73-4123-a4ed-017c266f1577",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e27c2a05-d52a-463f-b347-0d152e79e1da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "973b1ebd-3734-4101-92c4-fdc02bdcbc78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3452df-afcc-46f2-bc78-5cf8dfc0ee63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc804f24-add3-4cf4-8278-1f3dfdf5652d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a794dba4-c8d4-439c-8c06-9bdecd29ac4c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbdf830c-39cf-4baf-a426-279775412988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "292a10db-60aa-4782-b7b4-a16dbb5d4536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18cf557a-2c99-443f-a67a-5028d6dc47c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd818762-b808-4a79-8a65-ca5550571024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebafcf0b-64d1-46f1-b154-f06d14a91f45",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01783a1-f169-4721-9c23-87f875e8dd42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f3c5abc-0799-47fd-a846-2ed7db9b1f18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "423bc66d-f7dc-4981-86a0-89007620c8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9f9dc4d-b638-4f3b-8bd4-53bedb9a103d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "170141d7-d1c9-400e-8ea3-8c81df766bc8",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9566e2a-8259-4f00-bc07-8d202fa36f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12b38e7b-8342-4579-b777-0a9b21bd66d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfba0532-a8b2-4c11-8d07-1d028339f573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "62dd3a86-9399-4f3e-9b8d-11e2857ab8ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8723aa2a-5c6a-420f-bc39-c4334839d8cf",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b989e1c7-566c-4a55-9f8f-20760b3106b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ecb8eb6-02c7-41bf-8e64-2a1fd9f8d32f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5379df2f-2d2d-4682-9ad6-7cb2414242d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6208e39e-356c-4e6f-b2f6-3dec10434dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f12430e-7461-4762-9635-c47ad57fc2ea",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84f8c700-573a-4d57-b16b-9bc57e9f9117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e58366bb-7f46-416f-b19e-3bd4c8886a1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5656038-19ef-4c2c-8ac1-1b0d0409893a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f0a6e23-dae5-4188-a800-b09b74e79cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80afa1dc-0cee-4174-9067-da887c7d7723",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc6781d-6c78-4b5f-8f77-7298bd5d815a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee6da8ba-58cc-410e-ac96-abc2b607a222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e97cac6-c18d-4ea8-9c6f-43894fffc234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "5d30a25f-bfcc-4bdc-9aca-e0519fbf131e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2211d35d-261e-48e9-9bf5-2a2a5627555c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3da0015-a673-49aa-a8ad-c14ac00b5d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f34b1d8-7dfe-4e0a-87b0-e4a7828300da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f367901-148f-4687-970c-c7c8a292363c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f69ec6c4-9ce7-4990-9f9a-aa840cd6da27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "668db37a-f6bf-4a8a-805d-4024cb6d1d59",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a654a04-93df-4d92-afb1-80c2ec323253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feaf0836-a9ae-4ff0-8741-f2ce7b956f92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae8e307d-1031-4102-8b27-7bf62ce2af9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "559fee46-7672-40b8-bdfb-2f5782d4cf4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f2aa995-e570-4c1e-a4c2-6d4ee68012a2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "638e90d5-50e4-401e-a5dc-0f48f0295d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e684c25f-2e78-4d03-ae6e-1b4929511c4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb870fad-be6a-4e2e-9414-4d917437bfe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "146db099-48ef-4d5e-a6d8-947dc3a8c90e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c8d1c4-b032-48c9-b434-4f117690ff03",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b52da0-c0ab-44ae-a65b-60dac35cf5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77af2799-811f-4ee9-980e-d523369abe60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e51bd4-3cc8-409b-8a1e-fc4e69e04327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bfa5691f-62cf-4cff-be5c-45edcff510cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eef4c06-4c7a-483c-b091-b389681e4bde",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ef67b6-427d-4a6e-ad50-06b0833de72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dda43edc-cf14-4b41-82ba-631ac5820ba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de72d8c-0fd4-43e2-8b49-5a60f05b6663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "89df3085-8c60-4cd0-8d02-51108ff19421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72295a39-4ddd-4288-ac40-a00a53fcda4f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c9d794-f475-4a10-82a8-d02b4c29e86d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f36afd8b-824b-454b-8fec-3863aca35dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af652ba3-888b-494e-ac15-c8d837ce19c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a39d146-6a5b-4459-89f2-2ab4281a4d3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "674b3514-232e-4bcb-bff5-5e678b1b15b5",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c6c6d56-7560-44f6-a144-041998ea313e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88af7d90-0b72-48a6-a54a-47a967b8666b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c31817-9235-45cc-a7d4-5f7e336b66a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a4b85f81-deeb-409e-b972-1bcf3e019bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4480f8e5-fffb-4507-a014-2bd454b6c7f1",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea799fe-6097-4fb1-ba82-a276e048d4e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19589fbc-666d-46da-915d-05854150db50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c407095b-9249-46c6-afa6-3d4ccf614db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "be7a363a-2ece-4f02-a3b5-28a724a44e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cccc046-fc06-440f-a408-22fbc691789a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05fef6cc-a198-406c-8b84-9a22df61013b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f30ad9be-85b7-4995-83e2-bc0ed20fd5ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "695a0e5c-7590-47c8-8721-cb559aaec9c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "4089ba38-84a7-4b84-9785-4ab6f48f7351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861fb10d-8537-4d0e-ad6b-2bcea3d52f6f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73fc69cf-ce89-4464-adf9-a66d7fcbb386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daa2c19b-ba92-45e3-8e72-0f5db0ab023e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f44ca82-9a22-493c-8da2-a7a33cf99cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b5d6e05-15c9-439c-9731-a2f686eed23f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa212deb-5d6c-4e25-92bb-7a9d5f88c188",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "823aa96e-27e0-4bc3-9c99-f5036ae774cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23062d34-5da6-43f6-a9d0-f0d572be1980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "243f613c-e0dc-458e-800a-9013823eea7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf8f389d-c382-4d16-be17-34c20fa7ac39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4f136b1-e8c0-4428-b709-14d9533725a7",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2baf92fc-6345-4b4b-8795-7b6652b42f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1c3e6d4-e07e-43dc-8510-027c941e2ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca572a10-d2c1-4e10-8c38-d01f3603f00a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf6300f2-5822-40ce-af37-ac031976a6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a2f0ee-4157-4498-b4eb-9e2f25795417",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3f8908-ba5d-4258-91c5-397339a35831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78c9c1d7-d691-4eaa-8830-48083c32cc24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "753112ea-5ca5-42c9-a091-a9ef4b0eef4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "67d339d6-a62f-43cf-b874-07616e29c936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2190579-0133-488d-8703-d94d1fa8e669",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e91d3f-f278-4da0-a3b4-b490e7397963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2edd178-4b27-4dd2-90ae-15fdebc5f939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7539628-c870-4195-8068-fc228b12fd83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6609cc0a-3fab-45f8-a303-0981b7c63bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89508a5c-35d5-4e3f-9591-c8d09a5a7914",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "596a947b-051b-4584-812c-a190fcb48052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36e81f8a-e21f-45b9-8d3f-9adc8e2ab4dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48910840-1264-43da-becd-d2a5f81434d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "80762618-a3b4-4436-953e-28be81867a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a852c8f-09a7-427d-a2e6-2bf6dc4713d0",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3183d13f-55ef-41da-82d4-83060c5fa4db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4689d9dc-f393-4cae-a7eb-b0ac89822253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df9ffc6e-d3b7-47bc-acd0-206465eb779c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "da59cb7c-2443-4692-a96e-be3280e54637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba5a8077-fa95-49ed-bbce-894440ff1a5b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ab97b9-d896-4d32-8f83-1aaf46075c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a355fc5-71d0-4756-8bbf-9e340a38bee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b66e86b-7fa5-4ff3-8440-5b3bc3238639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f45542e0-c75d-40b6-997b-2a5c01be5535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfdaeed3-19b4-4fcb-8895-09eb7bd2faae",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43fee5ad-c116-45c9-b21e-aa6e845be1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e453b8ec-311d-4dde-9f26-7bb136101293"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "318ce38d-e174-4989-8fa8-cc421038fd60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b07e08e3-4939-429a-a5e0-0c725fb79536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f922c79-6f39-4f59-a4af-925f90390bfa",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91ce1b5-30af-4539-9cd6-ada952fb6a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd312b1a-5e1a-4bc6-a3a9-7cb318881ea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b245a0a7-dde2-41f4-af5e-c82c8de4ad93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "07817c7f-95ff-4a7e-a688-8a40f2ea5269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e90131-c0f7-41f0-b10c-d973825f81a8",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c5c5c81-80d3-472e-a28c-444a742e1013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d365633-4ef1-4584-b4d4-279da29ba173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d69ea457-65d1-4c96-8db4-de177f1cb69d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d826b499-3f01-442e-8de7-c5ac0b738853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba01d86f-a872-4827-866a-aa7e07532e01",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3c3735-001a-4f7b-a01e-069f2f864da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd46a8fa-2276-4414-8d69-a35879363d90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2782d4d8-bc32-4ae3-8839-d112e90a5484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5790f5b4-26ae-45c3-b7b6-6d17078894f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c78c0794-b92e-4840-9e82-d714734021c5",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2a5539-545f-4b00-a897-aa544727e903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a288eb3e-5671-4b94-8c0d-ce0e0b5a6e8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c19732-137f-4e09-9d12-b1f0393756c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "08ea8449-5105-4f74-9a31-ee56dbf63b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "907b3830-d8ad-4fab-bb5f-24114b5ca659",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d695217-667a-4b5f-9e49-f11040c8aa3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cf2f887-26be-454a-88cb-f12550b9ea07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e02857-1f12-42c4-a697-77922e4f0d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7eee76d2-2942-4c4e-979c-60e656a429de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa742e91-5c30-4d3a-888c-6605f7f8ea41",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44232343-dc89-42eb-a0bc-bd556486c96d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86d8f8ae-964a-41a8-8176-57be44710413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f68d3d4-4c66-4289-a865-ba4fbb93b77d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6854dbc3-7384-4996-8d90-655267661d18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8740f7e5-ade9-43d3-b334-f97991cf9ffc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08078033-e6a3-4bdc-bb35-0e1e8538828e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ce32bb7-a265-4caa-b1ba-80a76cdad5b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd44d46-29f7-4654-82dc-9efe8086cc7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b79f0a4-dbf5-4673-bc1c-01b53a5d727e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff0544c-16a9-490e-b0f2-5ecfcdce7c67",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf53dd07-0dab-48a6-8f7b-f71351a85941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6f9bb1f-0f91-43b3-b282-4ae2f895de16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90702a18-9c3f-4d8c-aab1-4e4c8164ec54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "99a676bc-d709-48e5-9386-f5f1ed96c1bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "092eb987-a98c-4a61-a022-401e4149d388",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8456910-734d-4514-9a02-3eee50fb49be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f55a384-45e9-4f93-891b-fb41de318984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f0719e-3af9-40f6-ba8c-6123d4a380e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b47756be-0067-4475-a178-05964cd638e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d352f4-81b8-44e3-9762-6906efdfbb9c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf12df31-601a-4dbb-b54a-f099014d5a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "517ca703-061a-4dfb-a35b-b002b26a2843"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8259d1a-38dc-4bba-9a10-550897af3455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a9f9953-250a-43ab-9414-1abb83929229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39624e0a-9384-4f4b-a4bf-4266fe73310a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f626329-4c19-44fb-9894-03ba08726b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ccce0e2-7ff8-4e6d-8fb7-da9ae3eec34e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b590df0-dd1f-4f5c-9f45-f0d4e0438e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "89010949-41ea-40d4-98da-632f51c38ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d449ea-3f12-427d-be10-38a047972243",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "448b7f66-e3e0-418c-a2f6-fd125f3d662d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96105dbd-aa28-43d1-877d-e9128191cf96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90cb4b05-6a91-4de4-8e73-c44c222edcb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "127e6f4e-4b19-47fd-a6d9-29cd9c7015e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba99794-8a79-46a2-b6c5-e521a67ee67a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "665f5707-c3cb-44cf-8a56-930bb5753a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44e52192-0edf-422c-9ea7-69646dd5a256"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c7f389-3e17-44b1-b330-e2e274e9d31b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "868e363c-a9ca-4213-9696-54663af43a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d082757-6052-4300-a3e5-518351822482",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5f9281-ebf4-49c6-943c-41f46548a027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa71bc98-fe6d-4181-b8e6-9e33099366b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32acc0ec-2e2d-4f96-b729-6bba48ad84a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ef2fea58-7228-402e-b84f-8166f59b527c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f24c656-86d5-485e-a23c-f06f97684ed7",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d224bb5f-8489-480e-af10-de246c8bed8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84a1be4c-4a31-4460-9643-3603ed6f796e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24427a35-71c9-48cd-8509-8d2d076f5e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f674220-6d58-4731-b64f-4eda4b4e936f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "174e2949-6d3d-467a-b4b1-f175687783ef",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45fb5643-8375-4913-817f-4881e1a0aa7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1150ad1e-42b3-46af-9ef8-387e0325a883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd47a913-9bb7-48fb-bc51-d60392695ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfbfd342-9196-4ec4-a163-ca9ea6a065f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a384744-54bf-4292-91a1-6887bf7dba90",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc442d18-1958-41ae-a812-740225b5862c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cbc788d-95ec-472d-ab37-128231793f55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5484332d-ab4e-4c0b-bf45-a91a7f7ca083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fee431ad-5d6b-425f-9150-971c4f37edd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c7159b1-a29d-4c2b-b2ff-7b101c7184a2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb6d7fbd-cf8b-4887-8cea-82a2d7257810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "535c7295-3a83-4913-8f6f-fcbda6a9b5ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82f5c63-f568-4265-be7d-11936b64b75f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fe08e9a-31bf-4e33-a756-2cbbfb3f991f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b69d9622-bc12-48ba-b56f-ff79a43af4e2",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1092b8d6-a73c-4771-a726-caec6ff5c044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "408a127e-d140-444c-86e5-c5bb0a488d0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bae4a53-fc69-4a07-bcb6-32ce62c1784a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0eef5e2d-60af-465b-8592-f82c83cb48c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f2d4ca-0c99-480d-839c-a9583f8b838a",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c87d8f1-09f5-40b6-b380-b18b58a008d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05ea0a16-e16e-4f75-ac2e-054314ffb3be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f229d8-f1ad-45eb-94ba-20c6b50e2b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0a712aa-bbc8-4774-bc85-d46214ffbd0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beaa2715-86b0-41e3-864a-67604ac96961",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de77f553-481b-4189-a064-e66b2b828b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5431497e-9d18-4193-beab-a8845f7bebf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19431b5-579e-4042-b33e-c11331450ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "99ec69d7-f780-499f-8cfb-e512ab8690c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f49044c-681c-4327-b559-162c003319fb",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d7ce80-3041-4ca5-b37f-8ca3156e7500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d95962dd-dd40-4fae-ab5e-fdeecbc40868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ec02ef-5116-4f29-9156-5747805c561a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c64347f5-2f16-4260-8cc4-eb733ff9f501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af290e89-243f-4722-a46d-3e2b7cbcbe2e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e145cdea-da4b-413b-bfaf-a9706549cd2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0943c741-23fa-44d1-b9b4-1ed8e0fafd77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d41ea9b9-ce53-4bcc-90f7-e2a0539b84b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cb82b1f-c744-4a0f-8b9b-5ae15f513cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81bff821-4ed0-42ab-9401-c46ba996d3dc",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ff673b8-1d63-4459-976c-807221c7f262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06a7bc7e-40bc-4f5e-bb25-0dcbeafc804d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b823534d-ab8b-48da-9ba3-eb360e3a54f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "557be7a9-8533-445e-8c9e-110cebf7753f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb14c27-aaf0-4637-bfd5-c61e95bd54b9",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ed7ccb9-2a82-4e00-b59c-3e8b370dd60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6727bebc-af4e-454e-bf53-7ac7a085f2b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0aaf4e7-cc0d-41f3-8b29-74ef7ec2a16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf9ee929-a6d6-4ad7-889a-cd53d0d59981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a654f257-9f22-4ac7-a11f-2befb5b9de92",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f3ac86-a6fc-4c8c-b382-01556177212d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "147631a8-78f6-49b1-9624-0ae2b9a87903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "551b7639-223d-46e8-911a-b9035ffe50f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "41dc51ca-8612-43c0-8979-bceb5571cacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ada819-6865-471b-b412-fe5eb29a8812",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c79ad6f-93c9-43cc-a3b4-b60c357ca392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92a91692-a50b-4389-9064-8e8091def0b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e987afd6-4285-48ab-940d-3fe0b455236f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "517f029b-6f39-4f98-92ef-75f3b04eef2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c1850a-d0a3-4aa8-85e5-c9cdb4f70c60",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae2a4a68-92ee-4c25-99fc-62f6fa90ea41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eb66217-7003-4db5-aaff-3fc796e8b7e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68dc4d59-c45c-4135-8e08-f361a1f9d2e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc9cefe2-df99-4a51-a790-966f56f182f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c847fb-cdb2-4c90-86e7-8b7301a6939e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bac46f5-d526-4542-b757-c82390ddcf53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55fe3245-b799-426a-9550-3a646aece9cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c040cc21-da94-4b67-b6fc-ff23f86cb232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8673f43-319f-4fdf-b2c9-5d27cf1b99c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ccb142-2ea4-4d38-a3fa-0cc27133ad27",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9b24839-019c-4b64-a4b4-3db1bd951405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "301cc9d4-836a-4bbc-9eff-e799f4e110c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c9fd05-ac4c-4bb1-9fc0-a83d03efbcfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "13d5f308-b65e-43b8-850b-2f6326da9b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "607b9dcb-168e-4533-a86e-4a7ba05a795b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36714765-54f0-427b-9781-de9dd8c492ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dae1f71f-5364-4652-a6b9-a08f82807e1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa1fd2d1-2e45-45ec-bda6-076ea66672a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ea78edc-6a50-4f78-8e30-26df7e73e40b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1cc39f-3bd2-463a-998d-70b095a15e08",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5488c35d-5836-4095-95d5-b664214d3f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c384f776-5a72-45cb-a500-75100ed94af0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a276f3-c5eb-4483-b07f-5238946c8887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "78ed7dbc-7ff9-479b-b1ef-fc1b2eda0981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3064be-a2e8-41b0-bed0-9fe3b59e4e8f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f9d0eaf-7a65-4273-bc59-846d9426e759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e17e3eb-bbad-4dd0-872a-d0ab0d2e8e39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c788bb98-be91-4969-9876-1f29612b9c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "68d5b302-bc81-4252-b847-2eab671f0e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b0e37d-c242-4b55-ad0a-928f9d087852",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57c2b6f3-6199-48ab-aba0-cfce1c33af90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc9098a4-c473-4576-bb0b-89b0563960ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0993e2b-3eaf-427f-a32d-8cf7bc26ef5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "936e1de3-cd04-4842-8a36-4c22c1d88934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e667b9d1-0ace-4873-9421-f9b71fdd7588",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "285d2361-da87-417e-85d7-193740243d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daed595c-ebab-447e-be67-985c295474c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "870cbb46-1a12-49a7-964d-9130eaaf6156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "edcfa0cb-6f09-4aee-9a2d-33e2dd341720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d553de8d-71d2-41b8-aee2-1497fec59ece",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f78ef8-e759-4c97-9f97-be8f9a4de518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fac91c28-991f-4dc3-a632-1a6997a4d168"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "506c8c16-e0ee-4d36-a828-66fb7425748f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c7859e9-00ab-442b-9306-2541b277ab0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e58b997-8bd4-4181-bc50-82b0e7832ff3",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d80aef01-a8f8-48c3-8a16-1ccd872cbcb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4afb1965-6624-4351-b934-bae2199a42ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e674a2e1-9713-4702-bfef-4b6f29039ef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4368a5d-5006-416f-9108-a6436b7e01e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37be354d-33b9-422b-af86-ba791a60975a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91581dc0-d22d-4970-895b-a06c1d10f438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7f14f0a-ce4f-47a3-8922-2422dea1509d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df2199aa-e2a5-4bb4-bfeb-9a6483165f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "98ea6e29-b60f-4c90-8a16-857f8f2b44bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e457c48d-3f46-4108-b71c-2835b4074065",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d40e3a93-3b3c-409a-9dfd-1b7bd59cdd13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "350b025c-988a-4e06-a915-8cf7ac167f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd022567-d4e4-424f-abda-93e3092ad9a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d72577ac-9100-4a78-bfef-581a730f4f0f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fd7fe0fc-3781-4220-b965-93f2c82c5039",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9d5df919-45bc-441b-a7f6-551364309ed8",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a6e4711-dd8a-4581-a84f-304574ac8deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af9418bb-ac69-488e-a893-62d1fb362710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7f030ee-587f-4632-bbbd-692f55b037c3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "266033cc-afe9-45c5-a476-c65e17362c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3be7d93-261c-4c28-b6da-f34c76f4417c",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ca5c72-45b3-4d2d-a4f7-592152349375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e457126c-c552-47ed-8e31-65773762e45e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f27e28c-6837-446a-be4d-047b14a60424",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "76e11e14-038c-473a-a719-bc20cf0f1a1b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "000c14ef-dd2d-48f0-931c-47ca9a82d4f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00e4f453-7316-43bb-99df-fcc697312907"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "57c4c35a-d9d1-41c2-a9f3-716deb472375",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b48ae5f6-4b21-4626-a0d3-41314b062f97"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fb8fd477-fea4-4442-82cb-1b7b57f596e8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "de8e33c9-e535-4cc7-addc-05306a9beb1d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a01485c1-e2bd-4c5f-bc1b-428373a7626c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "954627f6-4950-4b8e-b7da-f794f50a8c62"
                }
              }
            ]
          },
          {
            "id": "52dc8894-3a21-448d-af82-f82d2dbce266",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f585b8fc-fdbb-4ce1-9c52-ea6bf7a3458e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "66ce86da-f4c5-46dc-8d47-3fa1f6542b84",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "18c88541-b494-4f48-9434-587db173a1da"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c9ea84d-e25f-4916-886b-1fbd78f08fcc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "75141e45-2986-421d-ab75-b5a584b5240e"
                    }
                  }
                ]
              },
              {
                "id": "4ddef199-ef0b-405b-8655-069696a893d4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d095b80b-507d-4ce1-8c54-2f69bf8f0172",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c022515e-a526-4624-99b2-6833d28154e6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7c5c41f-c07b-413c-a97d-4e31c257e7b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "228f88a7-adbc-4ff2-937b-a8e48f8f6e73"
                    }
                  }
                ]
              },
              {
                "id": "50821d1c-d6b4-4cf5-92a0-f17ba88db829",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "760579a4-8e43-400f-aa2c-b9b4f39c6c69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "83470044-f4ad-4362-b028-fb5090c2fae0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d1b0e29-3ec5-44d1-bc60-f052b126f100",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "627d2f2a-92a1-4916-b358-4cfda5feb99e"
                    }
                  }
                ]
              },
              {
                "id": "616b7e30-c04c-4855-a7e5-56080e8c9949",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "197c9ab2-22e1-4205-8311-08644a6bf8f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "71bc2152-9a49-4295-97ed-1b591b6f542a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9304b7d0-d966-46fa-9420-81844c6db854",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "02aac6e5-6956-4538-992e-4901ad288146"
                    }
                  }
                ]
              },
              {
                "id": "0b78de10-d3d1-4a28-8962-08dec63c0e44",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "36c146b1-e046-45d8-9f98-0287ac693302",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c72e0a89-0b4c-4d79-b59d-bf8a182a41fb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4d40000-a269-48e0-bd42-f0e9e29890a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "027438ce-fe38-437f-993f-354dea9a3280"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "88a671ab-c593-4240-9ee7-f203d03c2b6a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a29bbc81-d7e6-4d9e-9243-d2a5e3a31ca5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "db20cd5e-3a0f-44a8-a761-91ef3b657a92",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6292cf80-81ba-4e77-8c7b-d6a8e880ce3c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9cf9de0d-509a-4220-a57a-da56e645bb1b",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2a3b1061-42c5-4ce5-8658-c64a36443c63"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2e596c42-d015-4964-a173-9bdb69e7cc8f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0b08254b-5c5a-4c3b-bb4a-a8b0035f5c3d"
            }
          }
        ]
      },
      {
        "id": "e7f8694b-9e1f-439f-8ddf-f370c2327f45",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "cd6626fe-075a-483a-8578-d4db07d9d202",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2663aef0-4215-41fb-95cd-7d2b216bca82",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9bd95438-5c3e-412c-9695-1f11ac587931",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee8596b-6ce9-4e59-9546-73645eeff869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12291aa1-0c3e-464d-a6f5-c91d88acb63c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ba5e73-6dcc-4d10-a339-8c68867d8514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab8662e0-cebe-4318-a96b-1f10cc32cbf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eae6840-ca2e-47a8-9eea-d1d3dc63b97b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f0d2584-ae24-4986-8a70-b17a70f1f1af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1aede96-8582-47b3-bc3d-e748d4f9b875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec3a8ec9-d61d-4bec-9047-dec373bdaac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6051e6c6-89ab-402c-bf5a-1dbe5f6b62f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e4f9da-2207-48fa-bd0f-813e2cda9c62",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bded2a7-e6d2-4976-92b6-737c8b3157c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37aa83c8-f9f0-4309-895b-038464ee8a70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "922f8481-077b-4f7e-972e-9f21cf4062ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a30b862-7dc7-4173-9d30-a16d808774b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3078943b-3065-445a-ab02-1b2d79d2fd2a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e5adcf-6444-4a7e-a516-30c55f7e14ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aea61df-a9bc-469c-ab7c-dc294c67e881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844fef7d-3236-4413-81a5-76b214f0a544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "55fd3b53-b392-438c-af36-41438ad399da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18883cb6-3dcd-4738-90fd-0d6082fc5aed",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ac525b-5261-4860-98d1-9b82f34b617b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b660a67-1626-413a-a14a-0fa41f951f23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0289ce6e-f19c-482a-a52e-76de878b7315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecbbef3a-9f00-49f2-b617-a2bb663bb0d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cfd78c6-debb-4efc-9d22-3feb2b92b8ac",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f180130-76ff-471b-b937-63bff8f7e944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "468dbbe2-70d7-485b-884b-d5f9714f1f60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b01532-62f5-4eba-98fe-914efd842905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9589fb01-77be-4d6e-978b-a0accf25ea1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9387767e-e521-4b21-b6df-c3752526912c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3c6870-a38b-4e2c-ad65-d5b372f730c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b66b297-774a-403d-8f41-de8a04b4a8bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e7e07a0-5d08-44be-8d24-68096a6619e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5dcec4dd-3f80-48e9-a565-484d332cec9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c1ebdf6-1fa6-4bdd-912d-153b59f8ab13",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8868f85-d405-4b4f-a711-a1d289566120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "130c1e69-e65b-4460-b0fa-468cad4c9c70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86abc91f-712c-4eca-afe9-6471b3daa789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3fefe5b-d85b-42ec-9447-91d1a228c797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79d5fe77-17da-4f90-92a7-6c3d3d1b1342",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "572a1ef3-c3eb-4ebf-9874-14025690ada7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efadcf92-c4ef-4708-aa72-838a4247f0f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6016652-5972-42ed-b2f6-68186e63bd83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e752827-bee9-4d40-ae49-439c4ebd37d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3da03a2-024c-427d-93df-38c9dc43a26b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3eebdc-7f99-4da8-a7b7-f3bd938bcd16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3568e965-0fe6-4d4c-b982-3a444deed4f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5301bdfd-da13-4371-8cf2-0fb4ecedce70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bc523eb-3589-45ea-9fa8-5502165daed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1cfa411-e373-458e-b4a3-b0929367b10c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c77e8e7-c97c-489d-bec4-9712f916fc2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "501d770b-6e83-4558-82f3-8d380f2e63bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d05520-386e-427e-8416-0307d49d6dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "97dd6ab0-7dd7-4035-bd87-fe560472de97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "571a0355-df35-45da-b6e0-bdcfb0c1d0a4",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d4e4df-c5a0-4be1-92e2-9b3f8da9d040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a17d1b3-97bd-475f-82dc-f173e9f394cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b556ab-0720-4e53-a2a2-9e4dbc29c52a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cb18f13c-ff04-4122-8f12-061a51ebcb94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904284e3-a6b9-45e9-bfcf-6beb79c1ca5e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "318056d4-a935-4b02-ac6f-99113ac9db75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64d84999-779b-4b57-a618-36b32a028974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba21d308-3756-4c81-a16b-00524f72d8f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3207a831-342b-4a75-b964-f6673b4cdd98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7abcad17-e33f-4b8a-8fe0-cf69dac3563d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce68dd5b-0f67-4d1c-ad86-161d95354743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4a2c6df-eb89-41e2-b1d4-5aed0c5a2ba0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85264cc7-163a-403b-8934-543b2ffd5b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc26e604-743f-474d-8dbb-f0963641fecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c26c9a83-af88-45df-9978-f14089d63fec",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9452198b-f3b1-42b1-8fa4-103df6c5d183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f5c635e-b215-4c8a-93e1-aff53b97848e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9dc06bf-cceb-4193-a0ed-07c84e2b18fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7eeefe83-add1-4c51-944f-8a25417b9124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b03381-9e78-4d1f-a083-b7903ad08aeb",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9544fe-8470-4cea-b3d5-897bb9eb43a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c2dbbc6-820f-439d-91b4-a435ec0b4b08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1229400-2d53-4bea-a7cd-12d8f8986183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2bf0e72-fa2f-4ac0-8baa-f55ea5acfcee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6d6023-15ea-4a6f-8eb4-97ac08ac29e2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62d6cc5e-12b9-4209-9748-e4c4641cb7c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5418d7da-04b2-4026-b3eb-44ba9ead5124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8baf097-4e53-4df3-a9a9-a2a71e7ae909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "56c11201-9ff5-4a1c-bcf5-ef492d20dff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86d74f96-d0f5-4186-8f0f-7d06754917ca",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dacd4370-4a82-4f37-834a-d61a5e13aa3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2900ce18-dd1e-449f-83d4-f14cc800f079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e8d718e-5840-4f1c-860f-a13212426e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6a62bee-81ce-4fd7-aa3c-3d05e533a003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d9743d-65d4-4f06-8cab-89da79d43ecb",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdeaadce-86c1-4d14-88e6-3a3be834b060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bbf05ab-0df4-4d3e-b60e-a41dd61187e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0453d1a0-8355-4c00-8bec-4dab3b89c776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebf379d5-3696-4f66-a731-b8b1200df33f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65069120-e7fa-4df4-9be5-6025a3fccf26",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30990594-adaf-41ad-bc59-bf8df31df61d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8bff7f0-92d9-4a78-b38d-ac17dc5d0616"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c40f1c1-e349-455a-9440-fa6fc3561ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a62d8cb7-a3e6-494f-966d-113a8d7ac81f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9492c0a5-60b1-4054-a0ac-32b4e0d966de",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5031a19f-912f-4a51-8067-3271caa70472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2dd9de9-814f-45d4-b9fa-a8c42e147fac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9928e53-439b-4c71-afbe-d8b8fc1255af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b71f47a-dea9-4a7a-8c41-ab4b2707c053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877b5250-d11c-49dd-8bbe-41ef91230964",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04cc4e5-5d59-4277-a27a-04354102bee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0efebc8-3dcc-491d-8ee0-938fb3a5313c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef957b8e-ac1a-4e27-b336-17615763582e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "519a1d0a-f903-4e11-8dc5-acdbee155758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db927ad-aa6a-4740-8c0d-1bef247e3586",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a513733a-bbc5-4d36-84cc-91538c5bcf51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc7dbc8a-de34-47b6-bd60-3d6bc419826e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5849a177-9fb4-4650-8731-6ad172a381f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "faf58529-15d8-46d7-b91b-8433fc1a47be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fecf941-db86-4291-b7eb-ff8650438217",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a4249b-dc94-480e-bbb6-543ca8025014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26e862af-4de8-453c-ab30-769fff90ecd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06089b92-8513-4944-b2b2-246de8273d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "970419ae-fceb-45a8-bfc2-449897015d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74a6dcc6-6995-494c-b170-b59305784cf0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fcf8717-a4d6-44f6-99e1-01c8fdbe9571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "344d841c-41ca-4cae-b195-de1a2a276f04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879cfd4b-47e8-4990-a0ec-b133bc28c8e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b2b15e5-24b0-46ea-86d2-236db902d3df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52a1fcc9-ecbe-42a0-a89c-0fdf072ad236",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "871e74ca-a947-4cca-8f43-e01c4bcae2b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02286e6f-a200-49f0-a7cc-3cbe5fa7fc2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c8408b-d88b-42f1-bc3e-81f7523eae2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a44da819-1acc-4271-b270-5c63dcbbc53d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb903205-fcc7-4f63-ba80-c7965154d343",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e24594ee-1bc8-4baf-aa01-f970ca182360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "155beece-be42-45f3-abe1-b0071e4631a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91515f99-37f8-4e79-b2db-8d02862362cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe91f970-794e-4851-a576-652b75d37515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8361ab-5015-428b-8dd0-b8e5b44c6b39",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98bb10f4-84a4-4931-931e-81f4170ab7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e259310-ddb2-40a0-a62f-786bdd7d46d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b57bad-4e25-4d26-93fc-e83d7fe22b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4aa7795c-9e53-4159-a0b5-c0142f8efad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192f133f-f3ee-41c7-bfca-6d99122dce27",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c58c4dee-ebdc-4ad0-b59e-c8bc30f41b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eef64aee-85af-48b9-bf07-f5ad11c9f9ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21211087-5e7f-4214-8881-63d686f821da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "184c986e-8c37-48cb-bcdd-c6eace985868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae88d9e-0d79-4f3c-9e25-9b78a520bd25",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc34e39-32c6-4368-9950-c1d317885143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f7d3712-20e5-4a0e-9205-b19d10fbe325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8829bf8c-166c-4d54-8757-97bd58ad61f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36ee8da3-9713-4bfb-a965-af522d02b0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9b5197-4781-4a96-82c0-3ef8049486af",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7717ae-4d3b-423e-a3fa-3b9941892da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "968bae4d-0f87-44e8-9be0-21e7036ecb21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ed135e-4943-476d-98f3-7c682e336579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72e3e9b6-6d93-4efe-bba9-8122a418a65e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297405ad-3a48-4f53-8315-86d0b539578d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d64987-c63d-4796-9eba-4ad96bc01bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "895a9ca2-3d7a-49db-a8ef-fde774f87596"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce1f1fb-39fc-4142-8605-c9569b6eb993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a070eaf9-c3d9-411c-93a7-9353e961189f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "450ce673-23be-4256-af50-3e570eb5abd5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ff8f9287-0f90-4769-a3d7-0f9f2c619620",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28073f87-234d-4d35-9c3d-848b2d85dd69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e5949d6-1f7e-4ff6-bbc8-2859054f9934"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7157fbb-13b7-4b58-9f6b-6eabdda3272d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "708b47a4-63b9-4451-b64d-78c8b2120013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be547cdc-c43a-4986-b21f-cc9fe61bbc13",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b16383b-3831-46ff-be2a-afd4f44fd654",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "9935370d-66ec-4a9d-863f-c4744e8030c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be9a41f-128c-4be2-aa70-6086cfcdc39a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "13e5b317-42e6-4363-b12f-b8ba5329e3d1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "372cd139-bc2d-4c28-b2a1-24219f227ed6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4ed9804-76e5-4319-880e-f7ba8d6d61ea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e433ff15-d75a-4a44-a4f0-672eb31e876a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0bfbf8b6-dabc-4a29-8202-9c5a2193a806"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc99ef9b-00b2-4755-9212-4caa33c5f1df",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c76870ed-86c4-46fb-81ac-0ef35d53cc45"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0a62548a-81df-46be-bc64-0d8690c0eac5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9daa11c5-9ed8-4552-af40-c35f3ba7e8d3"
            }
          }
        ]
      },
      {
        "id": "ee5f5788-174c-4480-ac56-09b12094910f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "31ac1f1e-febb-49e6-a0e0-a24837af74f9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4e5e6ac9-0bec-4bb8-93f4-5866c2dba778",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c06d0f5c-8337-42aa-b0fd-d13a1e13dfb3",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec23406-ed86-4187-bef7-083bb3ce0d2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "040c8c4f-8b9f-42a4-8467-6f6d7fe9c337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f78795-1f68-40c0-b548-525103628330",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1ff4a3-ce10-4d2a-aaa4-9f7b1e8b439e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5c64245-5b56-43e0-b31a-f739be7d8b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb13ebe4-469e-4b9a-a8b0-45ab0e03f430",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c6448b-b879-422b-b01c-44c09a0193ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2d76464-d218-40cd-9225-7bc53f5f2b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959ddff7-833c-482e-8b36-f3ed6f7c6924",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf96afe-24d2-4bb2-91a9-c7118d90b78e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1ee0d73-ad26-4459-bccc-5587eea1a0d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f803816-d9eb-447e-ada0-7c079bc50c1d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0982bd40-9b0d-426e-a64f-b4e9f7d6c91b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2696cbe0-358b-48ed-95a3-39d5192204ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf9b9e9-bae7-4266-af11-3d14d3093da4",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e21c8123-fc56-4f17-90fc-f9abbad959b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50e717ed-627a-4f12-ae5d-704a62940b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd1518f9-3096-4279-a33a-47f31edbba64",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f6c4e0-6dfe-4934-bc2e-0e8c6c0014e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06831548-ccf1-48be-8f5d-3c7dc6b7554c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "796d22d9-a36f-438f-8c72-4893e1da1e24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93199356-b83e-4032-a78b-70043f7af81d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15899c31-973b-4b5c-b524-b5564786527d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30d800c0-add1-4451-bc6d-c6505b3c446b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05429a1a-8c20-4432-8819-24ae571343ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a76cf2-ce2c-4d05-a00d-78980b6aac5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ac75827-65d7-46de-b6cc-ad0bfa8d9b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a577118-4b23-493b-b1c4-86ae232c89ab",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be3e343-42dd-44f0-9b77-fd6fb80526b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83cd9c4b-3625-4a72-864a-3a69580b822a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "455cb0dd-2c23-4444-acb0-0edb4893d5bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de38cf2d-5504-430e-b07c-2d9b9b1cd711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc185c9-e7aa-4ac1-a6ae-095a96cc1dc4",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d7a3bc-9a48-4ab9-9ae9-709bc0a0025f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73604464-827f-4c7f-9bd4-6e54db770bdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38eb6576-cfec-4c9c-be0e-1578534dd560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebb6ab30-8079-4a37-bf77-be9fc08bdfa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14655135-3289-4ab8-8dbe-ae6138a51675",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cea50a7-38a5-47fe-8db6-712eabcecf4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cd71e4f-e9cc-460f-91d7-e4192d44dca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31671184-1e07-42de-8dbf-add3d6afbf76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "183f0ad9-4999-4a39-be6d-600ec98b7483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d3331d-6413-4165-ad81-52cb79ef0d79",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f1c6412-b79a-45f0-ba12-41e111a4a0a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d14c98a-9f81-4cc8-aba3-d1ee892022b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a10f853-f31a-4a6f-b43c-c5d8a9685f72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e177457c-1c17-4185-839b-04c6b4388e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc4d0e1-7541-40f4-99c7-be487c160511",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f698249-5129-45c7-99a7-4197d654b40c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce840c1a-d937-4603-9839-8859be620acd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f04c65-ba76-4f0d-b87a-90967ab1da66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa3b991a-a814-49ec-ab85-548b9f1f8f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ca6f61-dd7b-4ccd-aba8-db55024e2a27",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "443a19f8-2df6-4fa6-a834-8f55043cab42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bfc9092-ee4f-4783-a2bc-9102a939644a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffbb5592-efd4-4fd2-8040-4f7761eb94a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "033830d1-be77-4a50-9a30-5c100d129207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d8b135-0a46-42f8-aa39-c02a3e97333a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcbd3f3a-cc1e-4fe7-bf0f-b80450be80f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33355857-e2f3-4cbc-ac6c-fc4a4f41716d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f3c796d-556b-408b-9143-fe9c552831a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7874793a-4b2b-4e17-9ead-2a09c2d7dd8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0861b35-e4f0-43b3-a314-65e1f01ea758",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70638bf6-d4cd-47fa-80c6-83126ab3cce8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8544f930-e006-4147-bf90-acf647b0fbd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "989f8203-db55-4f81-8dbe-76a665c55131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ab272ff-3c1f-4a6a-a162-aa3d6304b7b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54816236-b6ba-45f3-bf32-3039d327afca",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f6eaba-a820-4058-b510-985a0ab8e9c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82872fc0-91cf-40e6-a3bd-21a99c869b45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d2a221-852a-4990-92fa-873c79bb7e4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b386a3b9-a4db-4693-be05-d84b92ab36f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6323bcc2-a4a4-40b1-a21c-c15fc3994ed7",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87bcc8f0-17be-4c6d-8583-22cc21d81de4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53fd325c-f370-49d6-80bf-fcaf2702b681"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7decfe-76d8-4356-9787-f237775d1815",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f28781fb-e4f2-470f-9baf-da541756e4fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898638f2-6315-478f-881e-5d2015ed2480",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec29789-84c5-4863-a230-1466ed7080ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f72ea82b-5cc5-491f-87eb-976078d8451b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "083a0f08-886b-490e-b09e-fee7724dc4c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4bf27d8-f8c0-4e7f-9687-14762c657850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e10976a-e1a7-4ab4-ac54-106769d38057",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b4b523-160c-46b3-8378-002f78f73b84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dcc0884-bea6-447b-b552-4acb9ddede32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e653bfb-c341-486e-9df5-900bdc5a15df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04a39058-cb9d-4dd8-b019-78723e87e4f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d09a68-f1ca-42d1-a834-6b57b6da5917",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b012171-47e4-40a8-a98b-2eb7f85b01ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db14d4c7-15ff-4529-a1d5-ba946f34b540"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "632be71b-e941-4140-9658-a906efdc3896",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49ae254c-0647-4ece-a142-c7243495540f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f45632f5-c483-4eb3-9a26-78bce9d2e11d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a95ae12c-df68-41b9-9261-e607a07657e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71b43047-5eb7-4bcf-963d-3d2ee156d74d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e0dea65-88f1-4bb3-aa58-e9c8e143e04e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "327c8d06-6b4e-4524-a898-28fb0050114e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e8513e-8545-4950-9cd1-1e0750566caa",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad87685e-c449-4ec0-b80d-98e9cac11787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0ad5248-d47f-498a-9744-89ff369c0e93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a4a789e-ea2d-4e6c-af81-1d8a8cc6d168",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65d615a4-5722-428d-b48c-4f48f8607405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d969c21-80ec-4772-b46f-30e7c1aa7ec8",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d75bbeb-49d7-4f29-a83e-3d1640d59cc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b07671d3-8a4d-4778-9f40-1449e104c19b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0553b4-8c48-41f4-9759-74e095f54e7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91cb0f18-5c76-4cdd-abcb-c014516ae7fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c6afdb7-6a2d-42b0-98ce-ecd5fea08056",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6286b37d-ad04-4c85-b102-68076de08fff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af67cfae-6a41-4815-89ff-98686c2ad210"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "590fd372-357c-4da8-bd9e-8420107309d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dc2318e-6869-4f3d-88f7-653303d8a021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd410561-5e8e-452a-b058-f3d9b6afca63",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "282dd7bf-8dc7-4953-87e8-a781593f7fcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "170e8487-827d-460e-ba29-6a03fac90bc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb64c077-56ec-4b16-ad4f-de4fa87e1bc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "371667c7-40fb-41f3-a014-85851ee40042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dc72ad8-2d08-49c0-bad3-3f6edbe70c2e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c4c8f57-9dff-4744-84bf-0b81ac7945f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51ee3991-b867-432a-9d5d-7369ca997b56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "299c429c-7c6f-4ad5-998b-acd67e2ee112",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7709cf90-90a1-43e9-9851-7a58f252a5a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "150d29fe-1c71-4296-9c62-59cca731c1bf",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3ccbb0-9e46-4613-ab52-be46af9efc4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a1c44e1-9ff1-4e56-8dd7-ed026aeebd42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d6923d3-8241-422a-a2b9-0f4b68dbd27a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6329ce76-a630-4da1-b064-312d0142be3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "586821c8-7f07-40bd-b8b1-46d8fa15ba17",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5697ed18-80d1-4ef8-837d-11847b40a17d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1348f099-8f29-4651-88cf-66631ad854b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce740e0a-534a-49ab-9742-83e721abbb80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a818392a-419a-40ca-800b-394c5d4c273b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21d4afe-efe1-4362-8743-b8a1aea36a42",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620e2174-ce31-4ecf-a898-82622bcddb04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eab10ec-ec82-4d31-a427-1afcdefb4666"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c81060-8a3d-42b6-9dff-a3b73c6ec6ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2190fa1-b697-4bff-a13c-a2e8111426e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7b0804-662f-4820-aa0d-966652a4890e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4dc48d-1d2e-4b5f-bfeb-bfd711062fdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "931ef931-2fd3-4268-8446-136e8295609f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c45230af-0913-42b0-90c5-c2b0e58289f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87ccc484-ad07-402b-bf0f-b91287178703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1958cd5b-6f8e-4bca-9713-a215f85e5ef2",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5b1259-3276-4079-bde4-3726f4563cc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f3e7d23-e1af-4756-be3d-764963698061"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31cc9673-7a9a-4360-b10e-23d270d28f02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62440812-7f66-4fc9-a845-83324ff20871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4675a7-3801-4f50-adf3-fe4c0e21d8f6",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9259ab48-5102-4455-9e09-058c82a947df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00e1cdc9-f2a6-4be6-9391-112e6215e87f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22730edd-783f-4375-af62-b7ef724141ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f5fd7de-29c7-4ac3-a6bf-97617476d038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5cc4ca4-c341-40fd-a31e-897003c1f8cb",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3933f54b-204c-4db7-86c2-b08c1fedcdc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f35a2758-edce-4a19-9b63-a95b16257272"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa62f826-b210-4a9b-97e7-2d0decc5161b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "562e9f41-b78f-4e2b-9883-f8a38c6e07bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a735edb4-5e02-4fc1-94fd-b57b5e18cb00",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b874d6de-374c-412d-9ff4-a5ad7a87359e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17b344dd-326f-4014-8672-5e877fa7a4e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3c3d4d-4c02-440c-b850-8856fcb887c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b43d54c7-830b-46d4-a9e7-80717ed17a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36407d0e-8a3e-4796-8b25-45e1125c9bc3",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580b3cb0-276b-4796-9fc7-883141f6352d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07ead7ce-55bd-4b98-bd72-64fd442c5863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f61be29-8368-4d01-87bc-e874044e96e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9444bc5-bbb4-45a1-ba88-d8ff1839ce76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824fd2a0-a992-43ab-b5e7-6161cd827dc7",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3e759b-4c87-457a-b292-ad720da42fdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ff17656-bd1d-42b3-be6a-ae58e6e32c8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4375f2d1-a488-4b1e-a63f-991329ccadd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f413c69-168a-485a-a842-c0f6a58d8e6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "708d3c34-25f9-4d26-9059-49bc09854eb3",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5653d34a-e99d-4d16-be69-c1b992cfd6b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dae3eece-2158-4017-a2ab-040fc6721111"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e663c351-1c7f-4428-a2b3-b573da0da048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82606634-febf-4caa-9ae3-c2ffd3cbe039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f1b7f92-bbce-454f-8868-219e8179c293",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a1f1906-5bed-4916-bb4b-63824ee3cabd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dedb9f1f-2a46-498d-a66f-3241dc8671b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c71c65c2-ce67-4195-97b1-175b814e547f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7016f014-3111-45be-8a17-23a0898c0a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eed5fc0-3218-4fd8-9444-f7314b8a5a6e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9448d66a-a473-480d-b040-d673fd893cb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b9dddd6-4aa5-4797-a4f9-3a1a1b12faa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c422d20b-c581-47f7-8311-0f2d73292005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3562468c-00e7-4d47-8f76-d4dbe818cdaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c795601a-7d61-42c3-a6b6-5edb0e4c0447",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d689e77-0278-4e44-9111-f718bda48e99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcefffdb-f2d6-423d-b603-5eff9c14b113"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9de680-dfea-465b-bad2-c651ca11adaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1fd092e-31dd-43bd-bbcb-d334067a6928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f676e25d-721b-42c2-aa22-790034ae0593",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f58c06b-e53d-437a-81cf-acf9ff9b99ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86d5a0bb-bc6c-4df4-96d6-4f7a1dd31ca1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "449e5503-26b9-4887-bd2b-8dd96ed25392",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77cafc79-4951-493d-b3b5-19d898937a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0495817f-8f83-4039-8cc2-0907eaa381c7",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c45e8fd3-6c3b-40f3-ae3c-38715f0f58a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c540d725-38d7-4aed-b059-d1a38bbfe915"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af0dde3-cc0f-4264-999e-e149efec106e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f32983f2-2faa-4b86-aa6e-06aad2e3d17d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ec1543-c6d4-433d-9aeb-d52c54f5a2c0",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c4e2a26-c48b-437c-ba58-89ff78add3ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f3f9b5f-edc3-4494-a092-33af6e340d24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "506138aa-e3ca-4b0e-a945-62b19a280e05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da8f6b1-0d28-4d8e-8df5-63e64b0ae8d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "034504d6-8404-40e0-935e-17c52d13db46",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d28299-8613-44b9-ab67-f5640ab5b28d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65991831-70e9-4380-a84f-2101d85f08a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f728a7f9-ae18-47dc-9948-55c02f55ddce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34463773-0db8-41b3-b579-fbdc78514875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc693cda-12fd-438b-bc14-010ec37e92e4",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14851572-e367-4b70-b447-826560741a5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8251d6fc-0433-4a66-9c72-0775cf54b9e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2ee138a-dfda-45a4-aaea-b96385b5b0bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c60eee83-60cc-4074-99df-7c2a233a6161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b789a9c5-f056-4d7a-96b6-b46c0f7d74b8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2a964de-4bb1-4911-815f-6fab006725c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "405dc755-4652-442f-be72-1b82f7055032"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0d2b8f-e4a1-470a-abe4-5d7cfa042f8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf85280a-187e-4a86-8c8d-4d135679a44a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00b759ea-4fc5-4f61-a0d3-14e031c47784",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7793b0d6-1989-4291-9e9a-649c2126f4f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b647b38-4f1a-46ef-b8f7-85bd104e800c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e5f579-e5a6-4d85-a91b-38c571632594",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e4f70c7-8798-4c52-9d34-277fe754754f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861ddb94-61f1-43d6-9fd5-9ffaa93904c1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa4ec152-bace-4adc-9d47-2f47b0c7530c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b09bc401-21fb-4a6b-b376-da02e55eb597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ba6b860-479a-4854-9a99-b78116966886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a697ff0-fcec-4b01-9354-1d3186d0490e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37eae999-4ecd-4e9a-aaf4-30cfff998f54",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8da15c3-33db-4447-8c90-b6933f3723d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6932e1a9-c7c2-49e4-9080-67fc43356b88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45dc7f55-8067-4694-a5f3-8e40b58a1408",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f0ca051-79e7-46ed-9603-ed1b625f01ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d85bfddf-9cfe-49ba-b20f-60a5af261c75",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de948d66-dbca-493f-a371-9636da09f62d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ac274d3-8a9e-4caa-af06-bec653223afe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1dfbe65-7877-485b-babc-2eeeaea9ed2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e6ab93e-673d-473a-8cc2-ec04b96bd8e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8687847d-6a63-48f6-82ff-300c5c4d530b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27fd0e18-218c-40d4-8882-eee2e338cb07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2205b10c-6f84-4fc7-afbf-cb96feed8694"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad4f49f-b84a-4094-ae46-ea920faf69d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87fee925-2b33-4ee8-9bec-9c1e09db3864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f295b3b2-6f29-45e3-9706-b0881a8ce2e8",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "651fa7ba-c1e1-4f10-b8fe-4540596171da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc317360-3d76-4bd0-a28a-9dba7f840550"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "204235ca-563f-4187-9ae9-f0e7e990fb19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcad36f8-ea19-4154-9f34-9fc779c6285e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f80747-9565-4a6d-9559-209d51419c04",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff71814-e735-4576-9742-b1613394dea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "710ff154-892f-410e-a213-8f98ed5c09ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "454e998c-9f6e-45ff-b137-c488249b09b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df2f98b9-ad28-44d9-acc5-8f3761257f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d0f1153-abe3-44a2-a819-39e5f934218b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dc11f61-a327-4dc5-910b-605aa1eb9418",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36e0704c-7449-47e3-803e-3692ca2ec9cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a3e7cd-7ad4-465f-b6a3-3e5471d4ee21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7431e01-de36-4840-a380-5d292e30fb67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4bb9b20-a95c-4e37-8342-310aac532387",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04707cab-2282-4b91-bd6c-71d78bf93bb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a9aad9b-0dbc-47d1-a23d-2e7c8517f834"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd94d692-e7da-4970-a31c-47e0d8d3e69c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2f3452f-418f-4e52-8a4c-5f1190fb11e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c14f839-e1ad-4023-9574-2b553d613eab",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7e2eb9-e69c-4dc6-b257-de6981604477",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84f38825-6474-4985-8d6f-05f588d1f977"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d44b14b5-b581-43f5-9181-12f5ee7a7c82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "646600f0-daa4-42a5-923f-4da7f124ef96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee9b676-8e00-43fe-9b08-38d16bbaa06e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95f27d8f-d6a7-40c5-9465-824dd92e3d4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b032409-3800-40da-b44b-6403c8fc4488"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7097b46-c351-4329-80e9-1d1a08c65a31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa8ef76b-1e51-40da-ad40-3fc3692c793a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f826870-a2ee-49b4-8b91-55b48d393278",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b8c6a4-75ff-4e29-9087-9b856e3a2118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68e53ec8-8bc3-435b-9c7e-c04902aca17f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2caecdd7-e408-49d8-862b-0d0ed7be870e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd9db43c-b6f2-4392-8042-1f6c9b8fe4c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5694817-704e-4709-a39e-ff717fc2015b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c746a8-6070-4ce1-b992-d94bc0f2fc88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d74837de-c035-468e-9dd7-1e6265d670cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01821d2-a96d-4038-8b1a-34f1b23082f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "784f561a-1b2c-47f2-8741-2801a384992a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ae6da7-b463-4b9f-a942-16ea7afc2f62",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0f97f2-57fb-49f7-b989-01394813a710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c17019c9-1b44-4a13-9e9f-4cf93282ab94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d5c751-5127-4c7f-9529-e7a7187e7dde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c346caa-0fdd-4e3f-befc-22b2ec05ef54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5779b107-795f-4d4d-bfff-9b530c6ee9b0",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e2ff898-1f07-4780-a206-828700240c98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "430181fb-e4f1-44f5-b664-5def6469fd78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb11640-da2d-4016-b9ca-beb51304d8b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d346f9f-df7e-4568-8c7d-b6da760c0c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17f368da-0542-4af9-8712-900dec95186e",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167cc9f7-1fac-47d7-a352-595a00818c21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f25085d-d3ba-4f30-a10c-46bbec8b8754"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a72aea-41e1-4b47-bb28-95f65f57bd22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f6873db-41a3-4535-bd6b-61b52cfe3d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e1f47e4-1240-4618-8f6b-8bd2398893b6",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f5fcab-951e-4187-861c-6dca5fb1870a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e19ee71d-2356-43d8-8776-c353e5d429b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91f5c22-912a-4bde-91b2-6491ae7baedd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adaff42b-3d4b-48ec-b8ac-1df7b368dc8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396a968d-baea-4ce4-ad8b-3134879f65c5",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34f75237-6d70-4310-98d0-41460a93f89d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5c1bc4d-d8be-4b3f-a5a7-55e693bdbf1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f48c3e-4959-4696-a297-5f162c00a0e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9f20497-1c71-4cf4-aa53-828fee5a61ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5271d33f-2b73-4cf2-ad6e-b6c1ee80dc3f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e6cdfb-0459-43e4-aa76-73e7efd92974",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d2b4f5b-f82f-4eaa-959e-54b248c85bcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75a9ae4-4323-466e-b387-4c1b3a94ec87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2083ba67-f6b3-4b22-9602-a79c03359cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef99462-0d7e-4c89-b0f5-7f1024df5272",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c31107fc-39f3-4f66-868b-c0936db132e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3047ae88-798e-438f-b9a3-5470855a3a68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a63d37d7-aa07-4ba4-9e54-e363150cbef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f03286a-9e82-4088-8881-498dd56f88c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c7a835a-37bb-45b5-b739-cbacbced705e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab6188bb-3e10-4a7b-aeef-c346c9759cce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96174225-39fe-417e-8813-81970565d23e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "089b1229-b84e-446f-ab3f-1e654e6444e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3875ac7-e4d0-4dc4-bbb0-e8ad25048178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043eaeeb-70e0-4dfa-9fc5-aa7240f34d7e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f54a01f-a2ef-4d81-a5ee-886347c880e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30677d9d-f5a2-432c-b1ed-cb17c0d73f1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc11c7e9-01d1-43ad-83a1-f52b3ca976ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "898ae7e2-9d1d-45f1-80cc-2091ca1b5a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8c7de8-5530-4ae9-9aa6-a5efbe4588b9",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc2e23e-61f4-4eca-971b-ab5b5cc241b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4db4303-6fe3-4883-80b6-38487a4bbab4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19141233-54e8-46a8-a64e-42c9bc68bb39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "403c9e57-2e2a-481b-995c-219fa72c9a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68fd209-723f-4d32-a44d-b6592f101ddd",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5081b8f-964c-4364-a7ab-3e21e973b840",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19f726ca-73f9-40d8-9bed-8997a162e7cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02107d95-271a-4727-b442-e149e728ccad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6aae354-20ee-481a-ad9e-f43a943c0580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5907e4-59e5-4b96-8be2-7f1a6530c743",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca17fbd-88ff-421f-b820-237dd8c86982",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14548914-86cf-4196-a129-7179a5d38729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0bc340b-f30c-4d28-afa4-4aed4fe4816b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db9f8268-513c-4ea1-a1a5-3e42e57f7165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22fc7e0-7314-45f0-85e1-961ba936d2ea",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "324231c1-3897-4431-9dcd-f8dceaa09a0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6ca5261-1000-4f51-a8e6-4e6fc308e744"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "012b92e8-2852-406f-b875-42920d93da21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eea5370-ed7c-4386-b96e-7293001416ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "999fac1f-3e23-4571-b2e8-ae7dac8e4cf6",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a927a4db-7038-46b0-a209-1f10a51a2f0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ac3081c-c275-4fbc-a8ba-c5d156910723"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d478b0-f5f0-40c8-ba27-1e282d5dff0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aadafc93-0193-4804-903d-447527c22c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e04b43-db6f-4be7-a929-4e907070645f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd2548df-b4e2-4627-a8e5-2ef3020c4648",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95cb2609-f552-4dde-8f9a-8b1ad344a9ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a5f3a64-94de-48a5-801e-891feb453872",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03782e55-9a7f-43ae-9659-5d416b4c55e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1060136-874b-4755-8437-a4a05e41f2e0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e96cc4c-51b6-4e9a-952f-e3a486bdde97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8bfe1e4-1447-4005-90a8-2696ae198777"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf80aed0-d5c1-47a7-bc6e-29cd4107511f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9388204-6bb5-413d-82db-443c30d3876e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f12da247-a3a6-43f0-826a-6561d64f9e88",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b328b914-fea8-42b4-9842-a5655c305af1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f53a903-59af-47d9-8657-d2798599fc9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb213c90-4d5c-443a-b0d4-a5699c4df617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e1eb94-d6b3-40ce-97b7-a42d4bdc4b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e9b1249-cb5b-4e44-8aff-63f940f35a4f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adbd7355-b591-46f9-ac02-c913122de8d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8cf9373-9a97-4ec7-8f7a-bf37afc21835"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a3dcc8-2bae-4438-83d8-411e093ada14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7914b32e-28c4-4464-8f8c-a7a12f8aff06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26de7857-137f-4b9a-82dc-640e6f572b83",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4771432d-15d2-487d-97db-3382a55647b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "799c0041-6b54-461a-878a-a062946b80b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d2a732-c4fd-45ff-9b06-cbd05c0681ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d11e69e-9963-4c91-9d18-c48afd429ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "304bab8a-bd2e-4ff0-90f8-f50cdfd75325",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e188721f-7e92-4384-ba95-c1bab2553cbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9244963-f998-49f8-851a-0178bf4a5c3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b3afcef-0444-40b8-9114-74dc55b2c797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "133424c7-242d-4d71-a2d1-d6bb55105ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09fed833-f633-48bc-9abb-1456a20081c6",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "834c06bb-7908-477f-879b-14a2f9c4438b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d35ad27e-597f-42ab-9029-893d75da0f5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bdfb84e-48e3-4507-9b93-c70749c89f53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f28dc0dc-b1f6-45c5-8faa-142c02cd5b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67574265-c4e0-4202-aa8c-6045553b95d9",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bef6c3a5-e6c6-43c4-b331-c5a9f8d0845e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01889668-d70d-4388-acd4-aca328efefb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61a19ed-2108-4ee4-874f-82e0294ae94f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c83f274-e784-4c41-9f7c-e1f93f611d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "badfd587-5b51-4546-9d23-8c51a558b410",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50575162-5bf2-4fef-9da5-494dcf9cdede",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4397cb5-835a-4a1d-956f-424c816cba2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "434b13d1-ce84-458d-87f9-648434bc681c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e84221d-fe4f-44e4-9d6c-b9301519c3f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9260c3d-d181-4698-a5d5-4ac52daf402d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c7e28bf-42b2-4ab2-b6a6-fa184f35af78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e992a3d9-d073-4ae4-bc9e-7349c157916e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa261ba9-1fda-4689-8fd9-05c6b8f95128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab3e9f45-af79-4f91-88f0-cfccef5e3e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f996b6be-115d-4f8a-9ab7-13257aa9a1ba",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ec43f2-1dca-4c4c-a5c7-6b1b4704efcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa2b5967-4cf5-4087-971d-0f1f6e0bb357"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d89b5005-a62e-4364-95ad-634a47f2fb2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee6b37f1-dbe9-4aa6-bcda-0505c07cfdc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e2a35c8-44e9-46a3-bb1d-502635a372d1",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f4de72-c820-4fe4-adc4-4d409d3fb11a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "012c0789-bd27-4bcd-bdb6-85e225b13fed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06dd87c1-c00c-4dd4-8530-95e7e9805eea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d19eb66f-191d-4764-a4dc-763e2cf4ae88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5692881-e1ae-400f-b824-e08c3aaf9e47",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86bbbf45-c21d-428d-a9ff-40f02cd20845",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a550bd8-778a-4438-ab75-8dcdb7ea8b09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc65186-6d1d-43bc-abfa-c234ccc5051b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ce2aaff-0b93-4e59-84a8-d572751900fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5fa510b-108c-47be-8814-3d046c66e53c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63de25e5-d401-4c99-80b2-eb3363058769",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8dea3ea-d509-4ab1-bb71-2e071358793d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f0fbfa-3f3b-4e0c-96ca-62e52106c60e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a1c8d3d-e9b7-4175-abc8-292c1ce7d97a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6531642e-11a2-46e3-972e-76c67d5c113b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b97fac-ce3f-4d98-9f55-5001021321df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4303f2d-6381-40d5-84b3-46e0b9c35163"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd95a1b-7d82-4bfc-a218-6f678936c0d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de1f751a-19db-4298-a114-6005d09fcc8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c68c3a-1e01-45ca-9bdd-e307775bd8f5",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46bd9427-6ec8-4f3c-b344-0e2c7e1396dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1398782-f955-4865-abbb-cadcfe4f7845"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5802d547-3e4f-4521-92b4-5da94359c706",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "706a75c9-9774-4099-bc14-9efd1655c3e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6122c62b-4a8d-497c-a28d-48711b432835",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c0c774-babd-4934-ad78-1203fba8c398",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d711f1f-cb1b-40d2-b3ea-0700ee9c8248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9042fa1-6564-4bc1-8d44-cd3c39dd29c9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "459f9070-0fe3-4532-adfc-dc34e2313742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f222c3-264a-4700-8b72-2c2a37cb9f99",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a6755f-d61e-47f8-98c1-dfc446048e34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0dc6b66-1697-4607-9581-dbe6d2fe0d87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db2c539-f814-4621-bf23-dab653a5b7d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d798bca-38a7-4d0e-bc62-ec136891912a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdaba4e6-f5c8-4132-8167-8a31681a27da",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c95cda3-db5a-43e4-a38e-6cd4c1592cb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cd0ced3-39df-4481-b501-553588f9e27c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ab13a9-95af-4750-9e54-44460abdd39f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb3a5ba-0af1-44ff-b120-1d985f483abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9292a11a-e4b8-4e96-9740-6c63a3611b10",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f6ff00-61b4-4039-af06-7a47c3ea4f29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ceb6af15-57f5-4442-bbda-c4f75a40679f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76817c63-78e0-4268-81fa-d0d802fdac2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3476469a-e29f-4d21-85d7-50d092c13b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c50af8-1b5c-4a83-85f0-8e67a228fb80",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e093654-3c5c-43a7-b655-ae96aa503950",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abbede0e-5996-4951-b3a9-46b3d04460cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e3d914-c339-44aa-8ded-873a3ed4ad15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cc57db6-0738-45c7-9a72-177592538a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e95fc67b-b300-45c0-93bf-92083b1414bf",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec54190-2cb4-435c-97a8-5ca20c486c4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99ee4ca3-eecd-4833-a726-3bdc3d21fa44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab115570-cec8-4bf4-97b5-927282e7fec7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acb53253-2ba8-4975-8e7d-a218e307a3d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c8cc4d-41d6-45a5-a6f6-a1651852b309",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b972bc-dab3-4ef0-a0e3-37b8b3558bd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa234f09-8d6d-4505-a23b-7ebaa2fd69a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d184636a-418a-4478-90a9-a560261fcc03",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "323f0a5e-a413-4a59-ae4e-7cc7ff8aba49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42face34-6496-448a-b86f-5b5d6e66cb1e",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4672082e-d706-4edf-b040-68ce691ea28f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d15ce8d1-2966-47b1-8d1d-047b0eec465f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf17bfd-c68c-4951-8e59-c35050c1f72c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21e68289-6965-48a3-81b9-a2de35d4ac5b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef9f32db-df8b-4619-81dc-e04e899f4966",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1077739-4e27-4242-a2ab-2b818656992e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf95d186-5645-450e-a3db-d565e2e6dfd1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "544f9718-ffdc-4071-8217-9c1a5674a34f"
                    }
                  }
                ]
              },
              {
                "id": "0271a5b1-6d5b-4890-98dc-ba0f5e779f06",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f9842f6b-4303-49d5-a407-7477b7643943",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eca40f9-1ca4-4651-8f95-d813c806c226",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9016217b-04dd-451f-865e-e45c64b74078"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ef09fea-b9e3-491b-bb64-9388f5d22286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "08fa8ef4-e768-4dc1-973f-cd1efdb367ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb802b2-c651-4bc8-a6f3-be932a2d53a9",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b815cd5e-e8a3-45b3-9781-1750f3bc5fb5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d35a863e-0aca-4809-b377-00f72a5ae785"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb837d4-ddb7-490b-b66e-2a98f7431a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a183c90e-fbe4-45c8-ba60-950347e82304"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "960a4482-708b-4a51-a36f-7e860239f0f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2994a0bc-e27e-4e91-8d3e-d3083a607118"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1065f81-36eb-4804-b0e2-dfac9d118991",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72c21b2b-7cce-4d37-b6da-4f848207815c"
                    }
                  }
                ]
              },
              {
                "id": "dc3e63ef-e28a-41f4-865c-75e406cba231",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "14cd2e62-233c-4d83-ba7e-d3db7fa1c9d7",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b381707-fe57-4a75-abb6-1741b0396cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "327f7b18-20a3-457d-9850-05a6c17addc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1e9d78-3a35-4980-b79d-6082f24a45f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55f9fc8c-ea3c-40fa-8726-a2f2c2ba5203"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cfb68701-a688-4850-bd9d-596cc9e31ce0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1bec2d1e-ad86-4ef2-9023-523873fe82be",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e8f2a4b-b898-4669-8992-c3e5c1fd4133",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d0321478-7b2a-4fcc-9bc7-d773fe60262a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ffe367da-6d20-4d61-b133-fd9790f82298",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49f5008b-75aa-46c9-a1b2-62820866786a"
                    }
                  }
                ]
              },
              {
                "id": "d14decba-fda0-4aa3-baaa-3436de890452",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "336279e0-d198-4a2f-a84c-eed27d85233c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c5ec6f37-68ce-4555-9b5b-439deb9ed354"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d784f01f-b3a5-4bff-84ee-3fcd58b6ab2e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ff2044b-8792-4dbd-a56c-0ce912c212ec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6442a53a-28ca-4b43-aeee-3ea414296cac",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6e6d3571-8def-449b-85ed-67c6500b8b06"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9b677468-2f65-4d09-99f6-160170887cbd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ada64518-fab5-4fc1-9c3d-0ec3befdd05e"
            }
          }
        ]
      },
      {
        "id": "f2b0f6ae-4be2-4528-ac5b-4fd53636454e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "48a3ca35-7c33-43bd-9399-5a44aeb2d0c2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "03f268b4-94f4-45c4-8f4f-16a5f37a179c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "205da801-e9c3-46a9-9f48-273016a7b90c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c0b9c44-1181-4aff-bec8-580ce07ac0b9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9a4cbb9a-e803-4df1-9989-4d73f46713f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee561cdf-8f94-4810-a4a0-14e0d9b57ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2ce7156-5575-44f7-a624-be0be9841d61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90ce5034-31ba-413a-9787-24b01e33ab2d",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a210c1c0-03a0-4a4b-a2a4-216cbbe9eca2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6c9c2cce-3163-4f6b-82dd-f385d6bff23e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df96e187-04a1-4e16-9360-89cee0a98d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a24234ad-c9a1-4eda-b51f-1dbef901362a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b82b287c-ea57-486e-b57f-bf5ed4d853e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4cb1c61b-46f2-4550-9b48-d1b7dc8c5a7c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "979c44c6-7d29-4dee-9f40-1d35756bdd51",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d803750-9e31-497a-b0cc-95d205808cbf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a02c165-6934-4413-a358-8ec9ffbe7b93",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "045f5b64-0f06-4439-ad80-a19d368a918d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a4f68bb3-a152-4092-b4eb-a9f62cebf080",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "81a8cba6-4771-467a-98a7-12c8b5a8a5ca"
            }
          }
        ]
      },
      {
        "id": "f8b7ae00-18f1-411b-a758-2eecb8d449db",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8d25cbbf-9e74-493f-8c91-88e3f5845687",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4222988c-1c5e-4131-a789-7b3fce80b8bc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bfcab6f5-704f-49a9-9663-6a9228e5b1ef",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f40b2c-7f5d-453c-af78-c9507e16c979",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "00da3d9c-966e-4957-bc36-db8f92580b0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f77f079-8302-4ab3-b9e2-76157f49bcfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe62673e-761d-46e3-8937-f6f6b33fab1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bacb7feb-9d86-41e3-ae4f-fef44082909b",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a5072d-ea71-4907-86e9-334f7bfc9fbb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "99474b2c-26b5-484d-b836-e65ab850137f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3cb2b84-9732-49fa-bafa-058b9b101220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8af5bb74-d8c8-4f4a-b235-5da7a8e06371"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d68eced3-6a84-4f21-bfe7-bf36308e8b20",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "45ceeb94-a4db-4611-b57b-6424c8a33a5c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "183edc2d-368a-412f-a61f-15a9d10d6487",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8f1a4bb-a848-4d4b-bde0-556ca55cc88f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "100ebe59-7690-445c-bca4-1be3aa18578a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "634cf4b3-4ce9-4718-8620-82ed73055601"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b1bcb59f-1e7c-473f-a56a-008d9018dec3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7f8d096a-a91e-4e11-b305-09af0dd4308c"
            }
          }
        ]
      },
      {
        "id": "87580f33-9fd0-48cc-bfa0-cf1e80dd7e1f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f190caa0-cd17-4096-89f0-cb69a7ba3473",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8f18fe7f-2ee6-4f82-8bd9-f65e36707d5e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b17a4f27-76d6-48db-b8ec-3226a14b02bc",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5af24aa-edcc-4e49-b7b3-8734d49afdf9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e25ad214-31b0-4671-87f2-74485eb248e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddcbb8ae-2012-4090-a70e-68467e5660e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c79d5af7-f88f-4835-825b-5e8e922ae0c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "397bfc9b-4c27-4163-ac73-26adf83f0dac",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7aa0eea-e594-4e4a-b4a9-6c954bfb9801",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "938103eb-623a-4fa9-9821-859f0cd42b0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d03c2670-81bb-46de-ae03-f560f3f28968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "98593412-c077-4258-b4ff-1af36507daeb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8fef0d14-e5ef-4c09-bb92-4519027c0037",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd18ad23-b8e9-4014-80f4-8afe6896455d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb66f4b4-1482-4aa6-b1f4-cb274a30c248",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d105a630-a7b8-48f5-9828-586fcf84cbd7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "799a4928-0b69-4717-99d9-d28c22b19472",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f6699efc-7def-4aa3-8c34-3eb31c4f0b90"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "de689fdf-1ea8-472c-8dc0-7fc1c84b77c3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e1cd9cd6-8bd9-438e-ab7a-eab6a8463b59"
            }
          }
        ]
      },
      {
        "id": "d4b1c848-98b5-409c-b01a-2620c2f9a3f8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "928fdd7e-2cc0-4685-8a1e-3e9eee518c1b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0cd69793-b32a-482a-9754-660ffccb24ad",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b2c4b7fa-df1a-4ff3-bb1c-2da4769162eb",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ff7e8483-d583-4beb-b479-28af6fb8859a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f6832d66-d180-4ff0-9e1d-75ed19e28a71",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 105.9351145038168,
      "responseMin": 18,
      "responseMax": 858,
      "responseSd": 161.04859037454528,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1671841995478,
      "completed": 1671842033870
    },
    "executions": [
      {
        "id": "176ddc83-7a29-4a7a-a9c1-a8ead10558ae",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0015ae06-4773-4b8b-ae6f-fda6a6d4618b",
          "httpRequestId": "3f4f115a-5102-4636-994f-7e8bae13cd6d"
        },
        "item": {
          "id": "176ddc83-7a29-4a7a-a9c1-a8ead10558ae",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "e315d1de-cd98-43ac-8411-1aaeb6b10951",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 0
        }
      },
      {
        "id": "46d34677-59bf-4c0a-9327-3af3d0b21c9c",
        "cursor": {
          "ref": "1dd4a5d7-eaeb-4a27-b7de-32800d24413e",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6c145e05-9d6f-48d9-9bee-fd94c6dcb9a3"
        },
        "item": {
          "id": "46d34677-59bf-4c0a-9327-3af3d0b21c9c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "595ab4ad-a2e1-49b0-95fc-e724871dc7ac",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 0
        }
      },
      {
        "id": "a3ff092f-95ea-4a27-82e0-ec29ef4bad53",
        "cursor": {
          "ref": "2e8b12c4-1f16-415a-aae8-900850174da5",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "bd4922bf-1598-4047-930e-20e29fb54ceb"
        },
        "item": {
          "id": "a3ff092f-95ea-4a27-82e0-ec29ef4bad53",
          "name": "did_json"
        },
        "response": {
          "id": "d4fb1903-6070-4167-b4bf-80d340b9dd6e",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "380a18cf-54e3-4d03-8dab-a8e35f4f1e94",
        "cursor": {
          "ref": "2fdc06b8-5f74-4a8c-a6ec-58803719cad2",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "30ca70a7-c7b4-45ee-8f77-fad20909ee60"
        },
        "item": {
          "id": "380a18cf-54e3-4d03-8dab-a8e35f4f1e94",
          "name": "did:invalid"
        },
        "response": {
          "id": "302d4b45-f4d4-4486-af58-b14de3a3c698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "380a18cf-54e3-4d03-8dab-a8e35f4f1e94",
        "cursor": {
          "ref": "2fdc06b8-5f74-4a8c-a6ec-58803719cad2",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "30ca70a7-c7b4-45ee-8f77-fad20909ee60"
        },
        "item": {
          "id": "380a18cf-54e3-4d03-8dab-a8e35f4f1e94",
          "name": "did:invalid"
        },
        "response": {
          "id": "302d4b45-f4d4-4486-af58-b14de3a3c698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "815657b6-97a8-42b7-b137-7a46187231b0",
        "cursor": {
          "ref": "66bef385-e297-4927-b377-3e5a44e99dd5",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4bcc866d-3cfd-4183-b29d-1e064a39d233"
        },
        "item": {
          "id": "815657b6-97a8-42b7-b137-7a46187231b0",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "92cde25d-a848-4d6a-8bbd-f437b0a6396c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 70,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f1edca-a770-4556-b119-597a425eca7e",
        "cursor": {
          "ref": "882032fe-bcdb-407f-99b0-c7d1e816f1b1",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4565b271-700f-4927-ab31-6e54e43d3180"
        },
        "item": {
          "id": "a6f1edca-a770-4556-b119-597a425eca7e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9e27df19-8cad-484b-af42-0aa1ee2048b9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 30,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8c16d9-9ea5-45e2-9711-a662c60b6c43",
        "cursor": {
          "ref": "9df03a0b-5925-42c4-9fff-0b0c8f5aa0e7",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8e1063d2-2e7f-47e3-b871-c9d7499cae70"
        },
        "item": {
          "id": "0c8c16d9-9ea5-45e2-9711-a662c60b6c43",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f05ff3ce-424a-4361-a920-ff769db869aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c78d7c-ae91-43cf-b875-92d49284dde6",
        "cursor": {
          "ref": "f7b5e12f-7703-4648-b241-f80a11ccbded",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f6c2805c-6eb0-47fa-8f6c-b1c03364fd43"
        },
        "item": {
          "id": "71c78d7c-ae91-43cf-b875-92d49284dde6",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "cd8d71dd-5a1d-4c07-96bd-960537006b59",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 30,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c78d7c-ae91-43cf-b875-92d49284dde6",
        "cursor": {
          "ref": "f7b5e12f-7703-4648-b241-f80a11ccbded",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f6c2805c-6eb0-47fa-8f6c-b1c03364fd43"
        },
        "item": {
          "id": "71c78d7c-ae91-43cf-b875-92d49284dde6",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "cd8d71dd-5a1d-4c07-96bd-960537006b59",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 30,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7175ce6b-5293-4508-bbdb-ca4d93a808bb",
        "cursor": {
          "ref": "3f8bd8a2-af17-4652-bad3-1e92df70cefc",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c5f6856c-ea50-4fe5-b55b-f816f078d0be"
        },
        "item": {
          "id": "7175ce6b-5293-4508-bbdb-ca4d93a808bb",
          "name": "identifiers"
        },
        "response": {
          "id": "e718f74f-e69c-4145-bd55-03ec1747daa4",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7361dbae-3e90-454d-b10c-38e2de9d77cc",
        "cursor": {
          "ref": "c9568bf8-659e-4af1-a903-6f7a164b0c28",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "60190a15-2393-4842-ba20-497ddc93b70a"
        },
        "item": {
          "id": "7361dbae-3e90-454d-b10c-38e2de9d77cc",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "122dbae5-93e9-4703-906b-37d36be6f97a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7361dbae-3e90-454d-b10c-38e2de9d77cc",
        "cursor": {
          "ref": "c9568bf8-659e-4af1-a903-6f7a164b0c28",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "60190a15-2393-4842-ba20-497ddc93b70a"
        },
        "item": {
          "id": "7361dbae-3e90-454d-b10c-38e2de9d77cc",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "122dbae5-93e9-4703-906b-37d36be6f97a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a175abdb-90a2-485c-a756-0b07ec169e6e",
        "cursor": {
          "ref": "d2034bf1-48b7-490a-9900-37fd6569f881",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2e94934c-27e0-421e-9676-9723ce338d6c"
        },
        "item": {
          "id": "a175abdb-90a2-485c-a756-0b07ec169e6e",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "fe63b02d-3d5a-4806-bb16-0756b2cd2c0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e2bab6c-4f26-49a7-aa1e-813e4cbde938",
        "cursor": {
          "ref": "b127ca8d-460f-4bfb-9abf-a687d805176d",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "512c6d03-2462-4f7b-962b-44f5c39cea76"
        },
        "item": {
          "id": "9e2bab6c-4f26-49a7-aa1e-813e4cbde938",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "61cddf8e-8832-48e2-8ba3-fb6b39836d7f",
          "status": "Created",
          "code": 201,
          "responseTime": 577,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "7d285c0c-f850-4ed3-97fa-882a59562bda",
        "cursor": {
          "ref": "42ba10b8-81c6-4aff-b558-a8c1b6fa8ae3",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "528f5f0a-34e0-4c29-a1af-05fa38552533"
        },
        "item": {
          "id": "7d285c0c-f850-4ed3-97fa-882a59562bda",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "488ff0b9-3b45-492e-ac90-d5a0a894e383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "345d34be-5533-4e70-820c-860619128ecf",
        "cursor": {
          "ref": "958079db-13df-456c-ade4-3df193c252ab",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "93599415-40bd-4c36-b6a1-f9d2223cef3e"
        },
        "item": {
          "id": "345d34be-5533-4e70-820c-860619128ecf",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "56239ad4-bc66-4e32-a535-f825505246b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a7bed4-db51-4a58-8f83-d406b981d3c8",
        "cursor": {
          "ref": "d64ff09f-3c82-4d3c-a0ec-6e6f74a69354",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "51480e9e-1c3d-4324-ba1c-186201a46e9a"
        },
        "item": {
          "id": "b2a7bed4-db51-4a58-8f83-d406b981d3c8",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "318be6dc-417d-4d15-a9ce-0698f9017b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "640cd5d2-7483-4315-b026-0ed9e47e7d24",
        "cursor": {
          "ref": "13c4d81f-bc4f-4c6c-b011-d8dde7a13986",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d1ce4f94-ce01-4cdd-bb35-0467bf6b966f"
        },
        "item": {
          "id": "640cd5d2-7483-4315-b026-0ed9e47e7d24",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "8afce0e7-9da3-4595-a9f1-b88cb109487a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44085035-f226-40cd-955c-43d571669897",
        "cursor": {
          "ref": "f1d1f697-1738-4c98-aae1-5bcca19ab1a8",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d55ec5c4-b6cf-4caf-b021-4c29ee00fbba"
        },
        "item": {
          "id": "44085035-f226-40cd-955c-43d571669897",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a63bcdab-ce27-477f-b7a6-67557a73055a",
          "status": "Created",
          "code": 201,
          "responseTime": 543,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "40aa6c52-35e2-4e63-9b57-a7b632efcbff",
        "cursor": {
          "ref": "bac7ada5-7ef3-45df-9dc9-07ab6776dd2b",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ee0782f1-60c8-411f-aac9-c910e8d7e272"
        },
        "item": {
          "id": "40aa6c52-35e2-4e63-9b57-a7b632efcbff",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "cda44439-13d2-4f7a-81c3-59e3e21a6c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be2ccb9b-d78f-44e9-894d-b6e6addeb3af",
        "cursor": {
          "ref": "bd35fb83-5123-494d-a2b0-aab17813a0d9",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "5971b43f-02da-4709-b1db-34d61acc16ce"
        },
        "item": {
          "id": "be2ccb9b-d78f-44e9-894d-b6e6addeb3af",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "91936a23-290c-4638-af88-c9fb1950a7ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e77202-03a0-4f68-82af-cdba4a63eff6",
        "cursor": {
          "ref": "13ebe17b-a1f6-4fa3-b6df-a69cbc2a0ca1",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c6a0491b-9e20-44e9-9d95-4561167a2932"
        },
        "item": {
          "id": "14e77202-03a0-4f68-82af-cdba4a63eff6",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "bfb0b050-4e73-496f-9a5b-1cd0869ac26c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ae06a1-8f06-440b-8166-09be8a613473",
        "cursor": {
          "ref": "1e0d8847-5933-4d93-a41d-d16d8aececea",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "27e4cb33-a53a-4e1a-b57b-64133cef038a"
        },
        "item": {
          "id": "c4ae06a1-8f06-440b-8166-09be8a613473",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "0ec90b81-d774-47fa-853d-88366f5ada8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0d5f71b-9797-4162-a249-edc8282e7414",
        "cursor": {
          "ref": "66a280a1-8079-4061-9029-9a865c002661",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b7d9f4fa-e3ed-4b63-93a0-2ec2a3d6aaf6"
        },
        "item": {
          "id": "f0d5f71b-9797-4162-a249-edc8282e7414",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "28293bc0-8121-49f0-a468-01bf84773eb1",
          "status": "Created",
          "code": 201,
          "responseTime": 542,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "a0967e86-e769-4491-a43d-2a4883e76280",
        "cursor": {
          "ref": "1898d002-2733-4d5a-bf05-03e619e35eb6",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "63e0cbd1-cce5-4aa8-94f4-b4da4123d10f"
        },
        "item": {
          "id": "a0967e86-e769-4491-a43d-2a4883e76280",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "c52f1a18-7958-4fb1-b22a-c5548984b83c",
          "status": "Created",
          "code": 201,
          "responseTime": 858,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "bbeba193-d2b8-4a78-9e04-6bba6e2aeab8",
        "cursor": {
          "ref": "f2ebac2e-c030-4188-93aa-d2c3c6f6a2c1",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ab56cf11-c4de-440d-8bcf-ffd1117b0a66"
        },
        "item": {
          "id": "bbeba193-d2b8-4a78-9e04-6bba6e2aeab8",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "1b28264e-85cd-4bf8-9a40-d3760fddca50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "544d1052-797e-465f-bc8f-a97f6bf2c3e9",
        "cursor": {
          "ref": "e238de51-10a6-4892-898b-725b342d9033",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9d5074c4-3de8-42a3-bb48-05051113d6ec"
        },
        "item": {
          "id": "544d1052-797e-465f-bc8f-a97f6bf2c3e9",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "731a1077-5fdf-41c9-8343-f41e32ff4df2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ae14e85-d7a2-4b52-aa8a-8128f4461fc3",
        "cursor": {
          "ref": "4f0f6236-65a7-472f-9c5c-fa7e9b7f32be",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c3e64a3d-b958-4ddf-bb44-043a38cb2665"
        },
        "item": {
          "id": "3ae14e85-d7a2-4b52-aa8a-8128f4461fc3",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "8c44df52-bda4-4af6-b0a8-619832dc0830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a169dda-0432-4a6a-bef3-5cd6d2f10fee",
        "cursor": {
          "ref": "b481222a-8ed0-4e7e-ac93-23e33c9a6cf7",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b0058887-72b6-4bd0-adbf-039862441cd6"
        },
        "item": {
          "id": "8a169dda-0432-4a6a-bef3-5cd6d2f10fee",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "68e3ab6e-67f9-4cfb-a012-2290feb24ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f676b0-64b0-4d0e-a2ca-de2905ce0304",
        "cursor": {
          "ref": "932aec8c-2156-41e8-9e68-d787298556ea",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "954bc8c9-e4cd-4c34-8fd2-cc6354cdf209"
        },
        "item": {
          "id": "05f676b0-64b0-4d0e-a2ca-de2905ce0304",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "d4b1c3ee-4e32-4fc6-b4af-054f495f35a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2441d20c-e2ac-48ec-b10c-10602d22582d",
        "cursor": {
          "ref": "59bc8718-b207-4df1-a54f-0e3722eaa995",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a02d3aef-a5de-41a8-8f4e-69c18a32fc99"
        },
        "item": {
          "id": "2441d20c-e2ac-48ec-b10c-10602d22582d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c75366ae-3230-4bf4-8ab5-3e5d4a5354a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c15b60-b429-41a7-aade-ad3169ac7741",
        "cursor": {
          "ref": "ddb9b09b-df2a-4f11-af9b-75785dc8bccf",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f8915451-577a-4aa1-9b07-64de4ad26736"
        },
        "item": {
          "id": "49c15b60-b429-41a7-aade-ad3169ac7741",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "7295fcaf-357f-4535-b002-ba43eb9b82d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc69bde-79b2-4014-9caa-68704cf69bdc",
        "cursor": {
          "ref": "189eeb76-1fde-4599-a8c9-886e6fcb52b1",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c97ae1b9-9756-43e6-9e3d-1d7b89870ffd"
        },
        "item": {
          "id": "9cc69bde-79b2-4014-9caa-68704cf69bdc",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "88a368d1-5f43-4f79-a3fe-ef3cd9c4dbfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4a2e17-4344-487a-872a-2f53c0179fae",
        "cursor": {
          "ref": "9b0de6bc-a7e5-4687-a5a3-064907e116ad",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "bd40d6be-07dc-453d-8aea-d1c6175c3840"
        },
        "item": {
          "id": "bc4a2e17-4344-487a-872a-2f53c0179fae",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d6760802-75ec-4ab8-b5fd-3e56c9c0d10d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5976f9ef-0635-4a9a-82f4-afadc0a05162",
        "cursor": {
          "ref": "7f8f77e4-b0b3-4ac2-be37-ce6e4dc18c9b",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "40020b6a-f034-4fe0-b9e4-380f2083671e"
        },
        "item": {
          "id": "5976f9ef-0635-4a9a-82f4-afadc0a05162",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2758b54b-8ca7-417a-b1cb-bef24a8abb3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03823abb-ac4f-4a23-968f-244b8cfcb6e6",
        "cursor": {
          "ref": "21d0657a-62eb-486c-a83d-04001be27c57",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b2c5cf00-640f-4530-8737-5dd395476856"
        },
        "item": {
          "id": "03823abb-ac4f-4a23-968f-244b8cfcb6e6",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "785973b5-11c7-47fc-8e32-7c1d2be36643",
          "status": "Created",
          "code": 201,
          "responseTime": 670,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "a1e5133b-6b65-435c-a989-14db71e9edea",
        "cursor": {
          "ref": "3ed178d5-9368-4338-a795-68c3c2002d0d",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c6b3ad01-3fe6-4d09-b554-abf86a794c0c"
        },
        "item": {
          "id": "a1e5133b-6b65-435c-a989-14db71e9edea",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "d20e9a75-10b9-4bb2-a192-611a29dcf2c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dcb9b85-c03f-4f29-bde2-d812cf0bd116",
        "cursor": {
          "ref": "29fcf6a4-bdff-4885-8770-a3f7af2e0cde",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f4b8f850-154d-4705-b061-23691d966b0c"
        },
        "item": {
          "id": "9dcb9b85-c03f-4f29-bde2-d812cf0bd116",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "7f6004d0-51dd-4679-8a9b-ca04499753b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30959d06-8608-4590-9cd2-cd715ac99dc5",
        "cursor": {
          "ref": "4023cf84-366e-4500-80db-0c08540da1d7",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ad749d1d-83d6-460e-a8e5-35692e0d2ff9"
        },
        "item": {
          "id": "30959d06-8608-4590-9cd2-cd715ac99dc5",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "89922e7a-d104-4b36-b360-75d47784e8aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca85ab7-c260-4602-bcc2-0281b62c2e78",
        "cursor": {
          "ref": "beada30d-f5f6-4a36-b43e-20d72c97cae9",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a3e0c5cc-32f8-4c8a-a11a-a4aa6e8e4d27"
        },
        "item": {
          "id": "9ca85ab7-c260-4602-bcc2-0281b62c2e78",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "bdf4ac05-2a85-47ab-b3b6-0512f077696b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55bcce10-d03e-4500-aff5-fc85bb4db197",
        "cursor": {
          "ref": "8dfda857-d017-4c46-a5bb-a2ed6defce7a",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7bb59816-b0a0-4f8b-b09c-61a13d7aa70a"
        },
        "item": {
          "id": "55bcce10-d03e-4500-aff5-fc85bb4db197",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0134cb5b-3052-448c-820f-48525a8003e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "021f7724-3b73-4123-a4ed-017c266f1577",
        "cursor": {
          "ref": "117fb0d0-9792-4b7d-8a2f-d4a10321dee2",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "248ac279-9c9f-44bf-809b-b2157c7a953b"
        },
        "item": {
          "id": "021f7724-3b73-4123-a4ed-017c266f1577",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "61760db1-8d41-4abb-824e-d298711a11b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a794dba4-c8d4-439c-8c06-9bdecd29ac4c",
        "cursor": {
          "ref": "3dca8979-65cc-4cb7-820d-dfe55283901b",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "fb0fbd20-9146-4bda-8287-65db766c2e1c"
        },
        "item": {
          "id": "a794dba4-c8d4-439c-8c06-9bdecd29ac4c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6716d358-c3c0-47c0-94ab-f5bd2a4ba395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebafcf0b-64d1-46f1-b154-f06d14a91f45",
        "cursor": {
          "ref": "e7f23f74-ab3b-451a-a561-f489dd123a0a",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0aef6b03-9dee-4a20-a088-9c87d59415dc"
        },
        "item": {
          "id": "ebafcf0b-64d1-46f1-b154-f06d14a91f45",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "090291ee-66d0-4379-a5bb-5e72c10169bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "170141d7-d1c9-400e-8ea3-8c81df766bc8",
        "cursor": {
          "ref": "3c619905-1f88-42f6-86e0-a4350666a64f",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a064e642-a0bd-45b4-b3d7-a8eea857833c"
        },
        "item": {
          "id": "170141d7-d1c9-400e-8ea3-8c81df766bc8",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "6e3d7e83-a281-46ec-84b0-78e83da1382f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8723aa2a-5c6a-420f-bc39-c4334839d8cf",
        "cursor": {
          "ref": "f9cff1d4-1c70-4992-ac75-9dba0e9edae4",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d0d65998-58a6-4c05-8b0c-6bbff8998ba0"
        },
        "item": {
          "id": "8723aa2a-5c6a-420f-bc39-c4334839d8cf",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4a2776f5-5a0e-4519-801f-48ada2215171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f12430e-7461-4762-9635-c47ad57fc2ea",
        "cursor": {
          "ref": "eeecf899-a27a-44ad-91bf-0e6dde5c79c5",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d5286719-87a2-4fea-bc00-aa6716b51658"
        },
        "item": {
          "id": "3f12430e-7461-4762-9635-c47ad57fc2ea",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9273d785-b372-4b5a-8e83-16d75de19414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80afa1dc-0cee-4174-9067-da887c7d7723",
        "cursor": {
          "ref": "16c2a3ed-6167-45f2-8922-b9cf92e76b68",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ea0e3092-0e10-4be4-8030-aeb3fb5d3a92"
        },
        "item": {
          "id": "80afa1dc-0cee-4174-9067-da887c7d7723",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "364005c6-e3a2-46af-915a-6e06f6fe4cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2211d35d-261e-48e9-9bf5-2a2a5627555c",
        "cursor": {
          "ref": "a600fdb7-bc38-42f0-9e34-a884e54eb080",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4940cf2a-27f8-49f0-b229-53d697df9b83"
        },
        "item": {
          "id": "2211d35d-261e-48e9-9bf5-2a2a5627555c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b167ecb6-35c6-4286-996a-be8395af6b58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 340,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "668db37a-f6bf-4a8a-805d-4024cb6d1d59",
        "cursor": {
          "ref": "8667de63-ea25-4f4c-b911-bde3a2ac9db4",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6ff6487e-50d2-4b14-b0b2-bb1c7f6dea66"
        },
        "item": {
          "id": "668db37a-f6bf-4a8a-805d-4024cb6d1d59",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "0053423a-b1b5-4cb5-8c5d-c32e8bb9a17a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f2aa995-e570-4c1e-a4c2-6d4ee68012a2",
        "cursor": {
          "ref": "b1bfad02-be40-4451-8d52-ab6159f38ded",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "3c633173-8f15-4531-a391-760f28eefe0d"
        },
        "item": {
          "id": "4f2aa995-e570-4c1e-a4c2-6d4ee68012a2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b25d76bb-a175-4045-be1b-d880d3dc63a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5c8d1c4-b032-48c9-b434-4f117690ff03",
        "cursor": {
          "ref": "8b684551-b661-4dfb-ba24-a35c05b46060",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a6f35309-4b22-457f-938a-2e19d3eb86ce"
        },
        "item": {
          "id": "b5c8d1c4-b032-48c9-b434-4f117690ff03",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "3fe099f6-6389-4f16-8436-929fc5dd863d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eef4c06-4c7a-483c-b091-b389681e4bde",
        "cursor": {
          "ref": "0a6c6720-dbfd-4d54-b5e6-7412aa0004de",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1b9c2cf1-b0f6-4878-a1d7-8f4f130e7d8a"
        },
        "item": {
          "id": "2eef4c06-4c7a-483c-b091-b389681e4bde",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "33b6f2ec-a756-4c9f-a8d2-4fb8e348200f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72295a39-4ddd-4288-ac40-a00a53fcda4f",
        "cursor": {
          "ref": "b653e5b0-2149-440d-9b39-6b469f3feb69",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c505cc1b-073c-4497-8eb1-1cac5c6ec815"
        },
        "item": {
          "id": "72295a39-4ddd-4288-ac40-a00a53fcda4f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c9099a7e-5acc-4e46-8b44-f4d751aebb42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "674b3514-232e-4bcb-bff5-5e678b1b15b5",
        "cursor": {
          "ref": "88a3146e-c033-4bf8-816f-5da59276b02a",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "272a0e83-0f54-449c-aafb-a746905ed72c"
        },
        "item": {
          "id": "674b3514-232e-4bcb-bff5-5e678b1b15b5",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c7927689-3edb-4725-8b98-90c700c6dba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4480f8e5-fffb-4507-a014-2bd454b6c7f1",
        "cursor": {
          "ref": "69785dfa-d75d-41e5-b19f-b8c50f7b0033",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3e302765-7ea8-4926-bc1a-f24c8f626f27"
        },
        "item": {
          "id": "4480f8e5-fffb-4507-a014-2bd454b6c7f1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b2dccf85-881e-4663-a4a7-21f1a614ff80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 337,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "0cccc046-fc06-440f-a408-22fbc691789a",
        "cursor": {
          "ref": "6145ba0c-5222-43a7-aabd-60d05811a3bf",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6d09abf9-16c0-49d2-b792-17d463bb326d"
        },
        "item": {
          "id": "0cccc046-fc06-440f-a408-22fbc691789a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e5213974-acd7-4802-b7d1-8cbbc5b5bcc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "861fb10d-8537-4d0e-ad6b-2bcea3d52f6f",
        "cursor": {
          "ref": "69b56e74-76f6-4b84-a624-1611f4bac151",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "789eccc7-5d75-479f-b6a6-72ac99ea2bbc"
        },
        "item": {
          "id": "861fb10d-8537-4d0e-ad6b-2bcea3d52f6f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "afd9aca9-8248-43b2-a6d8-f78117512c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa212deb-5d6c-4e25-92bb-7a9d5f88c188",
        "cursor": {
          "ref": "0734828f-acf5-4c66-8bc4-442ee1b6c8cc",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8d3ab3e2-2bdc-423d-936f-0256a14492f2"
        },
        "item": {
          "id": "aa212deb-5d6c-4e25-92bb-7a9d5f88c188",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "16fc5884-5c36-4b88-a0e4-272169e0156f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4f136b1-e8c0-4428-b709-14d9533725a7",
        "cursor": {
          "ref": "658cdf4e-76f8-42d4-9320-955541b4d829",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "dd177e6c-3567-43fc-af87-4793ffebf079"
        },
        "item": {
          "id": "f4f136b1-e8c0-4428-b709-14d9533725a7",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "7773a7db-9e61-4ec8-a602-78a74495c151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0a2f0ee-4157-4498-b4eb-9e2f25795417",
        "cursor": {
          "ref": "adc28e0d-d430-453e-9fc1-3280cb4e78a9",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d068e1f3-6909-4055-b542-8b4ce16c138c"
        },
        "item": {
          "id": "c0a2f0ee-4157-4498-b4eb-9e2f25795417",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "fa3ce692-6edd-4330-8e34-d15fe33612f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2190579-0133-488d-8703-d94d1fa8e669",
        "cursor": {
          "ref": "e8548378-92d1-48eb-9578-1f5da2e9f169",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "06d9da28-097d-46b7-8ffd-d080fca6a69b"
        },
        "item": {
          "id": "d2190579-0133-488d-8703-d94d1fa8e669",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "478a5f52-b099-4d21-a996-82ca9b3acc8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89508a5c-35d5-4e3f-9591-c8d09a5a7914",
        "cursor": {
          "ref": "c0122dde-3684-466a-8bfe-77268c0c8d0c",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b0fb06d7-33dd-41cf-b720-6740bd178e67"
        },
        "item": {
          "id": "89508a5c-35d5-4e3f-9591-c8d09a5a7914",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6e67bc86-5fcf-4995-8a2e-4d88bc802e35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a852c8f-09a7-427d-a2e6-2bf6dc4713d0",
        "cursor": {
          "ref": "5a9848b7-ff2e-4538-a6a0-63b41e67b284",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "7cf826ff-7fbb-4017-bc5d-622185c1e625"
        },
        "item": {
          "id": "2a852c8f-09a7-427d-a2e6-2bf6dc4713d0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6808cff6-f7a5-4a0b-a04f-12d075b521ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba5a8077-fa95-49ed-bbce-894440ff1a5b",
        "cursor": {
          "ref": "767159db-f82a-4267-9d5d-b1f7189d7bd8",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "cb5a0510-a771-4c82-8c8c-26b97bdde7b5"
        },
        "item": {
          "id": "ba5a8077-fa95-49ed-bbce-894440ff1a5b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "29969120-d188-4054-97bf-d0bb92741177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfdaeed3-19b4-4fcb-8895-09eb7bd2faae",
        "cursor": {
          "ref": "c74cf5ff-ef3e-40ae-b399-c43b1feb6634",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b3bdd30e-9fca-421c-b089-f7b689ca5393"
        },
        "item": {
          "id": "dfdaeed3-19b4-4fcb-8895-09eb7bd2faae",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f3f6d440-2cb9-4ff8-aa4a-0e4018a2f1d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f922c79-6f39-4f59-a4af-925f90390bfa",
        "cursor": {
          "ref": "732e28fe-2aab-4374-be56-84d0ed9919f3",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7da51547-9029-473e-9657-bc5f8a7b9aa2"
        },
        "item": {
          "id": "8f922c79-6f39-4f59-a4af-925f90390bfa",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "eed2dc06-3bc8-441d-90db-bce643ba2761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e90131-c0f7-41f0-b10c-d973825f81a8",
        "cursor": {
          "ref": "a46aaebd-652b-4c6c-a03c-28e8fe13a81f",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "474c5700-ecca-453a-ba94-29b189f9b8b5"
        },
        "item": {
          "id": "b6e90131-c0f7-41f0-b10c-d973825f81a8",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "44b882b3-08af-49d7-8094-08bf7cd9f08e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba01d86f-a872-4827-866a-aa7e07532e01",
        "cursor": {
          "ref": "bfc39eba-ba1e-46d0-b83b-fb2a2f0dad0e",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "5bd039fe-4ca4-45b0-9686-95e911c890fb"
        },
        "item": {
          "id": "ba01d86f-a872-4827-866a-aa7e07532e01",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2d440dd4-15cd-41b9-9263-ced77717815d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c78c0794-b92e-4840-9e82-d714734021c5",
        "cursor": {
          "ref": "7b0dea1d-4ffe-4df0-b56f-edb5efce2153",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "be0197bd-1b07-4cc7-95af-0d9307a063e1"
        },
        "item": {
          "id": "c78c0794-b92e-4840-9e82-d714734021c5",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "6174daa1-b69b-4873-8e20-570b7233323a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "907b3830-d8ad-4fab-bb5f-24114b5ca659",
        "cursor": {
          "ref": "35c62499-de5b-438d-8ac8-8093d239db3a",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "6952f4c8-5abe-4378-9ee4-4ce9b923d64a"
        },
        "item": {
          "id": "907b3830-d8ad-4fab-bb5f-24114b5ca659",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "cb9d183e-254b-4bbb-acef-3365343f9245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa742e91-5c30-4d3a-888c-6605f7f8ea41",
        "cursor": {
          "ref": "d7ad4721-21a5-4407-88bc-edf0ce5714eb",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e588d146-401f-4179-9ce5-b0959bfc6440"
        },
        "item": {
          "id": "fa742e91-5c30-4d3a-888c-6605f7f8ea41",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "066d6e25-a6d6-4f47-b8fe-2e0da39f0375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8740f7e5-ade9-43d3-b334-f97991cf9ffc",
        "cursor": {
          "ref": "2cbb4eb0-7b21-41c8-9505-e2be6a8901e2",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b572e2f6-b081-455f-a02e-8a47d92763b5"
        },
        "item": {
          "id": "8740f7e5-ade9-43d3-b334-f97991cf9ffc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "b621e85d-344d-4959-812e-baf6fe38488d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ff0544c-16a9-490e-b0f2-5ecfcdce7c67",
        "cursor": {
          "ref": "e6361bf1-b8c3-4232-a18d-f9fcbc3e318d",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "4bc68755-e57e-45f4-a2eb-5dc8fdf46aa7"
        },
        "item": {
          "id": "0ff0544c-16a9-490e-b0f2-5ecfcdce7c67",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3ab1170c-4005-46fb-bbf8-5addd025c5a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "092eb987-a98c-4a61-a022-401e4149d388",
        "cursor": {
          "ref": "09ebcae6-020d-433b-a094-13aa46db61d6",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9a3bc015-4ceb-48dd-8a3d-cbe90ec32c3f"
        },
        "item": {
          "id": "092eb987-a98c-4a61-a022-401e4149d388",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ff35ac96-81a3-41c2-a6cc-037e82bf1923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40d352f4-81b8-44e3-9762-6906efdfbb9c",
        "cursor": {
          "ref": "5b964bd9-4c3c-4229-a062-0f7387ca88ed",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "581cee52-8f4e-479a-bccf-8a4b8298b42b"
        },
        "item": {
          "id": "40d352f4-81b8-44e3-9762-6906efdfbb9c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "81e98b93-641a-4d57-92d0-34fa04efab05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39624e0a-9384-4f4b-a4bf-4266fe73310a",
        "cursor": {
          "ref": "4484d4dd-a311-48b3-b88c-50f192360d74",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "46315068-aaf0-43c9-ac2e-45442b072525"
        },
        "item": {
          "id": "39624e0a-9384-4f4b-a4bf-4266fe73310a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "175c99f7-5657-417c-af51-aed4681bf7b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d449ea-3f12-427d-be10-38a047972243",
        "cursor": {
          "ref": "6fad8374-8cdf-4889-9cc8-b2984de83113",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "30280cf7-75e9-41bb-a635-e9079b66f3b0"
        },
        "item": {
          "id": "a2d449ea-3f12-427d-be10-38a047972243",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "9b194b8d-b4c1-4355-87a1-ee8aadee0271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba99794-8a79-46a2-b6c5-e521a67ee67a",
        "cursor": {
          "ref": "80bbc417-a5d7-4ba9-ba40-9d66005fbd38",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2050ea59-8535-4a0d-af70-c03bb79e9181"
        },
        "item": {
          "id": "dba99794-8a79-46a2-b6c5-e521a67ee67a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "2e01fb10-2fad-449a-a4c0-ec2ef0565897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d082757-6052-4300-a3e5-518351822482",
        "cursor": {
          "ref": "46d67252-974b-42e1-99a1-1b0f2f73f4dd",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5df2db1b-fb42-4d78-a6f2-d7d98403bf36"
        },
        "item": {
          "id": "3d082757-6052-4300-a3e5-518351822482",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "19370c19-6c97-4a80-aa0c-8442815004f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f24c656-86d5-485e-a23c-f06f97684ed7",
        "cursor": {
          "ref": "d69d3580-c410-4037-b946-fe1bdfaf7b94",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "9bddd1d4-2df7-48fd-8854-0c72019edbc0"
        },
        "item": {
          "id": "0f24c656-86d5-485e-a23c-f06f97684ed7",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "3d4f5991-4008-484f-a081-48dcf4cf4534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "174e2949-6d3d-467a-b4b1-f175687783ef",
        "cursor": {
          "ref": "0b586337-e6f6-4e20-96ea-c58544de1548",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "27596a6b-c4aa-45b7-923c-da7dfcbb0221"
        },
        "item": {
          "id": "174e2949-6d3d-467a-b4b1-f175687783ef",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "7b6ad9c1-7924-4ce7-83ea-e364021e56f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a384744-54bf-4292-91a1-6887bf7dba90",
        "cursor": {
          "ref": "a4a74bc7-9909-4b0f-acc5-766e7961c356",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "79e25269-5a07-43cb-b762-d2b2a5928ea0"
        },
        "item": {
          "id": "1a384744-54bf-4292-91a1-6887bf7dba90",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b7a4d939-8959-4fe9-b533-bf6651d18c6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c7159b1-a29d-4c2b-b2ff-7b101c7184a2",
        "cursor": {
          "ref": "c99b4a55-db22-45c0-9372-243d9738ca7a",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7df0b420-9cf8-48e7-b482-286b18207083"
        },
        "item": {
          "id": "7c7159b1-a29d-4c2b-b2ff-7b101c7184a2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b63c934e-ea2d-47f5-9df4-291b4c275b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b69d9622-bc12-48ba-b56f-ff79a43af4e2",
        "cursor": {
          "ref": "c58aa3e4-814c-4933-a6f7-e7472413c775",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2181d4b3-6c1b-43c4-9db4-e159d72fbab6"
        },
        "item": {
          "id": "b69d9622-bc12-48ba-b56f-ff79a43af4e2",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2304f92f-418a-47e1-bb01-5bacb45054ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f2d4ca-0c99-480d-839c-a9583f8b838a",
        "cursor": {
          "ref": "6202b0e3-a235-458a-8b10-2a5cd83e615c",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9ae307a7-59a0-414d-9c67-9209f53afd0e"
        },
        "item": {
          "id": "59f2d4ca-0c99-480d-839c-a9583f8b838a",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "854a087f-b7cd-4576-bdb9-4416c555afd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beaa2715-86b0-41e3-864a-67604ac96961",
        "cursor": {
          "ref": "8664fefe-ca0e-49e7-bd9d-cbf2b961f8ea",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "62675fc1-d408-4d6d-8101-99146dfa9be0"
        },
        "item": {
          "id": "beaa2715-86b0-41e3-864a-67604ac96961",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3e5cbd97-b956-481a-8653-865bf98051ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 341,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f49044c-681c-4327-b559-162c003319fb",
        "cursor": {
          "ref": "11c98c51-64a8-4c72-9b84-28d2ca512055",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "da4102bb-077b-4ebf-9913-0348f58919d9"
        },
        "item": {
          "id": "8f49044c-681c-4327-b559-162c003319fb",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "7b9e3fce-63f6-4c50-bb9b-2fdf1dea0bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af290e89-243f-4722-a46d-3e2b7cbcbe2e",
        "cursor": {
          "ref": "c510896f-4c0d-4ee8-8b89-823ae02d943d",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "0c934667-2bcd-4da7-9ac9-dca51655fb76"
        },
        "item": {
          "id": "af290e89-243f-4722-a46d-3e2b7cbcbe2e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5746bd33-9ec1-4889-ad3a-0be418f1607b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81bff821-4ed0-42ab-9401-c46ba996d3dc",
        "cursor": {
          "ref": "71a48a81-4951-4704-977c-7fa9a34696bd",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "79cb1ec2-6ea1-4363-95f0-38d3e7d65f4d"
        },
        "item": {
          "id": "81bff821-4ed0-42ab-9401-c46ba996d3dc",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "62aee16d-0911-4e8f-a6ef-60d877c1510a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb14c27-aaf0-4637-bfd5-c61e95bd54b9",
        "cursor": {
          "ref": "976e1c36-a811-4b57-b990-e0bba80e7006",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "98208600-8019-4d3b-9621-92fb5add0f7d"
        },
        "item": {
          "id": "3eb14c27-aaf0-4637-bfd5-c61e95bd54b9",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ba1e6e94-5851-415f-aaf2-27ff2410cd1e",
          "status": "Created",
          "code": 201,
          "responseTime": 659,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "a654f257-9f22-4ac7-a11f-2befb5b9de92",
        "cursor": {
          "ref": "aaf6459b-8a4b-41a1-b4f6-4f53ede4f6d3",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "aa2604db-6d9c-42ed-8e19-2e225e5bfb61"
        },
        "item": {
          "id": "a654f257-9f22-4ac7-a11f-2befb5b9de92",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "359ad8c6-b971-452e-9ce8-f97ca6860d46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ada819-6865-471b-b412-fe5eb29a8812",
        "cursor": {
          "ref": "b242f556-08e1-4bb5-823b-faa58cbf8eba",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "98ec4733-2c14-425e-9ee8-f4146404d4c3"
        },
        "item": {
          "id": "91ada819-6865-471b-b412-fe5eb29a8812",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "cba0c07f-1229-48b3-9f0f-b6241292c41b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c1850a-d0a3-4aa8-85e5-c9cdb4f70c60",
        "cursor": {
          "ref": "c1b174b0-1c1e-408b-8aa5-15626e7579f4",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "7dde7761-99e1-4925-9d89-2fb750195d0f"
        },
        "item": {
          "id": "54c1850a-d0a3-4aa8-85e5-c9cdb4f70c60",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "917541b2-bd68-407a-ab2e-e09631baa541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c847fb-cdb2-4c90-86e7-8b7301a6939e",
        "cursor": {
          "ref": "7a4c7e83-39a5-4f2e-a032-f2ef8f27ffe5",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "14032a50-0828-4462-a55e-9bd566efe358"
        },
        "item": {
          "id": "b7c847fb-cdb2-4c90-86e7-8b7301a6939e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7f65a065-61cf-4a8d-8777-387d2029746a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9ccb142-2ea4-4d38-a3fa-0cc27133ad27",
        "cursor": {
          "ref": "42c25c4a-e447-4367-9a64-1ce6852cdd09",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7e4ea22d-33dc-49df-b73f-7e04b02ae6bc"
        },
        "item": {
          "id": "e9ccb142-2ea4-4d38-a3fa-0cc27133ad27",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d73ce25f-79d6-476a-8db3-8d53b189be10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "607b9dcb-168e-4533-a86e-4a7ba05a795b",
        "cursor": {
          "ref": "09089611-7c0d-42ce-916f-94846f71f839",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "cf45b3eb-7bf8-4222-b04d-6e2bf7a20225"
        },
        "item": {
          "id": "607b9dcb-168e-4533-a86e-4a7ba05a795b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "03d59a0a-32f3-4139-acdd-51463f889331",
          "status": "Created",
          "code": 201,
          "responseTime": 647,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "0b1cc39f-3bd2-463a-998d-70b095a15e08",
        "cursor": {
          "ref": "070c65a1-2956-4094-9afc-fec53159c05e",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "da3e5973-663a-494c-b0b9-897c0e0804c6"
        },
        "item": {
          "id": "0b1cc39f-3bd2-463a-998d-70b095a15e08",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "196f34d0-459d-43e8-b5f5-602e872bc445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f3064be-a2e8-41b0-bed0-9fe3b59e4e8f",
        "cursor": {
          "ref": "657c5d49-e78e-4420-8628-de7e562ae37a",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "7ab6711f-75f2-40ee-b42f-c58bdb9c2d0c"
        },
        "item": {
          "id": "5f3064be-a2e8-41b0-bed0-9fe3b59e4e8f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "211ab565-3a94-412c-b6b6-14a14d9c2405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b0e37d-c242-4b55-ad0a-928f9d087852",
        "cursor": {
          "ref": "fa41c95f-4e61-42e4-9973-ee819c57739e",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c9418453-2b3f-4ee4-90b5-8f291812fd2e"
        },
        "item": {
          "id": "56b0e37d-c242-4b55-ad0a-928f9d087852",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "43e6f94f-e8d5-4ca4-8307-d2caa673fdcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e667b9d1-0ace-4873-9421-f9b71fdd7588",
        "cursor": {
          "ref": "fbb11a3f-5d4d-4e24-bc25-a3bfb1367a3b",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0e456a43-3bb2-48ec-9eaa-14acfec043d3"
        },
        "item": {
          "id": "e667b9d1-0ace-4873-9421-f9b71fdd7588",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "15cddb35-9050-47b9-8048-af279f1d8e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d553de8d-71d2-41b8-aee2-1497fec59ece",
        "cursor": {
          "ref": "960b7ef0-4d5d-47aa-86be-3ca62a246986",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "cef5c157-fd53-47ef-9965-0db57efb8292"
        },
        "item": {
          "id": "d553de8d-71d2-41b8-aee2-1497fec59ece",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "13e7ba34-6f3c-4ac1-9e76-a2f2b63f59aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e58b997-8bd4-4181-bc50-82b0e7832ff3",
        "cursor": {
          "ref": "b111be5f-4f9c-4678-8f28-0058b3d46540",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "246a3956-27c4-480e-ad79-881957320b58"
        },
        "item": {
          "id": "9e58b997-8bd4-4181-bc50-82b0e7832ff3",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "cbd48002-8387-4493-b012-d014c5e5f9d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37be354d-33b9-422b-af86-ba791a60975a",
        "cursor": {
          "ref": "d12061b6-3db6-444e-9131-f22e17b80996",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "13e4f57b-b9d5-4332-862f-00ef6dcb85ec"
        },
        "item": {
          "id": "37be354d-33b9-422b-af86-ba791a60975a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5303c4c0-903a-44c5-b261-329a77536d78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e457c48d-3f46-4108-b71c-2835b4074065",
        "cursor": {
          "ref": "9b83f6df-b1a0-4b95-bc31-85058167f3d2",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b52a0aee-c60a-4092-835c-b36f1647506b"
        },
        "item": {
          "id": "e457c48d-3f46-4108-b71c-2835b4074065",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a515c622-1221-4e5d-9c37-2e9b7216bb50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d5df919-45bc-441b-a7f6-551364309ed8",
        "cursor": {
          "ref": "fb90c655-50d5-4881-859e-3f483e7a788a",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ee849042-e739-4444-84dc-38d5512f280d"
        },
        "item": {
          "id": "9d5df919-45bc-441b-a7f6-551364309ed8",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "5c52c94e-b1b9-47fe-b95b-af7c3b7414c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "a3be7d93-261c-4c28-b6da-f34c76f4417c",
        "cursor": {
          "ref": "c769da10-e621-49ad-b701-78b374b5e788",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e1a1b2aa-db64-48e3-beb6-9b5ed5c74061"
        },
        "item": {
          "id": "a3be7d93-261c-4c28-b6da-f34c76f4417c",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "849c39e8-6dcc-4d13-b46f-8e2641b65c83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "f585b8fc-fdbb-4ce1-9c52-ea6bf7a3458e",
        "cursor": {
          "ref": "270cff41-d495-4b6c-944e-ef6e914eca20",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ec2041a3-3e39-42ec-8248-4e3d06c2a42a"
        },
        "item": {
          "id": "f585b8fc-fdbb-4ce1-9c52-ea6bf7a3458e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "bfc84543-eebe-42ad-a91e-c4366ed8c22f",
          "status": "Created",
          "code": 201,
          "responseTime": 647,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ddef199-ef0b-405b-8655-069696a893d4",
        "cursor": {
          "ref": "f70d6238-fa34-4ffc-b397-38ffdba0a763",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "4c2c6324-715b-4af2-ae7f-d3b161ffa81f"
        },
        "item": {
          "id": "4ddef199-ef0b-405b-8655-069696a893d4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ea30f11f-0426-4ee8-9692-e233739c0184",
          "status": "Created",
          "code": 201,
          "responseTime": 672,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "50821d1c-d6b4-4cf5-92a0-f17ba88db829",
        "cursor": {
          "ref": "5cd4731e-49c7-4757-94da-dcc5c10d783a",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "1ed2d3b5-ddba-40c6-8169-3f96749e8628"
        },
        "item": {
          "id": "50821d1c-d6b4-4cf5-92a0-f17ba88db829",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e1391e81-5cb4-4c59-b724-94e1ad81adcc",
          "status": "Created",
          "code": 201,
          "responseTime": 629,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "616b7e30-c04c-4855-a7e5-56080e8c9949",
        "cursor": {
          "ref": "fc7f8186-8728-4ab6-b257-a242bd156f79",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a2e2bdbc-e27f-4cdc-abe2-4188afb16eb6"
        },
        "item": {
          "id": "616b7e30-c04c-4855-a7e5-56080e8c9949",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c79fc92d-fddc-4404-a4c4-e6fd78dcc200",
          "status": "Created",
          "code": 201,
          "responseTime": 620,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b78de10-d3d1-4a28-8962-08dec63c0e44",
        "cursor": {
          "ref": "c584b6e7-7863-459f-9fb5-296faf13e1b6",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "601c5130-fe20-4b76-83b9-6bf4fbbf5e03"
        },
        "item": {
          "id": "0b78de10-d3d1-4a28-8962-08dec63c0e44",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "69152ca3-8dae-4a0b-b1ed-7a66c562d85f",
          "status": "Created",
          "code": 201,
          "responseTime": 704,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd95438-5c3e-412c-9695-1f11ac587931",
        "cursor": {
          "ref": "bde71752-8955-49a1-9ca4-bd1e3199c751",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0fa66f86-46a4-478c-8e4f-a71092523a8d"
        },
        "item": {
          "id": "9bd95438-5c3e-412c-9695-1f11ac587931",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "63a0b3cd-0f58-4b17-801a-e7d29119b9e5",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "9bd95438-5c3e-412c-9695-1f11ac587931",
        "cursor": {
          "ref": "bde71752-8955-49a1-9ca4-bd1e3199c751",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0fa66f86-46a4-478c-8e4f-a71092523a8d"
        },
        "item": {
          "id": "9bd95438-5c3e-412c-9695-1f11ac587931",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "63a0b3cd-0f58-4b17-801a-e7d29119b9e5",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "1eae6840-ca2e-47a8-9eea-d1d3dc63b97b",
        "cursor": {
          "ref": "b497b05f-b63e-41f5-9c8b-70c0abbd21b8",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "5468ec48-7d11-40eb-b347-6a9f0b403e7b"
        },
        "item": {
          "id": "1eae6840-ca2e-47a8-9eea-d1d3dc63b97b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "db2755d8-2e5f-4cda-a04a-8da11e5d8436",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "c1e4f9da-2207-48fa-bd0f-813e2cda9c62",
        "cursor": {
          "ref": "c216d9ea-64ab-420e-9943-ff62ef45661a",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "dceb0a52-3bb2-4619-9e00-59b01f205046"
        },
        "item": {
          "id": "c1e4f9da-2207-48fa-bd0f-813e2cda9c62",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "24677ec5-e8e6-48c0-b6e9-3ec585dcc19f",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "3078943b-3065-445a-ab02-1b2d79d2fd2a",
        "cursor": {
          "ref": "740b43b1-737a-434c-93d0-3dae87161794",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "0710a9c8-322d-431a-a2a3-1809b9046000"
        },
        "item": {
          "id": "3078943b-3065-445a-ab02-1b2d79d2fd2a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3d8df3b3-88e1-4741-a5d8-2b12269cced0",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "18883cb6-3dcd-4738-90fd-0d6082fc5aed",
        "cursor": {
          "ref": "ba4ab0e7-791f-4132-b470-b74ea1694867",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a1150470-5c56-4294-a731-e2c565605f35"
        },
        "item": {
          "id": "18883cb6-3dcd-4738-90fd-0d6082fc5aed",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "25241eba-8259-4d72-a3e4-a92626a863ad",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "7cfd78c6-debb-4efc-9d22-3feb2b92b8ac",
        "cursor": {
          "ref": "a4d2cc67-292b-49bc-bd2f-d2cba75d913d",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d71819fd-2bd9-4d59-867d-3748f6f41165"
        },
        "item": {
          "id": "7cfd78c6-debb-4efc-9d22-3feb2b92b8ac",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "06b17038-9dd0-4d65-bd78-c0676ed23471",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "9387767e-e521-4b21-b6df-c3752526912c",
        "cursor": {
          "ref": "cf51b140-9400-4935-be8e-adced48228de",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "621373cd-4193-491b-8ccf-1baacd875f0b"
        },
        "item": {
          "id": "9387767e-e521-4b21-b6df-c3752526912c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3b2e4964-d947-43b2-8cbf-a807bf535e9a",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "1c1ebdf6-1fa6-4bdd-912d-153b59f8ab13",
        "cursor": {
          "ref": "a1c594d9-2baf-4921-bd3a-bb8682ecced7",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "97a37503-72c2-4261-9c4e-f6f2d8086f16"
        },
        "item": {
          "id": "1c1ebdf6-1fa6-4bdd-912d-153b59f8ab13",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "69adeb99-5a75-4cf9-918d-59414dcc6b5a",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "79d5fe77-17da-4f90-92a7-6c3d3d1b1342",
        "cursor": {
          "ref": "be887ab3-ff12-4c2e-bf53-c48c893832be",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "31e1adb8-0582-4370-a91a-7ea9565e9b5d"
        },
        "item": {
          "id": "79d5fe77-17da-4f90-92a7-6c3d3d1b1342",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b694ba78-358f-4692-ae74-95d77fb8a95d",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "f3da03a2-024c-427d-93df-38c9dc43a26b",
        "cursor": {
          "ref": "8e6db375-6d16-4dec-bd5d-2e5dab503d4b",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "73804bc7-903e-45c8-907f-11cfe9977692"
        },
        "item": {
          "id": "f3da03a2-024c-427d-93df-38c9dc43a26b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1f4796fc-6b5b-41f2-a3de-b50e6f2e1dc5",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "c1cfa411-e373-458e-b4a3-b0929367b10c",
        "cursor": {
          "ref": "d5f7006e-acfa-4779-8a3a-eaf9234671c9",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "67786738-f6e4-4a40-a7c8-2ff2dc92e8cc"
        },
        "item": {
          "id": "c1cfa411-e373-458e-b4a3-b0929367b10c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "be426226-9db6-493f-8c7e-f921c358a9e6",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "571a0355-df35-45da-b6e0-bdcfb0c1d0a4",
        "cursor": {
          "ref": "397253df-c5e1-4f90-9768-07bc02bd43c8",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "87e92cca-ae9d-44eb-a7e4-4c6c7e3b2cae"
        },
        "item": {
          "id": "571a0355-df35-45da-b6e0-bdcfb0c1d0a4",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "62996048-434d-4102-a7b1-574c04af8091",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "904284e3-a6b9-45e9-bfcf-6beb79c1ca5e",
        "cursor": {
          "ref": "cbcb5cf8-bc2d-4d41-a833-431d252f24ed",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "61b36973-a608-4b91-afc6-de75c79b8e61"
        },
        "item": {
          "id": "904284e3-a6b9-45e9-bfcf-6beb79c1ca5e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "853b2eef-8865-4b87-97db-f3fd2154acb2",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "7abcad17-e33f-4b8a-8fe0-cf69dac3563d",
        "cursor": {
          "ref": "07bd70ce-d00e-478a-8856-4abeca5cbe12",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "a66fcff6-e774-4a33-a85d-22d042fa01a0"
        },
        "item": {
          "id": "7abcad17-e33f-4b8a-8fe0-cf69dac3563d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6fc1f0f4-cad1-40df-8a9a-3284875689c8",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "c26c9a83-af88-45df-9978-f14089d63fec",
        "cursor": {
          "ref": "9efadf99-5c44-4fe1-a029-ae6ba7360e0e",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "82a654ef-fa5f-4bb4-bcff-9daf0e4d87e9"
        },
        "item": {
          "id": "c26c9a83-af88-45df-9978-f14089d63fec",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4127a5aa-b71a-426d-bbb0-451f943f5b76",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "b2b03381-9e78-4d1f-a083-b7903ad08aeb",
        "cursor": {
          "ref": "065593b6-3360-4412-8038-87d0bb6cece4",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "fe609adf-25e6-4c89-8644-9c7a6b2f6334"
        },
        "item": {
          "id": "b2b03381-9e78-4d1f-a083-b7903ad08aeb",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4307c161-526d-4ade-83d7-16459260f9fd",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "cf6d6023-15ea-4a6f-8eb4-97ac08ac29e2",
        "cursor": {
          "ref": "8bd31ab3-ec72-4b42-909e-95c3aa103aae",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "95710849-01c6-461c-9971-cb4f12164f10"
        },
        "item": {
          "id": "cf6d6023-15ea-4a6f-8eb4-97ac08ac29e2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "7a280603-0d05-4065-9506-969368037930",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "86d74f96-d0f5-4186-8f0f-7d06754917ca",
        "cursor": {
          "ref": "6ba56eab-af42-466d-b97f-3ea9837cd0b7",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "cf3b57c3-c2a6-4e46-bc1b-9b2b4d9ab484"
        },
        "item": {
          "id": "86d74f96-d0f5-4186-8f0f-7d06754917ca",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "fb46e376-9fe0-453a-8fbf-fb3025ba7d13",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "08d9743d-65d4-4f06-8cab-89da79d43ecb",
        "cursor": {
          "ref": "f1bd2b90-9e56-4fde-8250-5595b14e3098",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "32f42a23-2ccd-4065-b3c2-447c44c84187"
        },
        "item": {
          "id": "08d9743d-65d4-4f06-8cab-89da79d43ecb",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4a662a5a-e760-4b8b-a927-7885c43964d4",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "65069120-e7fa-4df4-9be5-6025a3fccf26",
        "cursor": {
          "ref": "7512c1bb-78ca-4608-8cb6-c6725895f053",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "9e9506f1-bce5-48ba-8e24-de215cd46c29"
        },
        "item": {
          "id": "65069120-e7fa-4df4-9be5-6025a3fccf26",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "261c8a46-7121-433e-b896-0239169b7fec",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "9492c0a5-60b1-4054-a0ac-32b4e0d966de",
        "cursor": {
          "ref": "a671f1d2-2050-4ea8-ab77-d754e0df58a6",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "671ca068-73b6-470e-8607-58ee7f071058"
        },
        "item": {
          "id": "9492c0a5-60b1-4054-a0ac-32b4e0d966de",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7502802e-d1c0-427d-bbf9-e5c78e3ade64",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "877b5250-d11c-49dd-8bbe-41ef91230964",
        "cursor": {
          "ref": "79cb35b5-d768-4404-a627-38c116de6644",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "57877d88-cb06-4998-bc13-15930cdf797e"
        },
        "item": {
          "id": "877b5250-d11c-49dd-8bbe-41ef91230964",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "03b9df38-54c9-45e7-add0-281ec8420b07",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "2db927ad-aa6a-4740-8c0d-1bef247e3586",
        "cursor": {
          "ref": "284d6b87-68e9-4628-94cb-be48711723c0",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "cafb6603-c115-4a40-9cdd-9dcff365431c"
        },
        "item": {
          "id": "2db927ad-aa6a-4740-8c0d-1bef247e3586",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "aface77d-23d8-4095-a65a-fc62898be0fe",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "4fecf941-db86-4291-b7eb-ff8650438217",
        "cursor": {
          "ref": "43915666-150c-4b8c-a9bb-ca3f0d8e7cb2",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "3c717be0-d46c-4aa8-a55f-47181cf3b523"
        },
        "item": {
          "id": "4fecf941-db86-4291-b7eb-ff8650438217",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "234322b7-3fe2-4195-8aaf-a41a56e280d1",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "74a6dcc6-6995-494c-b170-b59305784cf0",
        "cursor": {
          "ref": "ddc76ce4-bc1e-4eb7-a45f-d6be056dd9b0",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "3c636ade-a2ec-4863-bcec-b41697b2a7e5"
        },
        "item": {
          "id": "74a6dcc6-6995-494c-b170-b59305784cf0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1ceb3fd1-1d6d-402a-9336-9ac8475b9d2f",
          "status": "OK",
          "code": 200,
          "responseTime": 28,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "52a1fcc9-ecbe-42a0-a89c-0fdf072ad236",
        "cursor": {
          "ref": "8270f868-cdd6-4be9-9323-5f9777eb5924",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b8c022af-74f5-4672-a973-7d44915ea096"
        },
        "item": {
          "id": "52a1fcc9-ecbe-42a0-a89c-0fdf072ad236",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4f11899a-7ac0-49a6-9ffb-01ebc7509560",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "fb903205-fcc7-4f63-ba80-c7965154d343",
        "cursor": {
          "ref": "ef14b321-d02a-458a-a95c-e4c8a0c37571",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "12c75dcf-8275-4b35-9c3c-2e49f30589fb"
        },
        "item": {
          "id": "fb903205-fcc7-4f63-ba80-c7965154d343",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d6fc2648-94e4-4ed2-a5b1-6ca638b714c2",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "ee8361ab-5015-428b-8dd0-b8e5b44c6b39",
        "cursor": {
          "ref": "e40c0c46-4a7c-46ba-9f71-c1504d703a0a",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c2d7ce8e-0f3f-4c65-801c-8e0f810858ba"
        },
        "item": {
          "id": "ee8361ab-5015-428b-8dd0-b8e5b44c6b39",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a2904abc-6a8c-409d-b3c2-4fdace48a839",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "192f133f-f3ee-41c7-bfca-6d99122dce27",
        "cursor": {
          "ref": "0ec50fa6-a87c-467a-8d0d-ab17e4a9d956",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "2c2aee41-0602-4a9e-bbb8-9aae87e848a5"
        },
        "item": {
          "id": "192f133f-f3ee-41c7-bfca-6d99122dce27",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c279f475-9656-45f3-99fb-59bb31a29d95",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "9ae88d9e-0d79-4f3c-9e25-9b78a520bd25",
        "cursor": {
          "ref": "d6612fe5-e1a3-4f7e-b038-49141a9966fc",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "db9dec07-6df0-4593-a043-b4349244be51"
        },
        "item": {
          "id": "9ae88d9e-0d79-4f3c-9e25-9b78a520bd25",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c1810c6b-b716-4f02-b3ee-59781105528f",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "0a9b5197-4781-4a96-82c0-3ef8049486af",
        "cursor": {
          "ref": "150a18a8-7d9a-47a2-b348-562bf5a08c1e",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a9b6a205-07d5-4511-aace-fd357946fa6e"
        },
        "item": {
          "id": "0a9b5197-4781-4a96-82c0-3ef8049486af",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7f1f4adf-35f4-4851-9fba-f43b2ecca6b6",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "297405ad-3a48-4f53-8315-86d0b539578d",
        "cursor": {
          "ref": "3fe82339-7831-4cf3-b2cc-5be9735e862c",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "866f1d07-1f14-4c22-a898-a85a87c29e58"
        },
        "item": {
          "id": "297405ad-3a48-4f53-8315-86d0b539578d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "2257b7a6-4859-46b3-b357-3a67bbcbbff7",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "ff8f9287-0f90-4769-a3d7-0f9f2c619620",
        "cursor": {
          "ref": "92cee1d0-c97c-4855-8286-5a7f0f6f4a42",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "93284b0c-1459-4ed6-ad1c-f78e6d6967cb"
        },
        "item": {
          "id": "ff8f9287-0f90-4769-a3d7-0f9f2c619620",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b0fe7a19-70ce-4819-b080-aa40b01a1319",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be547cdc-c43a-4986-b21f-cc9fe61bbc13",
        "cursor": {
          "ref": "c5845e71-e5af-48ed-a7ec-50c78dd396c1",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "06b85b0b-6876-4a62-8437-38940926609e"
        },
        "item": {
          "id": "be547cdc-c43a-4986-b21f-cc9fe61bbc13",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "e3961e10-cbbf-4cc7-bb2a-27d3c9b1f05a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 29,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c06d0f5c-8337-42aa-b0fd-d13a1e13dfb3",
        "cursor": {
          "ref": "f1c3c151-84d8-43e9-a7c6-1b3eb1a296ea",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "78e07ad8-3cad-4ca5-8b60-a132878664a6"
        },
        "item": {
          "id": "c06d0f5c-8337-42aa-b0fd-d13a1e13dfb3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "28ea97ff-57ed-4694-b66b-721c623c51f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c06d0f5c-8337-42aa-b0fd-d13a1e13dfb3",
        "cursor": {
          "ref": "f1c3c151-84d8-43e9-a7c6-1b3eb1a296ea",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "78e07ad8-3cad-4ca5-8b60-a132878664a6"
        },
        "item": {
          "id": "c06d0f5c-8337-42aa-b0fd-d13a1e13dfb3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "28ea97ff-57ed-4694-b66b-721c623c51f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45f78795-1f68-40c0-b548-525103628330",
        "cursor": {
          "ref": "0b21c210-fede-4caa-8466-da392853c1a1",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "48617b88-cd47-41d0-aa8f-40d1f8b7ab74"
        },
        "item": {
          "id": "45f78795-1f68-40c0-b548-525103628330",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "56463ae3-57f3-4604-a29b-9e83538e3971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb13ebe4-469e-4b9a-a8b0-45ab0e03f430",
        "cursor": {
          "ref": "12664673-81da-467d-8b63-9344a9780e9b",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a5c714d9-d670-4a9d-ba89-d6c215586c0f"
        },
        "item": {
          "id": "bb13ebe4-469e-4b9a-a8b0-45ab0e03f430",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b46caad4-dc1a-47d9-998b-a0320232c8f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "959ddff7-833c-482e-8b36-f3ed6f7c6924",
        "cursor": {
          "ref": "e40a1efc-51f9-476b-a6e7-bc6c298bf6f7",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "9ce3ca41-27fb-490c-bbd4-2d8505340dc4"
        },
        "item": {
          "id": "959ddff7-833c-482e-8b36-f3ed6f7c6924",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "66a90858-3eaa-4f01-b0ee-75076bcead90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f803816-d9eb-447e-ada0-7c079bc50c1d",
        "cursor": {
          "ref": "39619085-bc49-4a60-b02c-7f0af7b45f89",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e5ec63de-9fdc-4d36-a62b-87efe9581e2b"
        },
        "item": {
          "id": "1f803816-d9eb-447e-ada0-7c079bc50c1d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5b3fcbe6-5a0a-4e28-a9d9-e8c7aac7ad47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf9b9e9-bae7-4266-af11-3d14d3093da4",
        "cursor": {
          "ref": "e6dc7f70-9fa4-4168-8687-5613fdb6f776",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e3e2bbea-1f45-4a97-a70b-ff7f02fc5715"
        },
        "item": {
          "id": "caf9b9e9-bae7-4266-af11-3d14d3093da4",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "01f336ba-ac7d-496b-871b-b3d1727ce18a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd1518f9-3096-4279-a33a-47f31edbba64",
        "cursor": {
          "ref": "b4eb7ad3-5585-4dc2-a0d3-437eb65b022b",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d78cc9a4-9e28-4898-bcc7-dc9a9ad2da3b"
        },
        "item": {
          "id": "dd1518f9-3096-4279-a33a-47f31edbba64",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "85bfe7a3-8408-43cc-a356-b73a1708aa5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15899c31-973b-4b5c-b524-b5564786527d",
        "cursor": {
          "ref": "bcacce1b-d111-4534-b1b4-24e5fdf64509",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "af8b1ef0-d4fc-4243-ab8b-9873cc284c99"
        },
        "item": {
          "id": "15899c31-973b-4b5c-b524-b5564786527d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "7dc72b4b-4329-4f5d-b603-5375013add6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a577118-4b23-493b-b1c4-86ae232c89ab",
        "cursor": {
          "ref": "a684eb49-8e72-44b5-91fe-dabb02886f5d",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "18ebdc26-7b11-4a0b-a796-4adcb2c99f00"
        },
        "item": {
          "id": "1a577118-4b23-493b-b1c4-86ae232c89ab",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6b7d5b39-2380-4f50-972a-c2c1ca7d26f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bc185c9-e7aa-4ac1-a6ae-095a96cc1dc4",
        "cursor": {
          "ref": "718a1a6d-7fa4-4eaf-ba3d-5eaad9e4b242",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "74be8016-04e8-4deb-8cdf-831ad1a5ce2c"
        },
        "item": {
          "id": "0bc185c9-e7aa-4ac1-a6ae-095a96cc1dc4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d8ab721c-b78b-4889-9727-db937460b3fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14655135-3289-4ab8-8dbe-ae6138a51675",
        "cursor": {
          "ref": "e7370653-5563-412c-8602-38592a06ab0f",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "9413229e-7f95-46f5-94f7-358407ceea2a"
        },
        "item": {
          "id": "14655135-3289-4ab8-8dbe-ae6138a51675",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f36864ec-4159-4177-a869-a9ec836bc4f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50d3331d-6413-4165-ad81-52cb79ef0d79",
        "cursor": {
          "ref": "4bb6247c-7d88-418b-8bee-4d0f1f20e88f",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f880d558-e6be-42a0-a32d-11dcecebc21c"
        },
        "item": {
          "id": "50d3331d-6413-4165-ad81-52cb79ef0d79",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b3d906a4-bc90-4f35-bc09-6109607c5707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc4d0e1-7541-40f4-99c7-be487c160511",
        "cursor": {
          "ref": "45c547a2-8f29-4875-9999-9edc7d261d66",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "69fdcebd-64b1-451c-bf05-32e05493edeb"
        },
        "item": {
          "id": "5dc4d0e1-7541-40f4-99c7-be487c160511",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2508a1b4-6481-4f66-8be0-a0861f759977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ca6f61-dd7b-4ccd-aba8-db55024e2a27",
        "cursor": {
          "ref": "8a39daba-e902-41dc-9123-ce24e2ce3d10",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "98271fa8-1d1a-4103-87ae-1a4923e94b51"
        },
        "item": {
          "id": "65ca6f61-dd7b-4ccd-aba8-db55024e2a27",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b78548b9-1ef8-4114-b604-1b71f61f5a2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d8b135-0a46-42f8-aa39-c02a3e97333a",
        "cursor": {
          "ref": "8d51d947-6b42-48a4-a9d3-0aea71429c80",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a52c02a9-60f5-4eaf-a54c-76c22e328a5c"
        },
        "item": {
          "id": "c7d8b135-0a46-42f8-aa39-c02a3e97333a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "09290448-09f8-425d-83e2-26df0daf2d19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0861b35-e4f0-43b3-a314-65e1f01ea758",
        "cursor": {
          "ref": "1f31add4-95ef-4419-859c-a25e60219b6c",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f42f0c9e-67f2-4947-923f-f52eeafe8133"
        },
        "item": {
          "id": "d0861b35-e4f0-43b3-a314-65e1f01ea758",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "bf5f9ad3-3a49-44f4-8051-bc4093471109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54816236-b6ba-45f3-bf32-3039d327afca",
        "cursor": {
          "ref": "48096477-cd60-433c-9b69-bfb239216b9b",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5d1c56b0-9a8c-4d34-a66f-ba9a0a20df2f"
        },
        "item": {
          "id": "54816236-b6ba-45f3-bf32-3039d327afca",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "894a3317-1a69-4471-91e4-f5cf231f6ec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6323bcc2-a4a4-40b1-a21c-c15fc3994ed7",
        "cursor": {
          "ref": "1f1b117d-0751-4a43-a592-2b7524a86722",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "05d0f355-d08c-4478-8243-e816cf534acc"
        },
        "item": {
          "id": "6323bcc2-a4a4-40b1-a21c-c15fc3994ed7",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "fb1cb62e-fdb7-48b5-af8e-2de786be750d",
          "status": "OK",
          "code": 200,
          "responseTime": 592,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "898638f2-6315-478f-881e-5d2015ed2480",
        "cursor": {
          "ref": "33b9614a-08ed-489a-b7ff-c5b87ba80776",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1f8fbbd3-bce1-45b5-ae82-d7cabae08563"
        },
        "item": {
          "id": "898638f2-6315-478f-881e-5d2015ed2480",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "e85d784f-4206-4074-9430-dc86dfc230b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 283,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e10976a-e1a7-4ab4-ac54-106769d38057",
        "cursor": {
          "ref": "db35d1dc-c79b-4aaf-bc03-5df62d0bdfe1",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3f9fff07-ca3d-4871-8528-4b8b99a75613"
        },
        "item": {
          "id": "5e10976a-e1a7-4ab4-ac54-106769d38057",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "05f6d63f-52f5-4892-bed2-f34ff12c79bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42d09a68-f1ca-42d1-a834-6b57b6da5917",
        "cursor": {
          "ref": "ac85db07-5608-4c34-aa92-daef626213d3",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "7ad20b18-df70-4a14-ae58-708cefd1a558"
        },
        "item": {
          "id": "42d09a68-f1ca-42d1-a834-6b57b6da5917",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9ddbe611-ca78-4fc4-8923-4a266d03ab4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 278,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f45632f5-c483-4eb3-9a26-78bce9d2e11d",
        "cursor": {
          "ref": "6404251a-8edd-4057-a928-48632b064f0e",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e0cdbd02-73c0-4b9f-a452-85b7b668182e"
        },
        "item": {
          "id": "f45632f5-c483-4eb3-9a26-78bce9d2e11d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "03fbb1d6-5f22-492c-b4c9-63bf7f830575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90e8513e-8545-4950-9cd1-1e0750566caa",
        "cursor": {
          "ref": "da23b26e-4311-402e-9525-80dab4e2bf35",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b8cefade-8715-49c1-ad43-5f614182ba23"
        },
        "item": {
          "id": "90e8513e-8545-4950-9cd1-1e0750566caa",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0d1f095b-c4cc-4104-b6db-6087f6715eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d969c21-80ec-4772-b46f-30e7c1aa7ec8",
        "cursor": {
          "ref": "07a0af20-df9d-416e-a556-cec39e7b776f",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "bf621bd1-f0e8-459c-a733-06fd6368ce9e"
        },
        "item": {
          "id": "6d969c21-80ec-4772-b46f-30e7c1aa7ec8",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "53d91bbe-0e7a-4d4a-a193-06d048d168f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 285,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c6afdb7-6a2d-42b0-98ce-ecd5fea08056",
        "cursor": {
          "ref": "6aa07f1f-275c-4376-843f-8b9980b9f2a8",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4cd39495-c7cb-46f9-aa3e-b7fbe7d8b330"
        },
        "item": {
          "id": "3c6afdb7-6a2d-42b0-98ce-ecd5fea08056",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "3e7a6afc-d648-4dc4-88a0-b5228c99a07a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd410561-5e8e-452a-b058-f3d9b6afca63",
        "cursor": {
          "ref": "c70a6c0d-3d08-4d45-8b05-13a3df23121b",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "46420190-1359-47fd-ac1b-a3dc71b0f5a1"
        },
        "item": {
          "id": "cd410561-5e8e-452a-b058-f3d9b6afca63",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "257b9aa1-027e-483f-9385-6a0b46b7079a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dc72ad8-2d08-49c0-bad3-3f6edbe70c2e",
        "cursor": {
          "ref": "6c69570e-b538-4c69-a8b6-0483213b205a",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2dcf4ee0-eef4-47bf-bf8b-9c17f6855d38"
        },
        "item": {
          "id": "2dc72ad8-2d08-49c0-bad3-3f6edbe70c2e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a5dec669-e6e0-4a38-a743-16e9119cf116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "150d29fe-1c71-4296-9c62-59cca731c1bf",
        "cursor": {
          "ref": "bc3ada53-0471-4b9c-b03d-3d89fae1e0f2",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "8b7e1c87-ee8c-4590-9c01-5c68ad266e60"
        },
        "item": {
          "id": "150d29fe-1c71-4296-9c62-59cca731c1bf",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f3a13b93-237e-450a-b3c5-44634865defa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "586821c8-7f07-40bd-b8b1-46d8fa15ba17",
        "cursor": {
          "ref": "2b51fcf8-47fc-4f11-8187-f05b2bfce16c",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4f36300e-f927-4d8f-86e8-f792c31368ad"
        },
        "item": {
          "id": "586821c8-7f07-40bd-b8b1-46d8fa15ba17",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b3298c97-45ee-410b-91ea-410ac57fc472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c21d4afe-efe1-4362-8743-b8a1aea36a42",
        "cursor": {
          "ref": "ab3377ba-cf72-458f-9004-27ea91b854ed",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "8c42490a-cd8f-4402-8cb2-5208e60a5404"
        },
        "item": {
          "id": "c21d4afe-efe1-4362-8743-b8a1aea36a42",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "7cde02ac-a277-421f-a627-da265ba64ecd",
          "status": "OK",
          "code": 200,
          "responseTime": 227,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "5e7b0804-662f-4820-aa0d-966652a4890e",
        "cursor": {
          "ref": "c66745ab-593e-48ba-afc4-e2eb34fe2926",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c9b5b32f-9cd9-4d6e-bb00-4686c89720ec"
        },
        "item": {
          "id": "5e7b0804-662f-4820-aa0d-966652a4890e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "bcbf082f-568a-4978-a30e-d66f0792e1dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1958cd5b-6f8e-4bca-9713-a215f85e5ef2",
        "cursor": {
          "ref": "96ac8267-09f6-4788-950d-09cdd6f7cb0c",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "2d78f661-f52a-4bd6-ad0d-1110bc3cb940"
        },
        "item": {
          "id": "1958cd5b-6f8e-4bca-9713-a215f85e5ef2",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "41cc6029-8043-4120-b207-af729a4e7e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e4675a7-3801-4f50-adf3-fe4c0e21d8f6",
        "cursor": {
          "ref": "e69ecf07-e298-4143-aa05-b2829bb7c15c",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4d232f23-ec05-46cd-bc52-3c9333a70fe6"
        },
        "item": {
          "id": "2e4675a7-3801-4f50-adf3-fe4c0e21d8f6",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "2bfe94f0-ac3b-4ad2-8ed3-96fe99d5950f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5cc4ca4-c341-40fd-a31e-897003c1f8cb",
        "cursor": {
          "ref": "ed867888-e56c-4766-96ea-96cbff74e385",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "dff9ae52-0b35-4640-a442-e9b0dcd3878b"
        },
        "item": {
          "id": "e5cc4ca4-c341-40fd-a31e-897003c1f8cb",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "53b29d30-2249-43fa-a011-c0b299af476b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a735edb4-5e02-4fc1-94fd-b57b5e18cb00",
        "cursor": {
          "ref": "93587b56-112c-47c4-9b74-683a52e60811",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "dc1bccb4-68ee-488a-a329-ba23fadc986f"
        },
        "item": {
          "id": "a735edb4-5e02-4fc1-94fd-b57b5e18cb00",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0d95286c-09be-42fe-9b0d-f177ffab013f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36407d0e-8a3e-4796-8b25-45e1125c9bc3",
        "cursor": {
          "ref": "b7e9c7ac-0a02-423c-8843-9103aac4c9c9",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "efc18b60-cd2e-44e5-a95b-b72c29ca1dac"
        },
        "item": {
          "id": "36407d0e-8a3e-4796-8b25-45e1125c9bc3",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a51dfd31-50dc-402c-85f3-09d17cc08c71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 263,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "824fd2a0-a992-43ab-b5e7-6161cd827dc7",
        "cursor": {
          "ref": "bdc39c36-9ce9-49a3-ac71-937f239600b3",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "bbee7bda-c8de-4435-89f0-e11478937ad0"
        },
        "item": {
          "id": "824fd2a0-a992-43ab-b5e7-6161cd827dc7",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "acdf83a3-d13d-46cd-977b-3ece7de1e8e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 272,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "708d3c34-25f9-4d26-9059-49bc09854eb3",
        "cursor": {
          "ref": "f5835cdb-e733-490d-bd08-8faf8f168ec8",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "1605b1a8-1f13-4a92-841a-2ce4a0a130f8"
        },
        "item": {
          "id": "708d3c34-25f9-4d26-9059-49bc09854eb3",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "2f4fec71-971b-4a41-8752-795976d6a1f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f1b7f92-bbce-454f-8868-219e8179c293",
        "cursor": {
          "ref": "14090ea7-e558-4eeb-a037-965bc354dde1",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9dd3b529-c581-4ba4-9ff7-81049de90a1e"
        },
        "item": {
          "id": "1f1b7f92-bbce-454f-8868-219e8179c293",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "2cb6f1ef-4f0b-4912-b661-174c3294709f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eed5fc0-3218-4fd8-9444-f7314b8a5a6e",
        "cursor": {
          "ref": "9e9d0129-7402-4af4-91cf-752dbbbb3329",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "27b28bfc-a649-4713-8933-15a120fd5760"
        },
        "item": {
          "id": "3eed5fc0-3218-4fd8-9444-f7314b8a5a6e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8d518fb0-35af-4b3f-9067-3c6ecc82e8a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 606,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c795601a-7d61-42c3-a6b6-5edb0e4c0447",
        "cursor": {
          "ref": "d414c99e-4011-4a9a-aaab-1c26d1e63579",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "5bae5e92-10cf-41f1-aed3-3f3ca875c762"
        },
        "item": {
          "id": "c795601a-7d61-42c3-a6b6-5edb0e4c0447",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "aac4180f-6490-425f-8421-0ef53aafb65d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f676e25d-721b-42c2-aa22-790034ae0593",
        "cursor": {
          "ref": "e700998e-8a48-49fa-95f4-e93ce21b7ed9",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "12597284-4d60-45cc-9f7c-b3a398007884"
        },
        "item": {
          "id": "f676e25d-721b-42c2-aa22-790034ae0593",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f646dbc5-5baa-447b-afbf-58591d4e1cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 256,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0495817f-8f83-4039-8cc2-0907eaa381c7",
        "cursor": {
          "ref": "a60cac68-dceb-40c1-8ad4-6f049e66cdf1",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3c636049-e350-4445-afe9-f1c75137d985"
        },
        "item": {
          "id": "0495817f-8f83-4039-8cc2-0907eaa381c7",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "67f2df99-a3c9-4877-bb97-d3886081d1be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 272,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ec1543-c6d4-433d-9aeb-d52c54f5a2c0",
        "cursor": {
          "ref": "11da4baf-98ed-4293-ad40-817dffc6ae77",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0518bbaa-392a-4cb4-a1f3-8fa7de376d52"
        },
        "item": {
          "id": "19ec1543-c6d4-433d-9aeb-d52c54f5a2c0",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d4347aed-68b5-47d2-8b15-13266de019e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 277,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "034504d6-8404-40e0-935e-17c52d13db46",
        "cursor": {
          "ref": "ce79fb39-d401-4132-b5c9-f0fe0a34a84d",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "236a1888-f7af-42b8-b207-f6f71f8f208e"
        },
        "item": {
          "id": "034504d6-8404-40e0-935e-17c52d13db46",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0cd4b0cd-3de3-49e3-8660-cd8af114ecc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 272,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc693cda-12fd-438b-bc14-010ec37e92e4",
        "cursor": {
          "ref": "71db6b16-6c93-4f60-8220-b9383f306734",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "6f9e3573-8be4-481f-a2c2-13913327dd2b"
        },
        "item": {
          "id": "dc693cda-12fd-438b-bc14-010ec37e92e4",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "02d3cc84-c66f-450b-aa53-c72b561c9ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b789a9c5-f056-4d7a-96b6-b46c0f7d74b8",
        "cursor": {
          "ref": "11903821-7131-4d86-a52c-e1bf4c95d1db",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "6e443f1a-d68d-4e23-96ec-b6d0487ed3ca"
        },
        "item": {
          "id": "b789a9c5-f056-4d7a-96b6-b46c0f7d74b8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "7c95fd2d-9e16-4367-9f62-0bbfad123488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 285,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00b759ea-4fc5-4f61-a0d3-14e031c47784",
        "cursor": {
          "ref": "8023036a-8044-4564-8dd7-8d55a4f27ba0",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f49daac8-4c70-46c5-910f-0f4831f58343"
        },
        "item": {
          "id": "00b759ea-4fc5-4f61-a0d3-14e031c47784",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "59478ca3-3b62-46f4-9550-81a33b8c2118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "861ddb94-61f1-43d6-9fd5-9ffaa93904c1",
        "cursor": {
          "ref": "ddae83b2-b524-44de-8044-266ceea431f8",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6339659e-d543-4bf4-a473-8852a4309402"
        },
        "item": {
          "id": "861ddb94-61f1-43d6-9fd5-9ffaa93904c1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0d058947-1aed-4875-a661-1d54848cf61c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 303,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37eae999-4ecd-4e9a-aaf4-30cfff998f54",
        "cursor": {
          "ref": "feea57de-5619-401a-beb2-7b0a7b6478aa",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b0c42f56-373f-4baa-8689-c4aae364891d"
        },
        "item": {
          "id": "37eae999-4ecd-4e9a-aaf4-30cfff998f54",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "680bc219-6984-4076-89c9-c2b495a5032a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 304,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d85bfddf-9cfe-49ba-b20f-60a5af261c75",
        "cursor": {
          "ref": "af49893d-3fef-46a7-a708-ae752e3ba9a0",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "516b194c-c8d1-4f46-a059-4ba5adab7884"
        },
        "item": {
          "id": "d85bfddf-9cfe-49ba-b20f-60a5af261c75",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a4370cfa-170c-4d21-af2e-d41680e7b94d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8687847d-6a63-48f6-82ff-300c5c4d530b",
        "cursor": {
          "ref": "af75be92-ddfc-4005-a244-e99bc99f3a99",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "544175bc-a0ec-4189-9828-457d60455bbe"
        },
        "item": {
          "id": "8687847d-6a63-48f6-82ff-300c5c4d530b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "fb0b0370-4b47-4cde-8594-a345915e5b33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f295b3b2-6f29-45e3-9706-b0881a8ce2e8",
        "cursor": {
          "ref": "04d7b2b1-92ad-478e-bd28-bd7e03bbc757",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6b0f8074-093a-4ef3-b29e-d3547e902798"
        },
        "item": {
          "id": "f295b3b2-6f29-45e3-9706-b0881a8ce2e8",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "55e50b4c-1fb4-4de7-b036-b695441546f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f80747-9565-4a6d-9559-209d51419c04",
        "cursor": {
          "ref": "c4d2c227-e2f6-4e68-a0b7-5919bb7e986a",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ec6ec7bf-2f18-4336-9995-71d16017dd75"
        },
        "item": {
          "id": "39f80747-9565-4a6d-9559-209d51419c04",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b54796d6-4262-488f-b5f7-7755a8337efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d0f1153-abe3-44a2-a819-39e5f934218b",
        "cursor": {
          "ref": "9be4b7cf-294c-41bf-b8e3-2b347fd2ddd0",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f7373fcf-807a-4347-894a-94ace8a08fd4"
        },
        "item": {
          "id": "0d0f1153-abe3-44a2-a819-39e5f934218b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3d69f6fd-a426-481f-9a2e-d78c4514bf2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4bb9b20-a95c-4e37-8342-310aac532387",
        "cursor": {
          "ref": "a5dac124-a8ad-47e0-929e-6aadd79135dd",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "93f94b56-1e64-4161-a3e5-582306f8656c"
        },
        "item": {
          "id": "b4bb9b20-a95c-4e37-8342-310aac532387",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e9af683f-69c8-465b-b240-e71dec2d2b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c14f839-e1ad-4023-9574-2b553d613eab",
        "cursor": {
          "ref": "ade1acc6-33b2-429e-b345-e3fdd1895b45",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "33a836bf-810d-4ec0-9478-b3aacbc04f4a"
        },
        "item": {
          "id": "6c14f839-e1ad-4023-9574-2b553d613eab",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "60296c57-b381-4f4c-b85b-e25e329558ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ee9b676-8e00-43fe-9b08-38d16bbaa06e",
        "cursor": {
          "ref": "15a6057c-7b0f-4b33-939e-5906070988c4",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "299106cb-8a9d-4039-bf62-fbad6b16a38c"
        },
        "item": {
          "id": "0ee9b676-8e00-43fe-9b08-38d16bbaa06e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c9ab6255-661b-460d-be4b-135aabca34ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 262,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f826870-a2ee-49b4-8b91-55b48d393278",
        "cursor": {
          "ref": "ae25c4a1-8527-4661-bfa4-4447f21e78c0",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "13559bbc-ae33-42fe-8cd4-1c95b9559ec6"
        },
        "item": {
          "id": "1f826870-a2ee-49b4-8b91-55b48d393278",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "66d506a5-55f2-40a5-a473-ced4bca7fd1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5694817-704e-4709-a39e-ff717fc2015b",
        "cursor": {
          "ref": "d8e1e03b-860a-458a-af5c-66570c223be7",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "69a23b75-70d3-4779-b9d2-56c81230bc5e"
        },
        "item": {
          "id": "c5694817-704e-4709-a39e-ff717fc2015b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "fe7a330b-1148-4d53-b9a6-8ceb1783b0b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ae6da7-b463-4b9f-a942-16ea7afc2f62",
        "cursor": {
          "ref": "ea85518d-e7e2-43f9-88f5-2b3002bb0bf0",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "5ebaf3a2-6508-4d8d-9129-da512fdcff47"
        },
        "item": {
          "id": "a4ae6da7-b463-4b9f-a942-16ea7afc2f62",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c302dffd-3cf7-43c4-8800-b8214b539e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5779b107-795f-4d4d-bfff-9b530c6ee9b0",
        "cursor": {
          "ref": "2f46f532-2098-4360-bb46-fd13a8defef1",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9aa388c7-646b-49de-928b-286ba7a21995"
        },
        "item": {
          "id": "5779b107-795f-4d4d-bfff-9b530c6ee9b0",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "fabc0456-c5a9-4f72-a3e1-8d93fb477f91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17f368da-0542-4af9-8712-900dec95186e",
        "cursor": {
          "ref": "d6cf4cbc-bd6f-45a6-beee-b79bc067cb49",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "749dff5d-603e-44fd-84fe-a763eff82373"
        },
        "item": {
          "id": "17f368da-0542-4af9-8712-900dec95186e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ac682421-665f-4065-84f6-3e18878b3faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 273,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e1f47e4-1240-4618-8f6b-8bd2398893b6",
        "cursor": {
          "ref": "849f1700-eeb8-462f-9421-230e861fed2d",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "bd662b97-75ed-4b3a-b3b8-b6ab25549c84"
        },
        "item": {
          "id": "7e1f47e4-1240-4618-8f6b-8bd2398893b6",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "11730c18-8c7b-43a5-b665-a92d013757ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "396a968d-baea-4ce4-ad8b-3134879f65c5",
        "cursor": {
          "ref": "7cc23c43-1ab7-40d5-b3ec-e86c00e1e863",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "dfcf071d-9f4a-48ca-8aef-a1cc2afbd0bc"
        },
        "item": {
          "id": "396a968d-baea-4ce4-ad8b-3134879f65c5",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "07e546d2-4502-407f-b4c3-5bd8217af9b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5271d33f-2b73-4cf2-ad6e-b6c1ee80dc3f",
        "cursor": {
          "ref": "8cd5f9a4-29d5-4335-ab39-8fa23a033d6b",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "61aa3eed-ff96-4d34-a361-275c60869b33"
        },
        "item": {
          "id": "5271d33f-2b73-4cf2-ad6e-b6c1ee80dc3f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d571723d-7cf2-46fc-93c9-259a92e4b777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef99462-0d7e-4c89-b0f5-7f1024df5272",
        "cursor": {
          "ref": "1d726f6f-b973-4878-ae1b-f2070a860def",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "1d07135e-9667-4e16-af1c-68061e1a0c74"
        },
        "item": {
          "id": "9ef99462-0d7e-4c89-b0f5-7f1024df5272",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f6232ffd-192f-4853-a5ac-80e324d0b3ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c7a835a-37bb-45b5-b739-cbacbced705e",
        "cursor": {
          "ref": "edab709a-284c-437a-9ad2-cd951995e3dd",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8c534e5b-5845-4e53-9f9e-ef45415e03d6"
        },
        "item": {
          "id": "2c7a835a-37bb-45b5-b739-cbacbced705e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0563e870-3f4a-4884-a07d-7cac41b5cc3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "043eaeeb-70e0-4dfa-9fc5-aa7240f34d7e",
        "cursor": {
          "ref": "19dac516-ba44-4d51-90ee-d1207f0c0b0c",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "34a3fe51-39bd-4378-a555-b30685fcd59b"
        },
        "item": {
          "id": "043eaeeb-70e0-4dfa-9fc5-aa7240f34d7e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b35e0028-c395-411c-9f56-9da8bb28502d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8c7de8-5530-4ae9-9aa6-a5efbe4588b9",
        "cursor": {
          "ref": "76bca247-1bf3-44ab-ab66-6d215a56c9b8",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6f66bcd7-55a9-4d2e-9fae-5e51b9cc4afc"
        },
        "item": {
          "id": "4e8c7de8-5530-4ae9-9aa6-a5efbe4588b9",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "304fc084-3ef8-498f-9832-64578da19ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68fd209-723f-4d32-a44d-b6592f101ddd",
        "cursor": {
          "ref": "290ba0f7-7b6d-4ace-b036-ad150c0ddc4d",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "362a9460-2f4e-43f1-b525-3c97cb2fc43c"
        },
        "item": {
          "id": "f68fd209-723f-4d32-a44d-b6592f101ddd",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ff569349-6179-4792-a81b-f87665202945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5907e4-59e5-4b96-8be2-7f1a6530c743",
        "cursor": {
          "ref": "8e482c07-18c5-4d4d-9805-9b83652192da",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "77252f4a-0794-4b8a-a2f9-0b9cad1f653b"
        },
        "item": {
          "id": "fb5907e4-59e5-4b96-8be2-7f1a6530c743",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "216c469c-5b09-4d0c-ba36-8aade3a8c9c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a22fc7e0-7314-45f0-85e1-961ba936d2ea",
        "cursor": {
          "ref": "1ce5b559-f8b9-40a1-93bd-4de3551fd8fe",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "1ec72f3a-f9f9-4900-93d4-0b40f06b5bfc"
        },
        "item": {
          "id": "a22fc7e0-7314-45f0-85e1-961ba936d2ea",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7b7eface-fef7-4d36-bd0a-a96e84149810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "999fac1f-3e23-4571-b2e8-ae7dac8e4cf6",
        "cursor": {
          "ref": "9560d569-22f2-4c49-ad7d-9caa0919e4d3",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "35cabfda-a7da-44ad-bac9-195316743845"
        },
        "item": {
          "id": "999fac1f-3e23-4571-b2e8-ae7dac8e4cf6",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "77ef9154-1cd7-4d42-90d8-00536e516381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e04b43-db6f-4be7-a929-4e907070645f",
        "cursor": {
          "ref": "d9a9332a-0c76-4468-aca7-6cf65ebcbfeb",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "4dd20e8b-6c45-4471-99fa-0eff08c0ac10"
        },
        "item": {
          "id": "f7e04b43-db6f-4be7-a929-4e907070645f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "56e996cd-a4f9-4977-a240-bdaddf135edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1060136-874b-4755-8437-a4a05e41f2e0",
        "cursor": {
          "ref": "95f6eff6-f0e3-44c8-951e-20b7e9590cd3",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "da6cc89f-18c9-45e7-882e-206894c19ebf"
        },
        "item": {
          "id": "a1060136-874b-4755-8437-a4a05e41f2e0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "36a60c41-8cf4-45ce-8f21-4790c8b28276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f12da247-a3a6-43f0-826a-6561d64f9e88",
        "cursor": {
          "ref": "bfc45d20-f52a-4c70-aa07-32c6659d8582",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1f244a6c-2f54-44c0-aea6-10c4ad0952d0"
        },
        "item": {
          "id": "f12da247-a3a6-43f0-826a-6561d64f9e88",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "54e9f3b3-bcc6-428d-a702-f7bfbd730572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e9b1249-cb5b-4e44-8aff-63f940f35a4f",
        "cursor": {
          "ref": "e8537e86-a63e-4143-98ea-33205ae7354b",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d9b4e3be-ab94-40c4-a23e-7427330100a1"
        },
        "item": {
          "id": "9e9b1249-cb5b-4e44-8aff-63f940f35a4f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b972cca1-bc69-455c-9adf-66a8d9bc59dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26de7857-137f-4b9a-82dc-640e6f572b83",
        "cursor": {
          "ref": "8f3cef1f-e47f-4475-9e2b-67f29066435b",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "00c4dc56-1759-419a-840c-21123562305c"
        },
        "item": {
          "id": "26de7857-137f-4b9a-82dc-640e6f572b83",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "07e98f61-1721-44ad-abc7-841968233091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "304bab8a-bd2e-4ff0-90f8-f50cdfd75325",
        "cursor": {
          "ref": "0583adf6-65dd-4771-a2f5-54a8b2e0b176",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0d230941-78b7-438a-8197-7c5ad4560ff7"
        },
        "item": {
          "id": "304bab8a-bd2e-4ff0-90f8-f50cdfd75325",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c920e6a4-9106-4aec-b2fd-010b6c4af7fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09fed833-f633-48bc-9abb-1456a20081c6",
        "cursor": {
          "ref": "22f2d20c-a604-45e2-99ca-0545234fc70e",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8ce72711-bd49-4d8e-88ad-72ac136e3745"
        },
        "item": {
          "id": "09fed833-f633-48bc-9abb-1456a20081c6",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "10e5d038-0cd0-42e4-9e2d-24b9b2b9fd2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67574265-c4e0-4202-aa8c-6045553b95d9",
        "cursor": {
          "ref": "7c8b8f1f-62cf-40a8-9847-b644972c841d",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "de54b34e-034f-4148-8982-fc027d882e61"
        },
        "item": {
          "id": "67574265-c4e0-4202-aa8c-6045553b95d9",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1d356d41-0abb-4caa-b210-55cdb401889e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "badfd587-5b51-4546-9d23-8c51a558b410",
        "cursor": {
          "ref": "76dc82be-0c2d-4943-9ec8-f4063419210f",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "64dcbb17-1a83-454e-9017-a13e0f45d1de"
        },
        "item": {
          "id": "badfd587-5b51-4546-9d23-8c51a558b410",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "08ca86b4-0327-460b-9e1e-b0321ff3a66f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9260c3d-d181-4698-a5d5-4ac52daf402d",
        "cursor": {
          "ref": "60743094-ee4a-46c9-a095-42b2d8cd337b",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "dba23fc3-fb94-43bc-b168-334d51dac10f"
        },
        "item": {
          "id": "e9260c3d-d181-4698-a5d5-4ac52daf402d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "8f628d3b-d222-4a9c-ac71-52f3118f57d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f996b6be-115d-4f8a-9ab7-13257aa9a1ba",
        "cursor": {
          "ref": "20e9aa5d-5a4f-410d-8ca5-7d083c39a249",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e4fb1edc-11f5-4d28-9d94-ac8a3ff0c1db"
        },
        "item": {
          "id": "f996b6be-115d-4f8a-9ab7-13257aa9a1ba",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c765a58c-a2a2-4544-8e11-865396705ff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e2a35c8-44e9-46a3-bb1d-502635a372d1",
        "cursor": {
          "ref": "d0e94214-b6e3-4be5-bb43-f68a4113fd81",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "51ca4446-95f7-43da-b204-31a822ed7749"
        },
        "item": {
          "id": "0e2a35c8-44e9-46a3-bb1d-502635a372d1",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "bbad7ca4-a3be-4fb4-9403-350dd4cedc48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5692881-e1ae-400f-b824-e08c3aaf9e47",
        "cursor": {
          "ref": "e1a27392-e1e8-4a19-8610-20b1db5ef95b",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "11d69b87-e832-4963-b660-04c1c833f4ce"
        },
        "item": {
          "id": "e5692881-e1ae-400f-b824-e08c3aaf9e47",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "30e52770-6108-40a6-9b4b-173b77f15811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5fa510b-108c-47be-8814-3d046c66e53c",
        "cursor": {
          "ref": "e9cacd3d-51b9-4829-838c-0eaaced845fa",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0c2e11e1-4c39-48ef-a111-8ce759ba2a22"
        },
        "item": {
          "id": "d5fa510b-108c-47be-8814-3d046c66e53c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1cdbd43b-cf72-4f26-a895-cb06f7ad0341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6531642e-11a2-46e3-972e-76c67d5c113b",
        "cursor": {
          "ref": "1479cbc5-e9c9-4222-b373-41b06f909b81",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "1b33e354-4903-4250-9369-32133ea4fb0f"
        },
        "item": {
          "id": "6531642e-11a2-46e3-972e-76c67d5c113b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1e1d62e4-7b24-4672-913e-ab516eff7f27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06c68c3a-1e01-45ca-9bdd-e307775bd8f5",
        "cursor": {
          "ref": "7cc40a59-8046-42d3-afcf-e270df27abf1",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "d57f5ccf-dc63-46ae-af6c-67b40a98bc54"
        },
        "item": {
          "id": "06c68c3a-1e01-45ca-9bdd-e307775bd8f5",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b421bf87-1f98-4d18-ac55-94d88451e225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6122c62b-4a8d-497c-a28d-48711b432835",
        "cursor": {
          "ref": "b361e478-a5a0-4928-998e-ee8e8eb3593f",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "2f4e2237-6190-4578-abdc-4dc6b1843360"
        },
        "item": {
          "id": "6122c62b-4a8d-497c-a28d-48711b432835",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "cceae0ec-2d63-4471-a898-af0b5c8c82a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f222c3-264a-4700-8b72-2c2a37cb9f99",
        "cursor": {
          "ref": "3a2bb36c-409d-4112-bc93-edf2ddfd04f3",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "cca7b4c4-0355-48ac-9ef3-cc39ad5e034f"
        },
        "item": {
          "id": "63f222c3-264a-4700-8b72-2c2a37cb9f99",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ce0b8490-1eae-414f-b495-7175bb686ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdaba4e6-f5c8-4132-8167-8a31681a27da",
        "cursor": {
          "ref": "4eee2af5-d40b-4f42-91a8-ed509e06f834",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "3f5c0b36-8b31-4a6a-9d37-f1348ffb9505"
        },
        "item": {
          "id": "fdaba4e6-f5c8-4132-8167-8a31681a27da",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "92f49dff-26ca-464c-b3f8-6c012a57fae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9292a11a-e4b8-4e96-9740-6c63a3611b10",
        "cursor": {
          "ref": "1c63b4d4-0888-4c8a-9396-ef2aa4059845",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "91943d95-ad19-4292-8083-230da0114769"
        },
        "item": {
          "id": "9292a11a-e4b8-4e96-9740-6c63a3611b10",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d9f69a1c-091e-4dd9-909a-807dfacc5a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c50af8-1b5c-4a83-85f0-8e67a228fb80",
        "cursor": {
          "ref": "1032f053-9eeb-41bc-8904-b5a2cb3181b9",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d0fd44ca-9f05-4b2c-b833-74ddf8b0886b"
        },
        "item": {
          "id": "36c50af8-1b5c-4a83-85f0-8e67a228fb80",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ee448297-8201-4350-bdb4-9d1984f7d7c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e95fc67b-b300-45c0-93bf-92083b1414bf",
        "cursor": {
          "ref": "10ce57bd-85a2-4507-a88e-847dde9c2d96",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6d17dac3-d5b7-4ad7-b5c8-bcc6f15f999e"
        },
        "item": {
          "id": "e95fc67b-b300-45c0-93bf-92083b1414bf",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "cfe22505-fe14-4fef-9543-9a22f8c01adb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76c8cc4d-41d6-45a5-a6f6-a1651852b309",
        "cursor": {
          "ref": "7765a0ec-0179-4f0f-94e6-aa255fa4abd4",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "559b25c4-90ae-4d32-914d-d8601fa4f6b1"
        },
        "item": {
          "id": "76c8cc4d-41d6-45a5-a6f6-a1651852b309",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9e7c8f47-91ab-4b48-902f-e1f9499d184d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42face34-6496-448a-b86f-5b5d6e66cb1e",
        "cursor": {
          "ref": "e79511be-3a3e-4744-b834-589c228f6e20",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "fe6c9725-c277-4c59-8f78-8c84edfb2cba"
        },
        "item": {
          "id": "42face34-6496-448a-b86f-5b5d6e66cb1e",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2b229842-68bf-4b8d-ae38-5a1b11fa3601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9842f6b-4303-49d5-a407-7477b7643943",
        "cursor": {
          "ref": "b37399a4-f8a3-4000-bb32-be3395f392dc",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a8bab80a-5bc5-4a6e-9f86-a8f16868b685"
        },
        "item": {
          "id": "f9842f6b-4303-49d5-a407-7477b7643943",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "055a4e5c-59ed-4514-811f-b23f45482a6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fb802b2-c651-4bc8-a6f3-be932a2d53a9",
        "cursor": {
          "ref": "93722fb9-2759-47e0-9f47-c6d086469518",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "45bfd20e-e90d-48f2-8b60-ca23f5bcd5ec"
        },
        "item": {
          "id": "7fb802b2-c651-4bc8-a6f3-be932a2d53a9",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "38940ac6-94bb-4206-802b-b0308a65088e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 29,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14cd2e62-233c-4d83-ba7e-d3db7fa1c9d7",
        "cursor": {
          "ref": "59d0b2c6-5d9b-442d-a2ac-525ce3fdff99",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "568e3eb0-d934-407c-83b6-196d915da520"
        },
        "item": {
          "id": "14cd2e62-233c-4d83-ba7e-d3db7fa1c9d7",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ff722ed2-caf1-45d5-b6bf-d67b514d391f",
          "status": "OK",
          "code": 200,
          "responseTime": 241,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bec2d1e-ad86-4ef2-9023-523873fe82be",
        "cursor": {
          "ref": "5efe5702-b616-40ea-84b7-df0430f0c14b",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a6a02cfd-5b0a-45fe-bdf5-50cb12836819"
        },
        "item": {
          "id": "1bec2d1e-ad86-4ef2-9023-523873fe82be",
          "name": "credentials_verify"
        },
        "response": {
          "id": "507202f2-748c-4c66-a73c-98b3fe2b07aa",
          "status": "OK",
          "code": 200,
          "responseTime": 609,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d14decba-fda0-4aa3-baaa-3436de890452",
        "cursor": {
          "ref": "68ec1f25-e0ba-4fca-bfd4-0ecbb0b2898d",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "def63da3-fa9d-4dcb-92f5-fb74f9145b96"
        },
        "item": {
          "id": "d14decba-fda0-4aa3-baaa-3436de890452",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e168557b-9c3f-41da-a146-42dcf816a6e7",
          "status": "OK",
          "code": 200,
          "responseTime": 576,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "205da801-e9c3-46a9-9f48-273016a7b90c",
        "cursor": {
          "ref": "3d95775c-b00a-4d0d-863a-5846be8c54f4",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "cff8b1e0-3327-476d-9cc7-772e48fda77e"
        },
        "item": {
          "id": "205da801-e9c3-46a9-9f48-273016a7b90c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5f752967-8cda-4fce-8601-912054982229",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "205da801-e9c3-46a9-9f48-273016a7b90c",
        "cursor": {
          "ref": "3d95775c-b00a-4d0d-863a-5846be8c54f4",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "cff8b1e0-3327-476d-9cc7-772e48fda77e"
        },
        "item": {
          "id": "205da801-e9c3-46a9-9f48-273016a7b90c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5f752967-8cda-4fce-8601-912054982229",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "205da801-e9c3-46a9-9f48-273016a7b90c",
        "cursor": {
          "ref": "3d95775c-b00a-4d0d-863a-5846be8c54f4",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "cff8b1e0-3327-476d-9cc7-772e48fda77e"
        },
        "item": {
          "id": "205da801-e9c3-46a9-9f48-273016a7b90c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5f752967-8cda-4fce-8601-912054982229",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90ce5034-31ba-413a-9787-24b01e33ab2d",
        "cursor": {
          "ref": "69aa3238-a2c9-449b-a87a-20ed8fa1d615",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "93a17857-cecb-432d-991b-bdfd83048fbe"
        },
        "item": {
          "id": "90ce5034-31ba-413a-9787-24b01e33ab2d",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "0a4b4557-83dc-47cc-a56a-9e02041d7a48",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 30,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfcab6f5-704f-49a9-9663-6a9228e5b1ef",
        "cursor": {
          "ref": "20f448bc-95e9-4d47-bbce-acc2a0370633",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "48b0c91b-1d81-48f3-a92f-0cacf0cf331f"
        },
        "item": {
          "id": "bfcab6f5-704f-49a9-9663-6a9228e5b1ef",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2bf7c428-57e6-4b95-a57a-15df952b4a3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "bfcab6f5-704f-49a9-9663-6a9228e5b1ef",
        "cursor": {
          "ref": "20f448bc-95e9-4d47-bbce-acc2a0370633",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "48b0c91b-1d81-48f3-a92f-0cacf0cf331f"
        },
        "item": {
          "id": "bfcab6f5-704f-49a9-9663-6a9228e5b1ef",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2bf7c428-57e6-4b95-a57a-15df952b4a3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "bacb7feb-9d86-41e3-ae4f-fef44082909b",
        "cursor": {
          "ref": "a8df0742-3597-4206-92ef-e787eda3496e",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "573681b2-123a-435b-9f60-fa2491537487"
        },
        "item": {
          "id": "bacb7feb-9d86-41e3-ae4f-fef44082909b",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "5cbbf380-7a0e-4b7c-9f21-6a684e787412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "b17a4f27-76d6-48db-b8ec-3226a14b02bc",
        "cursor": {
          "ref": "af4478b9-42ec-40cc-9d06-c86a1bed15a7",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c7c2dd3f-821a-4c48-8f37-3dbb5fc749ae"
        },
        "item": {
          "id": "b17a4f27-76d6-48db-b8ec-3226a14b02bc",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "820e6217-3713-4f36-9450-c30a4d285546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "b17a4f27-76d6-48db-b8ec-3226a14b02bc",
        "cursor": {
          "ref": "af4478b9-42ec-40cc-9d06-c86a1bed15a7",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c7c2dd3f-821a-4c48-8f37-3dbb5fc749ae"
        },
        "item": {
          "id": "b17a4f27-76d6-48db-b8ec-3226a14b02bc",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "820e6217-3713-4f36-9450-c30a4d285546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "397bfc9b-4c27-4163-ac73-26adf83f0dac",
        "cursor": {
          "ref": "4b0e7d39-7524-42a1-a379-b0882ad374a0",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "851ac89c-66cf-4ab3-8f7b-2107ab0745b4"
        },
        "item": {
          "id": "397bfc9b-4c27-4163-ac73-26adf83f0dac",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "1d1f39b0-d742-4597-8077-dc6a6c03bf8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}