{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "2a3f8eb3-b1db-4068-8757-55473782d531",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "0ff4a8a5-d449-448b-abb1-a154dc3225c9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b7cd7a60-6891-400e-aa29-814ee798902e",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "179f641e-e711-4bd5-889e-682e0800bcd7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bfcf8cf9-8390-493e-a017-7375de9013bb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "89d5dd6f-50c9-41c6-8ab6-bc940506bec4",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4afa433f-d895-4c12-86b2-28ef9a3eb417",
            "name": "Negative Testing",
            "item": [
              {
                "id": "98541790-6096-4216-bdc5-53529863c6a8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f30d9d34-c86b-407f-8d0b-3a0a82297c2e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98dd76a9-c7ac-4604-9bb3-3c40116f2a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "410a191e-d3a7-4dc4-91db-dd5ae0dd0e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10fb02c4-7170-4711-abd8-b404a277bef7",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa302743-609e-479e-8259-630c09bd1fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "04287ef6-82e5-4844-9139-fcbf18c29c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e95ce3-13d2-4767-be57-f94001769e0e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9153f30c-d2c5-47e0-a754-660db5933bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "11a3c045-7a99-4c9a-924a-2c7ae8376c81"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3265c860-6cb0-4713-9429-43c8588a8672",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a846df72-335a-4ece-b9a7-a6871168407c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f0f3c6-e9a7-427c-97d3-ffc4790935e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f3a63b4-a9cd-43db-b8c7-174db1e97038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "984ab37d-67b3-4b79-aeb6-a01c997a6e8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5d9291a-c4e3-4309-9f37-894001c11518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1516aba3-a25c-4c0b-8539-812902979e1e",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c540e8-8caa-4db4-8e7d-0137eac65b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d57d015-3c16-44a0-8792-2009dd85dea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66bd80bb-d5e5-40a8-9039-b438a076a9d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "0b873ea1-ca37-4fd4-a83e-bf8210615f3a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5f93d698-8936-4c1b-9d8a-7b4de042366a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a9a79712-8e3c-4b6e-9731-63858df76bc1",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ef08539-ff9d-4858-a6d4-77712adc2573",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "25a0c3b2-fc0c-47c6-8a02-bbca34c9c5c0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b385ad44-e497-450e-9444-54a5421e438a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "ad4db960-43f5-4a55-8130-d53b3ce68502"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a71db51f-3bb9-4202-b299-7401662eec5f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "96afb68a-e479-4406-ba1b-e86517af29b0"
            }
          }
        ]
      },
      {
        "id": "f19f8ad5-e3ef-43ca-b3ea-4029ce4da7e8",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "69c22467-d615-4932-b70a-66bd931a822b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a614d611-adc5-42bb-b69b-f8aebef3a03d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "423e564d-1ea0-40bc-ae3e-1124ba4e9501",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c536e121-afec-4bed-9665-39009988bc51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce498d02-6c74-4340-8e05-32a2cf2d7491"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a1c2dc-37d1-4080-b4dc-98cd4279c48b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7af7c24c-23aa-4883-8e64-ff508189e8ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362cfa8a-4275-4fce-85fe-7e2e5b150b1f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd59af38-8eb9-4d06-8630-8fae5bf5f1ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f515f348-75e2-450a-b26a-c427b143d85b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57433c9d-476c-4af0-80c8-17d1c734093c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e4a4b07-ee75-4432-a3c7-5090ac384e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f95774-594c-4084-ad7e-83f31844f225",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ff732a-cfa2-494e-9aef-8ff9192fcb9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b9ad2ab-305a-47d8-8d6e-54cb710f1ddc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236f025d-056d-4cdb-a735-a099b6702ea1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af8fcc68-b0ec-4358-8d4c-0f8f6a479fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3df009fd-9066-4b69-b258-b90129e6c7ce",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d380d12-c515-47d9-a8b9-02c075965079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d58419d-da6c-4c71-8300-4301ce56ee56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0332c51-2cad-428a-9444-8bf4ade56a54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ef45395-e98f-4924-a40e-2b9c58608214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3728e7-fbb8-4c98-8f0a-442d6b8dd11b",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de581ad-e87e-4d42-81bc-9cb973e49bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b4f69c5-5161-4c8e-915b-b87359cc8917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4530b819-83d0-4282-b4fe-72a8c1899f0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2418dd69-24ff-4af0-b978-be46ec5b2c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daefdbc4-46b8-4c28-a50c-e84cfca6ccac",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "973e85ba-704d-4be2-8a7f-c8d52ef4f9fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce985e96-2d09-4868-9dfe-386f3d6858cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6532e751-acd0-4605-986d-4726fbc18446",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b3353e9-75d2-4717-88b1-dead1e1ad0d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f2477a1-f881-4261-984c-6ec5054ec62b",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c316ef08-cdc4-44b6-864c-397cc9d51c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a083b442-a7d5-449b-b11c-6f35171e8c32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1fb234-8cf3-4438-98ef-b6b2a4409ad8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f44e797b-0bc3-43f5-ba7b-d341ce5397ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a928b2-4a57-4481-8b90-d77e43f7f552",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f9a8745-57b9-4c02-8b8f-301976dd1b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ec81842-cef1-457f-9d94-b3b134db18da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15c22ca6-7308-43e2-94b2-66b3402fddb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cea62bd7-5c38-48a1-ba52-124460183be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "928f3455-615e-4b9c-b968-a8b14209721f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a358b89-d76a-41d8-a56f-eb097cbd0e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b1620d4-96f0-4fc1-9326-4c6ca4172506"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bdb27df-2c51-4a0c-aa02-9fcdee0207d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0009a0c-3345-450a-89ab-805f7b805163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee605a1-0399-4c1e-a892-edf38a4f8dee",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cecfaf72-c70d-4d54-93ea-efe46e5e7fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e19ba44-c2fa-4e2a-9a5c-e82e990ee009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79eaa579-dd18-4253-a777-eb4b9271dd15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17ef51f1-9082-455e-a105-0902bbc1325d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c916eb4c-ae78-4274-97b8-9df95ca375bd",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35fadda9-30d3-438a-8742-ec24682f56c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "106292b1-0b9f-4b28-9b82-889457eb6325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a1d8c02-cc87-4163-b16d-8dc378bf1644",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "a2d1608e-f07b-4f38-a591-72751d136a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75bf73c-3fd8-4ada-b96b-f0c145635646",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8daba87-1013-4e8f-8938-c3b36a306c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfa29b61-3b57-4eff-8080-2e68e4213f5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a0b7bd-3de1-4447-bbe2-8d3570738225",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "1f4cbb7d-8830-4127-96d1-44a859d6e54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4db2834-7fe5-4502-ae77-f7d5c248a63e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e2f158-7b84-46a5-8e32-d7eb0e468c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7e6ba6e-9c3f-4a16-b3ed-1c9f544ba5ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb2e9b5-ee2b-4925-a519-7ea3c6b04e90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b385ae76-94f8-4505-944f-24462ca7946a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ab8bae-679d-4dc3-95cc-8af0de95dc40",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab7befd3-eed3-4d0c-8e79-6c33e7b27348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64a678be-c159-4353-bd9a-d397046a5a55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e146ea-4269-46f6-abf6-2087bd1f3c24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8dbbb56-2c39-4f23-a147-dfece3f59dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d1175cf-75a1-4be3-8c0b-77ac2235d1b5",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "623d3f6c-5f1b-44e6-ad2e-d41acd07b1ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e55be04b-df17-4e52-9060-3324b7487ca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e3b7816-7bec-4446-a737-61cc1ebca587",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "7e8d4b99-a71f-448f-8f53-d87f9b76b4f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40528f88-a46f-456b-ae08-3198df9b3b8d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be46af9-8d3d-4f5f-ae17-1ed9593e42bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98da2aab-168d-41b0-9a30-6f78135e409e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346da621-ac1d-4051-bb48-81c642ac92a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "93754479-efdf-4a04-8410-443f05db1de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de8932df-256d-458f-a934-1bf0bd67958b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab695c5e-95a4-4d2e-b0dc-73f40c540607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eda57f75-65e6-46db-8971-266a5bf4214b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "741de6e1-b2df-457b-b9d5-4aa89b271c15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17cd19a4-c191-4dc1-842e-554f50edcd95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de5a6f2-318e-4309-8de1-18e6bc5b90e6",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7bf956a-f62f-45df-b018-94c7f75fa936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6c0dd23-241a-4d5f-aaf8-5aa175a7b630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d9972f4-9c6e-4c45-94e1-57aff43d61d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdf9a00e-ba50-4ac0-a04f-b43961b5e7e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b61f846-79d1-4366-bf97-2b76d91f3a0b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a982b0-408a-4368-bc6d-d5676b98db36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31295108-b783-4eb7-b8b2-69a67d9ba6a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f6cfa8-0aab-4054-8726-27ec27a7de44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38f425e4-ac9c-4221-9954-0637e3c29967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b4a3e8-b452-42ab-9384-72a6c9550b04",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f29ae0-4d36-4348-827f-f505ea8dd822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4fd9106-89f7-4c22-9451-18881cf389ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c560a6-bfd4-4dea-9d45-1f8ecd895826",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90a3e97c-3338-4c69-8d8e-9e8f68e859fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d06984-6d66-449e-9147-86ef981f759b",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "401ea2d4-5196-4f87-941b-2560c569e40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5835a373-5043-42a1-8031-8b42f482109c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a81ddc9d-7914-4391-a37e-c306f262e5f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c429dcc-d54a-498c-bc04-aab733cc4367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b08790bb-f788-49b5-9809-2b39cf316dc3",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e495b2bd-3d42-455f-a272-beafa8a777eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1896c086-1e91-4645-b2ed-e0b2b237280e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a51f01-8a9a-4edf-9d5d-405cb1310ab8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7353b14e-639e-46bd-9a83-180b9c76f03b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74829ab8-6f76-4e96-8388-bcc66444cd3e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0361cd6d-5ee4-438c-9b47-de8ca5eeaf93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a17c456-df20-45ac-851f-502037cd794d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7683eb97-759c-40b8-ae3d-14a2b167e24c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "253c306b-6ef2-448e-bf33-3bb69cb138ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ddad0aa-bc3a-42f1-9e14-52dc16f9d810",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea4b078d-5bda-4f5c-a1a2-d51ef602f2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a0d42fc-94a5-4c3f-a270-09c8312e8f5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f6b89d7-dc42-44d5-b7fe-d9d3bbc84bd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e2c7d60-81d4-4fdd-87c1-e44b6d560cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75373b23-e880-449b-a8ac-bfd8187a2d7b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc8e0a6a-54fb-41cf-8bb1-2510671dac13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af00764a-aded-46ea-8c10-2f4bede61284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11dbcea-4ae0-404e-8b29-470c03523d73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2f4eee3-85f6-4a1d-ac62-82ab662964ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d616966-37fc-4ef1-9996-e2a39c6d69a9",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46de4c4d-ebc0-4c73-ae43-5b280cb5e1d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65fbd16d-a325-446a-a008-bbe2b3e1547b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f8affc-1c55-461c-bad4-af5402e46e63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7af34fee-a9ea-494e-8bb4-7d2eb1aadf98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9da023-a3c2-4960-bc95-fee649767b25",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "741793d6-aad6-4ec7-87aa-01763be70fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e10ee04e-73a6-4c02-af44-899e855db30e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "309e3e6a-b361-48c6-be1b-a1370a7423b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5473592c-00c3-4772-bdf1-3d630a3488c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e479a1-43b7-40a9-89c3-49d16f259cd7",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55715e9e-eebe-4fd1-b9d1-7f95656e524d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1507de0-3fc9-40fb-bca0-3bb58b1cbbac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3764fc3b-1b3e-4951-80ca-bc920468e871",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31d3c435-eff7-4955-adb3-b6430244d7af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e45037c9-dc09-4385-95a0-7bdeacb2da17",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06fa8233-7f80-425e-8514-57d4c63e95e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1ba77b1-77db-4639-8145-dc5f62d96add"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6c617e8-8a43-4d4a-ace3-a013e145b785",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e1df311-99f5-4530-a9ae-b8c0bb13b4a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d44f3a2-fbc8-44b0-8a9c-5d0a5071a36d",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "346130c9-380b-49b0-bf36-21524f5e78e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1052a50a-8cfc-4866-a86d-d571e08e99f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e0c87e-fb21-488e-b71d-d8138f02d7cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5679d820-0af1-40a1-ba3a-db0f121deee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b98ec30-0351-4040-b547-d797dade7dbb",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c330cc2-d957-4a97-9d08-e3588c4322b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9cb31449-032c-44f1-94cc-579d755788d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c86a674-501f-4fe3-973e-d57e9cc095a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37146388-0e93-4848-ab35-b41d0619143a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a41aea81-57ec-487b-9e98-ce4e81b8ee20",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "52041e1e-4a36-488d-9bdc-fe88ea24fa85",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f28738e-238c-4d20-a22b-c632a2d5fcc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f209f51-ed3b-496b-9147-0bed211f86a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffb0ad56-2fd3-4a05-97fe-33b3f7a970e3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "ee2ab566-96b3-4123-990c-42d29151b503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f19e96-14f3-49ae-810f-cdf60687cfee",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10813670-2ddf-491a-a0d1-a60cd5d96d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76821b06-304b-49c4-8534-233d2728e6c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fbcb8b3-8ea8-4d98-8505-4dfa4fda1c41",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "1bca8407-2960-4df2-9771-315d717e7d3f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58f4c8b4-d3da-42e3-8ecb-3fb0821ff1ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "243216e2-7ce8-4788-9d18-38b681927c84"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9bc48f7-0af0-4a5c-b07e-5537a1f2a91f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "154b7b21-596e-4da4-af9c-a2084522b998"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0df94f16-9dd8-4616-9139-787676086d74",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5832a191-5a7b-469d-b82a-18b101e5741d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "40a674b6-b8e6-436b-9219-6bf9d922a4dc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e727d493-4082-4c89-a815-749b80f0aac1"
                }
              }
            ]
          },
          {
            "id": "006f7303-0744-4ee6-9e3a-8a595f3dc670",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ea073360-cef8-49f7-8a4d-c6e23ea99dc5",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "50dfc9f2-6e10-42f5-9593-6e54c7dcbd1d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a466da3e-b54e-4c1e-837a-276f4739bb58"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7eed9862-1b0b-4b36-9dd1-db3ca5848b66",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "1cb12812-f0ed-40c6-94c5-2ad0bcc3aa14"
                    }
                  }
                ]
              },
              {
                "id": "f7013a2f-3ae1-46c3-888b-0c8664b1a5a7",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dcbbe3dd-787a-49c1-911e-6b0cee827ff6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d89a4471-be42-430b-acf9-407570833db9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3fabc00b-6ef8-49b6-9515-38765e30568c",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "1de69eea-fd96-4ebd-8eaa-171db0e44a60"
                    }
                  }
                ]
              },
              {
                "id": "b76aa59b-fabf-48cb-80f0-0b709c72c4ab",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "96e85dee-c6ed-4957-ae13-322468b0f5b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ea8cdf3c-d263-4ae6-86ed-2088bd53dd3f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de946de9-89b6-44c5-a0c6-d48b2fdc3087",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "cb1cbe00-8fd7-47e0-bf75-93db622aeb8c"
                    }
                  }
                ]
              },
              {
                "id": "e44d0820-3ab2-4be7-a53a-a7bb118de5f6",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c54bf39a-4fc6-49d7-9091-6b419fb47f8b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "86a31f86-bf73-4b05-90c1-877cbc41e204"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5359d9cb-d963-4135-8477-6ea66ab95830",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "8d443076-6810-419f-b15e-def4e55fd20b"
                    }
                  }
                ]
              },
              {
                "id": "91826806-b00c-4f10-84a6-24c08762579e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e02b0e05-f2dd-4a7f-940a-9f4230856e51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "dc7fd443-c1bd-4b34-acac-f63e62926997"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5bece49a-88f2-46b0-9e6f-f6b10d346530",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "a763f575-2867-4e5f-b114-2147881d3351"
                    }
                  }
                ]
              },
              {
                "id": "53f600be-ce78-4b99-b57d-956def7944d5",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "472cb0eb-352b-45f5-87d7-acfb48cdb1e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1df4f48a-82fe-4113-a64c-49b8b20ad83b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "97f974c1-a212-4361-9816-3b0381993344",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "144097e6-0523-437e-9525-71a081b9803e"
                    }
                  }
                ]
              },
              {
                "id": "87e47fb6-c660-408f-8fc0-2242950fd400",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4759c8cb-7e72-4347-a6a8-b71379873ba0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6aace367-eb93-475d-af72-2ba5741016f9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ede326a2-4cb1-4e93-8e7f-98389a794bb2",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "151f8ad5-0b8b-4b1c-9f4e-eb3372a86005"
                    }
                  }
                ]
              },
              {
                "id": "aee45794-74e3-4987-b2e4-a749a2b20ae8",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3481cb4-03b7-43c7-80b7-3894c5b4139a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "220dbd4e-f62d-4fe3-be08-9e3b1f2998c5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ddc0b142-931a-44f4-b6e9-91eb418e4751",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "56da7b50-ff18-46d5-a746-045dbd4dcf29"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "318a7cad-278d-4094-8231-bbf22bc25070",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c598f04a-6f9d-475f-ab97-70090950c9f1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9b93fabe-0a98-42c7-89b0-6fa2ded1ea55",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1805c55d-fe41-4501-826e-464d1e50d7e6"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c8c918fe-e276-4a25-bcdb-f10d6e4e4038",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "8b9b24aa-73eb-4ec5-8e0e-fbbbf3f1eeff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "18b62a7e-9c5f-42ee-8c0a-46a6c31afdc0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c30d650d-0ca4-4afa-a0e0-60c73fa83e35"
            }
          }
        ]
      },
      {
        "id": "d7efff65-a236-4ad0-98fa-ca24e92000f0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "00cbbb85-dd5c-4e60-aafd-593ce0d91870",
            "name": "Negative Testing",
            "item": [
              {
                "id": "06262f10-9434-4e67-a5fa-a5bad65c5f10",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8e0a6119-7ea5-4800-92bb-2c190406acd6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0733820-eba6-4242-8296-fc38a762bfef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "574cbc69-aaff-4743-9dc6-70a0228297dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "294e1cdb-6e30-4818-85c1-c05493438033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e195a0f6-6281-4eb4-84d9-a157c90d58a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "596be49a-a80a-4ece-8f9c-5b5a3511a442",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df7de85-92f2-4e13-8e2c-559c3414e724",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "c1d25112-007f-4c3a-91d1-d7bbc26881a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8288878-b894-4006-8573-f1e839d45c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87f81bb1-efb6-494a-89ca-9a9de2d47dac"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "db68f6c5-480a-487a-bd0a-52a6b4f43ab3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7512625c-8922-4f49-b039-a1a8c2455015"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd13276d-eede-4581-a754-5983ffd3b68e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f3bcc82-3402-4b3d-b124-4d66e4efbebd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eed029aa-edce-4321-89b0-44d5568d5187",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "f1018ffa-c2a1-41b4-a819-4b0835d3e66c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b16158a6-ed54-4cf9-a4d5-b8385877f2d1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f6c31fd0-270e-44cc-a4f4-39ed1f5ce6cf"
            }
          }
        ]
      },
      {
        "id": "c9cee5ef-435e-4f1a-a5f9-40f6860904a3",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0129db66-322b-41d9-bba6-9f49f93ff855",
            "name": "Negative Testing",
            "item": [
              {
                "id": "939ad70a-67a3-4e69-a892-632a1bba5b6d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6df1d397-728c-4e72-898c-fcc21b3652f4",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c4e915-b891-4303-80d8-d1e63fed732a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "42e7b017-b4c3-4177-b266-d222785bbb1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b3949d-14ea-40f6-adf4-a3478ee5b782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ebfd179b-1428-4b8c-881d-bde51e3ea143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "247946f2-4008-4d1f-895a-4d566c18aec8",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6325c24-01bc-4184-8dfc-3ba716f388ae",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "bafd045e-0945-4619-adc7-3ca94d8d6c80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b41649a-9b20-4659-989f-59427dff8038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d14eb1b6-d35b-4f57-b2bf-e87237fb8ada"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd8b3c4e-5ea8-48f0-85e0-c8b27f73b3e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "71637093-4c48-4bba-b263-1cafb38a1d3d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "756f70e4-b758-42fd-ad8d-5c8dea2a2917",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "767fc96d-8b6d-40f7-b0f0-eeb03b10d0be"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "84ceedac-2191-4d55-b2be-14723fe01473",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "faafa610-0cb8-4134-b5b7-249e4fde9edb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c6f027fb-2e49-4887-ab24-852124124bee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d86731d5-d7c3-4563-92e1-d76b2ed1bd48"
            }
          }
        ]
      },
      {
        "id": "39679ed6-328d-4638-90fa-d4acbbaa521a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "db79e4d8-2ef2-4f51-82e9-8d0002a6c175",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f3931833-d884-4135-ab72-85819014a4dd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dbfe27c5-9710-47bc-bd19-64f52dbf3660",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3ca87a-23f8-4123-a3f8-8ef64795a263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf003e7c-ab83-4ab3-8fbb-7aa535031733"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c70fb2b5-9010-4365-b21c-e11ed0f64f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9135338b-4e21-41c6-94b7-e1a204ac1b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633d2c5b-5f45-4b14-a148-9c71edc08f88",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658e736e-b0bc-400b-a8d5-05a0dd7809d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "2751a64e-dbbd-414e-b01e-5e4a6c6c2f47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2d58570-316a-456c-843b-0afdd72c1cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c202a930-00f6-4889-a112-7d1676c3ade8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb423031-e639-4118-bc1b-9086b1580b23",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b18aa0bb-181a-445b-a04a-dd2a82652adf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ffba2c37-9cb9-4bdc-b92a-dd7907e1a03a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26fff7f5-9fa6-4a1e-b96f-010f5744d3a3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "06cd47b9-940d-45ee-b758-317b58e71f07",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "899dcc04-6ead-4671-8a9d-a722ecd756ea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d2fb5206-b6ea-4976-8787-61c1d9347d27",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aa41299d-b8ae-4aeb-99b4-ae85b67af874"
            }
          }
        ]
      },
      {
        "id": "acf35b5e-7979-4661-bcd8-dec772af2aee",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "3cef2764-609d-4be0-aca8-4df747b08868",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5f836ab4-6ea2-4dec-8b88-693d7ced7af3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "55607af5-ccab-4ebe-b233-1e4900856c1d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23313139-934f-4f55-bcb4-34989dd492a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81a37f0c-3e2e-46e2-b8de-cc6b0868e139"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2002766c-876a-4039-8131-337fa3ca723a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59e701f0-98a7-4011-9a0c-c93a7db46e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4248dc4a-c66b-4a26-bfba-977bf36fb7d5",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e69831-4eea-41f9-b34f-e1e4d75e4d84",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "4d277306-51fd-4cf2-aac9-6e0971a1b74b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c89fa8b6-e350-4067-b34f-9e5833eebb18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c9f83115-2864-4efe-bf61-f8076a109821"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9e61825-02f9-40f2-a1f1-ed37fd565795",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c11b9ab-3650-43ed-999c-fbab4202bc91"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "429dc9b9-fc42-4a68-9b74-4c6c379db867",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff8a7c53-1e17-48c5-9fbd-285a5ea131ae"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bcea2cd7-7600-407e-92b4-7f250985f7b6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "1dfc1e17-b148-494d-a139-f3e25444bcba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f977c4a-0caa-4133-9e4b-e1c3edd0c6f4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9a4ca29f-e0ef-4897-88ce-547c0d5405c9"
            }
          }
        ]
      },
      {
        "id": "8cb2db52-9575-4219-8578-ac1fb7ef58ce",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6bb63398-7df0-4f88-8876-2a20f345e290",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d8c3d736-54e2-4bae-a114-b353eea806a6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "599cb79c-ce66-4296-afa8-c455c3d16fae",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65daa1e-6bbb-412c-ac57-c6345935e3d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "684996be-4ff6-45b1-a6f9-c7a5afaaf771"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85dc0ffa-9b71-4f2c-9172-433e562460dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd69e382-59c3-479c-a608-77250ccedbaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2224dd9f-7236-4f88-a698-b4edfa720006",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8334a3f-166b-4aea-9f2f-b83e4149496d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "f620a59a-1181-422d-8ada-9852e8888df8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee22d12b-ad5b-475f-9b13-d41631e2ca1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d26032d4-3679-449b-958d-6709dc6fffa8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "edb7aff2-c0ca-492a-8264-2aa636e28271",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f129468-f9f4-49bd-a127-183a7a1c0354"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce9ced43-1306-4ecc-a563-f9357a450e50",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "99eea927-d005-4b7d-94c1-2435e760f377"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2862866f-176c-4193-b8e3-c11232fea595",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "d7feb5cf-60c5-4951-9314-71f9e8b43bef"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e935e871-d053-4380-86ac-ba7d4744df03",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "69bc343c-06e9-4f0a-8236-176cc8c205eb"
            }
          }
        ]
      },
      {
        "id": "82a3bca5-00c4-4986-8506-60d1dd6b748c",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "aa28d1fb-2f2f-437e-9c96-417a603f4918",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 107,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 98
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 116.51401869158879,
      "responseMin": 82,
      "responseMax": 472,
      "responseSd": 54.59491682989548,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1661474960269,
      "completed": 1661474976596
    },
    "executions": [
      {
        "id": "b7cd7a60-6891-400e-aa29-814ee798902e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "25eaae0f-ee97-4ab7-bb8b-06747bf47e4e",
          "httpRequestId": "6c62bb71-abd7-4468-805c-cd8533de9bbf"
        },
        "item": {
          "id": "b7cd7a60-6891-400e-aa29-814ee798902e",
          "name": "did_json"
        },
        "response": {
          "id": "0885f728-3b35-4e3d-81b0-83c7a5f96106",
          "status": "OK",
          "code": 200,
          "responseTime": 340,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f30d9d34-c86b-407f-8d0b-3a0a82297c2e",
        "cursor": {
          "ref": "7d80be19-a680-4b4c-bc2d-2eed81e9af79",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b5e165ec-69ba-45f0-8e22-98f73554ef8d"
        },
        "item": {
          "id": "f30d9d34-c86b-407f-8d0b-3a0a82297c2e",
          "name": "did:invalid"
        },
        "response": {
          "id": "7ba771f6-7a2b-40a9-a401-24cf8f231a19",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f30d9d34-c86b-407f-8d0b-3a0a82297c2e",
        "cursor": {
          "ref": "7d80be19-a680-4b4c-bc2d-2eed81e9af79",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b5e165ec-69ba-45f0-8e22-98f73554ef8d"
        },
        "item": {
          "id": "f30d9d34-c86b-407f-8d0b-3a0a82297c2e",
          "name": "did:invalid"
        },
        "response": {
          "id": "7ba771f6-7a2b-40a9-a401-24cf8f231a19",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10fb02c4-7170-4711-abd8-b404a277bef7",
        "cursor": {
          "ref": "63561290-d66d-441c-ba78-c6bc0f26c0a3",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "46c7da6d-a20e-4da2-b423-44d805893027"
        },
        "item": {
          "id": "10fb02c4-7170-4711-abd8-b404a277bef7",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e0247706-3cbe-4413-9e35-9ce5574561f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 182,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "82e95ce3-13d2-4767-be57-f94001769e0e",
        "cursor": {
          "ref": "3c2a14f7-9788-41e9-bac2-9755ac183acd",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e4efcb42-4fcd-418b-908f-c0cd8a3f0410"
        },
        "item": {
          "id": "82e95ce3-13d2-4767-be57-f94001769e0e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "161d00e0-c249-4622-ab25-5d3a5327ee02",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a846df72-335a-4ece-b9a7-a6871168407c",
        "cursor": {
          "ref": "5c28d755-27db-4468-b5b3-e806ce230a06",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0dd20c40-1e18-4ae8-baea-1f231df6b0c1"
        },
        "item": {
          "id": "a846df72-335a-4ece-b9a7-a6871168407c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a8cd71c0-285e-4909-9dea-3a779ccedf22",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "1516aba3-a25c-4c0b-8539-812902979e1e",
        "cursor": {
          "ref": "b400fd30-e984-471d-b94e-1e2d7b7949e3",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5dfa5a1b-b098-434d-8657-5fee1c255903"
        },
        "item": {
          "id": "1516aba3-a25c-4c0b-8539-812902979e1e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d5ba9fdf-3416-4fa3-9d0b-993872f8ea16",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "1516aba3-a25c-4c0b-8539-812902979e1e",
        "cursor": {
          "ref": "b400fd30-e984-471d-b94e-1e2d7b7949e3",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5dfa5a1b-b098-434d-8657-5fee1c255903"
        },
        "item": {
          "id": "1516aba3-a25c-4c0b-8539-812902979e1e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d5ba9fdf-3416-4fa3-9d0b-993872f8ea16",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "a9a79712-8e3c-4b6e-9731-63858df76bc1",
        "cursor": {
          "ref": "cf71d713-6bb9-4c17-847c-c11e6ed865e6",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "175dd776-b8e8-43a3-b1a6-92280b2ea994"
        },
        "item": {
          "id": "a9a79712-8e3c-4b6e-9731-63858df76bc1",
          "name": "identifiers"
        },
        "response": {
          "id": "046ddede-8bd3-4972-bcdb-4fccf08d36ab",
          "status": "OK",
          "code": 200,
          "responseTime": 158,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "423e564d-1ea0-40bc-ae3e-1124ba4e9501",
        "cursor": {
          "ref": "9e6dc1d6-d31c-444d-878e-b65354a4431c",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "778b0837-964d-4b3f-9a92-b747acf5b61b"
        },
        "item": {
          "id": "423e564d-1ea0-40bc-ae3e-1124ba4e9501",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "fdab9495-b036-4ff1-8150-933216f36ebb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 337,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "423e564d-1ea0-40bc-ae3e-1124ba4e9501",
        "cursor": {
          "ref": "9e6dc1d6-d31c-444d-878e-b65354a4431c",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "778b0837-964d-4b3f-9a92-b747acf5b61b"
        },
        "item": {
          "id": "423e564d-1ea0-40bc-ae3e-1124ba4e9501",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "fdab9495-b036-4ff1-8150-933216f36ebb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 337,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "423e564d-1ea0-40bc-ae3e-1124ba4e9501",
        "cursor": {
          "ref": "9e6dc1d6-d31c-444d-878e-b65354a4431c",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "778b0837-964d-4b3f-9a92-b747acf5b61b"
        },
        "item": {
          "id": "423e564d-1ea0-40bc-ae3e-1124ba4e9501",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "fdab9495-b036-4ff1-8150-933216f36ebb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 337,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "362cfa8a-4275-4fce-85fe-7e2e5b150b1f",
        "cursor": {
          "ref": "214afaba-90ce-4166-8683-bde5805c16d6",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f638727c-2aab-4344-a214-71b6354c2165"
        },
        "item": {
          "id": "362cfa8a-4275-4fce-85fe-7e2e5b150b1f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "0c894c48-fecd-46ba-afa8-ffa07f33413d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 101,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "362cfa8a-4275-4fce-85fe-7e2e5b150b1f",
        "cursor": {
          "ref": "214afaba-90ce-4166-8683-bde5805c16d6",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f638727c-2aab-4344-a214-71b6354c2165"
        },
        "item": {
          "id": "362cfa8a-4275-4fce-85fe-7e2e5b150b1f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "0c894c48-fecd-46ba-afa8-ffa07f33413d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 101,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "84f95774-594c-4084-ad7e-83f31844f225",
        "cursor": {
          "ref": "d2699c0f-007b-4269-b205-3c8dea551ecb",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f7d09155-8b83-4d80-9b76-af131c1f4fd8"
        },
        "item": {
          "id": "84f95774-594c-4084-ad7e-83f31844f225",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "018bb2e7-a200-4011-b2af-92db115501d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 105,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "84f95774-594c-4084-ad7e-83f31844f225",
        "cursor": {
          "ref": "d2699c0f-007b-4269-b205-3c8dea551ecb",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f7d09155-8b83-4d80-9b76-af131c1f4fd8"
        },
        "item": {
          "id": "84f95774-594c-4084-ad7e-83f31844f225",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "018bb2e7-a200-4011-b2af-92db115501d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 105,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "3df009fd-9066-4b69-b258-b90129e6c7ce",
        "cursor": {
          "ref": "66eb03cc-5514-4c21-9d80-bf8ef0a5ee2c",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d6f024cf-fab8-438b-9ec1-cd99ca3afb37"
        },
        "item": {
          "id": "3df009fd-9066-4b69-b258-b90129e6c7ce",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "1ebf017d-ac1f-4c03-b8ba-b82c584a927e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 104,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "3df009fd-9066-4b69-b258-b90129e6c7ce",
        "cursor": {
          "ref": "66eb03cc-5514-4c21-9d80-bf8ef0a5ee2c",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d6f024cf-fab8-438b-9ec1-cd99ca3afb37"
        },
        "item": {
          "id": "3df009fd-9066-4b69-b258-b90129e6c7ce",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "1ebf017d-ac1f-4c03-b8ba-b82c584a927e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 104,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "9a3728e7-fbb8-4c98-8f0a-442d6b8dd11b",
        "cursor": {
          "ref": "0107a8cd-8fc4-4909-86ff-1327ae09178b",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "09189a0d-02eb-4f6c-95df-2af12e47b3bb"
        },
        "item": {
          "id": "9a3728e7-fbb8-4c98-8f0a-442d6b8dd11b",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "7e066c5d-9f12-4b7e-aa46-bd973ff80439",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 102,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "9a3728e7-fbb8-4c98-8f0a-442d6b8dd11b",
        "cursor": {
          "ref": "0107a8cd-8fc4-4909-86ff-1327ae09178b",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "09189a0d-02eb-4f6c-95df-2af12e47b3bb"
        },
        "item": {
          "id": "9a3728e7-fbb8-4c98-8f0a-442d6b8dd11b",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "7e066c5d-9f12-4b7e-aa46-bd973ff80439",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 102,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "daefdbc4-46b8-4c28-a50c-e84cfca6ccac",
        "cursor": {
          "ref": "f667e336-6f2c-42cf-9854-dc8a67abe882",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b01d9fe9-d10c-4afa-a76b-ecf9c1bd7139"
        },
        "item": {
          "id": "daefdbc4-46b8-4c28-a50c-e84cfca6ccac",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a19dda56-5f8a-4764-975a-684adfb5d6f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "daefdbc4-46b8-4c28-a50c-e84cfca6ccac",
        "cursor": {
          "ref": "f667e336-6f2c-42cf-9854-dc8a67abe882",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b01d9fe9-d10c-4afa-a76b-ecf9c1bd7139"
        },
        "item": {
          "id": "daefdbc4-46b8-4c28-a50c-e84cfca6ccac",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a19dda56-5f8a-4764-975a-684adfb5d6f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "3f2477a1-f881-4261-984c-6ec5054ec62b",
        "cursor": {
          "ref": "2a77d7c5-b202-4f62-934e-beea7100d4a7",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "53ccf5e4-cf5d-4b8f-9dc4-bc8a493c3dc9"
        },
        "item": {
          "id": "3f2477a1-f881-4261-984c-6ec5054ec62b",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "7348c370-fa8c-4825-bbaf-f853357453ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 99,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "3f2477a1-f881-4261-984c-6ec5054ec62b",
        "cursor": {
          "ref": "2a77d7c5-b202-4f62-934e-beea7100d4a7",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "53ccf5e4-cf5d-4b8f-9dc4-bc8a493c3dc9"
        },
        "item": {
          "id": "3f2477a1-f881-4261-984c-6ec5054ec62b",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "7348c370-fa8c-4825-bbaf-f853357453ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 99,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "75a928b2-4a57-4481-8b90-d77e43f7f552",
        "cursor": {
          "ref": "398e3f7a-6551-4045-a12c-e41f52d5c182",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "71150ce2-5770-47f9-b84a-57eaaeddfc1e"
        },
        "item": {
          "id": "75a928b2-4a57-4481-8b90-d77e43f7f552",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "8e59818a-4fbe-47a6-82ab-94c4a8e96808",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "75a928b2-4a57-4481-8b90-d77e43f7f552",
        "cursor": {
          "ref": "398e3f7a-6551-4045-a12c-e41f52d5c182",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "71150ce2-5770-47f9-b84a-57eaaeddfc1e"
        },
        "item": {
          "id": "75a928b2-4a57-4481-8b90-d77e43f7f552",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "8e59818a-4fbe-47a6-82ab-94c4a8e96808",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "928f3455-615e-4b9c-b968-a8b14209721f",
        "cursor": {
          "ref": "2249c7bd-e05a-4b43-b87b-16a24918603f",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "24e985d5-f7df-42d7-a662-a4585734f6d6"
        },
        "item": {
          "id": "928f3455-615e-4b9c-b968-a8b14209721f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3f7810f5-d384-45cf-8601-0a78ff0e252a",
          "status": "Created",
          "code": 201,
          "responseTime": 110,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "928f3455-615e-4b9c-b968-a8b14209721f",
        "cursor": {
          "ref": "2249c7bd-e05a-4b43-b87b-16a24918603f",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "24e985d5-f7df-42d7-a662-a4585734f6d6"
        },
        "item": {
          "id": "928f3455-615e-4b9c-b968-a8b14209721f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3f7810f5-d384-45cf-8601-0a78ff0e252a",
          "status": "Created",
          "code": 201,
          "responseTime": 110,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "dee605a1-0399-4c1e-a892-edf38a4f8dee",
        "cursor": {
          "ref": "19babdd6-15fc-4c62-b26f-a13d31e26b89",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "83a48ee9-5bfb-4395-bf9b-0cd5428e4132"
        },
        "item": {
          "id": "dee605a1-0399-4c1e-a892-edf38a4f8dee",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "a54102a1-9f4b-4003-9285-9347e3e6078c",
          "status": "Created",
          "code": 201,
          "responseTime": 123,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "dee605a1-0399-4c1e-a892-edf38a4f8dee",
        "cursor": {
          "ref": "19babdd6-15fc-4c62-b26f-a13d31e26b89",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "83a48ee9-5bfb-4395-bf9b-0cd5428e4132"
        },
        "item": {
          "id": "dee605a1-0399-4c1e-a892-edf38a4f8dee",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "a54102a1-9f4b-4003-9285-9347e3e6078c",
          "status": "Created",
          "code": 201,
          "responseTime": 123,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "c916eb4c-ae78-4274-97b8-9df95ca375bd",
        "cursor": {
          "ref": "22082faf-bceb-4f1b-a0d4-25a85da03075",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9b1fa450-f21b-4e51-a6a7-8e642ac97140"
        },
        "item": {
          "id": "c916eb4c-ae78-4274-97b8-9df95ca375bd",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "26ad1da7-1bb8-45c0-b288-9e6978ae7e47",
          "status": "Created",
          "code": 201,
          "responseTime": 114,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "c916eb4c-ae78-4274-97b8-9df95ca375bd",
        "cursor": {
          "ref": "22082faf-bceb-4f1b-a0d4-25a85da03075",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9b1fa450-f21b-4e51-a6a7-8e642ac97140"
        },
        "item": {
          "id": "c916eb4c-ae78-4274-97b8-9df95ca375bd",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "26ad1da7-1bb8-45c0-b288-9e6978ae7e47",
          "status": "Created",
          "code": 201,
          "responseTime": 114,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "d75bf73c-3fd8-4ada-b96b-f0c145635646",
        "cursor": {
          "ref": "1c10d0a5-c92f-4eb7-a3d9-fa1e8a61fcf0",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7e668e9b-48d4-4e7d-a11c-492fbb477502"
        },
        "item": {
          "id": "d75bf73c-3fd8-4ada-b96b-f0c145635646",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d9eccae7-fbe1-44b9-afa8-84327cd4c145",
          "status": "Created",
          "code": 201,
          "responseTime": 110,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "d75bf73c-3fd8-4ada-b96b-f0c145635646",
        "cursor": {
          "ref": "1c10d0a5-c92f-4eb7-a3d9-fa1e8a61fcf0",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7e668e9b-48d4-4e7d-a11c-492fbb477502"
        },
        "item": {
          "id": "d75bf73c-3fd8-4ada-b96b-f0c145635646",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d9eccae7-fbe1-44b9-afa8-84327cd4c145",
          "status": "Created",
          "code": 201,
          "responseTime": 110,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "e4db2834-7fe5-4502-ae77-f7d5c248a63e",
        "cursor": {
          "ref": "ba51a71c-eae2-4ab0-bbd6-832f2418a508",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "72993eac-1268-4286-94e3-b66f19350619"
        },
        "item": {
          "id": "e4db2834-7fe5-4502-ae77-f7d5c248a63e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "45375fd3-b497-4482-93b7-d1148b26969f",
          "status": "Created",
          "code": 201,
          "responseTime": 121,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "e4db2834-7fe5-4502-ae77-f7d5c248a63e",
        "cursor": {
          "ref": "ba51a71c-eae2-4ab0-bbd6-832f2418a508",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "72993eac-1268-4286-94e3-b66f19350619"
        },
        "item": {
          "id": "e4db2834-7fe5-4502-ae77-f7d5c248a63e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "45375fd3-b497-4482-93b7-d1148b26969f",
          "status": "Created",
          "code": 201,
          "responseTime": 121,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "e2ab8bae-679d-4dc3-95cc-8af0de95dc40",
        "cursor": {
          "ref": "dc90d157-3b7d-4f45-b957-27aba8dc5060",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9e914a75-9274-4e45-b712-86b0d6732281"
        },
        "item": {
          "id": "e2ab8bae-679d-4dc3-95cc-8af0de95dc40",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "1e565de1-ebaf-435a-95b7-3c75ce3d63be",
          "status": "Created",
          "code": 201,
          "responseTime": 114,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "e2ab8bae-679d-4dc3-95cc-8af0de95dc40",
        "cursor": {
          "ref": "dc90d157-3b7d-4f45-b957-27aba8dc5060",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9e914a75-9274-4e45-b712-86b0d6732281"
        },
        "item": {
          "id": "e2ab8bae-679d-4dc3-95cc-8af0de95dc40",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "1e565de1-ebaf-435a-95b7-3c75ce3d63be",
          "status": "Created",
          "code": 201,
          "responseTime": 114,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "7d1175cf-75a1-4be3-8c0b-77ac2235d1b5",
        "cursor": {
          "ref": "ab209970-fa2f-4735-8e35-fe8e10f861d8",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "91b96fa3-8e4c-4bdf-8f3d-29f18acc3e82"
        },
        "item": {
          "id": "7d1175cf-75a1-4be3-8c0b-77ac2235d1b5",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "b0a25300-3dd6-41a0-8e66-d67b0522ecf6",
          "status": "Created",
          "code": 201,
          "responseTime": 107,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "7d1175cf-75a1-4be3-8c0b-77ac2235d1b5",
        "cursor": {
          "ref": "ab209970-fa2f-4735-8e35-fe8e10f861d8",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "91b96fa3-8e4c-4bdf-8f3d-29f18acc3e82"
        },
        "item": {
          "id": "7d1175cf-75a1-4be3-8c0b-77ac2235d1b5",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "b0a25300-3dd6-41a0-8e66-d67b0522ecf6",
          "status": "Created",
          "code": 201,
          "responseTime": 107,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "40528f88-a46f-456b-ae08-3198df9b3b8d",
        "cursor": {
          "ref": "ea678f05-f0a3-4e1e-afe3-509490460fe9",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "82446d92-bebc-4ab6-9e85-68605dfe11e2"
        },
        "item": {
          "id": "40528f88-a46f-456b-ae08-3198df9b3b8d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "cdaa5746-d058-4b58-8ef5-d57c7023765c",
          "status": "Created",
          "code": 201,
          "responseTime": 107,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "40528f88-a46f-456b-ae08-3198df9b3b8d",
        "cursor": {
          "ref": "ea678f05-f0a3-4e1e-afe3-509490460fe9",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "82446d92-bebc-4ab6-9e85-68605dfe11e2"
        },
        "item": {
          "id": "40528f88-a46f-456b-ae08-3198df9b3b8d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "cdaa5746-d058-4b58-8ef5-d57c7023765c",
          "status": "Created",
          "code": 201,
          "responseTime": 107,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "de8932df-256d-458f-a934-1bf0bd67958b",
        "cursor": {
          "ref": "ab30fa4c-6027-425e-b16b-991708f57309",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c9fe55d9-cbc3-42de-a86a-7f2caadf5036"
        },
        "item": {
          "id": "de8932df-256d-458f-a934-1bf0bd67958b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "35a3e871-9913-43ce-ae3f-5c9a7f4c5524",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "de8932df-256d-458f-a934-1bf0bd67958b",
        "cursor": {
          "ref": "ab30fa4c-6027-425e-b16b-991708f57309",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c9fe55d9-cbc3-42de-a86a-7f2caadf5036"
        },
        "item": {
          "id": "de8932df-256d-458f-a934-1bf0bd67958b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "35a3e871-9913-43ce-ae3f-5c9a7f4c5524",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "2de5a6f2-318e-4309-8de1-18e6bc5b90e6",
        "cursor": {
          "ref": "3e111bc2-a867-4018-9b82-08aa64b5887b",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "66f55ad3-b295-4e41-b96b-1f844e3b8977"
        },
        "item": {
          "id": "2de5a6f2-318e-4309-8de1-18e6bc5b90e6",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "70040ee0-5ebb-435a-b072-892ddda39566",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 99,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "2de5a6f2-318e-4309-8de1-18e6bc5b90e6",
        "cursor": {
          "ref": "3e111bc2-a867-4018-9b82-08aa64b5887b",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "66f55ad3-b295-4e41-b96b-1f844e3b8977"
        },
        "item": {
          "id": "2de5a6f2-318e-4309-8de1-18e6bc5b90e6",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "70040ee0-5ebb-435a-b072-892ddda39566",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 99,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "5b61f846-79d1-4366-bf97-2b76d91f3a0b",
        "cursor": {
          "ref": "83c191c4-f620-41f0-953d-4b0083c37c98",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6310eff4-4cea-4e7c-95ae-4f315d79822d"
        },
        "item": {
          "id": "5b61f846-79d1-4366-bf97-2b76d91f3a0b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "2971b578-1ef3-416d-a73d-afa7168c7bb7",
          "status": "Created",
          "code": 201,
          "responseTime": 107,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "5b61f846-79d1-4366-bf97-2b76d91f3a0b",
        "cursor": {
          "ref": "83c191c4-f620-41f0-953d-4b0083c37c98",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6310eff4-4cea-4e7c-95ae-4f315d79822d"
        },
        "item": {
          "id": "5b61f846-79d1-4366-bf97-2b76d91f3a0b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "2971b578-1ef3-416d-a73d-afa7168c7bb7",
          "status": "Created",
          "code": 201,
          "responseTime": 107,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "90b4a3e8-b452-42ab-9384-72a6c9550b04",
        "cursor": {
          "ref": "b088b166-b87d-4ff4-aebb-48e1910ced8b",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f6daae87-8dda-4962-89a1-07fa53170d64"
        },
        "item": {
          "id": "90b4a3e8-b452-42ab-9384-72a6c9550b04",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2db15e59-dbe3-4c42-a46e-251ea9cabcd6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 157,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "90b4a3e8-b452-42ab-9384-72a6c9550b04",
        "cursor": {
          "ref": "b088b166-b87d-4ff4-aebb-48e1910ced8b",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f6daae87-8dda-4962-89a1-07fa53170d64"
        },
        "item": {
          "id": "90b4a3e8-b452-42ab-9384-72a6c9550b04",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2db15e59-dbe3-4c42-a46e-251ea9cabcd6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 157,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "96d06984-6d66-449e-9147-86ef981f759b",
        "cursor": {
          "ref": "26fd44ab-d42a-4d18-af26-ad44efe7145c",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5377bb9a-c019-4de5-a424-0a41cd04ba80"
        },
        "item": {
          "id": "96d06984-6d66-449e-9147-86ef981f759b",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "e8821c70-7db5-4553-9c3e-e02010b8bc35",
          "status": "Created",
          "code": 201,
          "responseTime": 110,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "96d06984-6d66-449e-9147-86ef981f759b",
        "cursor": {
          "ref": "26fd44ab-d42a-4d18-af26-ad44efe7145c",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5377bb9a-c019-4de5-a424-0a41cd04ba80"
        },
        "item": {
          "id": "96d06984-6d66-449e-9147-86ef981f759b",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "e8821c70-7db5-4553-9c3e-e02010b8bc35",
          "status": "Created",
          "code": 201,
          "responseTime": 110,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "b08790bb-f788-49b5-9809-2b39cf316dc3",
        "cursor": {
          "ref": "4e6e8c48-433c-43e3-8a42-bf224e19bcaf",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "57b790c3-b051-4db1-ae31-68e2af7a786f"
        },
        "item": {
          "id": "b08790bb-f788-49b5-9809-2b39cf316dc3",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "decb1d3b-b561-4cca-bebc-3074559586be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "b08790bb-f788-49b5-9809-2b39cf316dc3",
        "cursor": {
          "ref": "4e6e8c48-433c-43e3-8a42-bf224e19bcaf",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "57b790c3-b051-4db1-ae31-68e2af7a786f"
        },
        "item": {
          "id": "b08790bb-f788-49b5-9809-2b39cf316dc3",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "decb1d3b-b561-4cca-bebc-3074559586be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "74829ab8-6f76-4e96-8388-bcc66444cd3e",
        "cursor": {
          "ref": "2d8c0043-1e7d-4b2a-af67-2110683e04cb",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e0c15347-d2f4-4afb-8e8e-8b0cb36972b4"
        },
        "item": {
          "id": "74829ab8-6f76-4e96-8388-bcc66444cd3e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2cc2c8cf-11ab-46b1-8d0c-249477c27e64",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "74829ab8-6f76-4e96-8388-bcc66444cd3e",
        "cursor": {
          "ref": "2d8c0043-1e7d-4b2a-af67-2110683e04cb",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e0c15347-d2f4-4afb-8e8e-8b0cb36972b4"
        },
        "item": {
          "id": "74829ab8-6f76-4e96-8388-bcc66444cd3e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2cc2c8cf-11ab-46b1-8d0c-249477c27e64",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "8ddad0aa-bc3a-42f1-9e14-52dc16f9d810",
        "cursor": {
          "ref": "10a5fcfd-4a52-4d67-ada3-34aee5f67e85",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "892429c8-8922-47e3-ae55-e242778dcd2c"
        },
        "item": {
          "id": "8ddad0aa-bc3a-42f1-9e14-52dc16f9d810",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "27fc0d7e-b413-4713-a06a-e698eba5d7d5",
          "status": "Created",
          "code": 201,
          "responseTime": 148,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "8ddad0aa-bc3a-42f1-9e14-52dc16f9d810",
        "cursor": {
          "ref": "10a5fcfd-4a52-4d67-ada3-34aee5f67e85",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "892429c8-8922-47e3-ae55-e242778dcd2c"
        },
        "item": {
          "id": "8ddad0aa-bc3a-42f1-9e14-52dc16f9d810",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "27fc0d7e-b413-4713-a06a-e698eba5d7d5",
          "status": "Created",
          "code": 201,
          "responseTime": 148,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "75373b23-e880-449b-a8ac-bfd8187a2d7b",
        "cursor": {
          "ref": "a0f749c2-32ef-4ee2-8e3b-3ac260e4b97b",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f87d6300-7e28-42ce-95dd-4d9b9a7d84fd"
        },
        "item": {
          "id": "75373b23-e880-449b-a8ac-bfd8187a2d7b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0c7a7905-a409-49d3-a398-c8c7f5ac1837",
          "status": "Created",
          "code": 201,
          "responseTime": 106,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "75373b23-e880-449b-a8ac-bfd8187a2d7b",
        "cursor": {
          "ref": "a0f749c2-32ef-4ee2-8e3b-3ac260e4b97b",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f87d6300-7e28-42ce-95dd-4d9b9a7d84fd"
        },
        "item": {
          "id": "75373b23-e880-449b-a8ac-bfd8187a2d7b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0c7a7905-a409-49d3-a398-c8c7f5ac1837",
          "status": "Created",
          "code": 201,
          "responseTime": 106,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "7d616966-37fc-4ef1-9996-e2a39c6d69a9",
        "cursor": {
          "ref": "652026e0-1691-4679-898f-c503a9df0942",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "970f6789-5ada-4773-8ef6-61f9ab398902"
        },
        "item": {
          "id": "7d616966-37fc-4ef1-9996-e2a39c6d69a9",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "c8f8bc2d-6674-4965-954d-9cae5c8cf307",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "7d616966-37fc-4ef1-9996-e2a39c6d69a9",
        "cursor": {
          "ref": "652026e0-1691-4679-898f-c503a9df0942",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "970f6789-5ada-4773-8ef6-61f9ab398902"
        },
        "item": {
          "id": "7d616966-37fc-4ef1-9996-e2a39c6d69a9",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "c8f8bc2d-6674-4965-954d-9cae5c8cf307",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "5e9da023-a3c2-4960-bc95-fee649767b25",
        "cursor": {
          "ref": "b8fdafdc-5da3-48cc-8573-3c1ae5fcb98e",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c472fcf1-9f79-4e5d-a5a1-4a48ace37f73"
        },
        "item": {
          "id": "5e9da023-a3c2-4960-bc95-fee649767b25",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "81c3360c-8265-4a32-9218-c8d7d3edcab0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "5e9da023-a3c2-4960-bc95-fee649767b25",
        "cursor": {
          "ref": "b8fdafdc-5da3-48cc-8573-3c1ae5fcb98e",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c472fcf1-9f79-4e5d-a5a1-4a48ace37f73"
        },
        "item": {
          "id": "5e9da023-a3c2-4960-bc95-fee649767b25",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "81c3360c-8265-4a32-9218-c8d7d3edcab0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "76e479a1-43b7-40a9-89c3-49d16f259cd7",
        "cursor": {
          "ref": "4d1027af-b186-44b3-b358-310ee78357f9",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "82d0e71c-708b-4e41-b991-a98e42b3e21d"
        },
        "item": {
          "id": "76e479a1-43b7-40a9-89c3-49d16f259cd7",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "46084318-4930-418f-872b-f99b2a0110c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "76e479a1-43b7-40a9-89c3-49d16f259cd7",
        "cursor": {
          "ref": "4d1027af-b186-44b3-b358-310ee78357f9",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "82d0e71c-708b-4e41-b991-a98e42b3e21d"
        },
        "item": {
          "id": "76e479a1-43b7-40a9-89c3-49d16f259cd7",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "46084318-4930-418f-872b-f99b2a0110c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "e45037c9-dc09-4385-95a0-7bdeacb2da17",
        "cursor": {
          "ref": "08f2a0d1-1e6b-4ed2-94d9-d99e38244ec0",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ba80628e-923b-4155-981a-a2fed61714d6"
        },
        "item": {
          "id": "e45037c9-dc09-4385-95a0-7bdeacb2da17",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "3634aabe-e23a-47b8-850d-d6119c7f3628",
          "status": "Created",
          "code": 201,
          "responseTime": 117,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "e45037c9-dc09-4385-95a0-7bdeacb2da17",
        "cursor": {
          "ref": "08f2a0d1-1e6b-4ed2-94d9-d99e38244ec0",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ba80628e-923b-4155-981a-a2fed61714d6"
        },
        "item": {
          "id": "e45037c9-dc09-4385-95a0-7bdeacb2da17",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "3634aabe-e23a-47b8-850d-d6119c7f3628",
          "status": "Created",
          "code": 201,
          "responseTime": 117,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "3d44f3a2-fbc8-44b0-8a9c-5d0a5071a36d",
        "cursor": {
          "ref": "7f270150-d33f-4025-8423-7db94bf59d67",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0b5ac451-55d1-44a4-8478-05142bd7e240"
        },
        "item": {
          "id": "3d44f3a2-fbc8-44b0-8a9c-5d0a5071a36d",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "79d1eba9-d58e-45d8-86f1-1c4c8dbf1cdb",
          "status": "Created",
          "code": 201,
          "responseTime": 111,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "3d44f3a2-fbc8-44b0-8a9c-5d0a5071a36d",
        "cursor": {
          "ref": "7f270150-d33f-4025-8423-7db94bf59d67",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0b5ac451-55d1-44a4-8478-05142bd7e240"
        },
        "item": {
          "id": "3d44f3a2-fbc8-44b0-8a9c-5d0a5071a36d",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "79d1eba9-d58e-45d8-86f1-1c4c8dbf1cdb",
          "status": "Created",
          "code": 201,
          "responseTime": 111,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "9b98ec30-0351-4040-b547-d797dade7dbb",
        "cursor": {
          "ref": "366b8df2-7582-4aed-85dd-3b0f869b3c23",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8e67d17b-372f-4b13-a277-d5f083d416a7"
        },
        "item": {
          "id": "9b98ec30-0351-4040-b547-d797dade7dbb",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "bd4c70c4-26d9-4b19-bf0a-a7be4c1360b0",
          "status": "Created",
          "code": 201,
          "responseTime": 111,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "9b98ec30-0351-4040-b547-d797dade7dbb",
        "cursor": {
          "ref": "366b8df2-7582-4aed-85dd-3b0f869b3c23",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8e67d17b-372f-4b13-a277-d5f083d416a7"
        },
        "item": {
          "id": "9b98ec30-0351-4040-b547-d797dade7dbb",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "bd4c70c4-26d9-4b19-bf0a-a7be4c1360b0",
          "status": "Created",
          "code": 201,
          "responseTime": 111,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "52041e1e-4a36-488d-9bdc-fe88ea24fa85",
        "cursor": {
          "ref": "0dbdca87-0e71-49eb-8493-b011ef357d20",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f4a7524e-5d5d-4f69-9ddc-e538268b9e5e"
        },
        "item": {
          "id": "52041e1e-4a36-488d-9bdc-fe88ea24fa85",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0a73e23f-0cb1-44b5-82b7-60a78b16c5d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "52041e1e-4a36-488d-9bdc-fe88ea24fa85",
        "cursor": {
          "ref": "0dbdca87-0e71-49eb-8493-b011ef357d20",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f4a7524e-5d5d-4f69-9ddc-e538268b9e5e"
        },
        "item": {
          "id": "52041e1e-4a36-488d-9bdc-fe88ea24fa85",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0a73e23f-0cb1-44b5-82b7-60a78b16c5d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "59f19e96-14f3-49ae-810f-cdf60687cfee",
        "cursor": {
          "ref": "7c4695f6-bc88-4ea0-beb6-25ff8c8eca3b",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "1110123d-32ab-421d-8be8-7fa7fe1f0c1b"
        },
        "item": {
          "id": "59f19e96-14f3-49ae-810f-cdf60687cfee",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "290f938f-2744-4536-951f-672555c65411",
          "status": "Created",
          "code": 201,
          "responseTime": 111,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "59f19e96-14f3-49ae-810f-cdf60687cfee",
        "cursor": {
          "ref": "7c4695f6-bc88-4ea0-beb6-25ff8c8eca3b",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "1110123d-32ab-421d-8be8-7fa7fe1f0c1b"
        },
        "item": {
          "id": "59f19e96-14f3-49ae-810f-cdf60687cfee",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "290f938f-2744-4536-951f-672555c65411",
          "status": "Created",
          "code": 201,
          "responseTime": 111,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "ea073360-cef8-49f7-8a4d-c6e23ea99dc5",
        "cursor": {
          "ref": "e2a044c0-7977-4004-96a4-5dfd7f38bec3",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "29c5db85-39c1-4b48-824b-323bd5743053"
        },
        "item": {
          "id": "ea073360-cef8-49f7-8a4d-c6e23ea99dc5",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b59eb018-9f71-4c8b-a0e6-6f9e1c86a58f",
          "status": "Created",
          "code": 201,
          "responseTime": 107,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea073360-cef8-49f7-8a4d-c6e23ea99dc5",
        "cursor": {
          "ref": "e2a044c0-7977-4004-96a4-5dfd7f38bec3",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "29c5db85-39c1-4b48-824b-323bd5743053"
        },
        "item": {
          "id": "ea073360-cef8-49f7-8a4d-c6e23ea99dc5",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b59eb018-9f71-4c8b-a0e6-6f9e1c86a58f",
          "status": "Created",
          "code": 201,
          "responseTime": 107,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7013a2f-3ae1-46c3-888b-0c8664b1a5a7",
        "cursor": {
          "ref": "d0cb3321-deb6-49a3-930d-79295d0931f5",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5925441b-0a66-4f28-9e33-911e2ba41d9c"
        },
        "item": {
          "id": "f7013a2f-3ae1-46c3-888b-0c8664b1a5a7",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "f3aa111a-0af1-468a-9f7b-bc68e8a46834",
          "status": "Created",
          "code": 201,
          "responseTime": 107,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "f7013a2f-3ae1-46c3-888b-0c8664b1a5a7",
        "cursor": {
          "ref": "d0cb3321-deb6-49a3-930d-79295d0931f5",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5925441b-0a66-4f28-9e33-911e2ba41d9c"
        },
        "item": {
          "id": "f7013a2f-3ae1-46c3-888b-0c8664b1a5a7",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "f3aa111a-0af1-468a-9f7b-bc68e8a46834",
          "status": "Created",
          "code": 201,
          "responseTime": 107,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "b76aa59b-fabf-48cb-80f0-0b709c72c4ab",
        "cursor": {
          "ref": "519759f4-fd8d-4428-b3e7-a2c4ba19b24b",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "24600574-a994-4e70-bf13-d253fd274087"
        },
        "item": {
          "id": "b76aa59b-fabf-48cb-80f0-0b709c72c4ab",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "34028bbd-b4b2-4815-af40-b3995cd208ee",
          "status": "Created",
          "code": 201,
          "responseTime": 107,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b76aa59b-fabf-48cb-80f0-0b709c72c4ab",
        "cursor": {
          "ref": "519759f4-fd8d-4428-b3e7-a2c4ba19b24b",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "24600574-a994-4e70-bf13-d253fd274087"
        },
        "item": {
          "id": "b76aa59b-fabf-48cb-80f0-0b709c72c4ab",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "34028bbd-b4b2-4815-af40-b3995cd208ee",
          "status": "Created",
          "code": 201,
          "responseTime": 107,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e44d0820-3ab2-4be7-a53a-a7bb118de5f6",
        "cursor": {
          "ref": "f1a7831d-88f1-4c4d-b792-2aef5be9c05d",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "17fd805e-b32a-4c79-a3ca-971e1ec7684f"
        },
        "item": {
          "id": "e44d0820-3ab2-4be7-a53a-a7bb118de5f6",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "84107084-1b73-4f91-b377-010a8abf6d9a",
          "status": "Created",
          "code": 201,
          "responseTime": 109,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e44d0820-3ab2-4be7-a53a-a7bb118de5f6",
        "cursor": {
          "ref": "f1a7831d-88f1-4c4d-b792-2aef5be9c05d",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "17fd805e-b32a-4c79-a3ca-971e1ec7684f"
        },
        "item": {
          "id": "e44d0820-3ab2-4be7-a53a-a7bb118de5f6",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "84107084-1b73-4f91-b377-010a8abf6d9a",
          "status": "Created",
          "code": 201,
          "responseTime": 109,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "91826806-b00c-4f10-84a6-24c08762579e",
        "cursor": {
          "ref": "b7a0be5c-da66-4757-89e2-2dc8823959c4",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ccb54000-e24e-4506-81ee-b3ac9b466856"
        },
        "item": {
          "id": "91826806-b00c-4f10-84a6-24c08762579e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d30085ac-7db7-47cd-9fa9-ed90091b6089",
          "status": "Created",
          "code": 201,
          "responseTime": 114,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "91826806-b00c-4f10-84a6-24c08762579e",
        "cursor": {
          "ref": "b7a0be5c-da66-4757-89e2-2dc8823959c4",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ccb54000-e24e-4506-81ee-b3ac9b466856"
        },
        "item": {
          "id": "91826806-b00c-4f10-84a6-24c08762579e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d30085ac-7db7-47cd-9fa9-ed90091b6089",
          "status": "Created",
          "code": 201,
          "responseTime": 114,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f600be-ce78-4b99-b57d-956def7944d5",
        "cursor": {
          "ref": "0f5913ad-04b6-45ce-b9a2-313b37be0015",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3f8cb04b-08ef-4663-a871-284d788a93fd"
        },
        "item": {
          "id": "53f600be-ce78-4b99-b57d-956def7944d5",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1b25461c-1e03-4849-a195-a99718d6ac60",
          "status": "Created",
          "code": 201,
          "responseTime": 108,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "53f600be-ce78-4b99-b57d-956def7944d5",
        "cursor": {
          "ref": "0f5913ad-04b6-45ce-b9a2-313b37be0015",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3f8cb04b-08ef-4663-a871-284d788a93fd"
        },
        "item": {
          "id": "53f600be-ce78-4b99-b57d-956def7944d5",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1b25461c-1e03-4849-a195-a99718d6ac60",
          "status": "Created",
          "code": 201,
          "responseTime": 108,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "87e47fb6-c660-408f-8fc0-2242950fd400",
        "cursor": {
          "ref": "b0e0fd52-7d98-458e-9f8e-c4d11696637d",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d9f5ebab-7afa-4f3d-a0f1-b27fbc694de3"
        },
        "item": {
          "id": "87e47fb6-c660-408f-8fc0-2242950fd400",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1644e687-208c-458c-8aff-5ab6dcb021f6",
          "status": "Created",
          "code": 201,
          "responseTime": 107,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "87e47fb6-c660-408f-8fc0-2242950fd400",
        "cursor": {
          "ref": "b0e0fd52-7d98-458e-9f8e-c4d11696637d",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d9f5ebab-7afa-4f3d-a0f1-b27fbc694de3"
        },
        "item": {
          "id": "87e47fb6-c660-408f-8fc0-2242950fd400",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1644e687-208c-458c-8aff-5ab6dcb021f6",
          "status": "Created",
          "code": 201,
          "responseTime": 107,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "aee45794-74e3-4987-b2e4-a749a2b20ae8",
        "cursor": {
          "ref": "a2a892e6-dd2e-4644-8869-2b04bfd1c6d2",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "864e1080-2ddd-4050-a91a-65ed3ed0770c"
        },
        "item": {
          "id": "aee45794-74e3-4987-b2e4-a749a2b20ae8",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "b81ce700-0770-4572-9c96-34f8b6a8e575",
          "status": "Created",
          "code": 201,
          "responseTime": 110,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "aee45794-74e3-4987-b2e4-a749a2b20ae8",
        "cursor": {
          "ref": "a2a892e6-dd2e-4644-8869-2b04bfd1c6d2",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "864e1080-2ddd-4050-a91a-65ed3ed0770c"
        },
        "item": {
          "id": "aee45794-74e3-4987-b2e4-a749a2b20ae8",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "b81ce700-0770-4572-9c96-34f8b6a8e575",
          "status": "Created",
          "code": 201,
          "responseTime": 110,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "8e0a6119-7ea5-4800-92bb-2c190406acd6",
        "cursor": {
          "ref": "d406b322-f374-4e08-a9e1-05707b8dbe2b",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c2618705-6d2c-4adb-a773-ca743fab44fa"
        },
        "item": {
          "id": "8e0a6119-7ea5-4800-92bb-2c190406acd6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d65e7e31-f806-43de-80e3-f23b9a055492",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "8e0a6119-7ea5-4800-92bb-2c190406acd6",
        "cursor": {
          "ref": "d406b322-f374-4e08-a9e1-05707b8dbe2b",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c2618705-6d2c-4adb-a773-ca743fab44fa"
        },
        "item": {
          "id": "8e0a6119-7ea5-4800-92bb-2c190406acd6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d65e7e31-f806-43de-80e3-f23b9a055492",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "596be49a-a80a-4ece-8f9c-5b5a3511a442",
        "cursor": {
          "ref": "a748aa73-4457-486f-9c00-fdb1c481e616",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "82b33a02-84f8-4752-82a6-3501711052b5"
        },
        "item": {
          "id": "596be49a-a80a-4ece-8f9c-5b5a3511a442",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "b093986b-042e-46b6-96a8-08869b7a2c3d",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 83,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "6df1d397-728c-4e72-898c-fcc21b3652f4",
        "cursor": {
          "ref": "98be03a4-7cf3-4606-ab0b-11d2af78ef3d",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e66d6c39-33c0-4783-800e-a515fe21d827"
        },
        "item": {
          "id": "6df1d397-728c-4e72-898c-fcc21b3652f4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "921212a4-1828-4f0c-911c-fdef26c4dcf9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "6df1d397-728c-4e72-898c-fcc21b3652f4",
        "cursor": {
          "ref": "98be03a4-7cf3-4606-ab0b-11d2af78ef3d",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e66d6c39-33c0-4783-800e-a515fe21d827"
        },
        "item": {
          "id": "6df1d397-728c-4e72-898c-fcc21b3652f4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "921212a4-1828-4f0c-911c-fdef26c4dcf9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "247946f2-4008-4d1f-895a-4d566c18aec8",
        "cursor": {
          "ref": "ae483af3-e790-450c-9f9c-a926b8a456d6",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e2d7cf8d-6ea1-482a-b791-8e057ad6293f"
        },
        "item": {
          "id": "247946f2-4008-4d1f-895a-4d566c18aec8",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "0b746e57-1d54-4a16-8960-cd8cdf0b9cf3",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "dbfe27c5-9710-47bc-bd19-64f52dbf3660",
        "cursor": {
          "ref": "1ca90af4-4b5d-4f17-86c8-6f12ad73e2e3",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a5027c24-c038-4eb8-b394-2e8ba2a3aa17"
        },
        "item": {
          "id": "dbfe27c5-9710-47bc-bd19-64f52dbf3660",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "25e05fee-c425-4e0c-95e2-58a7baaefc0f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 86,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "dbfe27c5-9710-47bc-bd19-64f52dbf3660",
        "cursor": {
          "ref": "1ca90af4-4b5d-4f17-86c8-6f12ad73e2e3",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a5027c24-c038-4eb8-b394-2e8ba2a3aa17"
        },
        "item": {
          "id": "dbfe27c5-9710-47bc-bd19-64f52dbf3660",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "25e05fee-c425-4e0c-95e2-58a7baaefc0f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 86,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "633d2c5b-5f45-4b14-a148-9c71edc08f88",
        "cursor": {
          "ref": "ff87d31e-0ebf-42b0-906b-fc108038c26f",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "33f8b717-8a7a-4504-8958-1c4d2cc80c00"
        },
        "item": {
          "id": "633d2c5b-5f45-4b14-a148-9c71edc08f88",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "b9298c8d-cf87-4db8-a5aa-60cca262bdb1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 85,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "55607af5-ccab-4ebe-b233-1e4900856c1d",
        "cursor": {
          "ref": "4a85a47e-1722-486a-9496-3ae90f9123e3",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "da1000ac-6897-4a77-8393-8775aaccb5a8"
        },
        "item": {
          "id": "55607af5-ccab-4ebe-b233-1e4900856c1d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5c986b56-c9ac-439b-af09-7028a4a654c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "55607af5-ccab-4ebe-b233-1e4900856c1d",
        "cursor": {
          "ref": "4a85a47e-1722-486a-9496-3ae90f9123e3",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "da1000ac-6897-4a77-8393-8775aaccb5a8"
        },
        "item": {
          "id": "55607af5-ccab-4ebe-b233-1e4900856c1d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5c986b56-c9ac-439b-af09-7028a4a654c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "4248dc4a-c66b-4a26-bfba-977bf36fb7d5",
        "cursor": {
          "ref": "3576bf83-3db6-4bc3-9e73-102be7228f8d",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "0e48b992-395a-4973-a820-2a387c0f76e6"
        },
        "item": {
          "id": "4248dc4a-c66b-4a26-bfba-977bf36fb7d5",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "552cc742-8028-489a-b3fe-a7c3eff58ab0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "599cb79c-ce66-4296-afa8-c455c3d16fae",
        "cursor": {
          "ref": "03fdb415-a2d5-450b-8510-a36495241a57",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c9897074-13d6-44d6-b20a-da35ae693ce0"
        },
        "item": {
          "id": "599cb79c-ce66-4296-afa8-c455c3d16fae",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2f75e512-3ac9-4b3f-a988-8e848be2e42f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "599cb79c-ce66-4296-afa8-c455c3d16fae",
        "cursor": {
          "ref": "03fdb415-a2d5-450b-8510-a36495241a57",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c9897074-13d6-44d6-b20a-da35ae693ce0"
        },
        "item": {
          "id": "599cb79c-ce66-4296-afa8-c455c3d16fae",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2f75e512-3ac9-4b3f-a988-8e848be2e42f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "2224dd9f-7236-4f88-a698-b4edfa720006",
        "cursor": {
          "ref": "c1f4f310-f10f-4191-b7ad-255dcb8b0441",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "30daa43f-ceb3-48c8-aedb-8b2a96effc9f"
        },
        "item": {
          "id": "2224dd9f-7236-4f88-a698-b4edfa720006",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "d1b6c7fd-0b5d-42f8-a1d5-59cbf6649aa8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      }
    ]
  }
}