{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f6bad487-9aa0-4a1f-8bbc-d8220fda8c86",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "dc7457a8-4cb4-4d8b-bb3f-29afdb6a0cc2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "513a3d15-c4b5-4592-9c63-53ab1d090444",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "84e15a09-53b7-49c2-a867-01af2055439a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f3566d0e-b71f-426c-9b07-3c77014d205e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "181bef6e-b58d-4088-8be8-2041e3cb6d7f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dd93a6ae-c8da-44ff-8b09-ce2ccd6b4c53"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7b51e614-3e1b-494b-acc0-2ae987b1961f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "adfb3a08-9c71-4be2-bfad-3ed2840230dd"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2233a6bc-5b50-44f1-926f-35dcbc617998",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "649f65d8-c984-4a43-8a99-38b5af4055f2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3776e811-e5ea-40e1-995a-6a3af3e8daad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e8378b6-7e88-4e6c-8f86-0f8bfcbba6fa"
            }
          }
        ]
      },
      {
        "id": "8425dbfe-3655-4ff6-8a4d-af28fefdd991",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4f8824a9-4713-4739-9736-f870062a7558",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b89dbe57-d717-4fb9-9d2c-b97514c9f182",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0f0b4e8a-6fd1-456c-9515-b9c628ba31f7",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "495712b1-6c99-4370-89ca-8a2ae0f97589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "623de225-ed7a-4f5d-b060-58cc011bf751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c22b39-e680-4374-a001-9b6db4407901",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a7a404-bce2-4813-9f8c-7d35be478dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "efa0df3a-94c5-4408-a629-4458b4e40e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd4a3c99-d8c6-4cfb-aaad-02e640d00e78",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f061cd57-7eec-46a8-8e6e-7a7a081000f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "05fd77f6-2a7e-4523-bf3f-d20ca55eaa5e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "da722202-c010-476a-bc39-aed9bba0d2d3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3b73a2ba-ac58-4dcf-af27-bec3cc9e5d56",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff5702c-4fc9-4779-9ea2-f2e94c4be7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "93812172-eb76-4376-a88b-5285d6bc1fed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e88639b1-70ee-4bed-a35f-4b4383914698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "343c5971-f5a0-4145-9816-e27cea0c51e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26df7de4-769c-4794-b6e7-edb8fb1007f2",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca148d37-77dc-4e72-aa94-c5c604dd8b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e8ffd58d-f76e-4aba-86e9-860b278c2f0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8198ab4c-2f7a-4c90-8361-923a449913f1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "14802e88-ab36-4e2d-ab38-e0fceeb65f52"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "540e1aa5-6297-43df-8f8b-f073d6d3b6b0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2bab188e-bce1-492a-91f4-1bc7eb6b286d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "670ed7c4-6c0b-488d-a4c0-b2de956b6d18",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2f5838b7-f62d-493d-bd20-3a216c6bed4d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e066f29b-dc19-4443-8bc3-1e107832a305",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "08d60225-180b-412f-a141-6930534c5731"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4f9fd057-24c4-402f-99e9-bf74f8b980df",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "827554d3-8314-48c8-b8bf-f345b21e74d5"
            }
          }
        ]
      },
      {
        "id": "3969b8b7-b2d5-4b23-a1b8-4d0ac2ff45a1",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "30b86209-58ae-4b35-bcf5-16b10d9b266d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fbd3081a-4e2d-4418-afae-84f6aeb8e0a8",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "d0d77190-16af-4d7e-9824-45a13ad0fc43",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be53374-20fe-44f6-bedb-9e9d7da1a398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1e9d10f-fcf8-4dd0-a7a6-447db3860c9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed960ca3-9eab-4310-9052-7bfd26c0c591",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c6fe3cf-35ac-4a2c-815b-c8076522dc31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e7d073-4f7a-4669-aff2-ed75ed210fbb",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9af55f-3be1-44cf-a2f1-2ab7da95a3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e794fa6-9d41-4446-a134-69295293dde6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16e509e-d001-47ee-a384-5fb14e250adc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b87fa9f-3c6d-4d1f-ab13-070a959e8b26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5856871-5dde-4a50-8e8c-d21910598092",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7aea234-4992-489e-8d55-a08a11ecc95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c55e06ce-c9b1-4f80-ba8f-5e84595e77ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a14a5df-18ef-45d7-bc5c-ab65c8cdf6d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc8f4401-0256-42d5-a709-49dcde8a34f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89117877-5951-4b07-84e1-37840437adbd",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c70dd4-a9f5-41a1-b728-a7356574d9c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5387a32c-6163-4310-ae0c-ebf843c51a4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e79802-0967-4f7b-9d03-f9950cff6a5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67d77c52-d191-44e5-bc06-562b458249a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf2893c-6406-47d7-87d0-8941baac10fe",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc1cdad-070a-437b-a5f9-7dc24f463acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22386cdd-da0c-4bc6-a442-545ac1303373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bbfe06f-95dd-4be1-98c4-f2e343d5e4b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5d9adea-c752-47f4-ac3f-693e85b6f82d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc8ece3-66bd-4b73-9458-0aca9d5efab6",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20de67c3-0cbb-4840-80b0-afb00708c82d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ba48b6-a0a0-46b2-8e41-30283914ee13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d1037b-1b68-4b4b-ae2f-19ddb6bcef06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6efa1eca-a3c2-4e0f-87de-2cb4d80b46de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ae922f-a62b-49a0-b726-40b93aff6b8a",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8384a0-5885-4817-bf75-ab82cc02b1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac2ddcb9-336d-46ef-aeb3-51c8ef7de902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99a2c236-3326-43d2-b503-72ebef16fb78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aeffa24a-a2df-4583-89c5-d0e348e682c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea83e453-ed4f-4bb7-a51f-e281eaca1f5c",
                    "name": "credentials_issue:credential.type.members:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a137368-b31e-4150-803d-7386b0fb9143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4bd495a-039c-44a0-82fd-37d82d448b1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e03700-f748-4c11-bd79-3981fa58d0af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain at least one element",
                            "rawBody.credential.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b35f7b58-d849-47de-a647-b0308038e662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c86cdd92-51ec-4ca1-a1bf-098bab31ef4e",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88f4ac1-c1e0-41cc-83bc-be61d87b2474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41516fcf-47cc-4595-bc39-9cdc7c7bd972"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0214db71-08ee-4e50-a258-b6ef424cc12d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "424fa01e-e017-4951-966a-8d05d0149560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e5b811-9e3f-4af4-a320-2dec6baab5a6",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb7b49b1-69ee-4077-a8b5-ea532647f434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7cd77a7-8bf9-49e9-b8fa-45f2e0880ed4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a196322d-70b5-4b66-8d95-c8dfbf2245b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adf22445-41c5-4f00-88a7-fc01b49d666c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b8d9d1b-79db-43c1-a2f2-ddbd5e0c9751",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d218315b-d226-41eb-ab29-0cbb04a6ac37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80bade35-2e1f-4dd6-bceb-885c5619729e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53cfe246-343d-407b-a121-ac2c57020e80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c521c1c2-1b9f-43c9-9ebd-867f553264fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c83ba9a-27d0-428e-ab40-687b7cb73971",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae080fc-2744-49e9-bae2-3b1f45c40a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d223677d-5875-46fa-8344-b95d31feb004"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6f0096c-05ed-4144-85ea-28d4051610cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "3a043878-3506-4995-8b49-18b3d364252c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ae4fe4-5670-41d6-9d0b-6dfcf574383b",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f1aa3b-db7d-410f-8d29-ad51489d72bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0537509e-98b3-4e05-9293-7b0b55a0c2b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "792c2212-85ff-44f4-864c-876a271ef731",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "cb7abc3d-d374-4178-b3eb-5572d460dbcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4334c096-412a-4ec8-a1fd-8efa599b86ee",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad5aad2a-7452-4910-a619-25951365ba35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d41b9505-54ec-481b-bd9b-9a11336840a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd43e11-ae4f-42ae-9556-7b06efde33c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81427df9-9269-412a-b693-05f037c2a209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60bb8894-9e9b-4f42-a327-1a2a6ce3b568",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2147d3a-8004-4a70-95d8-4fb18a2c5d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a45ee9c-0307-4b30-ab69-cb16e9ed40a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44c4c16-feaf-452e-b304-94d900de5367",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3695191b-a449-47c0-88be-68fee62269b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633a2b01-234a-4297-bfe3-3bc7e53c7f8f",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c52440b-56b5-4e14-8cf8-46153cfd2775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fa69680-93e4-4110-ab9d-7f0ee4e3ab99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e217bf44-3291-4df6-a3e6-a4efd3d8bff7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "9458b84a-5a66-4b55-b9fd-7e2458c58336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab4bb6d-d5ea-4d66-8a7c-b739c949b696",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e38f7e5f-ce3c-4208-9a4d-e1264b9129ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66b5dd89-7a06-4a75-8e93-61da819c33b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b911c2e-08c5-4fb3-8008-0413d8508c88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "4a156d11-a108-443b-9138-c02d293379b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94e4d0c-e8e2-4fe5-8d0f-b064051daa1a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd108900-fb30-48a1-a2dd-ca80d0fca0f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8910dfb3-245c-49ff-9c39-379d9f517279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1344aea3-bdf6-4e0a-9c3e-31c7a36e16d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20e0520b-ca35-495d-9b13-ad2c6d3882e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "609de6a1-183f-4d5c-890a-f8b216d3063e",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e6b497-41db-4a1f-bbd8-549debb85e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b398860f-1df0-4512-9038-44436fa0cbd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae4c337-17ab-4bf7-98d9-08477a81b078",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6661f5f0-83ea-478c-b7dd-107683622a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e97ad0-d101-43b6-8fea-06834dc9d968",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1170c38-8e04-4e27-9bba-b6290c69c72d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e5437fd-5c9c-4f20-9e34-09e3ae3a1af4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2347d4d4-2cdf-4469-bbdd-71722634cb46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de5abdb7-7a1d-4776-ab56-37951e5c85ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95eaa7d5-c139-48d9-a61a-caa50e2df61d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b6e4f06-a937-4c26-ae6e-e689f832c7e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccbf646b-c7e8-4d42-9407-922cb834c9be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df0321b-1164-468e-a5c3-38a43653e6b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "973eb2cc-d73d-429e-bae9-b924ab79f419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a67b93-2e29-4cc4-abf1-367e43511ff4",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa9ca33-141f-4cbe-9a85-c30ec483560c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e5c4a4c-ec45-43e3-afe1-5e82fbaa119a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "027709ff-379d-4a50-831f-c49ddc2c3fc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "303ac879-f6e6-455e-9dea-9421cb434720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70bbb62e-eade-48be-b5d7-45094be1f707",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd3131f-ffe7-485a-85f2-d419e5208dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12a7646b-0790-4348-95a7-11bd52ce7d14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8254f909-2c53-4739-a5ec-da20a7337443",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9033de5c-f454-4997-b0cd-930515fb5782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eab19a9-ddda-41f9-8498-31848a15366a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f061547-4ac6-41cf-b455-aa3e30d1b59d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10c4d7e2-07fd-4f25-abdb-bd4f177c3de8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa24955b-a7f2-45ad-8cbb-8cdf12f21bcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9b4d584-f7e6-4524-b89a-dd3a1808fdbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e6b44c5-caea-483e-a588-201333309208",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff9f434-389e-4555-9c3d-a6344dd271c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59415270-6974-4714-8bc9-9630bc38ce60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee5e3978-ab1a-4ca2-b590-7a70b0afb6a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd59a24b-7323-49e0-a319-272b5639dedf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f12984-2a13-4362-932b-5d345454f83a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89bbdac-9147-4423-946f-4e110bd0ecb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d40d640-9830-4583-aad6-0b8ccef0f13e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa3b4ae6-5510-4511-9630-7216765c0ea3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc513399-fb75-4df1-a39c-5cb7609c005d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b45a72a-e962-4320-855c-cebd737fac4c",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca5eab4-71f9-4608-9de2-a77ab29efc8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4778d7e-e840-4d91-939f-c0ba905806cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15e84cc-acd3-40bb-bd58-a0fcff2a75a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5e727e2-c0d1-49fe-a4f4-a21961f7f118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ded949-89b2-4e57-b348-e1fb86b30fb1",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "660adbf7-9c51-4467-93fb-745e147f518f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f17cbb1-3af9-4da5-8d28-5addf2c7a68d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc6ea30-44d2-4f37-b8cc-9c49f25bf707",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f24e6b70-15a0-424d-a774-e9a0f112ac32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd275b71-d8b0-4b11-9d5c-e4d69ca4293e",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35fedbc9-4903-4a8d-bcc9-3fbd46b0785f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e32555-cf0b-49d2-a681-2704320b2811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c636a70e-10b2-4530-9b4b-2637c5633346",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be3dd578-f247-4d8f-a941-5971d5be8e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "210883ad-67bc-40f0-85fe-016fd76eea4c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c204da3e-3f4f-4a55-947f-8288964d8bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be935815-54db-447b-93cc-7ed4eea16e70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf742553-9d3a-463b-a503-4e94b08a3687",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must contain \"type\" when present",
                            "rawBody.options.credentialStatus = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95f7b14b-2342-4fad-918b-c00aaa4d57d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "974b2ee2-d710-473f-b8d5-0e89aa1ea75d",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99784de7-4310-4717-a95e-a65de6c26851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "597c2c05-1af0-46cc-8501-583052246770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "312d6df9-9dda-4077-b8a1-6318f7d76962",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d885136-9175-4d9c-8e9c-02166f6321e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8280173c-b0ce-4bde-a0d8-5110324cce35",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea814ff8-1931-4230-8f11-a3e2ae68b165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b2acf671-fe83-42b0-931b-9b9ddcd3f221"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9067418-c5bb-491d-942e-17014cc20035",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75814d94-13ee-4b04-bfdf-fe69fb53f3a2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d32aa726-d3d2-4981-8aba-7dcdfa9148eb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8e5d9a51-277a-4f60-bc22-60ff0bb8f35c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f7fb30-b229-4b96-b70f-40046646a0e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ac3c5ec7-9f1f-4e36-863d-6b1da8594b44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0acdd46-30d8-4f92-ab01-c78fbfad8888",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "0904812a-bf27-46be-b419-b49b4a61385f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5a8a5e5-8513-4188-b9ba-263567ff3f7b",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d2d2ff-62a6-46e4-b7ec-59abf06c865a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6ec2137-cb0e-418c-b4f3-7b1b2bbe16f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f40198-19a1-495c-add4-9937b6402320",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "d2b3122d-5ed0-4d60-b3ed-957223a7a327"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a9efca9-681c-484b-ac80-82a241744c41",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ad2464b-3920-409a-ad97-6a7a4273c107"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f8cdf7f-669b-4ebb-86c4-d136ada12c40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28d82902-5a23-4873-9e54-cbdd06d4eae3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ceaa89a9-08bc-430a-82cf-020ccffe9636",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bc1e2372-b590-443a-a23a-a93a0fa8cc33"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4c626f4b-b852-4eb8-8682-77c5e27e9b5b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "02114272-9615-4e0d-889b-5f2b9f35c025"
                }
              }
            ]
          },
          {
            "id": "0eec9dec-d2d5-4ca1-9aef-498a3dcd9e43",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7d989ae7-aafd-4624-941d-07ed03e93456",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "07cbb337-2684-4c24-9dfe-862462a07c3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c337ab1f-3f0e-4528-aa6e-40ea8a635e5b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "af2a26d9-edeb-44bc-be52-b0520710eca3",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "eac4438f-7314-48a1-b794-2dab1bf064ee"
                    }
                  }
                ]
              },
              {
                "id": "06a1ad86-c5c3-436e-9210-c6509d540161",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc62d0d5-8647-4a72-9a93-84510d7e0830",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a971eaaf-2ac3-4202-ace8-a8f78d2a943b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39816fbc-e076-4dbc-a308-bcacef414f26",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "dce5981c-c8b4-463d-98c5-b2c3db8ec642"
                    }
                  }
                ]
              },
              {
                "id": "f6708337-7c24-4323-a556-a19b81a464d7",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33140b63-d653-416c-8184-fde9e50788c9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ef67561c-24b1-462a-ba56-391cebd9e6d9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "72df795d-70ad-480e-938e-66e65f4e9f5e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "b23359aa-5462-458b-a12e-0d4caeff87b9"
                    }
                  }
                ]
              },
              {
                "id": "477b613e-aa95-4cee-9983-dc73c1942c69",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "947f1a1a-9626-40a6-a5b8-371f2c5fc512",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e2bf502e-b4e9-4a88-a559-3807197f8fe0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6d9d04b-b1b7-44fd-80e9-8b7d4b8efdb0",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "dad15fb8-18dc-4f19-88d8-1bfe8a97eec5"
                    }
                  }
                ]
              },
              {
                "id": "8e6abf0f-5d25-488f-b50c-978b3a6c91d8",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "80d2e1bb-0357-4b9a-af59-6e06f18a75cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "30fa58c6-387e-4e46-ae40-7e2c31a102f4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa02e16f-a8de-4244-9946-75e7b1e4fa5a",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "7d127625-7cf6-4f38-a303-b45aa951ac21"
                    }
                  }
                ]
              },
              {
                "id": "4c99a80e-2368-493c-a208-38bd8b049314",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "60f7b101-6d67-48f3-af71-eb72b4251712",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2c71d880-fd93-4c4e-b408-c3095282c633"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f776245-14e8-4894-86d1-2aca99de1e07",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "83449847-c58a-4bc3-8277-32f88ed4da4e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "61ecfe93-f6c7-4832-9bbc-afaf2dc18caf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "211d5d2c-426e-4a04-9f63-99bc7dd6f4d6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "478ae984-048e-4821-90bd-5cb9432fa13f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "447f15af-c430-4943-a185-fbceb9cf843b"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d699ab8e-aec8-4190-9250-5725331a0cfd",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{ORGANIZATION_DID_WEB}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "ef740e96-4639-49d6-9ef8-89690f69458c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e186c327-da34-4b7e-ba90-0518cb12ef5c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9e08fc38-c923-415c-9fab-6ab6fb5bf752"
            }
          }
        ]
      },
      {
        "id": "5c94bfa5-50a5-45b9-8541-683a244b17f2",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "885c9c05-78a6-4b78-aad8-6fcfe57eec26",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cdf66095-58a6-4bc3-b377-b31ea22633ae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dab79f42-bed4-4f18-9a37-8beee1905fee",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "198f532d-35bd-47e3-a557-325285205db3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad18185f-d8e6-4900-99cb-f0a10545649c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb6079a-911e-4ff4-867d-24022b342a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af9123a1-4a19-40d8-b471-05ebbfcb0c5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f172796b-860f-4b13-9d42-7e8384b68367",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48586c20-1bcd-4561-b83b-90c17c47c4b5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "a8a6baf8-9e3c-4c89-bccd-37bc5a379800"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d27ba67d-47d0-410a-8140-52b6eec8a884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba4b2a47-0035-4309-a6d5-49c7a9def934"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f41e143a-f0de-431e-8912-b71f0957b714",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ca7ec32-cba8-476b-a10e-939ebb32081d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "231e05c8-881a-45ed-b3a6-4102751f92e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5e6acd2-1ce2-4849-8eda-127661b3e496"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6b77adb6-4c57-456c-a54d-879a896eac7e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "1e686613-7dc2-4665-b9a1-7e270904345b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e5a5d7b-a9fb-4124-b219-06fd237e76f5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5d0634f7-fec0-485a-8ee8-734100d83b3d"
            }
          }
        ]
      },
      {
        "id": "ffce5a82-1520-4de1-b338-80d0293644b7",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "323f3681-5329-4cc9-9e98-eb4912174f1d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9ebe3aa8-d627-4246-914d-e20ffe7f7b85",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "51caf85c-63c1-414e-87f2-bd1543b03674",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd4836e1-3759-4729-8be2-974bbad7df0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b12cf38b-1038-4d8b-bfa3-2fcc4001da95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef3b4b1-d5d4-4cb6-ae4a-685bc9627b9e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec62896b-cded-4ebf-82c2-7a5d123e28e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c22e0f78-d51c-4f78-b211-d9ebe37ae8a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ddf378-1ed7-46a1-a9b4-f65bb77608a6",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61f4780f-8171-458e-94b7-171c1b0b6534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "953209e0-a47d-49f6-bf6b-04e1eeb00ee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9cfa264-0792-4766-8872-d00def3700e4",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5053d522-1614-4834-afc6-e2910424e500",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "618e2bd9-f542-4298-a22c-36fb4c74ce60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9257a7e0-b2a8-4cad-aea3-7e97cb4caebc",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19646b34-b90d-4fd2-ba4d-7831665ec3da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "719c824f-409a-4676-a5c1-c905e1fd10d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6271253b-9eb2-44f8-9f1b-87500a30eac1",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aaaa163-323b-4598-9458-dcd9c42b48a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eeaf497-40ac-43e1-bdd7-6add3fba60db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d064e90-a31a-4247-8088-ba6fe54700ab",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa4635af-b669-47a8-a4cf-bc3191e08fe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da73776f-7644-4d45-b230-35bbbba09c9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "997398d8-56e2-4efd-bf79-efebde641833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "346202b6-2464-4066-8cd1-487201b14a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f43b7185-5d3b-4d77-ae98-15f78fc91e85",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc74efd4-8ac8-4b5b-9bdd-876c1b6fdaaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56355752-c182-4a50-8ee7-eba4889d4b60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "770a9cfd-de06-4bf9-9851-d3b6316f2800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15cb9440-65eb-45ff-8c74-669815902b80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb344ea-6f25-47dd-a694-a54e58c95f3d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37320ee0-abf3-4a79-bb68-c4c0385a94d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3da4d9d6-dbd9-46dd-9802-38c095bbe3d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90417488-6f04-45a2-9481-bb6570e17dd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb371c38-893d-46b5-bbbd-fd9c285ce2a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0034f760-728c-4eda-b131-239796827b51",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a74c8157-370b-4531-8fd3-0aac36a3aae4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bdfd673-938a-4f56-aa37-d27d1106cee0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31d0d16c-151a-4066-a8d0-0433f12a84c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "937250b8-ed32-4715-8fdc-3aab2c48da2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e78cb786-238a-478c-8d17-274193b71228",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f1e3d32-2a7f-4f83-8a90-3e7a8d9b7a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acbe7043-7da1-46d9-9db2-9a644a7a3954"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c13ff00-2f3e-43bc-b7da-d838486c20a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c753a81-4169-4ba8-82eb-4ff7f586a348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c173af-71cb-44af-9f82-faf7e1f30e00",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58e7339-a231-472a-942e-90b2244af6b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd97fa77-b56e-4cd0-8da4-23772438510d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3237ef5-7368-4d41-ac87-f3f10f6e35ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af0ab348-2ef5-4a5c-b4fc-42a2033d068e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3075be66-3302-4b64-b378-b8e52618b284",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5321f037-90bc-49a0-a281-1e45b7400b4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "715fbcf4-cfd3-4ccb-be4e-2f858cb5cf26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30431ac8-5745-4120-bba6-9c1416f614ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebdefd0d-023b-4ed8-879e-51a199b903f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8959a066-8405-4873-95e0-58211da34a7e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a76c16e2-eb76-4fad-b30f-902a44cce900",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5b42914-4f9d-4e87-ae9d-24c34de7575c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11384389-206e-4bc3-8baf-1587cccfe25f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81da5c8d-a67b-4f13-9bad-6f17d5504e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4169dde9-38e1-4266-8041-2ebba87b8ec4",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ef18c4-fd54-4e35-bb01-3a6ecf3b955f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "367cdd8b-d79f-45c2-a2c6-2c818d4bf14e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c570fed-f4d3-4ec7-9ce9-e7b8d4d8a4ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09415b53-e6ca-4a0e-9ee3-f48e6bcfa4ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f57977bf-0211-4920-a766-964239bd64a4",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda8d277-0b45-48df-9bf6-8b09e0725b7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8df90782-5434-4ca8-966e-a3acefdb23b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8fa2b3c-5c43-4a7c-b006-258bd3f57e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc16d70a-0212-4c32-8907-643b3d080b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cd0373d-a7e6-4571-a88c-9ad35b948489",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae9e2ab-eb18-4014-8d4e-f1001db76caa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2071610-5f99-4d5a-a70e-d15a33742fc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ab7b45-3424-468f-afda-7289578b5a03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d64709c-43f1-43f4-889e-ee605152f30c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f657c8-7ed9-4071-b18e-5b1b78fdd87e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceacd10e-6680-4b6a-a8bf-1e9872f1f83e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a48d3eb-35b1-4fdb-be51-e249e497c28e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4688f28b-cfd5-4f41-8b9f-9beb0c7e4257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7506ff05-ef42-4c3d-aab0-10862417d640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5840d01b-b951-4553-a051-c926e709ac5a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eae9769-24f2-4c0c-a4e7-9c3fb04958f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "734ae78d-85a4-441e-8e6d-1f966547e247"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06fdaab0-ddfd-40ae-a5cb-09a5e3a43b41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13fcd7a6-b1d3-444a-9de8-638cdb3c893f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51931610-0039-4057-953c-1d68cb9f5aff",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "905825a9-d379-4ff5-b674-82d53cff3d3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4da55d86-e2b1-4675-b94d-b944bb71a496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2deb513-97d4-4c95-8f3f-0b480f53f997",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fe8e252-5ce7-475b-9816-a5d281a5f80f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4dffce4-c3ad-4006-8670-390443693be4",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b2a9c6-787a-4f4e-a0a0-217afcbb51dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdffa7db-ccbe-4d8e-92f0-8e12d6495b7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2a65dd-6f22-4293-b4f5-f5ea8d153dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38f9673e-216f-4df0-9815-75a8177bd536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813a356d-7aaf-40fc-ac63-15615fbfc29c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9041bba5-ae2d-48be-8883-1f81a79eae5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb64f82f-0fcb-4eb4-90ee-4e608281545a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f38f53b9-88c7-4f34-b6d0-0aabbae3f499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90d493be-0a54-47ec-9ab9-31a3b8541ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5925d4ea-e3cc-41a3-8d84-e6af3f2be11f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c82b2c-b696-4c08-a72c-51ead2fc055f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d73ab50-61a3-4dfc-8288-b936e5cc4ec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58727797-409a-41cb-b854-fff17392ca57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f4d04f0-fcf5-44d4-b615-5a1a2be8b334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a47b26-fd4e-45ab-9819-1b7b88297a43",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a6a71b-245f-4361-93de-3d50613a6e3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad6a6e17-1634-4692-8e65-9e30b2ce800f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07c0aec-a24a-4a5c-a592-15e8ce5cca25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2fa6fcd-904a-428b-a4a5-4dd9030da9f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f84cf85-cede-4bef-9554-c6922d6b9607",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19736cc7-691b-4c00-abd8-bb9c49a44132",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59051688-39ec-4e79-8d67-57c5e3a2d115"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5668f544-04b5-433a-ac01-f3ec08569623",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ce555ab-c6c7-420a-9233-d6ed6bf71051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348e2b36-20d7-475a-ae53-1a446a872779",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01bace76-971f-4451-bebd-f1d1a97b36f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c7dc344-08ec-4777-b1c7-25537ef5b161"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a11b19d1-89fd-47e6-a394-5bc888aecf83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdea7950-6ae0-4611-a081-57187b14aa76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19c3e396-80fb-480c-8028-5ca4c9b9acef",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "802f0244-c709-4be9-8d37-7401f723806e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "752c9816-e57b-44ca-98c8-c7be8868b4d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d615b495-b531-4e89-92ed-70f6ad19bf9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef514744-996c-4cda-a47e-d2d41427a5c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9534419b-8563-4035-84bb-5afe3a7ed562",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085e2e60-e9fb-4cf1-b098-624f2fa42fae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f19bf466-7854-4b0e-9e84-fb26cbad60d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8246701f-7ba4-479a-a980-e004299776a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d577026-225b-4993-9d62-6efc413aaa62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d88437-7e07-49e9-bfe9-5d8e2fb9c9ad",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7306ef94-620b-4a29-bb9f-be47a3ca6dfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4bca4ff-f7d9-42c9-925a-ce8234f19d42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09b3645-5408-4ce2-a509-e00c03e2434c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a9da898-03ca-4103-9fe5-8b93e1871ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a491cf0-848b-47c9-bf22-f6ad499323db",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4f9484-50b9-4533-9dd5-af104d832ab1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1655d53a-ebc3-449c-a0e2-3629f49484c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3affc00-879a-4f2a-bfe7-1245610fae42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4f22bb5-84be-4381-a1ac-5c2eca719021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee83caf5-4261-4270-b513-32878e1766ff",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae7c83e-e15f-4707-9cb5-a92082a6b430",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88034c51-39d1-4ade-bb56-6d95d1c65424"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5040985c-b7e7-443c-8e97-1e4c8737aaa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "988372e3-2408-487f-bac4-1343865036ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c05f06-aed4-49f9-8f72-a424fa157083",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fee5658-360b-4da6-be99-94f9140a24f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "781bc76a-50a9-452a-904f-4677e08dd98f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3704fca5-308d-4699-bb5a-434d76b36d7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d74b5b63-2fb0-4644-8cfd-37b294dbc24a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0a2082d-f1f8-4891-967d-ec234c20941c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b775edd3-6247-4636-bd79-95aec71ed67c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "debe25b6-8c57-439d-bc25-cb322bd1da64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a0f97a-8ef7-47a3-b64d-91b938198554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3af6079-5fd5-4b51-b38c-03ffe1510fcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e3b7bb5-0524-4db3-b0a2-00383ab33800",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a6fb9f-9c16-4477-a06c-4d858ad8c510",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9835f401-33ac-40b1-8c99-627bb928ad14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ce857a-2155-4184-9189-46e72ed0c0c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e22f83bc-86f0-4a61-910f-06868ea2f17d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf7920d-7e47-486f-a3e4-a71407b71610",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1059ffa-d971-4ef7-b4c4-227a068a46ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0ffb67a-65c7-4a85-8cf3-c1214ffb3c0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7146cfa0-4fd0-49c3-9122-5854441acc56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7607862c-bdb6-4547-97c4-4ab9cc81cda5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1086aa9-dd7a-42cf-8130-715d9e733669",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61cd4728-1f0e-42a1-b557-0043d2893f23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20dbedd7-ea57-4ef3-a320-1639c04f0ad0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "485b7dbf-827b-49fc-a9f6-9aa1e106be75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9a66800-517f-4130-849d-0033538489f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a00a9672-004e-4753-970a-eb183f92ccc3",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6107bdf-8a26-4bdc-8a2d-b346be6724f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c44411ad-24e2-4048-a6df-42e06a9b1df5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae7597ec-7e1f-4438-bafd-54b945d7a865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d139497-0cb2-47ed-a639-f5237ed6a5e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "855e8ed2-2fe1-4eeb-bb80-13ba358de9a6",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b48383a-b068-4392-a043-f4190018c9d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b69a6bf8-d713-4108-9b81-9220e3f9da38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "292c79ca-e20f-4e6a-9a7d-390ae779c2b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea8b9bdb-2c23-409d-85a1-a54b99b3e6ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "818952fe-3a33-4ce2-a2e9-13461ab1658e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49314735-c2b1-443a-97a0-527691d51fa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6826ea13-e48b-4c89-9776-9e6281c0dae8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a7f7c9-84ad-4a21-b52d-6526b53ba6bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8c4000d-e35d-4768-8a5e-ef8bbb4a59f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "415d8e55-0982-4183-a7c8-6d951d7121a5",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0f853e-a567-407e-a7cf-b4dab5a3dc30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f036a6d5-4de2-496e-aeb9-eb97e8a416c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4814c0b3-e209-4d68-9508-f31d0479ff25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0557e18-ad02-4ff0-b933-3bd1249f5292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f87d2f-bf1b-406c-a731-dcd00a894ebd",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b2f939-33c8-43d7-8151-b4018b603284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15732f25-ba78-4732-a2f5-44823a700a84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68960ad-431f-46d6-8189-ab6cc8516000",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06cd85ba-42cc-42bd-8b2f-099ce284578e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7adaee-c1d9-4f8f-b868-cb56f043451e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c935477-1214-4d35-9eff-b931415422f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c59a7a56-4138-454e-b7fb-abafbc3d7226"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e1e850-5873-4e4d-9692-4c64c9c57daf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e49e8d31-a51f-43ed-a48e-3e2d8032e35c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2098cb-a13f-45f1-ac9e-7c1c0f70de4e",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c1d38c-59c7-4a71-b903-175575ff0146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce3d09ed-c8d7-42d4-bff9-50ed22e67783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f5ac94-4b00-4ac3-9323-95731679aede",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe06e10e-ea9e-47ee-9c4b-26d04d8f6564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "771be047-f235-4034-8554-2fcfa40dee00",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a24d89ee-da59-4401-ac6f-a3c030b4f11e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5355ef3d-4753-43e3-ba6e-d6a39bcb98f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0df927e-58a5-4369-9627-9a6525b744b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "120c793c-6d9c-408a-aa78-88e416cf6839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1f5249-6ffd-4552-8343-1e3482d27052",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a582e3c0-2261-4fa6-937d-039259b90d0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4962448-4a4e-4e53-9fbf-066b317e2df9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1832ec39-30f1-40a3-864e-c2b5342c7825",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "126d6132-2d00-451a-981d-575eb6f41575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba7c497-ce39-4e3b-9800-f6bfcc6d011b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "471df92b-85bd-4c6f-93a0-1c018ab94010",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60928842-2a20-4371-9d14-50163940a735"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b044a4ac-b15c-4f26-9de0-2f10680b99b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e441497-d436-4019-ae4c-94907268ab1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61cf86b6-7df1-4f03-a1b5-5e7c9534c1b7",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74cb66e7-08f0-47de-a279-6fb83edaf098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10cb1dbe-eee8-423a-aaae-8079ee12bf30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad40ce7-2296-4434-a233-6eae4e5610e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a86b666-37e9-41e4-b673-a92bd71cf932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a66b6b-55d7-458b-9194-dc65f1ab78cf",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff607404-1258-42cb-b60a-a809a15eb993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "785440f3-8466-40cb-88d3-2507666444f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde074ac-dfba-43ab-8c94-b27f046ba574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e3f5087-d8da-4921-bd3b-9ab66f348d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30560f6c-ccdc-4f4e-a482-ac5452a5fb03",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8fa235f-2924-4e85-89a5-89cf1a9fdb59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c179cbf8-6a5a-4c8c-893c-1f4671988a7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d6bec0-7118-470d-8501-1f55ae8b517d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c31bcfe7-ae5b-4217-8584-7cf5119c9e68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eea013f-70fd-4d72-9146-6c156859b621",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59746cbb-e6e9-4c01-b8e0-7d6201402d2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff415127-9f5b-4642-8de2-6ab1d67238d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51acc8cb-336c-40aa-a986-3ac1ab9979c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6218a5f6-bf0e-4a50-9cda-199b3303a79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33032152-4d07-4bfe-b3ac-a28273a97d19",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86dd50b7-b4af-439e-8a95-d6550093d797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f84538fa-cf05-4192-a88e-760996d2047b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b63d2702-a040-4aec-8666-b5aabf66b78e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "268cc8c9-5f49-4701-9596-e7941b9b8a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92587fff-d156-4aec-b43b-e9f479ef0295",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7755985-0fdf-41be-9d6a-5a5bcb1813d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1b0be83-721c-404d-a027-1482d3814ca6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa7e96a-2bd5-48a4-a9ae-2723d04ccf36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abbbfb77-a75f-49db-bb2b-15a2bbbf8a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "228532cb-b1bc-4348-ada0-400c6be2f818",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61f2e01-71a6-423f-ab6e-109377c393bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4ebe352-83b7-44f5-9fde-c5ebea2af97f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "823b5b41-0e84-412d-88c5-10d1eb33aeb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86e40bbe-427a-43e8-b9ad-4c87ec46dedc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba6936d-ff1b-4c42-9eba-d8389d65763b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9dfb87-fd75-4ef2-b419-b760f8342647",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd4e061c-8b76-437c-8909-09f4150ff73d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3cf13f2-38de-4c67-8fdd-bc2c544dda4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97be3c1d-3017-4424-a6a7-2c7e6d179480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1985695b-0524-4dc3-b037-e0cf7b7ca6b9",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f6698da-5f53-473c-a7a8-a5bb69eaaf2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c4ebe02-f259-4d96-ae67-2585723eae3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8570bc5-f8bc-44a0-abc6-7d8be8968911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1b93e4f-206b-4c99-8648-c2003c1856a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e14389-e43e-434c-a96f-b23b7cff3bc2",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e455efd-5e67-4c28-8078-4941449dd584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2e8f919-7718-4707-818a-33ade2d212de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9363654c-952e-4b39-8166-62b3c0e42bd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b6dfd00-baea-4921-821f-562f552afb73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c287bea5-345e-48a8-a4cd-96d426b16e0a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b8c5bee-620f-4bbd-bc55-3c0e0f1ee449",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3929abc1-f765-4cd7-8aaf-79e582441a55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc340807-853c-40dd-a8dd-cfbdef04d3b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60453e6d-f602-40b8-be66-1345e894a790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9144d467-dd95-44b0-92bb-c1b0c8c3b174",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e39721-7c02-4e65-ac6a-f60bb3518dc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a98a81b9-71ea-4618-854e-079343ecd9d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dec8ea4-40ba-4674-8f16-35ec7dffab8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17ae0284-9f40-42a5-a538-5741f4ef8a48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb6e11e6-2cba-4d06-acbe-bf0824bb834a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a2a138e-fc9e-4992-82a8-6e378ec4161d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0424554f-5d7b-4d8c-a82c-9691c6edbee7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "230fa7e1-09e6-450b-b797-cb83e4b68722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68c84320-6c76-47f5-870c-db1eb24dca33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4bc467c-169a-4ab8-85fe-ffd18a4bd5ae",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8209e1ed-154d-499a-98f1-290a93979c2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12b02523-e27b-49b6-9915-6da99dd24390"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b51e8796-d9e6-410c-951a-ac6401347336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a469f8f-429a-4f13-988a-ad1523d22063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ddb6f2-6832-490f-8b02-c5f05c3718ab",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "441f9de3-47ea-4e9b-a3fc-6ee9dd99236e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a0bef6e-48ca-4251-98e9-05eab9dacb81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e25e96e-6542-4c44-aef3-f9287fb0d7b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c957994-8cdb-4147-aa28-0753d6e4d9c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60688ee3-33db-4399-9ad9-19ce89cb18ae",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d339d30-e189-47c6-9fa0-11ae308a88d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf71098e-7ed8-4e6b-ac29-74f58d090361"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f4f63cd-8398-4cee-a6d1-d631c432a242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb1efad3-3fe9-4f96-bcbe-14315ebd2125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44de5545-3b6d-4a46-8211-ddc4c65e5e09",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b93c98b0-fdfe-4ca5-b110-3a51844d3fbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d9e1d68-24dd-44c1-a209-1f89928dc6ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e99d0c-192e-436b-b0d3-eeddca6a9cde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68c3f947-58a2-41c2-8170-94b43405ee18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612b8718-f59b-4eea-9927-b59e0f28c28d",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97d923a-ba74-4391-9616-accc357b8429",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7752140-3844-44c4-968b-d42eba53e8e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0efd6b84-ce44-46a9-a5d7-d43a2e267546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b155dc6d-6677-4656-9662-58534cd9e6d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5aeeaf-4d30-42f3-8711-126d8a884a13",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d74808e-66c7-4eb9-9b98-69b923f6e61f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80247eca-e234-4114-b1db-0099ff57d230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a9adf7-d587-4376-8151-ff9f681702c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86947282-bd83-4a8d-bb2c-d054df8cfec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeeb2175-f329-44a5-8814-6d226263a434",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2acb491-c7af-400c-a2c0-aefaca33eda9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1a559c0-a41e-4823-bcc2-be073343d4e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db25a0a-6d7d-4fef-a3b3-29b870e44824",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adc02715-d411-49ea-a6d4-3b0296b42a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb79d30-6eec-4d40-b73e-f795ed405f22",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d10968-e1cc-49e8-a9a7-f230aad26061",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4efda11-2d32-4120-854b-996e31f3c13f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbb4412a-0928-43ba-ac96-363186719137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0822ee98-98ed-432b-bb31-8495e259b08e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12993e50-02c6-4da6-9a26-c14a6e1a7642",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3011c170-bc49-47e0-8c8d-d6ad0b61ef63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4371eaef-cf12-4f4d-89b7-afaccc5c40ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d5a8ec2-d319-4233-ac9a-c123b18ffe09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1c2e563-3e89-456e-b605-8f7579b51fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383d874f-aaf5-4ddd-a3a3-7e67ab788f4d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56c1fe1-8412-486b-be61-28d33c396514",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78aa5fd8-c835-41f7-b77b-552fcbee2b33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "519f1a25-9094-4c66-97ab-e6e32164cc58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43a9932e-4c76-438e-b73c-8cacb24f94c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe82a085-009c-4175-8b99-a92aa55be65f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5056168-e340-42ea-a778-a2f292f3538a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea3b4096-15a2-4a0d-8c02-c535f030418a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "683deb51-912b-4752-8f8f-3fa447074421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb3c1d56-cb3f-4e81-817d-8d60c8fdfd83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8352ecc-4586-4420-9ccd-6ceb7b012920",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c75b2a5-347d-4299-91df-2c0a9a654c86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cf6a0e9-3b1c-4861-bd8c-951188f27581"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf1fe97-5cc1-4ef5-b6bc-2b3989c467be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7cdd749-6f5e-4d70-a0e3-76b0d2437a5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e66eea04-4f90-4021-a321-175d436914d2",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8dcfd85-7214-4347-9667-807913183aec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb5ffc3c-5add-40df-9bf0-f200a7294885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17dd0265-e305-4d6a-9072-f8921f6b48c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0de8ab8-0ebf-4a10-becd-658b5fd24404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f17633-eef7-45f9-866c-b24ada869242",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffaf2454-c687-4b17-b674-d344550db604",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "483f4a34-a1eb-4320-845a-9f3254530a01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6680f22-a659-4715-adb1-67bbff30054d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e26fd125-ba67-45a5-a4ad-fb5fc3ecc599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2cd1e4-b4b7-430c-ab46-49983a511f57",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5367880-503e-4463-a04b-4a3186ee9fc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4cfffdc-4c52-4087-bd96-81fa394db485"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b638a5-170d-4e11-87a9-e26b61599499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05cbaab1-6280-4362-82c5-77cfd227d101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "594e01b1-ee99-432c-ba7b-19be2a81d2ee",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ebe914-b50e-46a7-bab3-a62ad36ddaa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27f34a2e-fb65-4068-8e55-c1599fcb647b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9496646-5a7b-4d1c-9d72-cf9cf4aa5bb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6debf650-3960-470a-b0cd-b99036a14f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74472b7-6911-4d46-aa82-cd30f58201ee",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd23257-07bc-429c-a3ed-d97531b5cec5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57777f75-fbe2-42ab-8044-3d1379c8fc69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff2b0b8-9cc5-4c73-94a2-d3c0f8fe0b7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc8314bc-7316-4338-8c57-17b7ceca61c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82832d41-f6af-4fa5-b6ca-a1d7e61a74b6",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f90190-559e-46f8-a49d-949c54f4ea6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64cf3962-210a-4a8f-a7c9-b77158cb5f3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e8a4af-e34b-42b5-99d9-8cba818b759f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a56e590-0eb8-4311-aa40-2e9071b145c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5856911-0e4c-42b9-ab39-2c4f8899adb7",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf771cdd-1df8-41dc-a6f2-ce7d64a2b5e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "141e1d17-6c64-4969-9726-2cacecf060f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f0bbbc-9a30-470a-994e-a6dfa1aa01f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5e6a1bb-ba23-4fa6-a520-73686fd2cc39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "097bc191-cd56-41d9-9f9e-121eafa967ab",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41be498f-f4d3-41ee-9cba-d3c391aaf97c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d8f32f5-c870-4f43-8a61-ebe66282c128"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9723e8-0675-46f9-ad4b-e5cdaa868d95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d808442-5458-4cb0-93fd-41c77b47d4da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b79024-dfbb-4600-8666-e0d587e867ff",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e0dbff-b47e-46a2-b336-da6342d2d826",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93044c4c-7c94-4dc6-a108-14583d3badaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21117208-a9dc-412f-8e4c-7e2ecf51e8e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9bd9426-24db-46e3-9dde-66107062dd32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce8ee7f7-8e13-4b25-9414-91a421ebd30c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb2c0dd-be78-4fae-9047-7cf09256aff4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18830df4-367f-4765-8479-3f8d9d8812f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f0997f-8d47-42c8-a116-c418e12b6d5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f0a8189-78bc-4177-85e6-8b1feb134b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc7b353-8c60-4ff3-8dc6-707e95c2fedf",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d8f640-1438-4549-a1b5-3d01e66bf82b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9af6ebb-189e-4e1d-8187-50377b1606ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b82c43c1-bfaf-4463-beac-34723161cb71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c3e8437-52fb-4ac8-ae21-b240fa752fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3471f3f-03f7-4291-9239-5f1ac9402026",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec6e333-dbcb-4408-9acc-d711cbea4320",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15d4539e-4ec6-47b7-afd2-4a0804b20df7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c51c6f2-c30f-4758-8c85-643030273018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84fab03e-9ac1-42c6-a420-aaf724d06f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa049485-a3c1-4859-a8c9-7a92a449d62b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e748b9-6c19-4a2e-ab6a-91801486cf27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e45fe2fa-a2fd-47be-a16e-24492891de2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a45c852b-f9b8-4f8c-8e41-95920db5f74c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6b65d95-a884-4dd2-bb89-7019d5942d27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf97c56d-c9b6-49f5-84ff-49132de16fc4",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a9e0258-c24c-4fde-bbc1-92634d8e449e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d0afff2-6fc8-4a8d-a634-b03a02a254b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e26063-6023-473f-9a30-aa8cf2eeed4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a275439e-9abc-464c-ad19-f2c0b3849be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b72c65-c3be-4e17-a0ad-e5dea3751118",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3fc2661-8e26-4e34-a519-215f406c106e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af1f86dd-b0f6-444a-ae94-0d6110c63c5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a6d842-ebeb-4149-b470-a161257e8dbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5220aae8-c8a2-448c-b513-961012d3d594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f0d95fc-3aaa-417c-92ea-7b00d53df113",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f9e6f16-9f1a-4417-a523-89fb7bd3363a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c887f79f-ada1-4501-a2f8-fd3c472f9f0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a80af85-bdd0-4bce-9471-4a8a985b42d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80d42eb9-a51d-4df8-9cbe-91359b9f02ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a7d5ab-29ce-4a88-ab75-081483fc633d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7daef009-6be3-4928-94ac-a54a89a25f98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cee5c111-0bd1-4a43-a233-147fc4feb40d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2cc024-b4bb-4623-9bdf-9f835c772a98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02486798-d8bd-44c0-92ee-460fec260aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1039861d-2450-4cea-a9bb-f185678b23ad",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e7d84a-00ef-4034-bf19-63e76d6a0f9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de3f5818-6e4d-496d-a098-8ce7a50608a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2327c5fe-6073-4efd-a0fd-74db7c270b70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f92b3b7-2d94-4266-9501-603b7d06b294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c02ce1-ad29-484c-a1a5-0617c1b6c954",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8daece88-5c4c-424b-8e5f-02c5d1f9aef5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4cce44a-1855-44e4-8550-91df83a661df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d53a862-07c1-4a64-aa06-0e2ab240ec78",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4602512-d139-475d-9ba5-dbd144569f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a9a5a1d-95a6-4dc1-9f73-e289d31d7c33",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "098ddecf-5bcb-42b2-9e3a-b43acac295fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25a23d49-d7f3-484f-8393-de5fec6a23b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "555ce502-062b-421a-85d0-c8c986568635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82889ef1-8d2f-447f-8e65-0e2e8a735d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca1e066-4505-416b-8ee1-c6f2f54fa8ee",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca801e8-72e5-4757-812c-666fd8e35ef1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "932a7af4-9f02-4169-831a-f3c718144400"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee1caf5-1f77-4eda-b5ff-2061e1ac72f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a638ead0-1318-4cd6-a3f3-8c73cdec591d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80843623-8a49-4a39-a0b6-47164bc1c203",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f81cbd-667f-4ab7-a57c-790daf89317c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a98df105-03b9-42b3-bafe-242fe1a2cecc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e02be8-a1bf-4a29-9aae-6c70f720c875",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43693f95-7ec9-4ac9-b071-41ec1113f832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "459176a9-4ee3-4041-9dcd-d8f9881cb3e1",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e30f1096-32b0-4b8e-b577-b1491cf044b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d23c151-7fd3-42d1-8b38-7f914222ee8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49bf54f8-6ded-46cb-8ad5-1ad2ff9d2480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae769fa2-665d-4d02-afed-5650b9a7298e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660c77f9-5123-4c74-885d-0c4448264f53",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af4e37f0-39f1-4555-a1da-656750ad2a4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1154c94c-fc36-4d32-b3f1-be6899a245cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d7495b9-d5a5-4a60-8de1-fc34293a7549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a754a3f-b68c-45b8-9579-0de42e7da79d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2676f0fc-75ee-459a-b9ba-19e7810e9203",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8880daa-bd6f-4c40-857d-33c3e78dd720",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd22a35f-2b38-47ec-88ab-33d94fedb0c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f92835-57d3-41b1-b592-cef54a84f215",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3dc1199-b332-4073-87a2-930ad5ef67c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c603e103-b02e-4dc9-bef2-2dd0aec220a9",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba47b308-c262-4f99-84aa-6c44e32eea0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "006e1127-4eea-4ec6-948f-f6cbd51e48af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef684b68-08d2-49db-8b67-8b8fb7991105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bce8a405-f1d6-453d-8a31-1fb0ef873c55"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74352199-2c46-40fc-bea4-8edaf7f6b1a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f457d143-f801-4015-a3f5-d7146cb3c9d7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc512a19-ab73-4fca-ab5d-1cf59ab8909b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6d191cb6-d5f4-4bc5-b1dd-57c1cce83d7e"
                    }
                  }
                ]
              },
              {
                "id": "f41d479c-dbde-44a3-afde-5bc10312b1d1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9d436e1f-d175-41c4-aa1b-15f03fe139b4",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63057b0e-7917-41f8-85b4-c0140c093eef",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2296657a-2a68-4550-924e-2d8c8b6325dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20a4fd6-4cbb-4d57-b8a5-f4575b392882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d8d54c01-47e9-4b6c-9f73-444962b246dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e7bd03-ebf7-44c7-ab0a-d8211946e239",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "361208b3-86ef-4a16-b736-33c9f6d3fe9f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "fb68a4d0-8623-45f4-8836-ad53cad35915"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0debbd2-0338-4b91-954c-af91d0da1443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ce11b7c-43b4-4d83-9c99-e1ee8a1f89e5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f43fd562-6e4d-484f-9056-fc39fb04cdab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "982e6e66-ec12-466c-aff5-aa5a4368fb54"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8cc1f112-6678-4246-827c-c7dc6835cc32",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf96d995-ee86-49ce-8050-3c808d810626"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "475e259e-b9f1-4b2d-986f-98ac8d8650c1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "72b6ee19-4122-4166-a046-8086694c7996",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "45cf8c2f-38cf-4864-acab-1dbd2f2d7810",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "be11dc0c-f70e-4cf4-b42d-09d4f3a2faf2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57e58ee1-c6a5-4197-a118-c6989a6ad55f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "190f7984-a77e-444d-95fe-cec7951bfd6e"
                    }
                  }
                ]
              },
              {
                "id": "c15b4969-dd87-497b-a5ae-bfac79c2b697",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "955a6b12-460e-4556-9a2c-c8c2f4c6f3f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f36a74b4-090e-462b-828f-67137cf849ea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bff6cf45-08c6-4653-85ba-20ac2e27fc0f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5118ab40-643b-4bc8-b552-e63f0232722a"
                    }
                  }
                ]
              },
              {
                "id": "9d58bcf7-0bed-4ade-b013-6d844b0f1efd",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d91e9d8-0883-412a-a883-06f0af987743",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "87f28a9c-53c4-4f7f-8821-8124d81d9803"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "116da119-3a67-412a-bff9-6b27f3f52350",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4bf5bc88-70c6-41f3-bab7-75455d44aa20"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ef3bec4d-eb47-4029-9f4d-77c13c125bcd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "68923640-c25d-4a46-be06-fce08f07929d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "874e8329-5859-48d4-a080-9f4580defd76",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f43830b1-70d6-4776-9ee8-09a410276309"
            }
          }
        ]
      },
      {
        "id": "de99bf7d-4183-4579-b6c1-b6e8b8773dcb",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "cdbcef45-b4be-498e-9764-482ba8d495ab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fb1658f9-f98c-4513-9414-e5e1e6636478",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5b42ffa1-e3d8-42c7-a96f-a0454770403b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e7a7ea-7f1e-475e-a8bf-702b18501e9f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d9e3b6f2-13b5-4af5-bd65-79ed4e355ac5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff49e730-0fbe-4487-95c6-25aede6d274d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00895c34-adc3-45c3-94f7-7ff533299d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecfd31b9-cc89-47da-b02c-178429b98437",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c7ac3b-98a9-4c03-a5e0-15670c7aa0fa",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6d13bbc4-3093-48ce-b6f8-6851643ab496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4095e9b7-926b-4200-99e5-baccea3e1f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6757107-8896-4898-af20-f9886a35c03a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "364df9a4-ad28-4f1b-80b7-c41136231d07",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "695912a7-8580-4178-897a-626891fd47ed"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b528dd33-9e62-4e5a-876c-1464a01b3efe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "954a68b8-a7a7-4f90-b9ae-572028abb825"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dec33ac5-0072-45ed-b73a-b27a8069491b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "604ec44e-7087-41b5-9ed4-f6aa6bae081a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f1b7d70e-906d-4fce-a9bc-4099c71de6e4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6abb00eb-9d5d-4d7e-8f30-6b710085f028"
            }
          }
        ]
      },
      {
        "id": "488e40ae-6c08-432e-91f9-4aa3cac9724c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1e8dbe8b-cb09-401b-8284-683846a06a54",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fb7fbbfe-b0d9-49b8-aedf-8866d85cd27e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f895f9f5-61ad-4f69-9100-22180cb18a61",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a7c49b-8468-4350-a2c8-70602c3dccdb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "393e1c62-c128-43bf-8448-c6620d0a8787"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d61b85-203f-490b-9a82-c0fb2790dee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "36d0b061-36ad-40db-a482-3bb3656da7f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd517d0-fef6-4ffc-b8e4-dc1da2b826b1",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b4c51c5-d593-4e2a-8efe-721adaf3e9ea",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d5ffeec1-6d8a-4611-9109-ca84c05b6d72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d812183-72d0-4f50-bed7-e473eb8b5980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "20f70963-ade0-4b8a-8f8b-38670594e066"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90fdee18-e01f-45e4-b7df-bc4bbe6924e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "63643399-0562-4ca0-ba4b-ab6c6baa7dd5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb49524d-e02d-463f-9af6-6e6dac78ccb8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e739afff-09d4-4bda-be1f-6e61c2308c85"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bda5572c-2e15-4c40-b5dc-4022eebb5ac0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fa4f4b5e-2a2f-4916-a6f6-4a9da2f6fa27"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a74485a8-5fe0-463e-a111-e15ea692c8d1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "58d5e7f5-a0ab-47f1-97e5-707674aa7d76"
            }
          }
        ]
      },
      {
        "id": "c89a9576-7bc6-490d-8969-40a4d859bd5c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0709aaa2-75d3-4e4a-8b5e-7df61c336b0f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4be8cceb-ff4f-4830-9db5-f70113da9514",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "aac4c055-e55e-4f9b-9608-9beb0cea3a2f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60dac13b-ce52-453b-97d3-4eff9db5ef09",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bf9bb737-5c80-4d54-81a9-7d9611420740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f83b206-e5d2-45fe-838f-2832af8e0cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3692acc9-d2e2-45e2-b08a-9307ab7fbd8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a9e6fd8-711e-4af7-8840-15d7654237c5",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77fc6f66-f6d9-4f6c-8131-0d5bbdea3930",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dba48b73-2043-444b-bc97-c258eaa1ffc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b850bd-1ddd-41ac-a938-c1a1b7405274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6660af55-3a7a-42ce-bccb-803e061f9183"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7be929df-fbbf-4296-8601-71d19557c91f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ba85373-1d8a-44ae-8dda-630c321899cb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "46dd4f09-7330-41be-82d5-90a5e67eef53",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "524f0ffc-ff72-4765-8e87-0bc620cba55f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f1d39f65-10dc-4881-8bbd-9376e6b55af8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b7779a7d-47a6-4853-bbef-3f936ee597ff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3b55e9fa-8317-471b-a558-6fc3c8719346",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dc1cfab6-7491-4599-8406-ddcddd101841"
            }
          }
        ]
      },
      {
        "id": "777b5171-353f-42d6-9e25-05bd6502287c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "73d1aa6a-671b-40d4-995b-00a0afc18113",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c213390-13fc-4033-a95b-38e8a5b7fce5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "1bbdf0e5-89ce-44fa-9e95-a287a3bde473",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1101b7bc-cf56-42f0-85e8-de9da44f6689",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d9dc39ec-2699-46b6-a1e6-501c8d6e92b7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 157,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1231,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 157,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 166,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 157,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 320,
        "pending": 0,
        "failed": 290
      },
      "testScripts": {
        "total": 621,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 610,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 35.68072289156624,
      "responseMin": 6,
      "responseMax": 408,
      "responseSd": 60.07064507292578,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1665449639967,
      "completed": 1665449653336
    },
    "executions": [
      {
        "id": "513a3d15-c4b5-4592-9c63-53ab1d090444",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 157,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4069e295-b96f-4844-ad58-23d8d2ca4742",
          "httpRequestId": "88ff6e24-1d06-4627-a48f-a22b6a4408d6"
        },
        "item": {
          "id": "513a3d15-c4b5-4592-9c63-53ab1d090444",
          "name": "did_json"
        },
        "response": {
          "id": "8e029001-f093-4182-b105-7b7529790143",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.service[0].type should be array",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.service[0].type should be array\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "0f0b4e8a-6fd1-456c-9515-b9c628ba31f7",
        "cursor": {
          "ref": "be8d66fe-a3e7-43bd-8ebc-414460cc46ed",
          "length": 157,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5078b7fc-9aa4-45b2-a714-c7f082f5bf1b"
        },
        "item": {
          "id": "0f0b4e8a-6fd1-456c-9515-b9c628ba31f7",
          "name": "did:invalid"
        },
        "response": {
          "id": "52c88c27-db40-4903-9794-e61d71647a24",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "0f0b4e8a-6fd1-456c-9515-b9c628ba31f7",
        "cursor": {
          "ref": "be8d66fe-a3e7-43bd-8ebc-414460cc46ed",
          "length": 157,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5078b7fc-9aa4-45b2-a714-c7f082f5bf1b"
        },
        "item": {
          "id": "0f0b4e8a-6fd1-456c-9515-b9c628ba31f7",
          "name": "did:invalid"
        },
        "response": {
          "id": "52c88c27-db40-4903-9794-e61d71647a24",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "62c22b39-e680-4374-a001-9b6db4407901",
        "cursor": {
          "ref": "5ffa3edf-755f-499c-8135-2702eddeccb1",
          "length": 157,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "88ba7e23-1ede-41fe-8344-3b9348e1e6b6"
        },
        "item": {
          "id": "62c22b39-e680-4374-a001-9b6db4407901",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a4a7c16c-df4d-4b7c-b7d4-83f234b60ffe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "dd4a3c99-d8c6-4cfb-aaad-02e640d00e78",
        "cursor": {
          "ref": "49e26ec8-5ba7-4026-a346-e67646bb4fad",
          "length": 157,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7a01f4d0-9929-4237-b309-774f016da8c5"
        },
        "item": {
          "id": "dd4a3c99-d8c6-4cfb-aaad-02e640d00e78",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "3255bb57-dfeb-426b-9325-71ca82194ecc",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "3b73a2ba-ac58-4dcf-af27-bec3cc9e5d56",
        "cursor": {
          "ref": "42ef8ddf-19cb-4597-a5b7-61085f1930ac",
          "length": 157,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "35aed058-d4c1-49f8-b65b-c44bae9bd5b7"
        },
        "item": {
          "id": "3b73a2ba-ac58-4dcf-af27-bec3cc9e5d56",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "dc2d3159-22e1-419b-b3a0-59aedfab69f4",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "26df7de4-769c-4794-b6e7-edb8fb1007f2",
        "cursor": {
          "ref": "055f6b7d-1e03-402b-ac3d-92a15b6389d4",
          "length": 157,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "52f7d553-4f43-4c89-9519-d8716fc598d2"
        },
        "item": {
          "id": "26df7de4-769c-4794-b6e7-edb8fb1007f2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "276b507d-8715-4ab4-a9ba-84fd28ca0d03",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "26df7de4-769c-4794-b6e7-edb8fb1007f2",
        "cursor": {
          "ref": "055f6b7d-1e03-402b-ac3d-92a15b6389d4",
          "length": 157,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "52f7d553-4f43-4c89-9519-d8716fc598d2"
        },
        "item": {
          "id": "26df7de4-769c-4794-b6e7-edb8fb1007f2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "276b507d-8715-4ab4-a9ba-84fd28ca0d03",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "2bab188e-bce1-492a-91f4-1bc7eb6b286d",
        "cursor": {
          "ref": "47020bef-19db-42ce-aa18-33891092e31e",
          "length": 157,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f7c9c79f-a6a5-46dc-97cb-f90406640408"
        },
        "item": {
          "id": "2bab188e-bce1-492a-91f4-1bc7eb6b286d",
          "name": "identifiers"
        },
        "response": {
          "id": "57e715c9-59cf-433b-9abc-3604074c5a6d",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d77190-16af-4d7e-9824-45a13ad0fc43",
        "cursor": {
          "ref": "d9741467-0a5d-484f-8b06-85cfb48c8019",
          "length": 157,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "87cbfbfe-24da-49ec-8873-ca4ac2515848"
        },
        "item": {
          "id": "d0d77190-16af-4d7e-9824-45a13ad0fc43",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e4fae2ad-f645-4196-8a52-3d26d37aa362",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 275,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "d0d77190-16af-4d7e-9824-45a13ad0fc43",
        "cursor": {
          "ref": "d9741467-0a5d-484f-8b06-85cfb48c8019",
          "length": 157,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "87cbfbfe-24da-49ec-8873-ca4ac2515848"
        },
        "item": {
          "id": "d0d77190-16af-4d7e-9824-45a13ad0fc43",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e4fae2ad-f645-4196-8a52-3d26d37aa362",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 275,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "16e7d073-4f7a-4669-aff2-ed75ed210fbb",
        "cursor": {
          "ref": "5325fab7-c40a-4efb-881b-300efdd39c15",
          "length": 157,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9ded0eb8-8f22-40ce-89cd-86fe62b6b9a6"
        },
        "item": {
          "id": "16e7d073-4f7a-4669-aff2-ed75ed210fbb",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "afd29ffe-f99b-41ca-8608-7336d8e6cda0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "a5856871-5dde-4a50-8e8c-d21910598092",
        "cursor": {
          "ref": "7eeb17c0-6852-48ae-bbd6-f810d9e20816",
          "length": 157,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5b5d67be-24d1-462d-96a8-c135e57047b8"
        },
        "item": {
          "id": "a5856871-5dde-4a50-8e8c-d21910598092",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "2ebb17e2-0966-45b9-a16f-36ad784a1e37",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "89117877-5951-4b07-84e1-37840437adbd",
        "cursor": {
          "ref": "cc7b32c2-467d-488b-8b00-80a771f294b0",
          "length": 157,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "85093263-0a39-4416-aad9-8c2b527f9e60"
        },
        "item": {
          "id": "89117877-5951-4b07-84e1-37840437adbd",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "64e749aa-241d-4c50-8674-e95b8a8e05c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 42,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "ebf2893c-6406-47d7-87d0-8941baac10fe",
        "cursor": {
          "ref": "e0742037-670d-490c-a0b9-55af1892359b",
          "length": 157,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "52ff625c-ee0b-45dd-a1e7-4ef83afebbed"
        },
        "item": {
          "id": "ebf2893c-6406-47d7-87d0-8941baac10fe",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "ced54403-27c5-4b78-9562-a20d119c63b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "9fc8ece3-66bd-4b73-9458-0aca9d5efab6",
        "cursor": {
          "ref": "481e1625-271a-417c-b6a0-402fb7558cf9",
          "length": 157,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "15588310-5fcb-40d7-8081-989f60cf79ac"
        },
        "item": {
          "id": "9fc8ece3-66bd-4b73-9458-0aca9d5efab6",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "75be9823-c2cb-4000-94a3-fa0b0593280a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "b2ae922f-a62b-49a0-b726-40b93aff6b8a",
        "cursor": {
          "ref": "3a19243c-194d-4559-81be-5075f0207549",
          "length": 157,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8c15969c-cfcf-4236-ba4b-407aa4796dfc"
        },
        "item": {
          "id": "b2ae922f-a62b-49a0-b726-40b93aff6b8a",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "f093d6f6-f412-45e6-9549-9be8ff793c9d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "ea83e453-ed4f-4bb7-a51f-e281eaca1f5c",
        "cursor": {
          "ref": "ad18fdb7-e59c-4026-9230-7e1ad34ef962",
          "length": 157,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9672493b-d75b-4914-9f6a-982ee9801297"
        },
        "item": {
          "id": "ea83e453-ed4f-4bb7-a51f-e281eaca1f5c",
          "name": "credentials_issue:credential.type.members:missing"
        },
        "response": {
          "id": "9ca8868d-36d3-478a-b348-a8c453976091",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 44,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "c86cdd92-51ec-4ca1-a1bf-098bab31ef4e",
        "cursor": {
          "ref": "6085d8cc-9ecc-44ff-929e-ced20e990e74",
          "length": 157,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7816c1e6-a2b1-447e-9ecc-41c60273886e"
        },
        "item": {
          "id": "c86cdd92-51ec-4ca1-a1bf-098bab31ef4e",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "f5af2030-33f1-43dc-abb3-9eb394542032",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 21,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "40e5b811-9e3f-4af4-a320-2dec6baab5a6",
        "cursor": {
          "ref": "afb047fa-b73d-4c25-8f4f-12dd8d4038d5",
          "length": 157,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ce44f968-be6b-4efc-bb92-c0b5ce536a8e"
        },
        "item": {
          "id": "40e5b811-9e3f-4af4-a320-2dec6baab5a6",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3ecb8416-3412-4885-a49a-6095e532dbd8",
          "status": "Created",
          "code": 201,
          "responseTime": 55,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "6b8d9d1b-79db-43c1-a2f2-ddbd5e0c9751",
        "cursor": {
          "ref": "78cbd31b-736c-4000-b961-6a9812870538",
          "length": 157,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0fcc7d51-1035-48da-adf9-9eab04abda35"
        },
        "item": {
          "id": "6b8d9d1b-79db-43c1-a2f2-ddbd5e0c9751",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "cd3e2599-603e-4762-bc18-87fb3aad3797",
          "status": "Created",
          "code": 201,
          "responseTime": 46,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "2c83ba9a-27d0-428e-ab40-687b7cb73971",
        "cursor": {
          "ref": "0768f073-60ce-4d22-b2cf-c33d07bceed6",
          "length": 157,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "5e1f248e-d9e0-4388-b50b-0dd5a0b4e33e"
        },
        "item": {
          "id": "2c83ba9a-27d0-428e-ab40-687b7cb73971",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "4cbf0b2c-4e5f-479b-9e72-bbfb427b42ce",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "09ae4fe4-5670-41d6-9d0b-6dfcf574383b",
        "cursor": {
          "ref": "c885bd72-c3b5-42f5-aaba-9c3588a4cd09",
          "length": 157,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "074b5081-67fe-4977-9711-041717df9e4c"
        },
        "item": {
          "id": "09ae4fe4-5670-41d6-9d0b-6dfcf574383b",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "72ab490c-2f45-4a22-9c0f-24f937b0584b",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "4334c096-412a-4ec8-a1fd-8efa599b86ee",
        "cursor": {
          "ref": "23ab4c2c-5b0a-4afb-a78c-ef3b04407567",
          "length": 157,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6db9d24d-f65d-47df-b591-63842c320761"
        },
        "item": {
          "id": "4334c096-412a-4ec8-a1fd-8efa599b86ee",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "cf56c049-79aa-4265-aa59-ce294b64dff5",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "60bb8894-9e9b-4f42-a327-1a2a6ce3b568",
        "cursor": {
          "ref": "59d58326-ecf4-4a23-81ef-6d44b4fca116",
          "length": 157,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "709f61a5-5a2c-412c-bae4-14c7d99b246d"
        },
        "item": {
          "id": "60bb8894-9e9b-4f42-a327-1a2a6ce3b568",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "37eeea88-b12b-4d92-80b1-af379145c09a",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "633a2b01-234a-4297-bfe3-3bc7e53c7f8f",
        "cursor": {
          "ref": "476f7abe-4a53-4373-bee7-c3d8d3bc7172",
          "length": 157,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "21990f85-bd9a-4f25-a8c8-fbbb28c5cc32"
        },
        "item": {
          "id": "633a2b01-234a-4297-bfe3-3bc7e53c7f8f",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "0a142f45-29b2-41d3-bf7c-cf466a085582",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "2ab4bb6d-d5ea-4d66-8a7c-b739c949b696",
        "cursor": {
          "ref": "6e418b75-5208-443d-8d5b-744911ab6b8f",
          "length": 157,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3735a95e-ad1d-42f0-b0c9-315d0f850c8a"
        },
        "item": {
          "id": "2ab4bb6d-d5ea-4d66-8a7c-b739c949b696",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1fa9448d-8808-48de-a3e9-5bc97454f2ae",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "f94e4d0c-e8e2-4fe5-8d0f-b064051daa1a",
        "cursor": {
          "ref": "e3116663-1184-4df1-a899-647b2e2dbe5e",
          "length": 157,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4ba2e0c4-9f59-4e30-8e1e-14bb6b592f7b"
        },
        "item": {
          "id": "f94e4d0c-e8e2-4fe5-8d0f-b064051daa1a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ac1a016c-70fd-437a-b434-f16f3d21238f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "609de6a1-183f-4d5c-890a-f8b216d3063e",
        "cursor": {
          "ref": "c2a193b4-d5b2-4930-abc3-7872f797c03a",
          "length": 157,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "73bd5937-5570-43ad-86bb-adfed041c202"
        },
        "item": {
          "id": "609de6a1-183f-4d5c-890a-f8b216d3063e",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "f3cd7333-076b-408f-96d9-38344258e0ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "f4e97ad0-d101-43b6-8fea-06834dc9d968",
        "cursor": {
          "ref": "2ddbe585-f4c7-4397-8688-0bff2ff0a3dc",
          "length": 157,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "59e7301f-84af-4c7d-b7be-e2d7a41e4fb0"
        },
        "item": {
          "id": "f4e97ad0-d101-43b6-8fea-06834dc9d968",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "3e240fdb-5b64-4387-b933-2c54a9a8714f",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "95eaa7d5-c139-48d9-a61a-caa50e2df61d",
        "cursor": {
          "ref": "0b1425ae-6f1d-465f-aa3d-3cb255976a4f",
          "length": 157,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c2917aa4-0d51-4fd2-9002-6722b64a1e80"
        },
        "item": {
          "id": "95eaa7d5-c139-48d9-a61a-caa50e2df61d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3575a046-bc66-49b4-905d-0e6bd82f25a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "e3a67b93-2e29-4cc4-abf1-367e43511ff4",
        "cursor": {
          "ref": "0e488e92-a1b9-4182-886c-e6dedc2cc9de",
          "length": 157,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4dbdf55f-4d89-4971-8093-a4377e1c2233"
        },
        "item": {
          "id": "e3a67b93-2e29-4cc4-abf1-367e43511ff4",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "74bb47d0-2e4d-4ec1-92ce-0cbae20ec34c",
          "status": "Created",
          "code": 201,
          "responseTime": 49,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "70bbb62e-eade-48be-b5d7-45094be1f707",
        "cursor": {
          "ref": "3dbb574f-7906-402d-9c8d-29f824600b87",
          "length": 157,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6f07e07e-f8ae-4861-b078-5cf70b9b4852"
        },
        "item": {
          "id": "70bbb62e-eade-48be-b5d7-45094be1f707",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "2a6ce3a5-e80d-4842-a58b-ed7344f705e1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "2eab19a9-ddda-41f9-8498-31848a15366a",
        "cursor": {
          "ref": "ef744e48-d7be-491d-b7a6-710c5b22bd30",
          "length": 157,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "79e6c41e-576c-4904-816a-fe883add233e"
        },
        "item": {
          "id": "2eab19a9-ddda-41f9-8498-31848a15366a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "94f4a413-82dc-4a1b-ab77-a8de776cebf4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 6,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "6e6b44c5-caea-483e-a588-201333309208",
        "cursor": {
          "ref": "c24b86d1-624c-4c11-bac3-fba2199d8f5c",
          "length": 157,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9953dbf9-7b37-4e3a-95d8-39e41ccc6bd4"
        },
        "item": {
          "id": "6e6b44c5-caea-483e-a588-201333309208",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "4f26bf97-96ca-4507-ba81-d2929f9bd129",
          "status": "Created",
          "code": 201,
          "responseTime": 33,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "67f12984-2a13-4362-932b-5d345454f83a",
        "cursor": {
          "ref": "359b1021-2eb0-4131-98e0-3c5417b2f026",
          "length": 157,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d7362cfd-e97a-4951-87e4-771f8b5eef41"
        },
        "item": {
          "id": "67f12984-2a13-4362-932b-5d345454f83a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b8317b9c-717b-4668-b7bb-72db4555ce17",
          "status": "Created",
          "code": 201,
          "responseTime": 41,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "2b45a72a-e962-4320-855c-cebd737fac4c",
        "cursor": {
          "ref": "ae3825e9-3e73-4e25-a9ba-84933e96a8f0",
          "length": 157,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6cae113e-46fe-4068-920f-f6a3592bbaae"
        },
        "item": {
          "id": "2b45a72a-e962-4320-855c-cebd737fac4c",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "079b3f07-060a-4ec3-896c-855704290d7e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "80ded949-89b2-4e57-b348-e1fb86b30fb1",
        "cursor": {
          "ref": "b8948ca5-ecd0-4501-a3e8-e2b5e0139580",
          "length": 157,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "63f7a634-9d1b-4b32-9dfe-e05ba8665556"
        },
        "item": {
          "id": "80ded949-89b2-4e57-b348-e1fb86b30fb1",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b0a121ea-4730-4e80-8d14-d1f631873805",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "cd275b71-d8b0-4b11-9d5c-e4d69ca4293e",
        "cursor": {
          "ref": "dde44c64-118d-4617-a60a-60b90a987e9a",
          "length": 157,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4f05743f-2846-4c26-904f-9be2afdd5804"
        },
        "item": {
          "id": "cd275b71-d8b0-4b11-9d5c-e4d69ca4293e",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "6970bae9-0e09-4c6d-9eee-c6b32e2af802",
          "status": "Created",
          "code": 201,
          "responseTime": 29,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "210883ad-67bc-40f0-85fe-016fd76eea4c",
        "cursor": {
          "ref": "a2b076ec-080a-4011-9472-8a6e2c5d1ed6",
          "length": 157,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3e80333c-54e4-4e45-a591-52bbfe3061db"
        },
        "item": {
          "id": "210883ad-67bc-40f0-85fe-016fd76eea4c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "50363946-6a87-4c34-bcea-40a8a65671e9",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "974b2ee2-d710-473f-b8d5-0e89aa1ea75d",
        "cursor": {
          "ref": "e30f773e-97f2-4f4a-9a8e-952b9e42bd59",
          "length": 157,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "dcdd633f-f53e-4582-b97e-37e6e5251750"
        },
        "item": {
          "id": "974b2ee2-d710-473f-b8d5-0e89aa1ea75d",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "d12fcb0c-f289-4a21-a364-4d0a39c2f5cc",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "8280173c-b0ce-4bde-a0d8-5110324cce35",
        "cursor": {
          "ref": "dac34d56-84be-45f2-b277-d5b5dd35ecdd",
          "length": 157,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ef082548-5af5-4e68-899c-94075156e567"
        },
        "item": {
          "id": "8280173c-b0ce-4bde-a0d8-5110324cce35",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "4715d49b-57f8-4b73-abbb-1a292378da77",
          "status": "Created",
          "code": 201,
          "responseTime": 31,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "8e5d9a51-277a-4f60-bc22-60ff0bb8f35c",
        "cursor": {
          "ref": "09963def-2e50-48b1-9ef8-c5699e6e02a2",
          "length": 157,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "58934f42-34ca-4f9c-a09e-4bc0f0b313ca"
        },
        "item": {
          "id": "8e5d9a51-277a-4f60-bc22-60ff0bb8f35c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4bf30099-f08f-4349-b60c-9bbc31782088",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "d5a8a5e5-8513-4188-b9ba-263567ff3f7b",
        "cursor": {
          "ref": "223463e2-cba7-4123-93bd-d85b62a560c2",
          "length": 157,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "175523bf-43f4-4749-8bdc-65e90b425a78"
        },
        "item": {
          "id": "d5a8a5e5-8513-4188-b9ba-263567ff3f7b",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "cc3822f0-9178-45d8-8947-5b2998474a76",
          "status": "Created",
          "code": 201,
          "responseTime": 34,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "7d989ae7-aafd-4624-941d-07ed03e93456",
        "cursor": {
          "ref": "6e518171-89db-49e9-9666-0606670c806e",
          "length": 157,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7274841a-9c1e-4d66-9af7-1c320fdf6bdb"
        },
        "item": {
          "id": "7d989ae7-aafd-4624-941d-07ed03e93456",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0f856951-f105-42fc-b84a-26617a8de6e7",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal undefined",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal undefined\n   at Object.eval sandbox-script.js:3:42)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "06a1ad86-c5c3-436e-9210-c6509d540161",
        "cursor": {
          "ref": "f6ec29ad-027e-4281-9938-304db5e9e86c",
          "length": 157,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ed5a7c7d-2842-47e2-8a61-02d1cdd3fe2e"
        },
        "item": {
          "id": "06a1ad86-c5c3-436e-9210-c6509d540161",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "a36e4e8b-6d3e-42b6-8c7e-70fd61c5f44a",
          "status": "Created",
          "code": 201,
          "responseTime": 44,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6708337-7c24-4323-a556-a19b81a464d7",
        "cursor": {
          "ref": "217761a0-4036-49ed-9cfc-6cf2dd0f2a1e",
          "length": 157,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "52570d01-b42f-4c64-8366-7c7bc4b7ceab"
        },
        "item": {
          "id": "f6708337-7c24-4323-a556-a19b81a464d7",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "21b821e7-56e4-4ad2-9753-59d25d3cecd0",
          "status": "Created",
          "code": 201,
          "responseTime": 33,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal undefined",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal undefined\n   at Object.eval sandbox-script.js:3:44)"
            }
          }
        ]
      },
      {
        "id": "477b613e-aa95-4cee-9983-dc73c1942c69",
        "cursor": {
          "ref": "1605626f-24d8-48e2-91de-7c3940d1b37d",
          "length": 157,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "9dc17f5a-3cc4-419a-ad80-52a0948ad270"
        },
        "item": {
          "id": "477b613e-aa95-4cee-9983-dc73c1942c69",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4af20169-1a17-4584-baca-88f961c62ff8",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e6abf0f-5d25-488f-b50c-978b3a6c91d8",
        "cursor": {
          "ref": "5a7b8cc8-dbcb-4f2e-aaa7-28d096853391",
          "length": 157,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e7760321-14c9-4c5e-9007-18be3b061ffd"
        },
        "item": {
          "id": "8e6abf0f-5d25-488f-b50c-978b3a6c91d8",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "bf18f110-e68f-4e42-abb7-9fc58a9e55c4",
          "status": "Created",
          "code": 201,
          "responseTime": 46,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c99a80e-2368-493c-a208-38bd8b049314",
        "cursor": {
          "ref": "95b4cc41-e2e3-4a97-bc5d-48bbbbe17a08",
          "length": 157,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8f29fbb7-4c29-41ac-8951-145455d8321d"
        },
        "item": {
          "id": "4c99a80e-2368-493c-a208-38bd8b049314",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "18a3e7a3-5219-499e-b768-cab92a1dab3a",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab79f42-bed4-4f18-9a37-8beee1905fee",
        "cursor": {
          "ref": "32b4e25e-0226-49c1-b6cc-6c0894f0aed6",
          "length": 157,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "9d62925d-8fc7-41cf-ad3b-3a119082a567"
        },
        "item": {
          "id": "dab79f42-bed4-4f18-9a37-8beee1905fee",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c03990ad-daa1-4a6f-9256-44dc2d6e83d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "dab79f42-bed4-4f18-9a37-8beee1905fee",
        "cursor": {
          "ref": "32b4e25e-0226-49c1-b6cc-6c0894f0aed6",
          "length": 157,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "9d62925d-8fc7-41cf-ad3b-3a119082a567"
        },
        "item": {
          "id": "dab79f42-bed4-4f18-9a37-8beee1905fee",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c03990ad-daa1-4a6f-9256-44dc2d6e83d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f172796b-860f-4b13-9d42-7e8384b68367",
        "cursor": {
          "ref": "ce9c755c-a5c6-45ad-9fb1-15fc9e03a246",
          "length": 157,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "71223881-5502-4861-a450-9e04d9c6af1e"
        },
        "item": {
          "id": "f172796b-860f-4b13-9d42-7e8384b68367",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "2c5e742c-2441-4beb-b705-f4c0459928c8",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 7,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "51caf85c-63c1-414e-87f2-bd1543b03674",
        "cursor": {
          "ref": "bd3ecbed-946c-48b9-bba7-e99c0bd889ec",
          "length": 157,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3b742d22-a6ca-47d3-83ad-bf97d806ad44"
        },
        "item": {
          "id": "51caf85c-63c1-414e-87f2-bd1543b03674",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e32251c9-1b81-45c1-afde-92dd6a446127",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "51caf85c-63c1-414e-87f2-bd1543b03674",
        "cursor": {
          "ref": "bd3ecbed-946c-48b9-bba7-e99c0bd889ec",
          "length": 157,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3b742d22-a6ca-47d3-83ad-bf97d806ad44"
        },
        "item": {
          "id": "51caf85c-63c1-414e-87f2-bd1543b03674",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e32251c9-1b81-45c1-afde-92dd6a446127",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "3ef3b4b1-d5d4-4cb6-ae4a-685bc9627b9e",
        "cursor": {
          "ref": "53bdd122-1028-4aee-b0dc-d2e74e3e9878",
          "length": 157,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "66fa036c-e950-4892-815c-d11b30d91053"
        },
        "item": {
          "id": "3ef3b4b1-d5d4-4cb6-ae4a-685bc9627b9e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f560d03f-6f8b-42e8-ba93-691c2fe8636b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 56
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "37ddf378-1ed7-46a1-a9b4-f65bb77608a6",
        "cursor": {
          "ref": "1a3b5075-99c2-472a-875f-5d1f6e4d8305",
          "length": 157,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1405cb04-631b-4505-966d-1a7e36e835d3"
        },
        "item": {
          "id": "37ddf378-1ed7-46a1-a9b4-f65bb77608a6",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "5caf26c7-659f-4e1b-856f-1aad2903fa1a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 65
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "c9cfa264-0792-4766-8872-d00def3700e4",
        "cursor": {
          "ref": "a7a68287-cec2-4352-ad19-8e462da1d890",
          "length": 157,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "26e760d1-8032-44b7-9283-0eff50de4041"
        },
        "item": {
          "id": "c9cfa264-0792-4766-8872-d00def3700e4",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5607f0f5-e718-4c63-b624-c57335aef910",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "9257a7e0-b2a8-4cad-aea3-7e97cb4caebc",
        "cursor": {
          "ref": "c73b1434-749e-4abb-a031-48a8218e6912",
          "length": 157,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "63630954-5de5-4578-a814-fbba5f835fe4"
        },
        "item": {
          "id": "9257a7e0-b2a8-4cad-aea3-7e97cb4caebc",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "fc37538b-fc7e-468d-ae89-83f044a3e7f5",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "6271253b-9eb2-44f8-9f1b-87500a30eac1",
        "cursor": {
          "ref": "8568953a-b186-423f-b64e-066823f03cf7",
          "length": 157,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b05a87d6-cea0-4e92-96a6-34abf259894c"
        },
        "item": {
          "id": "6271253b-9eb2-44f8-9f1b-87500a30eac1",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "aec44c3b-2d68-4b33-8b36-f00f2aad7f48",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "3d064e90-a31a-4247-8088-ba6fe54700ab",
        "cursor": {
          "ref": "1cf8a42f-d498-4a45-b493-95b7bbd49090",
          "length": 157,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "8460ac84-341b-4858-9f09-728e8015ae19"
        },
        "item": {
          "id": "3d064e90-a31a-4247-8088-ba6fe54700ab",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "15a2fd58-5f16-4578-94f8-f2c537d679de",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "f43b7185-5d3b-4d77-ae98-15f78fc91e85",
        "cursor": {
          "ref": "b56eb816-aba0-4320-8ae8-1c658d082d5d",
          "length": 157,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e7514373-0318-4ce2-90bd-880c2c30d303"
        },
        "item": {
          "id": "f43b7185-5d3b-4d77-ae98-15f78fc91e85",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b3b85a76-99f5-40d9-a48f-3c7cc6b502bc",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "ceb344ea-6f25-47dd-a694-a54e58c95f3d",
        "cursor": {
          "ref": "4d9f6a30-c1e1-4574-8430-fc7fe8666313",
          "length": 157,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "585f7247-2b56-4ad5-8559-26d3d17c6c43"
        },
        "item": {
          "id": "ceb344ea-6f25-47dd-a694-a54e58c95f3d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "62e72cb3-cde9-4ab9-8a62-537a9885e3cd",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "0034f760-728c-4eda-b131-239796827b51",
        "cursor": {
          "ref": "1c420695-56c0-490f-a61e-bcc5c1c1a801",
          "length": 157,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "cd4a1cda-4f82-4842-b946-ce9ed58eb848"
        },
        "item": {
          "id": "0034f760-728c-4eda-b131-239796827b51",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "8f048d7f-0839-4d7d-829a-d4b165133046",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "e78cb786-238a-478c-8d17-274193b71228",
        "cursor": {
          "ref": "624b0963-1ece-4cd1-aa62-0e9f16e2c15b",
          "length": 157,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e106076c-c86b-4f2e-b23a-5638a968028a"
        },
        "item": {
          "id": "e78cb786-238a-478c-8d17-274193b71228",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "599eb442-b777-4e0d-8de3-8c4dc1041ce7",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "a6c173af-71cb-44af-9f82-faf7e1f30e00",
        "cursor": {
          "ref": "b7d41716-db9d-4c98-86c7-ebe1306fe23d",
          "length": 157,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4e8ae1e3-56e0-4150-8a90-d6f599233c97"
        },
        "item": {
          "id": "a6c173af-71cb-44af-9f82-faf7e1f30e00",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "69da133e-4a2e-426a-b616-527b4554e930",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "3075be66-3302-4b64-b378-b8e52618b284",
        "cursor": {
          "ref": "00dd0450-6585-47bb-812b-26183343de6e",
          "length": 157,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6e7451dd-8347-4842-bbe4-9172daccf4ef"
        },
        "item": {
          "id": "3075be66-3302-4b64-b378-b8e52618b284",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9875ff33-1c12-4cb1-924a-8df4763a5a10",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "8959a066-8405-4873-95e0-58211da34a7e",
        "cursor": {
          "ref": "fd968fb3-1cf1-4111-a7e0-e884b11a6244",
          "length": 157,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "76069351-423b-44b6-91cb-09c50ef27cf6"
        },
        "item": {
          "id": "8959a066-8405-4873-95e0-58211da34a7e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c44dfeb8-f6ef-406e-b225-e27489eca860",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "4169dde9-38e1-4266-8041-2ebba87b8ec4",
        "cursor": {
          "ref": "1bd05eca-651a-4e0a-ac26-27471e823e2e",
          "length": 157,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "0482e299-ff38-4c61-9544-72bc3db09121"
        },
        "item": {
          "id": "4169dde9-38e1-4266-8041-2ebba87b8ec4",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "73bb197f-8bbc-44b8-a02c-95861a230c4e",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "f57977bf-0211-4920-a766-964239bd64a4",
        "cursor": {
          "ref": "92734c11-3dcf-4f88-b330-b615cbf484fc",
          "length": 157,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "23f3aad6-6b1a-4934-89d6-54d5c33da2e1"
        },
        "item": {
          "id": "f57977bf-0211-4920-a766-964239bd64a4",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9edd3e63-3b94-4a36-a0c0-b667d956e6b7",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "5cd0373d-a7e6-4571-a88c-9ad35b948489",
        "cursor": {
          "ref": "641cd1ea-c1b8-4aeb-998a-94f038707477",
          "length": 157,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "fdfdef8d-cc7c-4a61-84f7-4ecde641db0d"
        },
        "item": {
          "id": "5cd0373d-a7e6-4571-a88c-9ad35b948489",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "1c1dfc71-e362-4a45-9bee-ba3d8831f826",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "31f657c8-7ed9-4071-b18e-5b1b78fdd87e",
        "cursor": {
          "ref": "22bf7673-46f7-45b3-b642-45d9724c886c",
          "length": 157,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b8588983-3f1b-4793-a1d7-03c425db86af"
        },
        "item": {
          "id": "31f657c8-7ed9-4071-b18e-5b1b78fdd87e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "140dd42f-e61e-46db-9160-e99fea40a038",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "5840d01b-b951-4553-a051-c926e709ac5a",
        "cursor": {
          "ref": "5ce099d3-4eae-470a-88b5-05eeec93aeed",
          "length": 157,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "21148763-e4db-47f4-a263-9d4b6ec18d5d"
        },
        "item": {
          "id": "5840d01b-b951-4553-a051-c926e709ac5a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a27947c3-f564-4f90-b560-7ee23914cf9a",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "51931610-0039-4057-953c-1d68cb9f5aff",
        "cursor": {
          "ref": "56956248-2368-4d44-ae74-7367efb54f25",
          "length": 157,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "cabb67da-5329-459b-85ce-92c08e793554"
        },
        "item": {
          "id": "51931610-0039-4057-953c-1d68cb9f5aff",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "511f0137-282f-4b75-8005-0df589f1ef8c",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "f4dffce4-c3ad-4006-8670-390443693be4",
        "cursor": {
          "ref": "7da6862f-5447-45f2-b515-1379973fd383",
          "length": 157,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b6424315-064e-44c4-803e-697647b74077"
        },
        "item": {
          "id": "f4dffce4-c3ad-4006-8670-390443693be4",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ec95c074-42a7-4bf5-989d-1dd6f838899d",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "813a356d-7aaf-40fc-ac63-15615fbfc29c",
        "cursor": {
          "ref": "c8f79ebf-3a0b-4513-8112-7e72060529f7",
          "length": 157,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "52bc84e8-43e8-403c-b425-101287660991"
        },
        "item": {
          "id": "813a356d-7aaf-40fc-ac63-15615fbfc29c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3bbb1ef4-4b39-401e-8fc1-e33744c9b36a",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "5925d4ea-e3cc-41a3-8d84-e6af3f2be11f",
        "cursor": {
          "ref": "b0a66093-0503-4c3f-a76c-767d29a00e0d",
          "length": 157,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "50ca7d14-8739-4f9c-b8f0-cd7f1b4bc57f"
        },
        "item": {
          "id": "5925d4ea-e3cc-41a3-8d84-e6af3f2be11f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f05da680-fd29-48e4-8b45-0265e119c1aa",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "08a47b26-fd4e-45ab-9819-1b7b88297a43",
        "cursor": {
          "ref": "689f1323-f716-4aed-80c8-b08b007179bc",
          "length": 157,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e5fda17b-1cc7-4ffe-a395-271d63410ef3"
        },
        "item": {
          "id": "08a47b26-fd4e-45ab-9819-1b7b88297a43",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "3477d8f2-d8be-48ea-a619-934d57d0cf94",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "8f84cf85-cede-4bef-9554-c6922d6b9607",
        "cursor": {
          "ref": "26ae6400-412f-4ac0-95ff-bdacebe6d592",
          "length": 157,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "de591d83-c11d-4ff6-86a9-09107c9e6f3e"
        },
        "item": {
          "id": "8f84cf85-cede-4bef-9554-c6922d6b9607",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ef8416b6-9c51-4ba4-b5f2-aa86829355df",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "348e2b36-20d7-475a-ae53-1a446a872779",
        "cursor": {
          "ref": "b62594fc-723e-41f4-a7b9-9890c4d21896",
          "length": 157,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "2331ca1c-a497-4e84-950d-160805cc6745"
        },
        "item": {
          "id": "348e2b36-20d7-475a-ae53-1a446a872779",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2faa380b-c0b6-4066-8354-a89a530194d6",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "19c3e396-80fb-480c-8028-5ca4c9b9acef",
        "cursor": {
          "ref": "2c1e39a2-a175-43f4-b4be-ab108e25c51b",
          "length": 157,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6d31f5c7-97e4-4439-989c-ef632ea3d0a4"
        },
        "item": {
          "id": "19c3e396-80fb-480c-8028-5ca4c9b9acef",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "406efe67-41ac-4306-8fd9-c9f3e855c092",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "9534419b-8563-4035-84bb-5afe3a7ed562",
        "cursor": {
          "ref": "0156abb6-e4dd-47c9-8c78-336be5d62780",
          "length": 157,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c6ab2009-1960-4a17-8061-fe4c494fffbd"
        },
        "item": {
          "id": "9534419b-8563-4035-84bb-5afe3a7ed562",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "52e9d8f6-cd2b-48ce-ab99-98973e7e0ca8",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "b3d88437-7e07-49e9-bfe9-5d8e2fb9c9ad",
        "cursor": {
          "ref": "b834f95f-5cee-4c73-a894-cc66b4daf9c8",
          "length": 157,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4cb23c67-9357-48a1-bf34-c00853e6e513"
        },
        "item": {
          "id": "b3d88437-7e07-49e9-bfe9-5d8e2fb9c9ad",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f2b0adeb-aaa2-4d37-b24b-1c2fe2ca74f6",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "6a491cf0-848b-47c9-bf22-f6ad499323db",
        "cursor": {
          "ref": "bf1df19f-9afd-427c-ae8f-6fadd27708c7",
          "length": 157,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d13aa3d4-086a-4762-9340-db391c8cf28b"
        },
        "item": {
          "id": "6a491cf0-848b-47c9-bf22-f6ad499323db",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "52025004-3751-440a-9100-6e874ccda273",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "ee83caf5-4261-4270-b513-32878e1766ff",
        "cursor": {
          "ref": "fc153de2-0203-4956-b2b6-8cfb09b700c3",
          "length": 157,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "9352ba18-98bb-4bdc-9fcd-477d4dd95240"
        },
        "item": {
          "id": "ee83caf5-4261-4270-b513-32878e1766ff",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ff2f0774-d003-471f-bdb4-51c940d8ccc9",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "f8c05f06-aed4-49f9-8f72-a424fa157083",
        "cursor": {
          "ref": "5b890e93-ff55-44f8-8a5d-3f5e2ba49bb2",
          "length": 157,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "fbbeb9ee-7720-4172-ad8d-d9e713662840"
        },
        "item": {
          "id": "f8c05f06-aed4-49f9-8f72-a424fa157083",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "45b6c5ae-437a-43eb-bc48-85194708c74d",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "a0a2082d-f1f8-4891-967d-ec234c20941c",
        "cursor": {
          "ref": "b79981c3-1bfe-4c59-a161-1a68e834b6ce",
          "length": 157,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6e5cf1bc-8447-480c-bc98-abdc9819c17b"
        },
        "item": {
          "id": "a0a2082d-f1f8-4891-967d-ec234c20941c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c62b9d34-663c-4659-a5ed-e5da3ed65220",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "3e3b7bb5-0524-4db3-b0a2-00383ab33800",
        "cursor": {
          "ref": "b5c2d07d-2125-4c96-996b-6c22de4a0439",
          "length": 157,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "9909f9d3-5334-41e1-9d7d-f954e711ecb2"
        },
        "item": {
          "id": "3e3b7bb5-0524-4db3-b0a2-00383ab33800",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "27c01443-5f8f-4f51-a345-164b1606edd0",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "acf7920d-7e47-486f-a3e4-a71407b71610",
        "cursor": {
          "ref": "4a39bc83-b1dc-44a9-9509-f69ef2eb99a4",
          "length": 157,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "14585bf6-30be-4276-accb-9f0508bc84a5"
        },
        "item": {
          "id": "acf7920d-7e47-486f-a3e4-a71407b71610",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1e6e3624-7a09-42e3-bde6-2e6ff1d221ff",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "b1086aa9-dd7a-42cf-8130-715d9e733669",
        "cursor": {
          "ref": "93b6ad2c-7001-4c45-8f39-312bb9173a50",
          "length": 157,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "67dadeb6-86ba-42f2-a940-e6194e3e13ea"
        },
        "item": {
          "id": "b1086aa9-dd7a-42cf-8130-715d9e733669",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "99dbbeaf-2739-4006-aefc-672d1c4c6e7f",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "a00a9672-004e-4753-970a-eb183f92ccc3",
        "cursor": {
          "ref": "afd1b405-ea39-404e-afe2-ebb93a7a7570",
          "length": 157,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5cabf39c-fe42-4cec-b6ac-f93a3a36b7a3"
        },
        "item": {
          "id": "a00a9672-004e-4753-970a-eb183f92ccc3",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f96bc09b-ea17-4ac0-8d91-7954475d8417",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "855e8ed2-2fe1-4eeb-bb80-13ba358de9a6",
        "cursor": {
          "ref": "23660a61-7517-4bce-8b56-e937a6c2b68f",
          "length": 157,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "db0bc1dd-b278-46e2-a24f-1397f7841608"
        },
        "item": {
          "id": "855e8ed2-2fe1-4eeb-bb80-13ba358de9a6",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "05e53833-95d2-46f5-997a-ca83594c857a",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "818952fe-3a33-4ce2-a2e9-13461ab1658e",
        "cursor": {
          "ref": "2f055ed2-5692-4e56-b0cd-149f058dabd9",
          "length": 157,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e986e049-b4f8-43b4-88ec-630370a7cb58"
        },
        "item": {
          "id": "818952fe-3a33-4ce2-a2e9-13461ab1658e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "117a84aa-99d5-4521-abb9-f94f8fe896fc",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "415d8e55-0982-4183-a7c8-6d951d7121a5",
        "cursor": {
          "ref": "027e3bab-5c64-4a1c-960b-69163885f100",
          "length": 157,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "20187971-0dee-4b2c-9bb7-525e8f467659"
        },
        "item": {
          "id": "415d8e55-0982-4183-a7c8-6d951d7121a5",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "50274260-7a47-4677-80d0-44955e684d62",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "03f87d2f-bf1b-406c-a731-dcd00a894ebd",
        "cursor": {
          "ref": "8f51c85f-6060-4b06-84e8-358f78f0137d",
          "length": 157,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "293ea699-bf96-47ae-8211-87bc23d63259"
        },
        "item": {
          "id": "03f87d2f-bf1b-406c-a731-dcd00a894ebd",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "01c70302-371e-4bfe-94ed-358386080c11",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "aa7adaee-c1d9-4f8f-b868-cb56f043451e",
        "cursor": {
          "ref": "6639334c-8516-4d40-a4b9-23026c450b70",
          "length": 157,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "0407f70e-bcc0-42e2-aae0-29b51e831b27"
        },
        "item": {
          "id": "aa7adaee-c1d9-4f8f-b868-cb56f043451e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "714ccf8b-4797-4982-865e-ffc3784b7db3",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "ec2098cb-a13f-45f1-ac9e-7c1c0f70de4e",
        "cursor": {
          "ref": "fe6f7682-8ad5-4b71-9569-83c96cdc204d",
          "length": 157,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a06bba0f-d4da-415b-9e1f-87557f36d6c2"
        },
        "item": {
          "id": "ec2098cb-a13f-45f1-ac9e-7c1c0f70de4e",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "fb0911d4-62ae-4024-9d3b-f7706485973c",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "771be047-f235-4034-8554-2fcfa40dee00",
        "cursor": {
          "ref": "18ce1567-77ae-46cc-b175-e990aa9b2c18",
          "length": 157,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6bd10b94-0060-40f9-bdf8-e79fe1c700a1"
        },
        "item": {
          "id": "771be047-f235-4034-8554-2fcfa40dee00",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "eea560d6-759f-4e74-9a4d-7af77d16c5e6",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "7f1f5249-6ffd-4552-8343-1e3482d27052",
        "cursor": {
          "ref": "c2e4f8d3-8a52-4207-b8f8-1c14b65b5a41",
          "length": 157,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "55771711-52a2-4c3c-8307-b9e68edbb0d4"
        },
        "item": {
          "id": "7f1f5249-6ffd-4552-8343-1e3482d27052",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "96076f97-6227-4aa6-af4e-4a73ed727f5d",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "6ba7c497-ce39-4e3b-9800-f6bfcc6d011b",
        "cursor": {
          "ref": "9df1beb6-029c-41ce-8e8a-97afcb0b8df8",
          "length": 157,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f7950541-8882-4d89-8df8-dadb3bcd1082"
        },
        "item": {
          "id": "6ba7c497-ce39-4e3b-9800-f6bfcc6d011b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "bac722a5-101c-46ed-b5fb-43a7efe17681",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "61cf86b6-7df1-4f03-a1b5-5e7c9534c1b7",
        "cursor": {
          "ref": "11e7d86a-3c4d-4d03-a5ff-634c7eefd464",
          "length": 157,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4aa254c7-18e2-48c9-ae94-75cb14fcf75f"
        },
        "item": {
          "id": "61cf86b6-7df1-4f03-a1b5-5e7c9534c1b7",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e0ebe932-b6f2-4c78-9d76-8c53f2c1e1c5",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "b5a66b6b-55d7-458b-9194-dc65f1ab78cf",
        "cursor": {
          "ref": "5f481189-8871-44be-a357-2a132d6d256d",
          "length": 157,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "bce9c147-0f7a-4f85-8049-96a4af7c02d7"
        },
        "item": {
          "id": "b5a66b6b-55d7-458b-9194-dc65f1ab78cf",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "be6439c8-dc59-4d13-bdf9-775e20efda70",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "30560f6c-ccdc-4f4e-a482-ac5452a5fb03",
        "cursor": {
          "ref": "bc8c0436-7029-4dad-83d0-5066688edbd4",
          "length": 157,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "68c14c50-6c7b-43ea-85bc-f042eb8b95ec"
        },
        "item": {
          "id": "30560f6c-ccdc-4f4e-a482-ac5452a5fb03",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5f039f6b-90a8-4e59-bf90-b9317ffdcdeb",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "6eea013f-70fd-4d72-9146-6c156859b621",
        "cursor": {
          "ref": "39a714cf-eaae-4d4d-ae35-f9b407e5963e",
          "length": 157,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "cdbfefc8-bb58-48ee-b26e-b821b6c269af"
        },
        "item": {
          "id": "6eea013f-70fd-4d72-9146-6c156859b621",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a2d34c6b-e6f3-45d2-ab5c-e44c31a5bb1b",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "33032152-4d07-4bfe-b3ac-a28273a97d19",
        "cursor": {
          "ref": "e7e5ff51-4cdd-4b90-861a-78e21287cf9a",
          "length": 157,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e736e431-1961-422f-a268-f43a5a9bc6e8"
        },
        "item": {
          "id": "33032152-4d07-4bfe-b3ac-a28273a97d19",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5e8a9324-0690-4dce-a53e-1f11dffcb224",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "92587fff-d156-4aec-b43b-e9f479ef0295",
        "cursor": {
          "ref": "5546ba99-970e-4260-9d41-e20dd0e260e4",
          "length": 157,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "33cde1a6-8c96-4e39-933f-29179431ff07"
        },
        "item": {
          "id": "92587fff-d156-4aec-b43b-e9f479ef0295",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1614b680-10b4-42ef-a594-5d36fa122b04",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "228532cb-b1bc-4348-ada0-400c6be2f818",
        "cursor": {
          "ref": "cedf65bd-906c-4ccc-9a40-be22605a2259",
          "length": 157,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "fb8ab1d6-3d0d-42ad-ae6b-668995bd023f"
        },
        "item": {
          "id": "228532cb-b1bc-4348-ada0-400c6be2f818",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "3f8157ba-3372-40b1-a680-dc3b903314a5",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "2ba6936d-ff1b-4c42-9eba-d8389d65763b",
        "cursor": {
          "ref": "1d6e0060-fe94-4de9-86dc-a87eca98a288",
          "length": 157,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a7869b78-e75d-4095-a994-2ad354846348"
        },
        "item": {
          "id": "2ba6936d-ff1b-4c42-9eba-d8389d65763b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "97dc1d93-fb87-46d2-a0a9-7d65412a8507",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "1985695b-0524-4dc3-b037-e0cf7b7ca6b9",
        "cursor": {
          "ref": "bb6cd7cc-0c3a-4123-bfaa-94ad218d23b9",
          "length": 157,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a3755913-2d71-407b-a8c9-874e95af35ea"
        },
        "item": {
          "id": "1985695b-0524-4dc3-b037-e0cf7b7ca6b9",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "eea6201f-1c2f-4fbf-9c5c-6949f3f832c8",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "d2e14389-e43e-434c-a96f-b23b7cff3bc2",
        "cursor": {
          "ref": "c2231093-c4b7-4458-8f93-2a66eda1250b",
          "length": 157,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f92c4922-4406-4198-875d-fecde4e1c91e"
        },
        "item": {
          "id": "d2e14389-e43e-434c-a96f-b23b7cff3bc2",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "db9abc40-e5ec-4d66-a8b6-38d7964b487a",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "c287bea5-345e-48a8-a4cd-96d426b16e0a",
        "cursor": {
          "ref": "cc94d687-6fac-45b4-add5-1b422bfa4471",
          "length": 157,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "02bd9c5b-c629-4129-a520-64a2f9f2e2e1"
        },
        "item": {
          "id": "c287bea5-345e-48a8-a4cd-96d426b16e0a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "39815913-422f-4a26-90ce-dbaaf5de515d",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:106)"
            }
          }
        ]
      },
      {
        "id": "9144d467-dd95-44b0-92bb-c1b0c8c3b174",
        "cursor": {
          "ref": "8e47c1ca-0cdf-4131-8519-bbbcc77db85a",
          "length": 157,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e238c336-68b5-4405-8e9c-e7867f3b233c"
        },
        "item": {
          "id": "9144d467-dd95-44b0-92bb-c1b0c8c3b174",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3db77a84-8d67-44c4-9c04-e1210a4ec97b",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "bb6e11e6-2cba-4d06-acbe-bf0824bb834a",
        "cursor": {
          "ref": "35b6ec0f-e79f-4821-b011-a79db2c14c5e",
          "length": 157,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "efb0a804-2396-47d9-8256-0adcb2438c4e"
        },
        "item": {
          "id": "bb6e11e6-2cba-4d06-acbe-bf0824bb834a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a4a3077c-ee93-4c27-87db-27d95df5b6b3",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "d4bc467c-169a-4ab8-85fe-ffd18a4bd5ae",
        "cursor": {
          "ref": "ba42f6de-1559-4bf2-884a-b6f7de581c4d",
          "length": 157,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "07063fd3-41da-46c5-92cc-31e988213580"
        },
        "item": {
          "id": "d4bc467c-169a-4ab8-85fe-ffd18a4bd5ae",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "20ac24a6-1d84-4484-864e-b9fb01eb6f50",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "83ddb6f2-6832-490f-8b02-c5f05c3718ab",
        "cursor": {
          "ref": "394b6cfd-867e-4f5f-89ba-a0e3770bb837",
          "length": 157,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "00c13e38-0cb7-482d-90ba-f30da8597965"
        },
        "item": {
          "id": "83ddb6f2-6832-490f-8b02-c5f05c3718ab",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "26dc27b8-f8bf-44c7-8d44-12f7af3fb9b8",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "60688ee3-33db-4399-9ad9-19ce89cb18ae",
        "cursor": {
          "ref": "595e2771-e0db-48cf-8d74-c0d3ddfc7269",
          "length": 157,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "856a15c0-1ab2-4275-9679-499bec64cb34"
        },
        "item": {
          "id": "60688ee3-33db-4399-9ad9-19ce89cb18ae",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d34827c9-85fb-44bb-9e5d-0f77176441f8",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "44de5545-3b6d-4a46-8211-ddc4c65e5e09",
        "cursor": {
          "ref": "5f5ea001-271f-4223-93e3-cfe298a1fba5",
          "length": 157,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a409f7d7-485b-4d02-8192-c14623879995"
        },
        "item": {
          "id": "44de5545-3b6d-4a46-8211-ddc4c65e5e09",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c32e9e84-e04f-4fae-bcdd-1d9e4380412a",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "612b8718-f59b-4eea-9927-b59e0f28c28d",
        "cursor": {
          "ref": "6911f84e-999c-4913-9b7f-8fcca216a059",
          "length": 157,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b36fed1f-b09e-4ffe-a5c1-fe14451757c9"
        },
        "item": {
          "id": "612b8718-f59b-4eea-9927-b59e0f28c28d",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d74ab7fa-c3a8-41c5-b85d-2eeb4a119aed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "2e5aeeaf-4d30-42f3-8711-126d8a884a13",
        "cursor": {
          "ref": "df62e8f6-4010-4544-a81f-4d1096b525de",
          "length": 157,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "66d82853-ff8c-4156-8917-a75e868603ae"
        },
        "item": {
          "id": "2e5aeeaf-4d30-42f3-8711-126d8a884a13",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "974fc277-b9c2-4352-a4e1-a137ea05fb9b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 12,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "aeeb2175-f329-44a5-8814-6d226263a434",
        "cursor": {
          "ref": "6cd20374-f8b2-4204-8ca9-141019d3b059",
          "length": 157,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "9c34f244-51bc-40a1-9156-eabf0983a227"
        },
        "item": {
          "id": "aeeb2175-f329-44a5-8814-6d226263a434",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "0d30e1f2-d83f-48af-817a-d0cb943cc88b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 13,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "ddb79d30-6eec-4d40-b73e-f795ed405f22",
        "cursor": {
          "ref": "9cda4325-c4fb-456e-ae43-490705dc5dbc",
          "length": 157,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "17de1a58-9f30-457d-9cdc-bd1785af7e2b"
        },
        "item": {
          "id": "ddb79d30-6eec-4d40-b73e-f795ed405f22",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a8e0b02c-0fe6-4aa0-b67f-3541a82b1010",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "12993e50-02c6-4da6-9a26-c14a6e1a7642",
        "cursor": {
          "ref": "1fe8b6cb-c42e-4f17-8321-95e1312dfca0",
          "length": 157,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "15667f7e-25dd-4610-9576-4c815755e6b0"
        },
        "item": {
          "id": "12993e50-02c6-4da6-9a26-c14a6e1a7642",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b6e00052-2fac-4546-ac6b-a2ea8d424eae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "383d874f-aaf5-4ddd-a3a3-7e67ab788f4d",
        "cursor": {
          "ref": "17b09df0-dd1e-448e-92d2-76d771cb2fab",
          "length": 157,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "85d0147d-be0f-4b7d-af63-41d1fc65911b"
        },
        "item": {
          "id": "383d874f-aaf5-4ddd-a3a3-7e67ab788f4d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d1a9caca-05d2-4b67-8f3c-62161069ed95",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 12,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "fe82a085-009c-4175-8b99-a92aa55be65f",
        "cursor": {
          "ref": "7b6b4b6b-1fd9-48f2-bc96-7cd67efddebf",
          "length": 157,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "7f6a47cb-e38f-4bb5-8952-de125340091c"
        },
        "item": {
          "id": "fe82a085-009c-4175-8b99-a92aa55be65f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d85d9517-b0a5-4e7c-957b-ea3313330afa",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "b8352ecc-4586-4420-9ccd-6ceb7b012920",
        "cursor": {
          "ref": "c38fd403-3576-4404-a7bb-a2cfcbdbfc57",
          "length": 157,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ed613fbc-fec4-4949-8c9c-87a05f7ae87d"
        },
        "item": {
          "id": "b8352ecc-4586-4420-9ccd-6ceb7b012920",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "fb068c0d-bf26-4865-84be-53dfe4cfb360",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 17,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "e66eea04-4f90-4021-a321-175d436914d2",
        "cursor": {
          "ref": "7f56d74a-6ebb-49ed-9580-cc22457a9ed6",
          "length": 157,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "7aa91af2-f2a0-40b2-b32d-78a14600e003"
        },
        "item": {
          "id": "e66eea04-4f90-4021-a321-175d436914d2",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "71df1459-4bd1-47a1-8eb0-4fa476fe5c44",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "c5f17633-eef7-45f9-866c-b24ada869242",
        "cursor": {
          "ref": "155a777c-b233-4c05-b7f4-ea6ae5054f91",
          "length": 157,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "99976283-ee46-4560-a051-e622c1c13f58"
        },
        "item": {
          "id": "c5f17633-eef7-45f9-866c-b24ada869242",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ca8df007-569a-4830-955a-4e51cf176833",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "0a2cd1e4-b4b7-430c-ab46-49983a511f57",
        "cursor": {
          "ref": "0a645c0c-fa0e-4622-92d2-45b5714ddc5c",
          "length": 157,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "37476169-b05c-445a-993d-c61523e18a2e"
        },
        "item": {
          "id": "0a2cd1e4-b4b7-430c-ab46-49983a511f57",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "cc75c046-5cdc-43ed-864a-27ec2087790c",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "594e01b1-ee99-432c-ba7b-19be2a81d2ee",
        "cursor": {
          "ref": "7ec02f14-e969-4da4-9fad-87a919a2144f",
          "length": 157,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "921e16d0-8099-4a24-9df8-f4be5bd4d764"
        },
        "item": {
          "id": "594e01b1-ee99-432c-ba7b-19be2a81d2ee",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7d4713f0-afa6-45a4-9cf4-a2e71e6cb374",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "d74472b7-6911-4d46-aa82-cd30f58201ee",
        "cursor": {
          "ref": "3aed378b-0502-4892-8cae-2831122dcbf9",
          "length": 157,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2ce8dc4e-3ddf-4e5e-9a61-2e5df8f6807a"
        },
        "item": {
          "id": "d74472b7-6911-4d46-aa82-cd30f58201ee",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "db58f93d-9a3d-4a35-adc9-8bbda2aa314b",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "82832d41-f6af-4fa5-b6ca-a1d7e61a74b6",
        "cursor": {
          "ref": "54e4b10c-c8c2-42b2-98a2-3dc91d77f6e2",
          "length": 157,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ec1211f5-e310-4fb7-a0ef-650b6f783e66"
        },
        "item": {
          "id": "82832d41-f6af-4fa5-b6ca-a1d7e61a74b6",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "75751262-8a9d-45da-8314-59f162e22323",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "f5856911-0e4c-42b9-ab39-2c4f8899adb7",
        "cursor": {
          "ref": "3040b53a-8aca-4393-99fb-6415a078daf2",
          "length": 157,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "30606892-2e07-4808-9d9d-982d2bd286d6"
        },
        "item": {
          "id": "f5856911-0e4c-42b9-ab39-2c4f8899adb7",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "12abd3cb-4adc-4353-ac51-ffcfcdd0861d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "097bc191-cd56-41d9-9f9e-121eafa967ab",
        "cursor": {
          "ref": "82df21ff-f84c-4596-8f3d-5d0fa1ab8da4",
          "length": 157,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "38d4130c-ffc6-40b3-a81c-55dc4d3bfa45"
        },
        "item": {
          "id": "097bc191-cd56-41d9-9f9e-121eafa967ab",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c308ccbd-34e8-42bc-a800-238d6e5c6d4a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "07b79024-dfbb-4600-8666-e0d587e867ff",
        "cursor": {
          "ref": "208029cb-cb53-45b5-9689-2f0e1056f067",
          "length": 157,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9ab4ff92-4c86-42fe-afef-660d82baa54b"
        },
        "item": {
          "id": "07b79024-dfbb-4600-8666-e0d587e867ff",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "01f668c7-12cc-404b-8afc-5b0c85aef0bb",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "ce8ee7f7-8e13-4b25-9414-91a421ebd30c",
        "cursor": {
          "ref": "69cddce1-bb23-4ce4-b403-144391419afb",
          "length": 157,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ff328faf-b250-4dff-881f-8d943995bf8a"
        },
        "item": {
          "id": "ce8ee7f7-8e13-4b25-9414-91a421ebd30c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "158f51f3-f760-4b87-9a42-78748acda93b",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "edc7b353-8c60-4ff3-8dc6-707e95c2fedf",
        "cursor": {
          "ref": "72e8091f-fac5-46ef-8a6f-0be14cbf1efe",
          "length": 157,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9809d422-46df-4b11-a647-689c45ce19cd"
        },
        "item": {
          "id": "edc7b353-8c60-4ff3-8dc6-707e95c2fedf",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "23c17f4d-c0d3-4d95-964a-0b611a44a564",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 18,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "f3471f3f-03f7-4291-9239-5f1ac9402026",
        "cursor": {
          "ref": "37f91e0a-0abc-45e6-a4aa-360eadebc7aa",
          "length": 157,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6191877d-c767-412b-ba3e-192a6950b47e"
        },
        "item": {
          "id": "f3471f3f-03f7-4291-9239-5f1ac9402026",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "664098c8-5500-4e4b-8efc-4b0daa377bcc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 18,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "aa049485-a3c1-4859-a8c9-7a92a449d62b",
        "cursor": {
          "ref": "ca694f06-4a12-44e2-ad6b-3c03b4e2a98c",
          "length": 157,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9bea66a1-6ede-4d27-83f3-12e78180dad9"
        },
        "item": {
          "id": "aa049485-a3c1-4859-a8c9-7a92a449d62b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "d50397c1-82fa-4933-9a7c-045e0f140de0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 16,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "bf97c56d-c9b6-49f5-84ff-49132de16fc4",
        "cursor": {
          "ref": "e0dde739-53ec-426c-b1e5-d87b93b8c115",
          "length": 157,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "34e22ea8-be47-4f4a-8169-497b2e3e32c5"
        },
        "item": {
          "id": "bf97c56d-c9b6-49f5-84ff-49132de16fc4",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "661bcb04-c56e-44d9-9d83-43182763993c",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "c4b72c65-c3be-4e17-a0ad-e5dea3751118",
        "cursor": {
          "ref": "a9864996-3e84-45c0-8003-cee3b873f95d",
          "length": 157,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "597818b5-0583-482e-bd2a-aa954f93f75a"
        },
        "item": {
          "id": "c4b72c65-c3be-4e17-a0ad-e5dea3751118",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2623a00f-bbe3-4a43-93cf-d83625f30821",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "3f0d95fc-3aaa-417c-92ea-7b00d53df113",
        "cursor": {
          "ref": "bfb28c99-a1d5-42b8-b142-10d1f177d0aa",
          "length": 157,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "025ecc55-6b1a-4ec9-8be5-63ef5b4587c6"
        },
        "item": {
          "id": "3f0d95fc-3aaa-417c-92ea-7b00d53df113",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b3087f32-75fa-47c0-bc28-fd1027dd4acc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "d2a7d5ab-29ce-4a88-ab75-081483fc633d",
        "cursor": {
          "ref": "9acf593b-073e-4e38-a44a-0e26dea04498",
          "length": 157,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d0ae9176-5511-4714-8229-ba215e14d448"
        },
        "item": {
          "id": "d2a7d5ab-29ce-4a88-ab75-081483fc633d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b306e8b8-2d85-4312-9400-033fbb55eee3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "1039861d-2450-4cea-a9bb-f185678b23ad",
        "cursor": {
          "ref": "5c725a69-697b-4edc-b1d5-7bd5f14c5e92",
          "length": 157,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "87a30296-5dbf-47b7-9f52-6286f46a7d5c"
        },
        "item": {
          "id": "1039861d-2450-4cea-a9bb-f185678b23ad",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "69edadd5-af92-4357-98f7-7a809030ae34",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "d4c02ce1-ad29-484c-a1a5-0617c1b6c954",
        "cursor": {
          "ref": "55fb2fdf-e75b-415f-a023-0fdff0ce0974",
          "length": 157,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "cea32008-94f3-499e-a281-0fbf66f811ff"
        },
        "item": {
          "id": "d4c02ce1-ad29-484c-a1a5-0617c1b6c954",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "51d452b8-3de9-4d5a-9bd3-a0aff8c43ae6",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "5a9a5a1d-95a6-4dc1-9f73-e289d31d7c33",
        "cursor": {
          "ref": "8703b513-6a4d-418e-a1f2-64703c684f1a",
          "length": 157,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a16fa258-15e5-4f4a-8676-2f574e8d7a95"
        },
        "item": {
          "id": "5a9a5a1d-95a6-4dc1-9f73-e289d31d7c33",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9a0c410f-abab-47ec-b366-6af9efd55706",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "5ca1e066-4505-416b-8ee1-c6f2f54fa8ee",
        "cursor": {
          "ref": "eb6b7702-c146-4fc1-95ca-ba7f92cac10b",
          "length": 157,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "96da49bf-bbd7-4725-9466-becdf4ea8ed0"
        },
        "item": {
          "id": "5ca1e066-4505-416b-8ee1-c6f2f54fa8ee",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d8c02486-e4d5-4aa8-aff9-b2a243322cbc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 13,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "80843623-8a49-4a39-a0b6-47164bc1c203",
        "cursor": {
          "ref": "d09658a5-7160-4f92-91ad-3c4ce18f3864",
          "length": 157,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "af9f1e1d-8403-427e-b7c8-91e827746e7f"
        },
        "item": {
          "id": "80843623-8a49-4a39-a0b6-47164bc1c203",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "2b384fba-dc85-4904-a161-98a78a2efcac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 12,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "459176a9-4ee3-4041-9dcd-d8f9881cb3e1",
        "cursor": {
          "ref": "dfcb7767-2819-4dee-913d-8f27c7b54775",
          "length": 157,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "8416845f-9c42-47c2-94e6-bf981b55828b"
        },
        "item": {
          "id": "459176a9-4ee3-4041-9dcd-d8f9881cb3e1",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "cccd96e0-4834-4ece-ae63-8fc2de33a3a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 13,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "660c77f9-5123-4c74-885d-0c4448264f53",
        "cursor": {
          "ref": "86d8c699-b47e-4397-a30a-ef24af62942a",
          "length": 157,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "edd6c296-90d1-4dd6-85ca-457e0ed7f905"
        },
        "item": {
          "id": "660c77f9-5123-4c74-885d-0c4448264f53",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b3af7a0f-a6bc-4072-a8a6-da4147d6ec31",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "2676f0fc-75ee-459a-b9ba-19e7810e9203",
        "cursor": {
          "ref": "5936696b-36f7-401e-bc38-201489736812",
          "length": 157,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a5fb67bb-db75-4d8c-a691-8e49c52200ef"
        },
        "item": {
          "id": "2676f0fc-75ee-459a-b9ba-19e7810e9203",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "bebe0562-bdbd-4d03-808f-398f413d3b78",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "c603e103-b02e-4dc9-bef2-2dd0aec220a9",
        "cursor": {
          "ref": "ba6914f6-7feb-47a9-88f3-76f36599943d",
          "length": 157,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "820769d7-ce16-4629-bd38-e79c747d6d91"
        },
        "item": {
          "id": "c603e103-b02e-4dc9-bef2-2dd0aec220a9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "98923e33-46c2-4c21-aae7-7a4c9f56a73f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 13,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "9d436e1f-d175-41c4-aa1b-15f03fe139b4",
        "cursor": {
          "ref": "c7b41959-1f6c-409d-9212-468e9880b657",
          "length": 157,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a7ea13b6-f045-42aa-846f-144f6c34fad4"
        },
        "item": {
          "id": "9d436e1f-d175-41c4-aa1b-15f03fe139b4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1ea868f4-bc97-416c-8bc7-9475c38b3d29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "d5e7bd03-ebf7-44c7-ab0a-d8211946e239",
        "cursor": {
          "ref": "4c5e4954-ace6-49e9-b753-f66d05ec7e62",
          "length": 157,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "94691e35-62e8-40cf-af0d-2564bbdf2e7f"
        },
        "item": {
          "id": "d5e7bd03-ebf7-44c7-ab0a-d8211946e239",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "d42a5dde-52f4-460d-9467-3646cdc5bc44",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "72b6ee19-4122-4166-a046-8086694c7996",
        "cursor": {
          "ref": "f55997f8-a1ae-4020-947f-403a9f5fe652",
          "length": 157,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "7e4e51a7-1a71-465f-93e8-1023b0a73af8"
        },
        "item": {
          "id": "72b6ee19-4122-4166-a046-8086694c7996",
          "name": "credentials_verify"
        },
        "response": {
          "id": "85634386-1a36-4c76-9861-c752ab031e53",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c15b4969-dd87-497b-a5ae-bfac79c2b697",
        "cursor": {
          "ref": "72a6d296-bba0-45ab-9f08-3de24fb4ef9c",
          "length": 157,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "76b8d6aa-0e58-4ebd-940e-a5a284419abf"
        },
        "item": {
          "id": "c15b4969-dd87-497b-a5ae-bfac79c2b697",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "56ab2f7a-b7d7-418f-8ddf-db71d1414a1f",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d58bcf7-0bed-4ade-b013-6d844b0f1efd",
        "cursor": {
          "ref": "52f37d2a-4e51-43a7-b296-05beabca42ee",
          "length": 157,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "589b6938-393a-4ab4-933f-2060f5172f2c"
        },
        "item": {
          "id": "9d58bcf7-0bed-4ade-b013-6d844b0f1efd",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b728dec4-4e83-42ed-a1f6-550a9aced742",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b42ffa1-e3d8-42c7-a96f-a0454770403b",
        "cursor": {
          "ref": "b843fb17-f21e-4342-ba0e-a79813de7e5b",
          "length": 157,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "13d71115-165b-4626-bcce-5738cd01c595"
        },
        "item": {
          "id": "5b42ffa1-e3d8-42c7-a96f-a0454770403b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5411b77c-0e8b-4059-ab7e-74402fc1c9e1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 9,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "5b42ffa1-e3d8-42c7-a96f-a0454770403b",
        "cursor": {
          "ref": "b843fb17-f21e-4342-ba0e-a79813de7e5b",
          "length": 157,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "13d71115-165b-4626-bcce-5738cd01c595"
        },
        "item": {
          "id": "5b42ffa1-e3d8-42c7-a96f-a0454770403b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5411b77c-0e8b-4059-ab7e-74402fc1c9e1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 9,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "5b42ffa1-e3d8-42c7-a96f-a0454770403b",
        "cursor": {
          "ref": "b843fb17-f21e-4342-ba0e-a79813de7e5b",
          "length": 157,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "13d71115-165b-4626-bcce-5738cd01c595"
        },
        "item": {
          "id": "5b42ffa1-e3d8-42c7-a96f-a0454770403b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5411b77c-0e8b-4059-ab7e-74402fc1c9e1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 9,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "ecfd31b9-cc89-47da-b02c-178429b98437",
        "cursor": {
          "ref": "8fe67e2b-2854-4d12-96b0-ed93d42b3c3d",
          "length": 157,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "aa53a8bb-a787-4397-95fb-9c9c5465400c"
        },
        "item": {
          "id": "ecfd31b9-cc89-47da-b02c-178429b98437",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "0976b09e-8a6c-4a14-8b2e-99635740a3b5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 9,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "f895f9f5-61ad-4f69-9100-22180cb18a61",
        "cursor": {
          "ref": "04a1ceec-2c92-4a9c-b933-bb8ecd7ecaf4",
          "length": 157,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d80f2857-8cf3-4407-a623-1d277d38ba10"
        },
        "item": {
          "id": "f895f9f5-61ad-4f69-9100-22180cb18a61",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6d7fccbc-32b5-47f6-9468-fef87987d50c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "f895f9f5-61ad-4f69-9100-22180cb18a61",
        "cursor": {
          "ref": "04a1ceec-2c92-4a9c-b933-bb8ecd7ecaf4",
          "length": 157,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d80f2857-8cf3-4407-a623-1d277d38ba10"
        },
        "item": {
          "id": "f895f9f5-61ad-4f69-9100-22180cb18a61",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6d7fccbc-32b5-47f6-9468-fef87987d50c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "1fd517d0-fef6-4ffc-b8e4-dc1da2b826b1",
        "cursor": {
          "ref": "80602ea1-2e55-44fb-8413-9d5a9b568950",
          "length": 157,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "587659ca-7bc5-4a04-bb74-0aedacfca704"
        },
        "item": {
          "id": "1fd517d0-fef6-4ffc-b8e4-dc1da2b826b1",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "d0f65113-3a44-4f50-94b2-1b475f0bbcdd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "aac4c055-e55e-4f9b-9608-9beb0cea3a2f",
        "cursor": {
          "ref": "75548c1e-e108-4a0f-9161-eb9f51b2d696",
          "length": 157,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "68a9b8bf-87f9-49d8-be59-292e8c923845"
        },
        "item": {
          "id": "aac4c055-e55e-4f9b-9608-9beb0cea3a2f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a46dacce-96ac-45be-9c27-5401bb440b68",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "aac4c055-e55e-4f9b-9608-9beb0cea3a2f",
        "cursor": {
          "ref": "75548c1e-e108-4a0f-9161-eb9f51b2d696",
          "length": 157,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "68a9b8bf-87f9-49d8-be59-292e8c923845"
        },
        "item": {
          "id": "aac4c055-e55e-4f9b-9608-9beb0cea3a2f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a46dacce-96ac-45be-9c27-5401bb440b68",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "9a9e6fd8-711e-4af7-8840-15d7654237c5",
        "cursor": {
          "ref": "de9aec1c-0fc1-4d5e-8758-7da1fa66df79",
          "length": 157,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c5da7321-feab-4f7f-9817-c939671ea9ec"
        },
        "item": {
          "id": "9a9e6fd8-711e-4af7-8840-15d7654237c5",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "433822d6-3743-45b8-9424-cd27a2150e23",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 6,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      }
    ]
  }
}