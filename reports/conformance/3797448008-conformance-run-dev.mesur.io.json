{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c7063e74-6dbb-4f0a-b1ae-ce3984d20197",
        "name": "Clear Cache",
        "item": [
          {
            "id": "bb6af152-f6cd-49e6-8f14-2084a34a6bcd",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e3803e28-fbef-450b-9a18-b744936e43d0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d616e256-9326-4cbd-8331-02e555c230e0"
                }
              }
            ]
          },
          {
            "id": "c9aaa014-4946-4b02-8076-8a8874fa8d96",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5a0908f4-320e-44f8-aab1-bf43447e7fb6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1e1c71ee-7481-4156-86fa-0a2db83ddc62"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fec64e85-8655-47ca-9f78-50604695a4bb",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "15244537-7c25-4c3a-a514-67ecc1bb7f17",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c6ec2e4e-05b6-437e-9417-8955263715ca",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d455d86b-8de7-4adb-88fd-af5aead325dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da1bb01f-06e6-4890-95cf-4c05284f7e61"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3f840305-a16c-40ed-a9cf-df3ef36e486a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "640616a8-6de5-4b3d-b8ce-daf48f750fa3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "27781f83-3ade-4064-945e-db6bb9e2e28f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "316efd3b-f50d-4317-bfce-2a057bee3ead"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b9146ca7-5f1b-4345-b943-a108ad69af67",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "00895442-5f3e-43ab-8bea-45ba4e8f4e04"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "729654ac-59a8-4def-9776-6f8ad62c7eb4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7ba03f5b-0790-445a-b1e6-9a86c2dc4172"
            }
          }
        ]
      },
      {
        "id": "18dae5e7-21af-4e02-80cb-91fada1c02fb",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a9e987de-8119-41d1-892f-230894bcc7f1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "af57496a-77ab-4425-b1a9-ecf7dfd646b9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a7b63f17-4594-4aaf-9778-c462c5d878f7",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c6807c-efc0-40fd-9819-030fcc976cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2f52c02-25f2-4098-ada6-a9edc2dba429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679895a6-4012-42f6-a78e-3f0013770362",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "223a3f4d-d9ee-4ce5-8ac5-b593f732fba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb774cbb-49d3-4d42-b7d6-f05065bd307c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aac482b-363a-4d2f-8979-98e51ed07928",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f536d9-755a-4cd6-a999-d1da9b66467e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2591b828-a6c8-4bce-a60d-01ae8abfbbda"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "68b59700-e696-4bc2-8ad4-c2a671370e0f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "94aab654-9e78-4d26-90bd-ed0c45537724",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "180041ae-ce58-4f4a-8a05-15396c2ccd31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "36e9218a-b21b-4817-90a3-898ee67b53df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea1ea58-5cae-409b-885e-ea7e6ae568c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f095bce-d770-4cbc-8fb4-536e316b178f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f1ec93e-1bb2-4be9-a9d6-e48c913aa87e",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db07d37-8040-4f67-afef-fc4f9e92524f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3cd16b79-ccd5-4bde-90f2-76630edc671a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e14b33b-8ff4-4a06-9732-8ec1be2cb488",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "27a65e4f-06d3-4e2b-8c3e-8d6988cc98b9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c359b71d-bc0a-4e39-b079-6203d07098db",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cb71d372-c4b1-476c-b4f8-e9f3d0b602cb",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e6e1ccf-d2cc-4953-a970-7ab0fbe8cc21",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "bfc971b8-8a9b-4f14-bd09-e18cbedc1a90"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b7abb0ed-0528-416f-8937-4c3151580214",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "3467dba5-8e9b-4ce4-9ac2-ec6c549b8830"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b65bcc02-4e04-4770-950a-51bb66dd732a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1f1a7ed8-8695-419d-8b3b-7199c75b7cef"
            }
          }
        ]
      },
      {
        "id": "58fd959c-9541-4d47-8c09-80b758277efb",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "60107096-99d1-432e-9f8f-85a0eaf55efa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2e618173-dd08-4a57-b35e-f1feb73cdba7",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "40085603-ce55-4b3f-b9bb-fb2c6f4e0a13",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e99797-24ba-49f1-8ce1-7eee5597144c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d712937-bdc1-4722-9bbf-027cc5d42437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "075f6c20-0eff-4f9b-9e0b-612f852b8ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e5e7908-dcba-43f6-b621-ff44730dd9c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e7b694-d0f0-4207-8388-3859e3ac7f56",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30f6ec9-f91b-43fe-84d5-5ef7252f2bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cdce162-e53d-4cee-baff-95f3711e692d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db4f4c7f-67fe-4b9d-8780-4e5571460b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "edc9c037-f99a-46bb-b4e6-2402d79e6c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c941f09-66c4-4a10-8a8b-519d5678d632",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e68270-b943-4a31-a6e6-9c7365045efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb208125-4698-4a53-81a9-bdd881bd9ee0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49bf299f-44ed-4bd5-ada2-8af0cfb607d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "027e46cd-83b6-4415-a566-573f206936f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c06f58a-4794-4f00-ba30-ce751db0c996",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d1133cc-6a82-4613-a2f7-dcb1460ee821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce652be3-dd8a-4d60-99c2-2ae41d1e8e78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "293105a2-cb14-4ea0-9621-6f042fb5e866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "361c2a6c-3508-4654-b2d5-87750cfa9864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d449d5f-5b1a-4bb4-9622-f2dff26268ab",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55eedfa2-ae1d-48aa-8330-b7f07ef2773d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f202bfe1-e8f6-4f57-8616-fdafbf043535"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40385bd8-ce30-48df-866a-ebc4b20b1584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3e1c5c8-bdde-441d-b98e-b8978bb7fbb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cfcf960-3a2b-4229-b71e-6003dc7dd05a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0352df4b-1c3d-40d2-a3d9-c17a10f4ac60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae7666b9-9397-494e-80e2-f92f97ecc8cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3f0ceb9-94c6-4394-965d-a7aea6c45433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f78bf57b-b85e-496f-adcb-3fd5c1a88a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bcbc9d5-cc82-4d69-8782-71d862db4783",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c655a2-b8ab-450b-b279-872e2437ee5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "635b53f1-af52-479f-9dfb-3f15fdcf35ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96399d63-e494-4518-961a-86c8d70f3cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2a538d3-0fe3-4d37-b9bb-672288fa7b05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27101050-dd6e-4718-bf6b-41ed1d31a72f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0429821f-29c5-4692-acfd-f6b88b617bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4f93973-0084-4098-966a-2df3527618c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5bd6fb8-f78d-49d5-b9a3-51bd13472492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c67548dc-2ccf-4363-985d-c9fe3d42b2ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5646fb9f-33bc-4d65-a1f4-b35f58e7eb54",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ed5af18-2942-4b2d-bfeb-8596cf4c6f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70f97bdd-c788-4907-ac3e-7e2084578eba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b53c0e-906a-4117-95e4-7b6833ea5a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0fc74ddb-85c6-4a71-9a52-3aa815ed4eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37c4bab-1c44-414f-bcc8-4690f3147c16",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba4e621a-2baa-439f-bf74-37f7b4081606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "912de798-905a-4c95-9e6f-0672bd6353fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d33372d-a5ec-4c8f-a4db-db932fa36f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18769c75-a912-4f84-b313-94b1bfd4149c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8caf5dba-6104-435c-96d5-e073a0b94adb",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ef06bf-412e-49fd-958c-ed913272af6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca84e4d1-45de-4269-8531-b77bd2ebccaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebf097fc-bb72-453d-9402-ee09568de1e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51eef163-df45-446b-8a2c-ba43193a22cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a18a214-0d24-4b90-8e05-f2ea1b2b579c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "230211ba-a729-457b-897e-ef2690206946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a27a9bc7-777e-4603-b1ae-7338c1c05ec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49811a12-2dfc-48d7-a40e-63152fd792fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8792ce0-169d-47a3-896e-ed3257b1d49a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e08b12f-bda9-4566-bfb5-10b93400902a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae515cd-ce2c-426d-8c82-73125761cc38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c2485e9-7a91-4707-b1f9-eb0952d9173c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769bdefa-6668-4ccb-9b33-c2ed7c031a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "596d05ac-05a2-4032-ab0c-6dcb53db425e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca8917d-0577-4bbe-8202-0a90e84427fb",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a021f2c4-5326-4491-907b-903f3704c2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3386bba-5ab1-4a7c-be1f-ba5e9babc7cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8652c0b4-4bd1-43df-8304-bf61616ef59d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "83d8b8f3-e588-403e-a92a-fa7957295b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fcd9e6b-7234-4caa-bf9b-704089526c06",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cefab1b-1672-482d-b503-f3d7593a189a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a5dd609-b45d-402f-8d6e-4128eb01dea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6bc8db1-7d23-4c21-a00a-dc6e8cecce0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7476e45c-8886-4127-879c-290e007f9506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adbede54-d984-4090-923d-ee456af17d40",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed13a866-7fee-47d0-8e61-5346d8f93220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c56ad6dd-47b9-4ec7-aacc-3edff2732784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9436daf4-2f3c-47f5-b4f6-3872c0bae488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e033ece8-3ea0-4d22-b15e-c3447f01b61e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bceefc2-bc93-432c-b128-a52c95384e92",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19109d18-a397-444c-b386-7e7a9001360f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0ae0947-c4ab-4bdb-9a7b-41e66e750742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "173e3340-f035-4e49-86b3-f872e8f570ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0576636b-af9a-4a99-87f2-6f6bf47f9c08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c648b64f-8103-4eec-bb67-c662643be544",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a8904b-7ac9-4b82-a346-90dcaa717d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e52febde-8b8f-451b-9e13-524b7f8f1b75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea78c7d8-86ea-4b10-beb3-5dbe664fa19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e214625-5ea2-432d-ab80-811db90610ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbd35306-f0e5-45af-a0c8-f6a87a5d76d8",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53309eb2-b46e-4018-8598-f0e22bd530e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc9cc41b-b4cb-4d82-a88a-9fa6c7f45880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b5b358a-b7e7-4880-8008-347346f153b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2964c691-4d50-4850-b5d1-0f53d6901cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6fe75ef-c0f0-4c0c-a88f-f356a0203f2e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d240b84-cb6c-454e-9a55-3f1bbf51fe12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e490cf19-2597-410d-b93e-60f805e602de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e784997b-cc8c-4750-bc19-f23a9ae57524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9b140f7-c104-42fc-b5c7-b32ba8f8e8c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "677914d7-f3fc-4533-86aa-ad52394c2972",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34334c35-46ad-4e3a-92f5-99cfbd0eca0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d231e885-022c-435c-b8ca-617fc7d5381d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c10e4b9-89c9-4eb0-9fdb-e42d34400905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "35af50d3-fed5-4b71-a9f1-df06c098c9ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a31f1ac4-9bd8-4f02-9f54-5965b424100f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "addcdd7f-61de-4efb-a949-ca52bb06f59e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb5a4e9d-6bfc-4252-b4e7-f25683f5aed9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfaa6676-0cd4-49a8-8a28-cd359c7f9f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc976df3-bbba-4b05-bab7-9d1ba94e5201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c268d41d-6cfe-4c19-b5a9-0c86dd3804c0",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ef9a044-598c-478e-ada3-0063b67914d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a4c1102-c56c-43e4-b569-314b26577ee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d09b2b-a307-451d-a976-058daefbabf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "58029ea6-18d7-47c0-bd8a-bd04e3742c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065be8fb-5a37-4e25-bc74-e4bf5f875ffd",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76873e28-d019-495c-8b38-6ab93baf3370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54f07d3b-0267-4159-af4d-de6cfdd794b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b16347-c232-4fa9-ba49-a49cd1a57603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e30d559e-a69b-4848-84ea-b85e778b9d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "affa7fe3-5f98-4f11-b7ff-31481aa7a02c",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b077dfb-410a-4159-b76c-17ae2d4772de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98cb5e2e-2ec3-4a52-b2b1-3639d9a3ac40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fcf23cc-62e3-4d22-888f-c0088e2cc110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5ffa57f3-b98d-47f1-8645-76502c87b68e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e7f0adc-b19e-4641-b06f-0e882bd64f95",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff99d48-7afb-4900-bc78-e9fef03d0d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a30ba4d-6989-4a19-98bc-1de7e7ae9cd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc88e0c-47b1-4d67-98fb-4e6ec01bc18f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a48ce055-437c-4b8d-a1b6-07ec5eb707a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625dbafe-bd3c-4389-99af-79741741f40f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b43eb007-b819-45a5-b62d-85281f9b7f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ddae77c-a9d4-4eb5-9c74-ea13b2eb3b6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1140eec-30c1-4a9d-be98-8e3f3964a0fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f559ba7b-07e3-45d1-b7ff-5f05da373076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "810ecfef-21b0-42d5-a482-50e91f91ea51",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cbe0894-e5d1-433c-9d96-7c1463cc6c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb4b839a-36a0-4491-9526-21c4cb2480ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e5952d-6139-479c-b96f-9ba962451dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a51565b9-969e-4d41-be6b-3a7014cb49fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f18432-e1d5-49c4-8718-e1b2f8447971",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db1dd279-a12e-43b5-b4ca-c289d9f18061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c37b3ca-845a-4c98-b625-6768e46ecfdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b9b48f-f6a2-4758-932e-284705d2f628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9527338b-0d23-47f0-a09e-3b8ebc451bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbccaece-b106-4e18-8c15-4c07a0a41835",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5db7a48-6044-4da9-b3d9-d3059a1b1d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c28b8170-79e7-4381-8f05-a1ab0e3c60c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bdfe65a-b78f-4b34-a659-0a38b58d13c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9776dfe7-2f4d-4c02-9158-ca04afb923c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5a9ddd-3a4b-4ed4-9d0f-f95e28e2de0a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b10f6a6-b2d2-4928-8268-3319736e3efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0ce779b-6a7a-4b9e-afbd-3136d52e65d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f6bdcd8-b2a9-453e-bf54-3e5bbc5a27fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "86a6d37d-4d31-41c5-a09c-0a6a7d887ba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66eb7706-f72a-4078-aa35-c174720480fd",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe816654-4bf5-4d6d-b817-49306abd4317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27e8eb4b-a5e6-46ac-aa74-251a207f501f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f84b6e3-2ad9-421b-9d2b-277088b8b1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5e46572-f415-484f-ace5-23f019f26b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc60c53-8f6a-4d0e-9351-1d757c81f008",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe64bb1-0703-4323-b8e7-92524b881aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3552e82-b528-4734-86b5-7c2b7497bb9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d79f6d-fb19-4492-9484-02f8ebbe4a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c74b5fa8-408f-4ed8-8afd-1663a1540a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc6deaed-d225-4c9f-9c37-aa0ba1b03fe9",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "630edde0-10fa-442a-ba9d-da049f8eea20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "485c426f-b3be-4746-8fb1-d46885fe6cd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10e5e8b9-2a20-43ef-ad94-6772052788a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fa2863f-b1f5-434b-9cf1-deecf0809ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0a2bc5-d9ad-48a7-b346-959a4dc0a659",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7068230f-cbd8-4b44-891b-af609dc60f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe19f046-6e69-42ca-a7c0-0b201e212ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa1ba8e-bb5a-4e77-9ae3-612ff0e687be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7423dd99-4c8a-4543-93c3-c70a59a09117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdac6f5a-ac1e-4d09-9f56-3ccef5975d90",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "379fd9f4-731a-4cef-923d-70faf7ad6c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "105fbb30-d8ab-4399-bacb-c1ac28f6741a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a271d4-79a1-4648-b201-31ab18d7f01f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f32ea13f-f9d9-4c87-aa47-0c83de1c3b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d361b91d-451b-4558-aa2f-7906961d8808",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a3e42b-36ac-41b3-8aca-349c6064216a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "316dca04-7be3-4360-bc00-c890b5ff9f61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2abb364a-4078-4a9e-a9de-bf28f8c99605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "366eb929-add6-43d2-a012-4504b10f5320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbcf21cf-5d35-433e-9e14-1585f04dfec2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb72523-b3ae-423a-bcd3-46f6bfba5abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a478ee3f-4839-48d8-8786-1f81570cace7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb63857e-1eb1-4e01-aca3-e74795c6579b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8a102e38-f71f-4546-b775-00b3a4433418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72cbb5b9-f621-4be2-838c-cbd3a54dcb4c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "652a63d7-010e-404d-95b8-c65cac531489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a28fc83d-1c69-4d67-bd8c-89ef141af1c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a8f941-4982-457c-a924-bd9a2de9e136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d5749c9-9848-4034-bfd0-8c431ec74688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e91a6203-5049-489f-9281-c1089e09dc4a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28519794-ce8b-4afc-845d-40c97bfd798e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1497c55-1959-45cf-8677-47850fb5f246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97529a0c-712b-4aa9-872f-6e81a2a2313b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4dc68fb5-9bb7-40c5-a4b1-6492e4d5930f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a8616ab-e137-4c21-b4a2-22f6954544b4",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19530197-4279-4d3c-8ef9-13957961c5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5768b86a-f1d1-4205-8ed0-b4f8e4c4167b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac25eabc-027b-418b-afdc-5d9d707b23bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "223ba42e-3842-4c9c-a318-4763dc69e5c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f74929-7953-4188-8bcd-a2f2f50e7ea8",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4c1ecb-e40c-4f7a-ae5e-8c983ffdf3fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2abf393a-4f61-49a7-b847-a70327628cb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1601a21c-1d9e-4b83-bd3c-6059477f48b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "32f7b08a-c7c4-4305-940a-2f9c6e3c68f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6769bdc5-be68-478b-96c7-c2ad22bd17bb",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d4f5a6-cb63-4ee4-aeb1-6912de0e5f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac9813e1-4cae-4029-a4bb-ce8476d1b424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32338c1-4701-4458-8367-6b5e61a15ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "640e4c13-7cf4-4bd7-b175-2c4bbaa5caf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de5119a9-d447-49ce-a78b-b4e21d2bafec",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dcb0a76-a026-43c4-8720-e2f5b4f5fdd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "329a4a4d-ac59-40f4-b1ba-36216e2dd6da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85d89a67-9799-4051-aa28-763afd98f88a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "dc3a45df-b2a3-4d15-bb82-e0bbfee6f7da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69218310-2991-437d-a9b2-4bc03933600f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a30d8f-cd93-42d0-961d-62288809f069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54d89cca-9460-47ba-a7c6-cae40fc7ee7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae21206-75a4-4d65-b1a0-41098a27824d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "31add80a-2fdc-43b4-8ca8-6271ff2292ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d7852e9-5c3d-4c00-941e-27007c3757f2",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8881d6a0-e51e-4672-b24f-01290878fa72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dd46a5c-6599-4317-9c7c-4b6fdb46d125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cee1e50-b14e-4170-8152-0909b91387c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ba1f14b-02c6-4190-89e0-9356ed7fea74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6d11770-9d32-4fa4-a5ae-f35904107bbd",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c6ad355-d328-4d9a-9121-5b0eed403d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e439b03-2ad1-4334-99fd-edd57cfa5dff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa444c13-fba1-4d2e-b37c-87c1c64df956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9eaf513a-d9e3-4a66-9300-e97e878830e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a0d3b09-1e22-42d2-a421-35f9cd1b6978",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d861a2e5-d852-4f38-8b80-34dd8611fb94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9773b3e-3ab9-42c5-aadb-7df1ab182066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df009ea4-4a51-4ce1-b485-95778d8e2a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "32361d62-2fcf-45f7-9f21-14f0f38ff594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1109c9f0-85b0-416d-a6f2-47c885cb5a2a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8941660a-676e-49e1-a68f-9963ee5ab31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42f7081e-9107-4919-8875-ce32879fac95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065c7be6-20dc-4ab9-846e-4e0eec3815df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc587e72-d3d4-4976-b781-1eb2c8f168f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "debcd08d-1be9-4d41-be09-314b48c4ff16",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a364e87-df13-4c3f-b0f8-9d484296e702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "844649c7-ae3b-4918-aef3-e337011ac325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d3eb24-f98b-44d1-8ec2-f38217072d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff13676d-2568-45c3-807b-651edcd9f6b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "211bb199-21f5-41f0-9ece-a207ffa50c1d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d22472-cf2a-48a6-98f4-4cc29e40c978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aab61de-6649-4405-abb4-5730ef4c1a50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e71418bd-41f1-4301-a326-5f92f45df556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "44ecbcda-756c-4751-b2ea-f519e2843fe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b70930f-ab79-4e95-8c88-ae212a8e6086",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78efcc95-410b-47ae-9fca-d92828088090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef5dc253-92d5-4d34-ab19-6c60ee5d2061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fdfa563-0a7a-413e-9a24-3cfd44064b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c2b8b8b0-f5b0-4ff1-8fb9-0448614c44a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1345282a-022e-4722-a418-867f535defd7",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a974f73e-0652-479c-9b5b-0c88eb42a2e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac14cc67-5b0d-4020-8f24-c5ed56beb20d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9908eab2-3c2d-46ca-8bd5-0d8fda860e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfff60e4-4081-4a87-8b3e-e06c7f8396e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d19771e-bd47-4bc3-8ab6-cb8a89c91cd4",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dfc8fa7-361f-431f-944d-f180838fef49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1316d895-660c-4d07-9d24-2b01de2f22bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1e10f7c-60d1-47f4-b3c4-e0d68bea883f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bea2b3ba-36a2-4ffa-b3d0-272f38fdffbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51949064-b7a7-4190-bf7f-9541927551c9",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a2ae79-0162-4497-86ec-94c5bc618bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d281c786-fe27-4483-9763-4ef848ec8734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6156b0aa-09fa-4031-9f9b-7061da121d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "79941143-4875-4a19-8238-f995dc7b7dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd13863c-7b6b-4b7e-bab1-74375d46ec3e",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a58535-24d4-4b94-82cd-94a5d3c75556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eebcb624-f3a2-426d-9a05-41c432fde2e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c99955-2a23-4f9b-a863-b2a5d965e4e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "41e9c4ef-49c0-4d78-b6e3-5edd3a0e9f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca6e77db-0bf3-4f7e-aa82-563b53782343",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa79bbc2-47d7-4ab8-b1cb-f30228dc740c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29a469f0-a601-47c2-a2c2-dc2570e8a253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b76d199-9de3-4b39-88f0-218bbe8df4b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "03590003-2bcd-4bc3-b4ea-545dfe80f7c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77519873-c5cb-44d4-8585-e8125f381feb",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f21933-604f-41fe-b819-e19c549d1a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3427998-68b3-49d7-9dd3-1cdc2848eea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f8aa1b-c8b4-4040-ae46-3479ed825b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "2bae1b82-b8ad-476f-97a4-552d37dd9ab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16912168-2ea5-40c0-98c3-0cb63d1a6458",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1044d9c5-fd2a-4fb4-9f31-88481df2e38e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6a8643a-ce81-4869-aad9-535ce94792c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493c6f1b-5e75-4a8e-b77a-c20d3ba21089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd809b7b-b0a1-45f4-9771-9f9faa63f9ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0a62fd-8ba1-4557-8ce7-d7512c229355",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c68a3a4-9e92-4edc-80db-5c53302edda8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9725c78-985f-4a75-a8d3-b9957022eccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b99d4a-1980-4c89-b90a-1831bbf6b499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2782ee4a-10a2-401d-9ac4-0caf580e99d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0430f9-86f4-4476-9ef2-1cd8797d8f99",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7aa781-e327-46cf-a614-d14502d5783e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "121cbf38-1f0f-4c7c-9e68-52bc8c680a1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea436753-c696-48f1-b5eb-c1d34180d439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "35ca9832-daa5-42e6-ae3a-e5be8af71433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e8a1bd-b18b-4267-8942-012f4959fe89",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb64162-41c7-46f4-8f8c-683b076026d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8e143f1-82ab-4a1b-bbb4-b5241e7994c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eddcd69-0f28-4632-8b42-43a0f65ce030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "308dab5a-c0c1-49f3-850e-f9e784c002d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "092b974d-577a-4961-aa6b-a2d73da1b074",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c569f06a-ab0e-420a-9d65-63f46b48c60a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18e8f54c-bdbe-4929-9098-b1f7cb50530e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f59f53-230f-4306-b599-3e6a25a6c55b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d3be524-a9ed-4301-aac9-c150ba62b441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1eb46aa-ea14-4789-979d-65b9b2ac2bbc",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b6aade-d6db-458e-8a1c-38ec7f82270f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0926112b-11e7-43b5-b3ea-ea2f82696cdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846c55f3-1fec-4dd3-b19a-6153887a0bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "17956e1b-4de5-4d0e-b7eb-4593f921cca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "685ba62b-dab7-4f7f-a1e3-0a470e00e466",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb4abb7-0214-402f-956c-986773ba06eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d346438-1a8b-47c3-ae78-a27266e1c2b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0052e844-bbf6-410c-9517-633bf322e1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb7a3bcd-e3c8-4526-a93b-15e44a4957ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "061baa7a-0b77-4405-a7a8-edc637d27ffa",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82442cc6-eccd-4d77-9d54-c497b7e77602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31984ee2-4b0f-425e-be52-3c74dc85536b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac429c48-744a-46a1-9956-7d5a14628540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9ba96f8-98a5-49cf-ae45-09499e0fe72d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1659534-d84d-4ef2-a300-cf622013f2af",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c14a992-7147-422b-b58b-833eeed01f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92d63f43-15c3-495a-b777-b8ed6c2194cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97e8520-be14-429f-b53f-745af92c4450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0194e182-ecb7-4785-ba71-0543f7dd01c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa2909fc-8820-4397-ac20-41eca239a185",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f042c05c-2bd4-4d19-b756-b52bfff48d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac171faa-a675-4c0e-92a6-adc6f90572f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "985c791c-f83f-4b06-a5bf-a11ebd5881a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d89c9df-1ac7-4675-bca2-b88e8087b161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f107706-960d-4e05-9edc-3c21c9f19ab2",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec31ec9-a11c-469c-90db-0b70b9cda14e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52d809dd-37fc-4f7c-8dd4-31537f401278"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0431a73-bb04-4560-a370-b15ddb3291f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9fa008c0-1551-42a6-9ea8-00f053773f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16ea60e-3887-49c2-973f-53347b57a89a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5307c950-16c1-4814-8874-9aafb5818d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d7a934-5ad2-4630-905c-2d807ccd1cb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f25055e-e206-4a27-a0c2-a5fc016052f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0d36138-2e56-4ce6-b269-1bf2a71479fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7462639-ec61-4624-ba49-d469c2cf0c45",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e48157-812a-4385-8c6d-7238f25cb469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "439c134d-6ab0-419b-9eee-a861fc87dbb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd108bc-03d4-4567-a191-a2d87908c9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa98a16d-3a43-438f-918c-a3b6df763bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df1cfb61-12ac-40eb-ac3f-9a6bbd661b3f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68a3c72-12e7-402e-a2ae-9e05eb6a244b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e82c50d5-5495-435c-8ac2-bbb8d4afa9ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4711e3d8-94df-406f-9048-8cbdfbacd6b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6436862-2cac-4089-9ed2-3d1141cf66b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc11dc09-5329-43ad-9fd9-b6adade2d369",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a96e5f0-1e09-4fe8-8c38-3ccada80b9b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3ff36b0-0643-4eea-8b44-eacc67d1efaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d7681c-e715-4bef-b9a6-dff1a6ba582b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6c36d1a-d039-48de-aa33-dfc90ce0bd1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a877af04-667b-443f-b06f-06ff51dddf44",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7686d81c-e642-4512-996c-54a1f99a04f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83d6c844-9703-4746-b01d-31d757a40abe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca28fd41-6b35-4c3c-813a-f208926a2432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "06393ce9-4047-48df-8f46-f672eacba1dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2021e6-2912-4db8-bb4a-c458d738335d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b9263e-e77b-4f31-abc4-54f7e274512f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7db018c0-8a98-4967-8ebd-662d20bc0a3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3c4361-c338-41ee-b1a0-d82ae8eec3ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7dc1df7-0d29-4f88-8a28-324105c39556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70af1688-e5cc-4e6a-8160-3057e129580e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f4b672e-3097-44db-868e-d798282a53c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bf1afe4-647d-4d44-bde7-e0ec2ac8b0c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a7a479-216f-4c9d-bb3f-ffb932b57514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4aea5a9c-08a3-4bf9-8f6a-48c1ecddc13b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f00de1-1730-4873-a7ba-968bcea87c12",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3064b0f8-68d3-4238-853c-c3bcf7d07f83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15641b0f-9ccc-46ed-8b1c-b3262ac5d85e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca70477-66d9-47ff-926d-6e37c6709362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb653269-c7e9-4417-ac9d-10f5cb388791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7995dc0d-2b04-4a48-9288-ac8080b7a9fc",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be823e5-beb4-49d5-94d6-9996cb5e9b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e97f6949-54ff-4e17-81b4-f637a6627a1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7078f39-6dc7-4530-b1f7-4a1ea8240ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "98345ad2-227f-4709-8746-68cc13c1a75a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5715ceb-e526-4796-8767-a71544fd33ed",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ce939b-ac79-4204-a30d-e1c456abc88f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f871703-a2b9-431b-995d-ce55fd44d648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ec36af-5029-4973-9a7a-64d031228772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "526d7511-a051-431f-a388-7fab6dd567fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c60062ce-2446-4ce1-8de0-908226d1feaa",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6265541b-3d30-463e-b287-b6363602352b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98901d2d-f504-4b2b-b337-213158654e0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c84cbe93-dd3b-4a5f-b691-15880b89a721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2f2fe80-d127-4970-a4f5-86e0d56feb3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2236741-a0b9-40c9-8c4e-fad6ce30d742",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a98e1d0-1b6f-49b7-8edd-1eab9a4b4933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab60c96b-f082-4c22-8895-a28b1f049509"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78540de7-3401-4971-95e4-7656d77c868d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1f5d8e4-4465-42b4-b580-1f04e6ad8ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1382595-a6dd-4d23-9e09-48ae4d52399a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5164b332-753a-49f3-8728-ebae92b383fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34dcc113-a21d-4263-9dd2-5a12e705abd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164326f7-966f-46b0-9ed3-1432c8d02f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "590aeeca-13c3-49f4-889e-2bc14b241e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eb32387-5c4e-4e4f-911f-1e37dca3ba35",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf2de3d-db3d-4d24-a4c7-13e1704882f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d9ea8bf-90db-4f12-9e97-f87419f2ce4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0405c353-52d2-461c-8817-72b1cb501af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9db32db-f514-495d-8d4d-f7786ea01402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d6538d8-b331-4f29-91ce-0e61879ade52",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f44e775-8249-48d2-94ef-94ce08bbcd81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29e2e799-93e3-4062-9a1b-715edf22a478"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f805299a-3e1a-4aa0-a9e1-797c5784c689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e0ecba3-6eb8-4033-85ce-bd02983e6bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09671eb0-b23e-490e-aece-786e8c213e4d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb27cb2f-77e4-4110-a6e2-e1e67c88813f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0024ed54-2d9c-4424-b8e5-aa9e2d3d43ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54242654-3cb4-445b-9de4-2845bec47803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "49cd1132-b623-45a4-b406-dfeae091c38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c1f6b3-fcdf-46ba-ab92-68863f187405",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ae41b3-e91a-4b80-b58f-a1ae6d171eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "868a94a7-52d2-4b66-acff-d8c841347d30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a89c9c12-1b16-4259-b7e6-18486b925506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9c040a2-2eb8-45e5-8766-6d7c830b0e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa34b1a-67fe-4829-82c6-886cfad91c6a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d9073ed-d45f-48f9-879f-d5bdb27683c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "170d1970-4d86-4600-9066-dc5a3fdc8385"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc471fa3-8b23-4ec1-b47e-615626f6b8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3ab4b9b8-db81-40e9-a2ff-a57168e3aed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b0caec4-26b7-4732-bebf-a061d59e7f4b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd0b744a-415f-4719-a704-5c75fa61fc70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ecc45fa-06c5-4128-b030-2e2903d18294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c583bde5-4a2d-4e94-abec-8a43f9962895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "488efaeb-23e0-48cf-a88b-10b400e7f6ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bcc12b8-fe1c-41d1-875a-ef169bb0dc16",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "151416d4-ddd2-4470-b5fe-3f83b75e917d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fee46af-c379-4b40-ad47-0631defce023"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35cd96e2-4968-4e35-a0ed-56faeb5e5b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6b00987-7cab-4b9f-a95e-c375504c42a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d65d135-4b6c-4c95-b3d6-480a2f5755f0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d753a567-bdec-4510-bd4f-4abf337fdb6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d91c38b-63ba-4ec4-a1ed-561e883ba5a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2653300-1b8e-4470-8994-2bb90fcdffba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8656218c-10f9-4b79-92ef-419dae7e259d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c82979c7-2c58-4c61-922d-500827fa7bf1",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41a32f1-b7d9-4c6f-8530-04d576cf7550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72eea4ee-4190-4c85-bd69-d31116d0eb3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9c705b-5cac-4a5b-9437-fdfb9a3df92b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e72fbb3-d2e7-47da-b966-5a54bac741b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f18d863-03b0-4fcb-b2d7-08a912c02656",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ec2288-731f-4624-80dd-6293e7a9ac93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "137a24ce-8f09-4321-9761-557980dc5249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa0d650a-8ba4-496d-b993-cb5dcaec5e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1caa7200-76f9-449e-ac64-3d0bdb00fc56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19072914-72fd-4ba3-bd43-45435e493930",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9586048b-dae6-4fcf-a699-c35e0e31e25f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b5303fa-fc12-489d-94ae-c8f66c9bf31e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3b6c9e-fb8a-4c1d-a235-796e8aae513a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "666a48e7-d708-44ff-802a-2a4b5d537264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "928535a8-419a-433a-bb98-fbb21c0ac3e1",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5cdc72-8ed6-47cf-a4db-0c9447f4a696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fe57b88b-24c7-49e7-8d0d-ef64fd5f753c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86965f9c-bfed-4796-a818-65d1b3764383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "422cb305-0e1a-4248-98cf-e900384b9d3f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "85e28878-c406-48f7-a654-bb1a2f2cc62f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "831d45c9-706c-40a2-8000-d6a7280c0bbb",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d43f001-73e3-4162-a014-9839f1eccc97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed7128b6-996c-477a-ad1a-efb48896e309"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2388d96-1444-403b-a55a-131a19760f66",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "b0b76742-ef59-42dd-9071-86c022d81d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4706f0d1-37cb-48c5-8b6b-753fbc2fa2f5",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ede40d-7b6a-4bcc-99da-6ad6392580f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "951ac3ab-98f6-4613-9e81-7e08cf8386f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a030a005-fcd2-4217-859b-155c5c2f19f7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "31dbe3a5-1bec-4655-8132-ece8a38800da"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e3db061d-f571-4e40-a2ed-5fcd0c85720f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f7733c64-583b-47ec-8c21-93c0a29cd1b1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "61b9aaca-c435-4032-a571-2379a32dd456",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7608f0f2-8204-4e26-b23a-48b9e0e6f77d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c8991051-d30f-4c07-a36d-1297b2a5199d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "136b6a59-63fb-48f7-acbc-fc0bdce3ff70"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e326e154-99e3-4794-aec6-7c423a2a785c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "79d3c9bc-3d37-4f94-9a58-07ac2bc7017a"
                }
              }
            ]
          },
          {
            "id": "d7e9ed44-9d1e-4946-a596-c67d79628052",
            "name": "Positive Testing",
            "item": [
              {
                "id": "30e9d09a-e456-4d92-9951-a96f9129fe95",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e74f6f68-af54-4259-94e1-cc15ccc5e52b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e65f3e18-6d25-46a8-b3d2-65d7f7a5e86c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c83c9437-f977-4b67-bf05-7d807cba3e2a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6f4d8cfe-6dda-4c81-ac89-55bc4d240e8a"
                    }
                  }
                ]
              },
              {
                "id": "da87ea3e-0362-4ab8-91ce-f956369a2c17",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "13de486c-58e5-4e47-9194-d951a71b5ba5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c3e53cc9-a134-44d7-b6c8-445288e8a626"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "464ca1ee-61d2-4bff-abe2-f0a1fad21d6e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8d30db20-f9e9-4357-a6ef-59b67d47f7b1"
                    }
                  }
                ]
              },
              {
                "id": "f3993f83-fa30-4dd5-bf6d-c03254da0d90",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7079eb95-5f9a-4fbf-95c6-632ca16f2469",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "276d406d-334f-4d64-9ab6-a2402018dc86"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6dd4b9a5-6625-4c8f-97df-f7da4bb41310",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a45d7021-f56b-4e1d-955c-6f65b3cc9cb3"
                    }
                  }
                ]
              },
              {
                "id": "519d656b-b5dc-421b-81d5-7d7f49ddb617",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "342040a3-f07e-43b6-a29f-fbe928c6c1c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c6d66209-304f-44ba-b7f7-2a2124427652"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "927b9969-cc69-4c0d-8e0c-a7c9778234de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c0c69843-fc9a-4094-88fc-eb10e32c9af9"
                    }
                  }
                ]
              },
              {
                "id": "b6ac591a-1c3c-4397-b376-ce6de3184203",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "af82e619-e477-4a00-8ab8-0bcc35fb858f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "21e63e22-44d0-4f94-84ac-169cec2cf2ac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb2419dc-dda3-428e-8bb5-2dfed4b86c6f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fd855d96-4e8f-4119-8f02-2624d3fc3b07"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "180669b3-c7f0-47e6-8fa5-032c29468c10",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "61fdc4d2-939d-4474-bf15-f4d3303aa2ba"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "23191370-e896-4f68-931f-f53b36bdfea7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bf3a4195-b16a-4be7-b96d-71a7bc627897"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aed79f15-1045-4442-843f-3ca97c2ec4aa",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b14ce996-299f-4764-99dc-a8a177b79da2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e6946f18-b166-4e13-83ca-f3b418765fea",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f133b90-5056-44ff-9c6c-b30e8a8032c2"
            }
          }
        ]
      },
      {
        "id": "957e9f0b-f50b-41a1-84cb-6e9a7f233dd4",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "56da06ab-8cfe-4bf0-a339-4f3de3a42c5b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2adc7db9-ae3a-4bd8-a154-2895c613de8d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f365cc41-8e47-4a7f-984e-e7ca769c3be2",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de5cb0bd-acac-4bb1-a01b-53fbdba38d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00184c2a-3028-44dc-a12f-25254cf987a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450044cf-a9e9-429f-adc2-bddf5485b410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5391de57-6acf-4ae4-ab18-764bd7aa4d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6907c022-63d5-4966-9b90-c7cfcbf0e04e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "957c13c8-e8f0-466c-a23a-41942a5f4c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e50b9e68-7d09-4ab7-bfb6-01c92712a9ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e89e8814-3c79-4a52-9f4e-fb1df4df902c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ac16fca-8ca2-4be3-9232-d867d0b25da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd919897-6885-428d-99d9-865e4c21081f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18bf6a52-e4eb-402b-924f-f27b8b5eb61d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56bf8f0b-b753-4b0f-ab61-017bcd9d5455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb1a2f6-c2e6-44ac-994f-e17a79bbf609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "734fdc1b-ea1e-4894-856c-41133df779bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aba957e2-f522-465c-8e57-cd94427861ba",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78e24af-0baf-4552-9a6f-24a4d0dfda62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abd5d26f-546b-4d53-a2a5-4cdb30072b81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad981e64-aafb-4cae-a6d2-2987d5186d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6275fc6c-d0ab-4415-80bd-2c00f6d5500c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f7c7ea-4429-442a-8799-d5eaa41ddda0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "139e956d-0e28-4514-9eba-f97e548e1d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "521a4445-f242-40ad-aa7c-7fbe5f3b7673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c4b2128-d7d0-43de-aff0-1d0745c5b46c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "56f7d619-6993-4c56-b6ba-e6cde5755611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1153e9f8-8f14-4c38-80d2-dbdf23fda312",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd41d7b1-db31-414f-8179-5427f7c7adae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "784570f3-2404-4dd1-bd29-c7b97d05655a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ca197ea-977a-4ff3-8033-2c88133ba659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0863c96-0e5e-4f57-b727-d58d9084744c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b050cc-6757-418b-a67f-2982a800084f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04591614-b970-4a1e-9006-a69b544924ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a73826f-0fee-4c15-82c2-00e15df2e58a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2676bd4a-a7b1-43a6-a7cf-25c6cd8e685f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "05600c30-06a5-4d2a-aa8d-c112d4927852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e8de4a9-6385-4cb8-a6c3-50a0d8ade76e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f475b6c0-48ce-4548-aa7e-435835a2b516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52a7822d-21de-4046-be25-20d600f6fb1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e1028d-e6e8-4428-8df8-376d67bbe292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "477fb734-1c16-4fff-8e5a-e90b12602f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b4642c-d8a8-4328-b7af-f5cab591abf4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "addf8f52-8bb4-401e-88c9-78bee824c873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d88e0a7a-a371-4669-95db-53b8ba064dba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c623bb9-77e7-4763-b2ba-3bd71c9a999c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c746dabc-0b20-45d5-8f50-32618ac8ecce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "692d41e6-f6c8-4718-a0bf-06eb40a6e222",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc103414-119b-4f32-8d58-773a4d8b94c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d52c18d8-156a-48d7-adc4-6a1b83425375"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d84e6cb-6399-4314-85af-6d47922f0b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bf0fd3f-13a5-4297-a339-539dfb62bffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb786b4e-f1fd-4e5c-89bf-cb65cfb15fb9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82cd552e-b212-450f-b2a7-ad19319094ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9c7b84c-5d56-446b-924c-135ed251bbee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a90898-3294-48c2-ac55-cf73f889dcac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9d691683-16ba-4904-9aa7-e662dfa0cf3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe743bd-7f5c-46fb-8fa3-87db27ac3701",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8a7a72-d168-4acc-99f5-7e1e5b8134b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70c438c4-7284-44fa-b503-dd14d96b5d21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7636fb1e-e114-4410-8b2c-b52e9f166ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "73e092b4-e875-4894-a5ce-b67e88909f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4defa75d-1bb4-470a-9ae2-ee0c0d93c698",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bcf2b84-8578-45c8-92e3-5632bc59605f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ccc3c6e-933d-4bfa-85fb-47574961668d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7822af8b-61c3-4ad7-8159-767800412fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "307aaeff-337c-44a6-b9ab-6220b5d701cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c10a93-ea9d-441d-8811-27c8d4378a6e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "741dd95e-1381-4b79-9dd1-d526c6af2824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84355e79-d41a-4283-852e-61c6a7e571e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb12a30-7a70-4adf-a3d5-af38b73113a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "63cbc039-69e5-402f-9d75-e29f29def68b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c958e42-1e7e-4b29-9bc4-65926a2b057b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d131b2b5-014a-4f90-bb34-eba56f95d04d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2d2f33c-e43e-4aef-9a35-a9372d4da553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71803a21-33c5-4caa-b1e5-d9bc02242644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "04147203-0851-4d3b-9c1d-11f85e82954a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36df312d-9f31-4a7c-a721-6d4441ef5d76",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99aff7d1-3f31-46ff-86e0-ca58e034837b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d71b0b43-b3b9-4291-8d52-dd21bd3820ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92071954-6824-4f99-916e-26ec00006f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1df55d4c-edad-44ee-9eb0-5b20b593de50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "417da8ff-c12c-4108-a5b6-786c37e958ce",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebaf753f-d31c-42f5-803c-510f28a615bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5ef8d62-144b-474b-aa64-3230b7ceba4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c5bb11-c00f-419c-ad9a-c207f2cae2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "62fa23b0-035a-4be2-a5d0-ed297b2b4c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eacbbdc8-3ce4-4229-a9da-52a1ef0948c4",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb659d34-c3f5-4177-8583-872fd89ce38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd750bde-0180-435a-8452-68128cca53b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0538ff4b-2865-4e04-b7e1-bda567c855a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d53fe5a-b214-431f-9fae-f16dcd41663e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb5d8d8-5d34-4595-bd99-a54392f641a6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17492b08-2c42-4a94-b9e9-e11025b71f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f357e9a-2bfa-4d84-9288-455e68507105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855661f9-ee40-4f2f-a885-6257ce78264d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "605193d2-8385-4372-a289-44659e82b6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d86142e-b314-4819-9f08-e85cfccf55c8",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a87fb27-d767-4e62-b4e0-7a091536719e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64b608b1-10ea-4080-ba62-a5f352ca13df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9fb49e-401c-4f54-9539-94bcda5c43f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80cd4ba4-c460-4a57-9301-93176371c22e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca7424d4-8ada-4828-9932-1edb4ec490cb",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "095743be-fb5b-4157-8884-a065a7e29ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb70ab5a-8b63-412f-8c02-442b433827df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e702ff9b-36a0-4087-ab23-6ceeb56866d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45779cd2-c3ca-44bc-84d2-02fb7fa639b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59760bfd-5006-475b-a9b4-ac9596797a89",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ae63bb-9551-438f-a605-5f7cb12b4fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd568c50-b53e-46ae-93a4-31a235a1e406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae87d5de-df9a-4e02-b47a-97f1edf968e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce1f1723-7ea0-46ec-a19f-6af011af74b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b1d92c-0db9-405a-b12b-fb75d5f9c2bc",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fdb8f89-c56a-4feb-870b-df9c3c94e791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0062e5c4-d0ab-455b-866e-bfd63a0751d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e143d1da-c741-4316-aea6-0abf6ff9f784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f7ff8cf-ebc7-42bb-9732-7c261967b668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ccf21c-4a60-42ec-b2a4-f48e229e1789",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17bb1494-5b1e-484f-a071-781a728c4543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e4ddd44-2600-4281-9474-11942e8d8268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484faf80-c3ae-4663-a8ef-2a8906cac99f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94e452ad-8af5-4d77-a2b7-6757fec57905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d1ac865-c432-4945-a415-49b7e3e53ded",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e92235-3455-4a79-830c-5c2fe958a6f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de2df04f-904d-40cd-a82a-ad805004e67a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd9d53e-9f28-49fa-be49-9c7260271329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "150cf9c3-6d63-44ac-96ad-50103eae936e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f320af0-eeab-497d-a607-d4d8ac80f8aa",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2783c5ca-924c-472f-81d4-220d64d4ac25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "529a8eef-2602-4ed4-b971-635b51228c18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca289d8d-9328-4f53-83c5-e5055cb86089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b8da451-473b-42a4-9952-60abb15ccc75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3cca146-39ee-44b1-ad82-7c18594cc832",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "921d92db-1899-4f72-940a-b56685b0d19d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b45b99f7-4a7d-43d8-b4d2-f4888ea1dfc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "754131e9-9793-4381-a7b5-09222e0c74cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b18d0262-f415-4f48-90b2-86b7ba57a31a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "564b1ce8-b115-4016-8d1d-67e20116e784",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b292276-d0bc-4347-941e-a670d0fefe78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f62841-707c-4cf1-b7a7-c9f83bfb81a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05c1be8a-e6ac-444b-ac31-6bab460aa198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02511851-0fab-43ac-b33c-0020451c45e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2403896f-e004-4872-8541-2009b781a7ca",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a4ffcca-ebe4-4f51-87ae-24f524355fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c3029fe-3466-4a33-99bc-4fe2400df7b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c51806ef-4768-46f2-914a-b686259842e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8448588a-2299-4d7d-8444-e6d4aebcc0b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb428d3-2ec6-4b03-8e1a-306d9693ea09",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f83dde-b99a-4dc8-8e6a-8ffb7c4c7954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d46712f-0e31-4f4b-9001-91f579bbb9a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a13c03-8c2d-479b-a095-e7411f97708d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "159f9f1b-d896-4bbb-8122-2522dd74975a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea8f8c26-1894-4819-b1d8-05ae6f75d7d6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8946b2ba-2eb5-4ef8-821c-fd6e6511afce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5dea11c-d7b4-4169-a0d9-0b365933a5cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9dde232-4e3c-45e6-a5de-ebc11e935194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0fc4621-5fa8-40e3-ac73-d1893b307697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e7b5e6d-53e6-43fe-810b-8a5718bb1803",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d83aa3e7-d50a-4e3b-97a3-2f4f69ccc6e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90261d90-0f40-4272-95fb-1655e2ce0496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "701abdf3-f701-47ef-a95a-63ddbd397368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd853881-84b9-4082-8c1e-2c248e99ee8e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1a9c5c9a-d50b-42db-8b34-ffd71505e59c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "702bf298-f1e0-4b7e-9b2f-649a6a33e03e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64467064-9e23-4c87-8080-db0a733adbd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "099ce03f-2bd2-431b-bbf8-e2c3eeb09de3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cccd643f-8676-40fb-86ae-04e9c39f1b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2f39aef-e7ab-42ef-b1c2-1e0bb96c53ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6e9ebe-1e4b-4aee-a1b2-002c8c8e0afc",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e13464-5001-45f7-b755-c4ddbbb11def",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "0d228d3d-e83c-43ce-b13f-3a09c22b02b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10056b2d-c4fc-41cd-b2e2-8a7cee1a895b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1d0c74a-50a9-4e77-be22-8813efa7f3cc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f6d7101d-a997-4d03-b46f-4ad6d4f64ec0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "669bdda9-97d8-4d5c-9a58-c6f298089dfa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "77ca87e7-a71a-4fa4-9556-20f902950473",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e3c06d6-81b4-4693-89f0-4db770d902a1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e0a53b72-fa8c-43f4-9079-964cb2a2c1a2",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7553059b-8641-4ff6-bc11-42eae71417fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3f48d371-265d-48ba-a5fd-fdd430e590b2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "67fbb10b-5df9-4c80-9f42-340cdcf10535"
            }
          }
        ]
      },
      {
        "id": "6e50a6aa-6b01-4b31-aaf9-55965a0a4ae3",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ea435e84-d7eb-473e-af27-0981aa529eb1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cd53e56b-4ab3-4b4a-8eb9-e05e62aa4b1f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "37af8c23-6758-449c-be8e-2945cfb7b147",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32bf82a9-1c4b-4f3d-af24-bd5f47c6a5fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87ba8ba2-d562-4a61-a85d-827862434dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ffc99a4-a280-4349-9acf-85742dc407fd",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb52f57-2aa3-431c-8553-309f28a0e757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e63c147c-3ff4-4197-8d5c-a65adc12cc70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33062a0-9d0c-43e1-9aef-4c34434a19da",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e4faeb-1d20-465a-957d-61f67b8904c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8288baa-879b-4b8f-8001-761cd6ab327f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05caecef-b2d0-41f6-ae34-f855a7fe03aa",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "226faf1f-6b5b-4e6b-8a69-7fb8ae81fecf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af14e105-bb91-49cf-b783-e7fa00131d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d940490-9925-46fc-82ee-3eb4f216c6e9",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a5da08-830b-4374-a10e-49e895d55636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be476219-4a15-44bc-9bd3-af755359365d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1fa2a23-c2d1-440c-b538-9c42b8f41b1f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe152062-9e1e-47b9-b915-20630da23d43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9f7e61a-ca7b-4f66-94c7-3f5eec93be95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4218a894-19f4-42d8-95d6-b5c31ec0750b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da1e5b0-055a-467c-8903-1a6c8e03d6c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3be081f-fd2d-4d5a-aa7e-bde55d438b0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07556c29-a974-4205-955a-b24a34f4f2f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42b92723-812c-4b5f-aa49-5d8d3ee4557f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8eecef2-44cf-48a0-9a41-63036e92f872",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "753f77e5-c0e1-454a-9d00-527e010f65eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e5b41d5-df64-46fa-94f7-24a6f48066bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb1d8c2-1e76-4df0-9da3-a529d2a9d370",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "840fcfe6-7159-4a7e-8d28-6a3ba83fbbbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a33560-f252-46cd-88a2-82757045c3bc",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9150476e-6d17-46e2-9065-e0ffdc179f78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e491ac9-f886-43cc-a3ac-fb26e218588e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96219b1-611a-4d2b-8f59-092bcd6a9ef7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30ee20df-8cc0-4320-9775-f1a49a8e0aac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eede9589-50e4-49cd-8daa-9c01d17b036e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "435f749b-505f-4268-b9b2-0a2a762b505a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfe9100f-9418-4a01-af84-bce17bd6649a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b2395b0-9595-49ae-a376-91b1c059f315",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c00b0105-6cbe-4fc0-8f04-65445fde02e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9205da59-532a-42a0-86fd-fa6cb698081b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f724d276-9c0b-4a63-be60-0dd6732944e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f64c3c34-8f03-4b69-98c1-c5539d24dd5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f81ee32-2b49-4728-8315-ac6cda8ffb31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "790711ec-8bc0-49c9-af1b-181f804087c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acfe6ab0-17ae-4603-b3a0-cc4459a8c8c8",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b2bb3f4-5813-48e5-8193-c8293b978cff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88ad04f0-e063-49aa-8188-03415a53dca4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e74306-7606-4e11-8c65-9162c958f0d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f004850-7994-4101-a2f1-cba92e3cfdb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee6e7c8-47d9-464b-b7ab-2567c0fa4646",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f4b063-7480-4b7e-8b16-bff6e95578e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c74c1560-7632-4d53-9f68-e9cd735ef87c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e876a07e-8c80-4bb8-a213-ef3613555fd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a59da5b1-2762-4564-982c-198f2c968e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcce0e5d-a669-4091-b97d-9b5b7a11c434",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9634d4dd-5b64-4f43-9413-b8b3289295e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8860c7d2-f0c0-47e7-ba2f-fdb551a9ca52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6948dbdc-b59d-460e-9385-4124c9b4bf6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d7d0aef-6243-4608-bb99-68d1246b0810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "089f0513-f3dd-42d3-8b25-5691299ca034",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "237e1dbe-1fa0-4448-b8eb-11e067df89b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db560e17-795f-4130-9553-4158510b00a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbef80d9-c11e-4d4d-81d8-bf1dd39db30e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99590394-5ba5-482b-b454-46f9698b569c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73487ad-ab2e-49ab-bcdf-6a6d7ba338d3",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa0b876-d232-4960-8ac0-ebd935cdf9c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa8d5bd9-b704-4df8-b178-cf9701f7f681"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69bacc9f-ef7d-4499-ac80-dc93fc7289f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd2a9a83-c597-4760-9ff3-247828872331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dce5400d-b433-4413-8a41-dc3f82a71f7b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319cd186-389f-4aa7-99c2-97aae1f1713a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bae1cd5-7077-4218-aa80-59fa5931f74c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f35431-9a0b-435c-840e-c18fb57bab56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a6fffb6-347a-4e09-a4c6-f3369e1c8a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d96f14b-7859-4598-b651-8b097a8b1f48",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4147d7c3-d633-4b85-a5ef-e6adab6c7c21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43c9eb1b-50a0-4182-b829-5679d1bd9875"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "559394e7-75d9-4f91-bc16-725b30ef4a9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db1030c8-e776-4006-8812-d3651a687dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e231ca6c-3bfd-4b4b-845b-1d56767bd9e6",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03cf2a25-d58a-4a3a-b702-69b2da835b84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ddfd22a-7071-4cd5-94bb-c8048afc1d6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b6d59bd-05d1-4740-87dd-6e47793f7173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e085746a-7aa0-4a59-8cec-7ae18a51495d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ecd1d39-5819-4c5a-a5d1-19b3e7695a26",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac22662-2b01-4dd7-917f-45a58851db17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c31d8ca-02a3-4395-b39d-640ebdfe615a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c4f765-2cc1-4e0a-b886-e23601038a5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51cd2575-ddbd-43c9-bee1-cb2c0042123e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7966ecc7-ba97-4c42-8b9d-3e9b101d7842",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc69e82f-21ce-4ad3-b3af-d978ee9f2da9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81c4f797-6b17-48bc-879d-b90ae9c1cbc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7bd5933-2b7b-46c2-b947-eee9e55e26fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f9728d5-1073-4bfc-89cc-2527d717f9cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af00cad6-87e4-4bf7-b499-ab7177227772",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb890e0a-8b8a-4219-871c-67cf30e8a9b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a64c8dcd-a2aa-4d00-8d77-9d1f34737b01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9721d95-5ec8-4bda-bd12-102d234efbdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "361f23a0-ffc1-4c4f-ab92-40aece7c9d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56cadc45-9562-4402-b4b2-f04bf7e2c341",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac7f864-2a77-4222-8018-d180cf5f444e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb72bf38-4c88-4e27-8698-6e04eb6be3ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "530c3554-bf06-4cdb-b61b-89e367b32357",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92326c74-50d9-4ea0-985d-14f8a950644e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06989808-b70c-47ed-b360-eae7b6b43874",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65cb5bad-2be2-4390-8e64-e76386525e40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c92d5fe-d0d8-43e8-a2c6-afb47d6c19a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ae4d7e-9249-4054-a474-770aca6db0a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aeeadaa-32da-4a24-b5f0-ec88bee4bcf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0ee5bfe-dfbb-4057-9a13-143597afa954",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47ce5621-615f-4d23-8c1c-dbbb0d3af3a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2342a88b-6b6c-46d1-96b4-768d87ef6e98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b50863f1-6ad8-49e4-b707-0bf12f3bffe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2a71741-f130-4131-9a54-7e7af11d7511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2b9d5c-473a-4642-827f-5d7d2ca317d1",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfdc5f18-d6fc-4234-8766-ffa892c8e09b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9df26594-117b-4e31-bd4c-fdcacffaee11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "377437fe-cd2a-48d7-925d-5eb4753d8b53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acb2fa73-6ae0-4345-b4d4-fbcd685944a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e22325f-c368-4620-830e-9a0836f13a05",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cb63669-4c35-4d41-bdc8-3f62b7ce421f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d3d746b-c58e-4435-9684-85ebb1e7b0d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0435cf3e-1394-43b4-8fe7-6a246735a370",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b37cb1e-3027-4149-aeee-9e6a8a9f9c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30afcd9e-7897-48b5-a288-084d1be10208",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9e39693-31b5-4cb7-93e4-72ea4670f7f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bfa6f38-cdfc-4889-a170-ed1bed6a5e47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b26baa3-a63d-41cd-b138-0a265137e942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4ec293a-0903-49dd-a873-bee2f9006984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a64a2cf-4877-4750-a628-d3bea2e104e2",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe71b4c3-eef6-44ec-98e3-91c0862ae206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "868da3f8-232e-4a45-823a-40a6fc8ae7e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16366d72-713f-4704-8b5d-2b5670b0a5e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f65155e-ba07-4ff9-aa22-9ab2b37c042e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0931d4-72b9-419e-8794-09a261465789",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec2ab24-9902-4b30-a6ff-0f524d296b1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70af6699-b8dc-4d81-95c1-ff8048dee625"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9efdf5d-2705-4392-97e9-5704c0b70d59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b5ed949-00a3-41b8-a571-1549d5911c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae97bdc8-cb97-484f-b80b-b66f5a6b9429",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22485cad-49cb-400f-b95d-db27591b7de5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0e55184-10dd-460b-b732-6c72ed687b18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f46d8cd-6cde-4054-8bb0-6f46c9890e45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f88ba750-468d-40cc-8092-4caf4c2c44a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f05643e5-4c27-4813-85a9-65c100aa9abc",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892173f4-efde-4dcf-8a04-3d7e3b275165",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13ba8874-b5c3-43d7-b7e0-b4b90c0c531c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c57e52e-7a04-484b-a376-5cd0c147eebe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad3a0d15-64ff-43e3-a2ef-f9720e065401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c9060c-ce59-4fd8-8ba7-f432a1d07d44",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb23a62-2364-4cec-9595-8866a54c75d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa47c624-8453-4e46-9172-79eafde93c1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ac56b8-0796-4a54-b8fe-dbc9a7e3927c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6488b817-cd94-49f1-8c61-99ccb86405aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f32ae17c-94d1-41b7-9b33-77e1f8337379",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb6da2d-47cc-4cc8-8700-952c473ec778",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4fae113-9606-47ed-913f-b30034232c81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61569d8e-8294-4320-929f-76518f74b7c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbb79709-079e-4f9d-a473-7f60baf4e34c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5fb794b-4b2d-4155-a6e4-78b4a2641211",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec29d6e-acd9-45e7-821b-5b730b8baa31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "deabf4ff-82e3-498d-8783-7cc71b037858"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b93293f1-7265-407f-bb2d-f9320035cbad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af75f849-38d3-4047-8aa9-ccd438e25424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be8e839e-135e-4a9b-9676-d1a6921adf0a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315f263b-417f-4de2-86a5-63daafad0f69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f55aa0d-60f5-4b4c-a71e-8473f6557c8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5981905-02fe-4f64-a39d-97e5e8abb3ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6628677-8339-4658-9f31-a9ffc75444a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b08092-262d-4f7a-b2bc-88337b9428af",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8d5766-e527-4cae-9154-bc2ecddf6daf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "678f8866-ebfe-43ba-8484-7a1e086402bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61213ba5-68a4-4477-b376-c9462b28dd6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feae6853-cab4-48b0-836b-0af6d858ed51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "522b513f-e1af-4f00-a5eb-5ff98f11f957",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f1d78e7-7e6f-4416-97d1-e06183b8bc11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1619220e-4844-4799-9a62-d83b5c767097"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef7c1502-a9d3-4c40-a160-b046f65b7639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c62b8d0a-38c0-4def-b155-c66c9014012b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "febf89b1-e3e7-4394-a693-779877e07e8c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37aaacb9-a4b4-44be-969f-0cfa21b91dad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "408b41e0-ed75-4b3a-8668-da2ebbd3195a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8df9311-4ba5-4c64-80fd-27a14295e737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a489c28-9a3f-43cd-9611-40778a1f2109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b1274ec-20eb-43a4-be0b-b6657f2a7b87",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f67d06cb-be1d-4628-a5be-d18e456cd56f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a914f20-0a7a-48b8-8bf4-65309edd00f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d9712c5-cf29-40ee-bb64-e28f2fbb6da5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b0c5eb3-ce53-4827-b8eb-689020a69047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af49bdf7-5422-40ab-9459-0f128b9ccd76",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e90a59-fa4b-4f8b-94ec-a49e709c1ee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8519dc76-cc44-4527-836b-89a4bb7f0bea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6705b398-68d9-4df5-a0ab-99e762d29cb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d9bc78b-3cb4-4748-840a-3e868df6e58a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae9238da-a8bc-441a-85db-b1c70b735903",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "411187f5-6341-408d-ad26-a563193863fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44a54b90-be1b-4be3-ad2f-e028fd5d9517"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7de23b9-4b69-45b5-9cea-63f10d9abc62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acfcf6e9-e469-41b1-9b28-622b53e20f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17f0a043-ea63-4ebd-80ee-47f83284d038",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb2802a-75fe-483f-a285-08ef52b25fa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "623d343c-863d-4509-819f-25bcd1e12a3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f17f47-ecec-4c0a-89af-6659a39adc9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81d158fb-8452-4aed-84dd-cec32c345199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a655d41-c5e2-4214-ac86-2a9bea668646",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e39a86b1-0ee0-4ff6-8d9e-6b77fd634818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a722fd7e-f4d3-4ed0-81de-287444b64aaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95902260-57ac-4430-98d4-765cd18124d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5609bf04-5912-4fbb-9600-74346b694124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89a04c0-a35b-47fd-82e1-11c1ada31d0d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d006359c-e072-47de-87d0-8c2a47dddb7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3257c159-c548-4724-a9ca-4136a63bbc78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b915b2c6-38da-49c6-b30e-e6c22a367e27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2977f533-7dae-4a8d-8d1b-27e689a6865b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f529a09-86d0-4d86-beca-44e3627679d3",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5537934-036b-41d6-9b4d-abb8c4906568",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cff78a87-a5cb-4240-9d30-9713c88fac9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72ff87f7-6b63-483b-bdf6-443170db17e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0469a58b-a21f-4ae3-ace9-8bbfda28e624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc3c90f-223b-4e18-9786-808cf9645c5f",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25926311-6015-40e4-85db-2557f431c6d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f6a7b89-7954-4369-b9f7-7bab3a2b9389"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be3a8476-4a07-439e-a927-958b9e620d2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f30725ba-9ec7-4fa7-b6ad-17455878f087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183d23df-2fe9-4558-b584-eb301e2b5c92",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f0c52a-27f3-44c1-9994-3e8454d83f99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58863015-1fc6-47b2-855a-e34909c56af4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e29a9e-632d-4935-9bed-6cf0f05e4cc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0999fea5-0394-41dc-b8aa-31035a3e0516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd07bc1a-fb5a-462f-801a-d617256370ad",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d34ad27-0da0-4b73-977f-e40fbd267c4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a1cfa05-6bf5-46e6-b5b0-337c7cd8eabc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00680e4d-2fcd-4339-a989-291972a7f477",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24ba3280-3bbd-44b1-a44c-4869e3b02d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0fe9508-982d-432b-b30f-829cb8503a7c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e099d3-e78b-4aab-8501-ffe5f2f69814",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f57b5a7-7682-4b88-9a1e-f28e57231763"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5134860-ed3d-4718-b1f4-43df17bac0d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66b90326-f90c-441e-a94f-b9deb68ff910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab82281-d8e1-4dee-bee8-4b9d1a7799fb",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5d14e00-157c-44c9-86f8-7a2f98763b26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b90c4c5-3d69-487d-9a3d-1abe1903b9e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bcaa409-b978-4824-ae05-df10b3be53f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b13fc20-78a1-4dbd-962c-78ba17f1b909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f46d6e5f-3eaf-43ad-97e6-1c016f06c8f6",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5910c394-2677-4054-9885-e93d098df2fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a05c35-8dd8-4ec5-a591-30ddec49da46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7247149-dc4d-45f5-8b2d-22b9fbc9aec6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b12cc5c-f0d4-4537-a985-e0fb41479395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "385df75f-4ec5-405b-9c7e-65b7f91fc3bb",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a9dba64-6ba7-4b79-ab43-27eb5b9a9507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bfa650f-3cb9-4894-81aa-e4001217cc69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f108fc-6634-4032-b28f-a6397670488c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17807fca-215a-45d1-9e55-70fc19d2a8b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a669ed-2127-4176-8425-0c5f5157c00c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29132c8c-e578-4838-9c86-e85d7db57b0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5638390c-52b6-445b-a37b-7a292a4c10c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e34f0d3-e6b3-46c8-bb74-dcd8cdf7da82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4503937c-ba94-4cd3-8324-e8506ed86228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6bbc817-fa9e-4645-aa02-724c05364f4d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee509182-7aa1-415a-9eef-3fd8e1e45e53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bcd50e0-4a28-4667-8565-c1ffe3ce98dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3741a664-a3d2-47c0-9ff6-1402361c847e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caadc810-b0a4-49cc-bdfe-36b10ab8c74a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b62c12-3e75-46e2-a5b2-c6e6116df8a6",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9578e12-4424-40c5-a981-376ba3ba50d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "268769b4-4026-41c1-98b6-53038f5d5b9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "903f97ab-7f89-48bb-b277-7b951a3addcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "621b88b6-d9b1-4cb2-9220-cb1f9627237d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8acfb9a4-eebd-4291-8c94-49f97b8b7256",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a37863-9419-47ac-962b-122b2cdd36ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32dc1916-a76a-494b-84d6-54f7b5f7a43a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0389ed7e-7105-46d5-aa18-aa437015d5ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b11cb0b-a0bd-4412-b173-6ae6c85e2237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b147d5bd-52c2-4111-ad40-72dd99888491",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c20e6a2-8e9a-4ca9-8cac-2d505b147995",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5289dd8f-697c-4277-a6d0-14d6f466dfeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1db8f4-0c72-4ced-987f-b784b40b5b63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fd22074-60b7-415f-ab0e-35490ab76e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe44030e-26ff-4b00-ad9a-8f07bc6acf6a",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be211273-c30c-46d2-89da-4cfd100db922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ead119cf-d67c-4fc5-96f2-5fb96bd9c819"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81dbdc8-d258-4adb-82f8-608cb37afae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a741f2d1-4fc7-407d-8e50-d1864e4c1e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f04e27-166c-408e-999d-b25171c1996b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c3b1bc-0be8-430b-a70a-035f2cf0bf7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77957172-3291-43fb-9f8b-c18c7b5f9e81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f27cbb78-44c2-473f-aa0f-12444ad86bdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c232e56d-098c-4a35-b124-bc0fe95b4fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f397db5-97ad-4c2c-ad67-b960b71048f5",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "975c80ac-9687-4000-90ba-b68135464a88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c560d90c-640c-4d98-9473-03cd3f7b9efb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "548604d9-d42c-494e-8499-c44ca8db1b81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee5fec6c-a72e-43f6-ac7e-5d9d7392b2da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a99116c-a6d0-4cd2-87a9-f30b45cea126",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ddc36f6-a8ac-492a-8ed3-da2dafa06248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a11eb506-a9f7-4431-a341-1023428d38c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de297c6a-1134-4727-9e9e-7fa5b05b9dff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a79d02d-b7ec-4ce5-90c5-771f2f744d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c35b3d0d-f82c-452f-8199-ed42f09d7e72",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8e574ef-4a2b-4ecb-89d8-430f9cb3c070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed237c0f-20a6-4662-811e-13d0d9170562"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3db6316-dad7-4b0d-bd3b-f1705eac4a6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e304c1e7-2a70-4f39-be80-eec16fbc315b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f5a0f90-c540-4c90-b945-b01d1794fff3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c3109a-e421-4f74-8ddd-bd8aa3c86323",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa554660-538c-447a-902a-8906e6f9825e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb5be11-6560-426d-9fc8-4b440a7f1f51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb84ff3a-1cce-409e-bb53-97a2c4d76204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d51684e-f625-4903-8b8e-f7f4ae5b8115",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbaf93a6-599b-4b7e-9dbf-06626076df64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f859834-051c-4a89-b53b-73a26051bcf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54bd3f03-4408-48fc-8847-274298c02e3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cf12ab5-4777-40c2-9e0a-31346afb5039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f3a3b53-60fc-4536-ad30-cbb7ebff3ba2",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72dc173f-cee6-4e9d-91da-edb54f7d7fb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1807343f-4a31-493b-8dc1-c6486083af21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af58d76-51d4-4946-88cf-8f4f783b5a44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fac5e5b-c61c-4ae6-8bc1-e31a453e4b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7df6d1c-4270-44b1-9221-8ae6db0a44e2",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a524ff-50b2-4008-a9f8-aa95a45f3819",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7badcb1d-952e-42ac-958e-5ec94ed4f005"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9454af-5c1f-408f-bed5-0b36bf988c32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33547cb1-15d1-4087-b700-c1f9eccf217e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "955f10ca-5b81-41c5-91cc-a92033dfff79",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8220de3-5e38-4cc9-83c8-9262989b71d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d1f4d7f-d0ed-49bb-a1be-8d053a5e4866"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65485be8-3956-4a65-be47-741e4e0b93d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25135732-2856-4f19-904d-0d93d027dd64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e200c62e-fb51-4892-8b26-eedf70d85603",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5755f6-5e2c-40d3-8848-359e7839de05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42eecf3b-71b7-479b-aef9-5e74a225292c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0465bdf-45cf-45d6-b341-1491b603d8f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ab6a2ad-e709-45de-843a-5e4df4dd70cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36133215-7415-472e-9081-4f56da99c0e7",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a846d4e1-91e1-4ef4-9414-935e23074e42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0717d5ef-d43b-4ba5-9f09-f1b86891b5ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ad5663-5cac-45a2-b59d-93a59d04d6b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85a8769a-411a-45d5-aa56-f07c2b7cfb37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96230d9-da65-4d81-b430-f0b3d96866e0",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "791715ca-73fb-40a4-b413-09c7a88dc13f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b1c5d7b-ccd0-48e9-a721-1356a2eb369c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "531f7ee3-be2f-4c94-9927-c3efc216b036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8f44405-a6bf-44bf-bb91-ae8709a3e4e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10f9b8f0-e974-441d-ba94-65e4a72240e5",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68021101-01c3-461e-ac2d-859381dba32f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b21b9244-dbca-49b4-9ecb-e1f4e28d8746"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d7a7fc-4e06-4106-a8a1-f6bfeef5b068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "494c3bab-147e-497b-ad67-92f4684125cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "787799e3-847d-4969-a99b-de1560ad615b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40dd751c-d453-4f6d-92f5-ff67d603a573",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d08ad4a5-e58c-4aef-a559-05374f31e8bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b1650a-7eae-4b99-8226-9e2cb4f03579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3d538cc-a1d1-4268-92f7-f91b0bcb9d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a53e2f3-dc05-4a03-8174-719744b3653c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "371a2344-d6f2-4398-820d-0c4fc2d9a374",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bb871f2-6dfa-434a-9a7e-cfff8b136a69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99238b23-3c66-49b3-9e3c-cecfce164927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07e6d714-0d7f-4ab3-b2dd-02d396591ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd866f7a-348f-48aa-b485-1cc481f0f91f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a4d0959-ec48-4ba8-99e0-f310f407443b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11e59ad9-a725-4861-82d2-f7d7468af6d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03eee68-285e-4226-9c63-d05f575c556d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c8e6f39-45cf-4a29-a8a7-744c3aaeae41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f87c5fb-cc28-4848-a097-1850cb745cf6",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f1137d0-5364-4c7f-bd5a-5d7f273eac6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9045c756-4c5e-4225-9a7e-914f777cc7c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcb4be3d-0700-4063-9848-a88b23ee49bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61e379f0-57d6-4bfc-9572-e44990df2b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a66223-4553-4975-b9c6-69d1f0f2f73c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d8cb837-c5a3-45f7-a8df-5fbca180d7b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "480758e8-7ee2-4fb9-a09c-cb23f1e4cc28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b526ba22-9b43-4462-9dcc-305a8fb32d37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94a7ddf6-32b5-4e29-95cc-788fe4ca845f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f570613e-9cd3-43fa-9cff-497b1d9ac4c3",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69dfe21b-c51a-404f-8db6-52ecef168951",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51478025-a595-4a4d-bd56-b3c978d084bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d9465fe-2ec7-4033-9f42-a09cae764dc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6777edc-b49d-48f4-8cac-7e6bc89635ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d44ab5-0090-4322-9cbb-07445a948a24",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "874009f4-ca5d-4b83-86aa-2fc5b581e030",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b6df48f-a2c9-44c6-beb3-405d843dc956"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda50a45-8364-4ffc-b36b-d7483dede09d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11eeb8d2-776d-4448-8b3b-e0e0f29b92a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d907d8cc-8444-4587-9944-5dbeb546141f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a27d8bd8-56f7-44f8-87cb-8d9e7e7d4c6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98ea7985-9527-4824-8764-3e6299f6f3f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "920b99a1-999e-4c74-a3e6-e72b815c282e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11ec8fbb-62a7-42c6-b6f7-b9d2025fb76c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b69f84a-023d-4856-9e25-0e9429d4a4c4",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b45acbdc-9522-499b-85d2-be55693c8f2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "393dae51-a22b-483b-8809-0d0130de8bf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee438ff-d6d0-4cf5-b7f7-52e4386aec3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "632673fc-359b-4efd-ba73-14f53691b355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4636e411-a063-4b7b-8768-d2c2be8d68fe",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aaa544e-afcb-43ca-900a-26566e68275b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "796831e5-6e46-4aae-a796-3821946121ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae4db10-5abd-4cde-9c44-13a47775ad77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e49d233-14ee-4607-9320-ddb122165178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f5e36b-1faa-4d74-8290-fb3e444d02ce",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "847865fa-61da-429f-bb18-05c079d928f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43025954-b966-485e-9577-1c44bd56a804"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8893d1c3-b1e4-4505-a1a8-73d913dec1dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97df1a3a-8fd8-49a1-9b24-83d1509422de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc9ed2d1-9a2c-475e-b209-6a9680890cdd",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d7b895c-10bc-45e6-8d4e-32fa2f0ec47a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91a1b6fe-9b90-479a-8593-2d7dbea307a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3c053d-aa60-4987-949b-bd9ee45dcbe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a487df-ddaf-4100-9eba-0f66fef0c531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6eae48a-6080-4a4d-8399-73980d8e47fd",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d84bd9b-33bc-4412-b27b-5f10d9782530",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6be7cf3b-492c-40e2-915d-0b6cc10711a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9df9c4ab-e93a-439c-b2f0-26d4ce17ffde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65345aa0-e85b-4abf-a6b3-816972876959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f2fd9ff-eea6-4c6a-8a2e-10259159e0f1",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f321d37d-2121-4ab2-b7fd-168784f2d60e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90679aec-9404-4926-a69b-6739ed5ea3cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c5ec34-5222-4294-a925-46561a76d3da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a49ef651-d949-469a-8dc5-017f6a8a0150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2dae6a3-891e-4a18-a90a-787e6ac370ed",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90541f1d-5e54-434c-bf4c-8664c7e88313",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3e57aff-54e4-47eb-9e75-e54f7ad6b7f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc908745-d0fe-4443-abee-3b3d72ba0e7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc8acb62-a729-4fc0-8ff2-d661da716c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59bd7a22-5556-45b1-b2dc-1ad89c9be7a2",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265563f5-09b8-459b-9302-3f886e1aee0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6ebc4b2-cade-4c44-9910-79371b1a5218"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4473b6-8134-46bf-9ece-ee365c34989d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31a949e7-a24d-40ea-9d97-41d4809803b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1bdb09a-db16-4983-ab4c-861e55463c4a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02409130-e93c-46e6-8cdc-568b21cc8f6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d92f2c8-df22-4a29-9a60-ec71983787ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a0d863-bd0d-4021-8d00-a204e970f232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33e2f0f7-8efe-49be-8b0c-273721773a4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0505b62-9ecd-42b1-b1ba-44676f32adef",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb1e7f1-a453-4b5c-a28b-95e78877aec1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1b468bb-3328-4b36-b064-e63d7d52a675"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b2eb68-7912-424d-801c-43d148f567ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "943dbd36-d521-42e3-892a-6541f3f1c847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8abf0da-02aa-4756-9df2-42d31b8494bf",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe1e280-7f67-4702-87cd-ed095244f6c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2b8c7b4-f96b-482c-a09a-c8ed40dfcff3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dba34969-bc0a-4618-8dcc-ca0bdbc22951",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e4a6485-a18d-4d8f-9c86-2a7f3a3ada5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53561393-369d-499a-9df9-e9f86113ae98",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3cc23e5-e9e1-419e-b8dd-e618612a9589",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9692c218-9a36-4862-9246-c4aca45af0da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ecf4d2-9033-4c6d-b487-d91655bf8a2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d388bc-91b5-41b4-b25b-7a235bf55816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c87079a-fe39-4806-b9af-8cec65697db1",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf6c51eb-e01f-4bd9-adb5-28510973206d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75aaddac-dd93-4ee6-8d3c-4470fec7b715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56784707-553a-4701-b19b-dab0d1408ed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e02d86f0-5a41-4501-917b-6f9214836583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f659636-e8cf-4b3c-960f-8707cd3607e7",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89402663-0736-49e2-87f7-5995ca1e7695",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31ea4001-6ff8-42d7-b899-fe17bb803aa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "231bfcac-deda-4feb-bc4a-d1d393da2c90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71580091-7de9-47ab-93f3-71d8841759a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4075ccd-9f58-4399-a71e-6fac208d997f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fd4268c-2c1b-4b61-a98e-708d2c204363",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9f9d67f-b39f-4064-bd93-d56e9ba961d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a2a3d5-bb2b-4c90-abac-74cd8a4b8218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57b67193-0fc5-4c9a-8e24-152f02796b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b7e972a-8b74-4cb7-8525-2443b767d3e2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "053341fa-29ae-41e4-aac1-1dff460cfc33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac4428a5-52c7-43b6-a61a-cdbe5b98815c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c99319b-532a-4bc8-ba9e-1c39edd0852d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11dc50fa-26f3-497f-99e0-863ce27f0d0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "107858c1-7e57-4b1b-b0da-d3184d5a2b71",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51fd7df6-14e7-4527-be1c-13ddd5a28dd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "136827a8-2970-4b81-8b96-5c8bc363aa0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e5efc2-ad06-4b55-bd61-5a54ffa16517",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6b6a87b-aeaa-43fb-8788-b430b54e49d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c509a96-38ca-4007-bb41-035232d6c48c",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f44cab4-7323-437a-af1f-8f8e969ec49b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ac928b3-1b2d-4187-8c49-283d98b2857a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "296f2bff-8bfe-40e4-bace-e38c3c1b6be8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7df599b0-489a-4b0c-b505-50952b199e2e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71078ebc-8c26-4b8e-bdd7-9dff5289fe5c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ee95bb8-3896-4e90-8a73-f273005399d0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3778daba-47f1-40b3-a09b-43167b87bc8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "90e9ce53-0115-4a2b-b30a-ffb93f6eeae5"
                    }
                  }
                ]
              },
              {
                "id": "cdb1d5f3-3c5e-4634-9adc-11393ab493e5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2daa580a-d5de-4a55-bcd1-438a55017913",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5406b338-e7fb-43e5-bb97-a681f203ae7e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0c5e6614-7998-4f7a-81c1-0aa5e004aa1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e383327-9e9d-4262-b093-d63c830eb347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "78a495ef-b7be-4cb2-bddd-2149cb4dfcfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe1407b-4021-4a30-af55-c992d97041be",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a726c6b7-47c7-4fc6-bffa-72ccaae9e7bd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9cd7c63c-d906-408f-a1e5-61356082cde2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9806301-cb53-4b18-948a-8915b0ae0ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33c84971-1e3f-423f-beb3-be6b1d33a9f5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16f43878-a5f7-478c-a15b-24a9449e52ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18ee076e-06f0-423e-97ec-85c3e97103ea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a31d2c95-c901-4fa9-a87b-b59f1fb3b6ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69b25fd2-2b6c-44aa-b3f9-c69308668278"
                    }
                  }
                ]
              },
              {
                "id": "63e7e8c1-8e49-428c-b1e7-cc42190b5c29",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "8b75d102-65dd-4e04-9fef-251c27e6fbcb",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "041f23bc-8756-496e-8d31-038f05ec0f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "acbbc120-69f5-4d73-9585-0ee0c5bebba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7faa5967-2d59-4dca-a4cb-fa2142dfea1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51be4861-47a3-4198-84c1-7dbd773e19c9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e4091c5e-de84-45b0-8af7-0c8a5fcd64d7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e541dfc1-164d-475c-8fb5-17c8bd89a409",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed838510-97e7-482c-919e-5fe54b963b35",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "437447ba-990a-4ae0-8114-df2488992abb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "898b51fb-1d15-44fb-b3d5-068721d428f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8a5b805-8867-4421-9b03-97cba408da03"
                    }
                  }
                ]
              },
              {
                "id": "1d4f34d2-7a9d-4e78-bd9f-350853fa99a3",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "051e4ba6-9c9a-4aef-86ec-15fd45748a31",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a7db1e77-17bf-40e3-ad6f-88790304c911"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a3f22b3-dc87-4e3e-a87a-d764954e0a40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e52194d4-c32c-46c5-a91e-4859e8c42e30"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "783fec42-8ef6-41e5-80a8-ce7f4717fa41",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a52dc8a0-f6e5-4361-a140-935dce4e95fe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2b09fd35-f9c1-402e-85b8-204d461abf63",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "df9d686c-a8df-47ce-89e8-4e9c381c8d5f"
            }
          }
        ]
      },
      {
        "id": "d3929064-5b10-47be-8913-b6a9c968939b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "178aaa19-9724-4e47-8f95-4471d87f863f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "90168c85-0efe-4284-8cc0-4e8fdc49be6f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cf30d100-4bba-4517-87bb-ea3a9940325f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0127a987-09cc-4d7e-936c-bb208d6d65a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f8c9d4aa-0f60-45b6-8d02-760cb19d9d91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a19239b-a17d-47b1-a4d7-19689ef8cdbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "64f36b5f-e053-45c2-bc42-1e6e92cee510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e7ff4d6-9ead-4460-b0e4-6dbaa4a15ca9",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672975da-a852-4807-a9d8-cf1d417cc994",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "08bd9dc0-59da-4f15-b7c9-ec08ef9b44d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dee36303-27ae-4312-a24b-0be3ebaec4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "caae06ea-a9a6-4acc-afbb-9cbb88d2d5c1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b35efb0c-14d9-48fe-a74d-7fcb37bb9dd2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2994caa2-311f-4fd8-8b61-776b4001c07a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f26bf1d-dedc-4362-8216-83a34cd185c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e227da5-3781-4a3c-a74a-11ef840ef8d1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2ac1674c-eb34-4575-9006-18a069e0401d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "60e8f962-1386-4c16-a694-2d88925a829d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1d156e46-f14b-40e9-a9ff-5a1d226df320",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e6268b0d-3fe9-4732-930a-e5aacc5cb716"
            }
          }
        ]
      },
      {
        "id": "b065468f-de70-492a-848a-0a47a4d4dad4",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "cfba066a-018b-4baf-bc07-cc821b7a6659",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bc17908d-0022-47b7-847f-4738cdbec614",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "86f73360-43ac-49e7-9743-7c144e87413c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd40b2c1-1410-4103-aa62-8aacb89778a4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "21837ec0-bd92-462d-839c-eca09fb76d5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d49bfe4a-ab78-46fa-afc6-870add872feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7203372f-c019-43fe-88c8-db4fc4a3acfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d3a284-fade-46be-a8ab-d23d4af47b64",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ccc98c-ddd7-4404-a48b-d94ea502becc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "052ad23d-e591-4fb4-bb03-7f6a25f5af1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd63f1a-aa4e-4407-afb7-21b550705640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eca258bf-ec47-420d-a4c1-77c9638e8b62"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b004f8b-e031-4192-80b1-c1dd5939cf77",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c06b835-a62b-4deb-a4f3-e4dd6947887f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "785b3c39-8d48-46b9-8535-3bc0bbff7891",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb9696d3-9a03-4e0c-9d04-da37084e10a3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6c5b330f-6229-4c55-b106-b281aeb82c7e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7b5e57a3-035c-4a2c-9c6b-5a590703f85f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "10fabf44-c913-4fa2-93fd-6ff56a202d7e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "68e5590a-0815-449a-812d-97a828b589f0"
            }
          }
        ]
      },
      {
        "id": "56147075-7063-4668-a916-2fa8043dd91d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ae73ae08-ee6b-4f54-8f53-2b83ab2dd0a6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5e29d9c1-b6ce-41c9-8189-3aa9b9274387",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "36a8bb80-105d-4553-b915-368c0509bda2",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a64c02-2534-4056-9ecf-4830078a0a1e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b523e4a0-9629-4e25-a03a-3ca7ff0055c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ddf4bf-1273-46f7-8680-8626e43617a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2cd223ae-604f-4dae-a1ee-f0e1bc507b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "664eb2d1-f28c-441b-8d30-c12d8ebf81b8",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c8cc60-7527-4188-9126-fb418a75e150",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d688bedd-c58c-43cc-be24-10eebcc4ab76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5177364d-8625-441f-9a98-312db8925bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7ccb6df9-aabc-48ae-b517-d5ad98b61815"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f1f7bf6-0f84-4419-8538-5e32d0fc359c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa835a16-bd27-4f3c-a03d-bb796b8681b1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "adad1f5e-37a1-4bf1-b964-f5cda67a9f72",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc3e5c14-02da-461a-b9c7-aa065926e361"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3312298d-73a6-472e-bdd6-6e5abcc83b2a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "18c05ef1-3e4e-4a72-abde-537a68ee6b1c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "89edd25c-5ab8-4859-a6cd-60c639bc3cc8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9820cb7d-6412-40e2-a73b-9a95439c8d2e"
            }
          }
        ]
      },
      {
        "id": "c9925793-b6f7-46f6-87ed-2565153912a8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "78a5eb86-ab5a-4c5c-b2bb-947b29b80bf6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "90437899-167e-4c34-8723-292fcdc0d1f0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "f1ea9b4f-8f83-43e6-805d-d0aa0931cf97",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3d8a0475-c709-4383-9ea9-f8fa8d213fb4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7ada936b-7aeb-4398-adb8-d2760683da12",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 89.77480916030534,
      "responseMin": 3,
      "responseMax": 1312,
      "responseSd": 185.54444040558477,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1672274326737,
      "completed": 1672274361604
    },
    "executions": [
      {
        "id": "bb6af152-f6cd-49e6-8f14-2084a34a6bcd",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8c6d1163-622c-4542-8651-f106caa60333",
          "httpRequestId": "b40d2134-97b5-4871-ad18-74f4a309d28e"
        },
        "item": {
          "id": "bb6af152-f6cd-49e6-8f14-2084a34a6bcd",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "29ffd7b9-38ba-4781-8047-2b556801da5b",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 0
        }
      },
      {
        "id": "c9aaa014-4946-4b02-8076-8a8874fa8d96",
        "cursor": {
          "ref": "a24b265e-5751-491e-96e1-4df94a906ca8",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "347c5af2-2c3d-4330-b9ce-772ac5dfb048"
        },
        "item": {
          "id": "c9aaa014-4946-4b02-8076-8a8874fa8d96",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "845d2555-a92d-4c66-ad4e-9ed8e39350be",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "c6ec2e4e-05b6-437e-9417-8955263715ca",
        "cursor": {
          "ref": "d21b849e-06c7-476d-a246-94b696b81b5d",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "65ca8a2c-7eeb-47f4-ab22-f2ef76bfee7e"
        },
        "item": {
          "id": "c6ec2e4e-05b6-437e-9417-8955263715ca",
          "name": "did_json"
        },
        "response": {
          "id": "9fa55b52-d1f7-4fff-8e2c-2cbc41323b19",
          "status": "OK",
          "code": 200,
          "responseTime": 241,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7b63f17-4594-4aaf-9778-c462c5d878f7",
        "cursor": {
          "ref": "1879b5a9-6e9a-4a57-bf2d-e83f2bc450db",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f328c2af-cea7-4158-ab66-f73ad52848d9"
        },
        "item": {
          "id": "a7b63f17-4594-4aaf-9778-c462c5d878f7",
          "name": "did:invalid"
        },
        "response": {
          "id": "5245a2e7-e1d9-4882-9ae0-ba8d2603538a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7b63f17-4594-4aaf-9778-c462c5d878f7",
        "cursor": {
          "ref": "1879b5a9-6e9a-4a57-bf2d-e83f2bc450db",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f328c2af-cea7-4158-ab66-f73ad52848d9"
        },
        "item": {
          "id": "a7b63f17-4594-4aaf-9778-c462c5d878f7",
          "name": "did:invalid"
        },
        "response": {
          "id": "5245a2e7-e1d9-4882-9ae0-ba8d2603538a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679895a6-4012-42f6-a78e-3f0013770362",
        "cursor": {
          "ref": "6cfab211-957d-42a4-9fab-3cfaa3a94989",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fa1c66fe-7912-4aab-9b07-21b88a12cd43"
        },
        "item": {
          "id": "679895a6-4012-42f6-a78e-3f0013770362",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "94b1e1cc-bf0a-4a86-b9ba-0b3e4b8104fa",
          "status": "Not Found",
          "code": 404,
          "responseTime": 41,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aac482b-363a-4d2f-8979-98e51ed07928",
        "cursor": {
          "ref": "34c6350e-4935-4379-ab6e-e89d24d7e9db",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5eb7a363-7d90-43a1-8c34-d8dde92037d8"
        },
        "item": {
          "id": "2aac482b-363a-4d2f-8979-98e51ed07928",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "aa65c109-bfe4-40f1-82d8-0e11431b05a4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94aab654-9e78-4d26-90bd-ed0c45537724",
        "cursor": {
          "ref": "e3ef9808-f236-44da-9f31-136f9882bad7",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "dc3b872e-b866-4db7-bf8a-d317c6826b1c"
        },
        "item": {
          "id": "94aab654-9e78-4d26-90bd-ed0c45537724",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "49644541-4999-444c-bb82-7626163c7efc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f1ec93e-1bb2-4be9-a9d6-e48c913aa87e",
        "cursor": {
          "ref": "5c152235-4f74-4be4-9e83-0cd140b1f613",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "85fd3a99-3e5a-4b8f-a0a7-1ab014b3d45f"
        },
        "item": {
          "id": "0f1ec93e-1bb2-4be9-a9d6-e48c913aa87e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "e344a6af-7200-41a8-a3a3-ca6327009058",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f1ec93e-1bb2-4be9-a9d6-e48c913aa87e",
        "cursor": {
          "ref": "5c152235-4f74-4be4-9e83-0cd140b1f613",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "85fd3a99-3e5a-4b8f-a0a7-1ab014b3d45f"
        },
        "item": {
          "id": "0f1ec93e-1bb2-4be9-a9d6-e48c913aa87e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "e344a6af-7200-41a8-a3a3-ca6327009058",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb71d372-c4b1-476c-b4f8-e9f3d0b602cb",
        "cursor": {
          "ref": "8d35f5d8-62b8-4186-8edf-e6136570d610",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e3a20ec2-d9bb-49b8-ad28-617337619506"
        },
        "item": {
          "id": "cb71d372-c4b1-476c-b4f8-e9f3d0b602cb",
          "name": "identifiers"
        },
        "response": {
          "id": "2f3979ac-c611-4693-893c-1566c8af6194",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40085603-ce55-4b3f-b9bb-fb2c6f4e0a13",
        "cursor": {
          "ref": "b8c64aba-54b8-4eef-b387-dbc1275adcdc",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "14a9b03f-99c0-456a-8ca1-cb5fc720ea47"
        },
        "item": {
          "id": "40085603-ce55-4b3f-b9bb-fb2c6f4e0a13",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0ffe3ae1-a417-47d3-aa6a-fa887e998194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40085603-ce55-4b3f-b9bb-fb2c6f4e0a13",
        "cursor": {
          "ref": "b8c64aba-54b8-4eef-b387-dbc1275adcdc",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "14a9b03f-99c0-456a-8ca1-cb5fc720ea47"
        },
        "item": {
          "id": "40085603-ce55-4b3f-b9bb-fb2c6f4e0a13",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0ffe3ae1-a417-47d3-aa6a-fa887e998194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e7b694-d0f0-4207-8388-3859e3ac7f56",
        "cursor": {
          "ref": "f4779daf-9df8-4f66-a623-f8d4b6fe6c39",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c9b404ce-4857-46e8-b4a0-e6bbd52efb81"
        },
        "item": {
          "id": "c7e7b694-d0f0-4207-8388-3859e3ac7f56",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a720200d-0336-4808-914f-2af232dc8f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c941f09-66c4-4a10-8a8b-519d5678d632",
        "cursor": {
          "ref": "a3218afd-f977-4cfa-908c-30d60e67bf61",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9f37b1c8-5f19-4827-82aa-029d96bd49b9"
        },
        "item": {
          "id": "2c941f09-66c4-4a10-8a8b-519d5678d632",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "630a7b54-204c-4cb5-a82b-f788cb0e693f",
          "status": "Created",
          "code": 201,
          "responseTime": 659,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "3c06f58a-4794-4f00-ba30-ce751db0c996",
        "cursor": {
          "ref": "0a727b7d-bc4c-4b2e-9f79-3fef50c7bfde",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c0ff693e-85a4-4cb0-a377-fd269089012c"
        },
        "item": {
          "id": "3c06f58a-4794-4f00-ba30-ce751db0c996",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "dc36e342-223f-4f74-9cdb-ee73e92156d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d449d5f-5b1a-4bb4-9622-f2dff26268ab",
        "cursor": {
          "ref": "0dde8bf4-f332-4617-9ac3-ca1d6e5b2749",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "42511e0d-0060-47d5-abab-b1b4d801008d"
        },
        "item": {
          "id": "2d449d5f-5b1a-4bb4-9622-f2dff26268ab",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d130abe5-48ca-45a8-b3e6-36710ec5f012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cfcf960-3a2b-4229-b71e-6003dc7dd05a",
        "cursor": {
          "ref": "db6018b2-8620-4036-ae40-4e837920e00c",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e711092c-149c-448c-a821-c8d50bd12211"
        },
        "item": {
          "id": "6cfcf960-3a2b-4229-b71e-6003dc7dd05a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8e17f5b4-307a-49e8-8ffb-d1e83d280bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bcbc9d5-cc82-4d69-8782-71d862db4783",
        "cursor": {
          "ref": "391cde88-7e83-45b8-a86c-573a3b6bc9af",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "e2ba0ca3-0580-4e58-a235-4fe468382442"
        },
        "item": {
          "id": "2bcbc9d5-cc82-4d69-8782-71d862db4783",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "16609572-7776-430a-a101-9566bdae8d72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27101050-dd6e-4718-bf6b-41ed1d31a72f",
        "cursor": {
          "ref": "f6a0c829-5979-40ce-9b1a-17dbee483bb4",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3623c578-b2a1-4262-8bba-f140856217bf"
        },
        "item": {
          "id": "27101050-dd6e-4718-bf6b-41ed1d31a72f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "50094016-b2f7-4a6e-94f1-aae5643dae7d",
          "status": "Created",
          "code": 201,
          "responseTime": 538,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "5646fb9f-33bc-4d65-a1f4-b35f58e7eb54",
        "cursor": {
          "ref": "deffd85d-7aa8-4e4e-b42f-a9d683fc28fa",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b59224ed-b8b8-4276-bd7a-aa6ef838e33b"
        },
        "item": {
          "id": "5646fb9f-33bc-4d65-a1f4-b35f58e7eb54",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "14f80355-461e-4131-b828-19b2c30c68e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f37c4bab-1c44-414f-bcc8-4690f3147c16",
        "cursor": {
          "ref": "91e17bb8-3032-439a-ac39-4c15d205b7e2",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3847e804-433d-4aaf-acb1-a597a1cc256a"
        },
        "item": {
          "id": "f37c4bab-1c44-414f-bcc8-4690f3147c16",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b1cf4805-9676-4b6b-8a4a-2141ef4cd1d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8caf5dba-6104-435c-96d5-e073a0b94adb",
        "cursor": {
          "ref": "7fdb8fdb-eaa1-4462-a53a-779ecec44312",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6e7a4bdb-0ac9-4846-a7af-897454c96dbc"
        },
        "item": {
          "id": "8caf5dba-6104-435c-96d5-e073a0b94adb",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c3b221be-60bd-430a-9e11-75a9644610e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a18a214-0d24-4b90-8e05-f2ea1b2b579c",
        "cursor": {
          "ref": "cea6192f-a400-42fa-8032-398b26f29e24",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6def1291-9d57-444a-98c1-22a95dfbeb4b"
        },
        "item": {
          "id": "3a18a214-0d24-4b90-8e05-f2ea1b2b579c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "57f36c37-bb5e-4c41-b0dc-6f7245496908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e08b12f-bda9-4566-bfb5-10b93400902a",
        "cursor": {
          "ref": "87b73054-14ef-434e-bcd4-367f43bdb45d",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6ed86612-9191-4471-8c8b-49a9fa44a87d"
        },
        "item": {
          "id": "7e08b12f-bda9-4566-bfb5-10b93400902a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "4213a987-d495-4666-978b-7357936413d9",
          "status": "Created",
          "code": 201,
          "responseTime": 517,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "6ca8917d-0577-4bbe-8202-0a90e84427fb",
        "cursor": {
          "ref": "de3276f8-1dea-405d-b723-eff09ff0703d",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "cc2a164e-d72f-406f-8b06-dd96c27d7f63"
        },
        "item": {
          "id": "6ca8917d-0577-4bbe-8202-0a90e84427fb",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "68d804b5-dd34-438d-aba6-db4769c787ed",
          "status": "Created",
          "code": 201,
          "responseTime": 1312,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "5fcd9e6b-7234-4caa-bf9b-704089526c06",
        "cursor": {
          "ref": "6a83071b-c984-4ec0-b235-cc89d5bbf873",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e3fdd413-d945-4343-9d58-392f9043ba02"
        },
        "item": {
          "id": "5fcd9e6b-7234-4caa-bf9b-704089526c06",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "49c5dbd8-9555-47ca-877a-23c255f507e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adbede54-d984-4090-923d-ee456af17d40",
        "cursor": {
          "ref": "d7e06b36-04a7-4925-a2ce-1df16006d2fc",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d5431a3b-ed4b-40b5-8b97-839aa92ac51a"
        },
        "item": {
          "id": "adbede54-d984-4090-923d-ee456af17d40",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d47eb80c-7753-468b-bf1d-3950f71a5c66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bceefc2-bc93-432c-b128-a52c95384e92",
        "cursor": {
          "ref": "82979f3e-a504-476c-98d7-2e0a20d197dd",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "97cd1817-14ca-4a26-93b6-1b84b3838fe9"
        },
        "item": {
          "id": "8bceefc2-bc93-432c-b128-a52c95384e92",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "cbd90609-76ca-41d6-b5f8-02f1cd2ff033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c648b64f-8103-4eec-bb67-c662643be544",
        "cursor": {
          "ref": "0847b7ea-d592-43c1-acbd-d1490c672eb1",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "393d875b-d637-440b-9923-327572aac474"
        },
        "item": {
          "id": "c648b64f-8103-4eec-bb67-c662643be544",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a4ed5421-7eda-4a3d-8d8b-87d437741fd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbd35306-f0e5-45af-a0c8-f6a87a5d76d8",
        "cursor": {
          "ref": "87b64309-6778-4a59-8eb7-1633b84d9bbe",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "69cfcdad-c32c-40eb-a96a-cdebf1476ce7"
        },
        "item": {
          "id": "dbd35306-f0e5-45af-a0c8-f6a87a5d76d8",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0f5f1f61-d8c7-46e7-9f76-e6a595b8c89d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6fe75ef-c0f0-4c0c-a88f-f356a0203f2e",
        "cursor": {
          "ref": "c02e6841-e4ac-4f4f-aa1f-32cd78888342",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "695c6ebd-ed2a-41e7-a19c-a3d13136959b"
        },
        "item": {
          "id": "e6fe75ef-c0f0-4c0c-a88f-f356a0203f2e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ad10d56f-daf5-4006-a20e-d5bf011b4fd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "677914d7-f3fc-4533-86aa-ad52394c2972",
        "cursor": {
          "ref": "a95a5754-58af-4be0-8cf8-e31209dc9a2b",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3db2d15e-d9f5-41b8-ba65-4f028359dbb2"
        },
        "item": {
          "id": "677914d7-f3fc-4533-86aa-ad52394c2972",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b0a2670f-50fb-4826-8564-4d444790387c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a31f1ac4-9bd8-4f02-9f54-5965b424100f",
        "cursor": {
          "ref": "ca29faba-b4ba-45be-99da-40e86446e3d7",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "742fea41-233c-4248-aa13-8460d66ad8e5"
        },
        "item": {
          "id": "a31f1ac4-9bd8-4f02-9f54-5965b424100f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e5070dfc-7071-4cab-97a0-67e1962623d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c268d41d-6cfe-4c19-b5a9-0c86dd3804c0",
        "cursor": {
          "ref": "b819839e-85d4-47e8-bffa-198bb1d8d905",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "319fda5b-d3fd-4706-b00f-80231d0c66fc"
        },
        "item": {
          "id": "c268d41d-6cfe-4c19-b5a9-0c86dd3804c0",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "3a18b3fd-7747-4412-b994-e1c3a2a92abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065be8fb-5a37-4e25-bc74-e4bf5f875ffd",
        "cursor": {
          "ref": "d9ab7477-4200-491f-a182-909219b23258",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "47ab723b-fc90-47be-9484-e6ee33abf687"
        },
        "item": {
          "id": "065be8fb-5a37-4e25-bc74-e4bf5f875ffd",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "18f63791-634a-4384-b227-8d9d08dec91c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "affa7fe3-5f98-4f11-b7ff-31481aa7a02c",
        "cursor": {
          "ref": "2a8f1062-ef53-493c-a480-d501aa955aeb",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b677489c-6452-4aab-82c3-3703f6808016"
        },
        "item": {
          "id": "affa7fe3-5f98-4f11-b7ff-31481aa7a02c",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "50004a6b-83cf-4f13-a1a1-92c810e48166",
          "status": "Created",
          "code": 201,
          "responseTime": 692,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "0e7f0adc-b19e-4641-b06f-0e882bd64f95",
        "cursor": {
          "ref": "9686f27e-5d41-4e9f-9ac5-a6e6231865cc",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "85d8654b-babc-4ff8-a584-31dd5b09e4a4"
        },
        "item": {
          "id": "0e7f0adc-b19e-4641-b06f-0e882bd64f95",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "35075724-ea80-4f05-8e97-43fa4b05d176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625dbafe-bd3c-4389-99af-79741741f40f",
        "cursor": {
          "ref": "bd8df424-0e31-433a-9d93-deb6f7827b50",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "01f61742-6500-413e-89d0-303aba25ae9b"
        },
        "item": {
          "id": "625dbafe-bd3c-4389-99af-79741741f40f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ef242322-8a25-4036-9633-60722fd08777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "810ecfef-21b0-42d5-a482-50e91f91ea51",
        "cursor": {
          "ref": "254e8766-5308-489a-be66-34eef50ba434",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "02b4ce1b-382e-4d3f-b543-0796bdc5a1b2"
        },
        "item": {
          "id": "810ecfef-21b0-42d5-a482-50e91f91ea51",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0a1bccb3-8e9d-4c81-9c56-a298ecf240fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55f18432-e1d5-49c4-8718-e1b2f8447971",
        "cursor": {
          "ref": "410d38c3-c62c-4979-93c8-4955c2978541",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "0467468c-a22f-42fb-94de-2ff442af665f"
        },
        "item": {
          "id": "55f18432-e1d5-49c4-8718-e1b2f8447971",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0ae5f5ce-6226-4a04-b21f-3bea744a4e1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbccaece-b106-4e18-8c15-4c07a0a41835",
        "cursor": {
          "ref": "e40cf0ad-164b-4c60-9c11-7357e5e717aa",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "59cd0287-189c-45b0-8c37-05c5300e411c"
        },
        "item": {
          "id": "bbccaece-b106-4e18-8c15-4c07a0a41835",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "bf9e0c57-e293-49c6-bdbf-a5c57da40330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5a9ddd-3a4b-4ed4-9d0f-f95e28e2de0a",
        "cursor": {
          "ref": "05964c52-f530-48b8-850b-92199b87b8eb",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "97a5429f-b844-4795-9cd7-06a6d804c3f6"
        },
        "item": {
          "id": "5d5a9ddd-3a4b-4ed4-9d0f-f95e28e2de0a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "626101ec-2022-4f26-ae9e-78549972beed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66eb7706-f72a-4078-aa35-c174720480fd",
        "cursor": {
          "ref": "27625c9f-53df-4c2c-aadc-5de20eec85ea",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "21e6c4f6-98de-46a8-a30a-1f51959c1ff7"
        },
        "item": {
          "id": "66eb7706-f72a-4078-aa35-c174720480fd",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6843d3d4-5aaa-423f-ba58-517fe5cabf26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc60c53-8f6a-4d0e-9351-1d757c81f008",
        "cursor": {
          "ref": "5015f73d-a3ed-4cfe-8774-5b2c60ca4a20",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "97bc2f46-c998-41cb-b720-c9792f4c6c27"
        },
        "item": {
          "id": "cbc60c53-8f6a-4d0e-9351-1d757c81f008",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b5ba6908-704b-46f1-bfc4-a7d700706fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc6deaed-d225-4c9f-9c37-aa0ba1b03fe9",
        "cursor": {
          "ref": "fb86a149-e692-4c2c-a37f-cea2e7e90de3",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "eabebe00-db3c-429d-97b9-c818c70991a9"
        },
        "item": {
          "id": "dc6deaed-d225-4c9f-9c37-aa0ba1b03fe9",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e8e8a75a-bc1e-4012-9c26-8aa39609ec4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d0a2bc5-d9ad-48a7-b346-959a4dc0a659",
        "cursor": {
          "ref": "3296bd27-ac5d-4273-832d-aaf808f56217",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6e92299b-d759-41b3-9804-a2f876e17dd2"
        },
        "item": {
          "id": "9d0a2bc5-d9ad-48a7-b346-959a4dc0a659",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e30d7b84-b2b5-43de-b734-a716466d84ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdac6f5a-ac1e-4d09-9f56-3ccef5975d90",
        "cursor": {
          "ref": "8b030266-f7bf-47bf-a8db-3469a34e6e72",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e94ca168-7c1c-4d86-8105-064f84b0caae"
        },
        "item": {
          "id": "fdac6f5a-ac1e-4d09-9f56-3ccef5975d90",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "96f57e59-f8bf-4ef2-940d-a238c87c7302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d361b91d-451b-4558-aa2f-7906961d8808",
        "cursor": {
          "ref": "e40bca8a-f7c9-4ad2-aecd-dd5a14a2f36b",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "09def44d-f457-4db6-8c52-ec0fbdf7602f"
        },
        "item": {
          "id": "d361b91d-451b-4558-aa2f-7906961d8808",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d8f651c6-8b95-4793-928e-d9fa9efdf50d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbcf21cf-5d35-433e-9e14-1585f04dfec2",
        "cursor": {
          "ref": "8b92a65b-2d95-47f8-9d21-a93a71995cf9",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2983b541-d835-4571-9555-d173314f5fb0"
        },
        "item": {
          "id": "bbcf21cf-5d35-433e-9e14-1585f04dfec2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a184ff59-aac9-416e-ab3f-e37055459f7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 322,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "72cbb5b9-f621-4be2-838c-cbd3a54dcb4c",
        "cursor": {
          "ref": "4fdfeeaa-c169-4621-af1d-3d3f5758a558",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "4ca5acdd-75de-4f83-a054-882b1cb97b0f"
        },
        "item": {
          "id": "72cbb5b9-f621-4be2-838c-cbd3a54dcb4c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "af89bcb6-5668-48ce-9ef4-98a90930859d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e91a6203-5049-489f-9281-c1089e09dc4a",
        "cursor": {
          "ref": "d3bc2b19-aa7b-4ac4-af17-80316a99727a",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "116ffd4d-0017-4a3a-aed1-f8471dfb7a11"
        },
        "item": {
          "id": "e91a6203-5049-489f-9281-c1089e09dc4a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e7e189c5-0f50-49e3-913e-5aca9784b652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a8616ab-e137-4c21-b4a2-22f6954544b4",
        "cursor": {
          "ref": "065ae3a4-9feb-4389-bacd-2ee733c025da",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "4c837035-598c-4849-87fe-73aa02e53fb3"
        },
        "item": {
          "id": "0a8616ab-e137-4c21-b4a2-22f6954544b4",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2d24966d-4ef4-44d1-8908-407f396cf2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5f74929-7953-4188-8bcd-a2f2f50e7ea8",
        "cursor": {
          "ref": "4f9fd359-34cc-4a44-acfb-2355d130714a",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "632e94d5-56f2-4eb1-b507-ce319957f7ad"
        },
        "item": {
          "id": "c5f74929-7953-4188-8bcd-a2f2f50e7ea8",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "23f93236-463e-490c-99b4-df5ee2ad4abe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6769bdc5-be68-478b-96c7-c2ad22bd17bb",
        "cursor": {
          "ref": "de0e6932-b1ed-425d-9cb3-52295be9f2f6",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "52e33937-81ef-48c8-a33c-c6e41d5a7f2e"
        },
        "item": {
          "id": "6769bdc5-be68-478b-96c7-c2ad22bd17bb",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b0ffa299-4b86-4f11-81e2-19704e30b146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de5119a9-d447-49ce-a78b-b4e21d2bafec",
        "cursor": {
          "ref": "fbad6919-e943-409d-ad5e-a55fb1d028fe",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "7d14ee4b-fffc-433d-b2d7-452be245bcbe"
        },
        "item": {
          "id": "de5119a9-d447-49ce-a78b-b4e21d2bafec",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "038b1b21-d573-4f79-b25e-7e3d596d6621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69218310-2991-437d-a9b2-4bc03933600f",
        "cursor": {
          "ref": "92a2f0ad-30f7-4ae2-b517-49b7c09993fa",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b7cb08ad-2754-462f-af2b-40b16d84ed60"
        },
        "item": {
          "id": "69218310-2991-437d-a9b2-4bc03933600f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1866c154-4198-43e0-be17-db20036756c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 322,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "6d7852e9-5c3d-4c00-941e-27007c3757f2",
        "cursor": {
          "ref": "5ce187bd-131d-40b7-8b17-94bbd74cdc07",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b6c2a9ff-3b5c-47bd-8d93-d5200cd7e873"
        },
        "item": {
          "id": "6d7852e9-5c3d-4c00-941e-27007c3757f2",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1fda863c-00ca-4865-88c1-26529cfb3020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6d11770-9d32-4fa4-a5ae-f35904107bbd",
        "cursor": {
          "ref": "08db4c95-40c0-4355-91c7-88b6da47b2df",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1adb8989-0e5d-40a4-9fb1-f9c3ab5c5633"
        },
        "item": {
          "id": "e6d11770-9d32-4fa4-a5ae-f35904107bbd",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f879f80d-b891-4195-bf79-036ebf6e9f07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a0d3b09-1e22-42d2-a421-35f9cd1b6978",
        "cursor": {
          "ref": "35e1282f-71a8-4ca1-83cf-1b524c520f81",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "14c331aa-65e6-4cd2-a25c-a83ec0c66323"
        },
        "item": {
          "id": "1a0d3b09-1e22-42d2-a421-35f9cd1b6978",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "fe6e66bb-a11e-458d-b755-41adb8ad16b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1109c9f0-85b0-416d-a6f2-47c885cb5a2a",
        "cursor": {
          "ref": "888f43d7-a120-415b-8b1e-efb51b26d564",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b032d45d-e75b-4954-9fd2-91b95cc85346"
        },
        "item": {
          "id": "1109c9f0-85b0-416d-a6f2-47c885cb5a2a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "5bb75db9-1e26-4ec0-b4c2-2c88aadec4b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "debcd08d-1be9-4d41-be09-314b48c4ff16",
        "cursor": {
          "ref": "3f8fe4ff-af5f-48fe-ad28-ecc4b8e6f93c",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "32c24570-24d3-448a-9bbc-d071f09d5556"
        },
        "item": {
          "id": "debcd08d-1be9-4d41-be09-314b48c4ff16",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5bb205ba-a891-4dc4-a955-8936f1a890a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "211bb199-21f5-41f0-9ece-a207ffa50c1d",
        "cursor": {
          "ref": "69f77942-c244-45de-a0a2-6262fca3dbb7",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "7ea47baa-a9a3-4cd2-ac8b-56de7a5f6fc0"
        },
        "item": {
          "id": "211bb199-21f5-41f0-9ece-a207ffa50c1d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b7660ea2-1439-4db1-8795-981aff6ad8ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b70930f-ab79-4e95-8c88-ae212a8e6086",
        "cursor": {
          "ref": "9009e1de-1108-4233-bab6-4de1e069182c",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f0c6bcd7-6f16-4c5e-85dc-6523643b3e6e"
        },
        "item": {
          "id": "6b70930f-ab79-4e95-8c88-ae212a8e6086",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "fe70aff7-e7dc-4ddd-8700-d800adde8ee2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1345282a-022e-4722-a418-867f535defd7",
        "cursor": {
          "ref": "88299078-07d0-4295-85ca-f752d9985b81",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5d601d85-f5bd-4e17-8527-12458a65497c"
        },
        "item": {
          "id": "1345282a-022e-4722-a418-867f535defd7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "40b5de7e-08de-4cc8-b13c-88f758a66949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d19771e-bd47-4bc3-8ab6-cb8a89c91cd4",
        "cursor": {
          "ref": "5c55b506-7f6b-494d-a697-0379828e1ee2",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "26b01d6c-e570-42e6-b0d0-bc0dbd9adf45"
        },
        "item": {
          "id": "2d19771e-bd47-4bc3-8ab6-cb8a89c91cd4",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "830ccf27-3cb7-4a44-9c5b-c7a4f3d725fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51949064-b7a7-4190-bf7f-9541927551c9",
        "cursor": {
          "ref": "e78c954f-bde5-497b-9402-650a47234c88",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "8d893462-e9ca-41a7-9cde-96d2b1ed4f41"
        },
        "item": {
          "id": "51949064-b7a7-4190-bf7f-9541927551c9",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "17644fa0-5fa3-4237-b099-e863a031a3ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd13863c-7b6b-4b7e-bab1-74375d46ec3e",
        "cursor": {
          "ref": "211f442c-6e9b-4db0-b43a-21d03bf222af",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9122f355-244d-4fce-bbb3-9bdc4e366888"
        },
        "item": {
          "id": "dd13863c-7b6b-4b7e-bab1-74375d46ec3e",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "5cde78a1-29e8-4266-8a67-25e2a6a715b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca6e77db-0bf3-4f7e-aa82-563b53782343",
        "cursor": {
          "ref": "9eebe326-5528-4713-8d72-5c28c04a0ce5",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "47d68b48-08a2-49a5-8a4b-039b0717706e"
        },
        "item": {
          "id": "ca6e77db-0bf3-4f7e-aa82-563b53782343",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6c191d03-9a92-4ebd-afef-f38cf3be9d61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77519873-c5cb-44d4-8585-e8125f381feb",
        "cursor": {
          "ref": "d2e02871-5f74-44e7-8203-44b383efe6c0",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f9511373-37c3-42f7-8f24-520d00fca070"
        },
        "item": {
          "id": "77519873-c5cb-44d4-8585-e8125f381feb",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "17ba4a35-b3f7-45ad-8bd2-033a6a61aa35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16912168-2ea5-40c0-98c3-0cb63d1a6458",
        "cursor": {
          "ref": "84478898-8c9b-4b2c-9d7c-e1f78b5757fb",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9dc15bfe-611d-49a3-b718-73a68f363b1f"
        },
        "item": {
          "id": "16912168-2ea5-40c0-98c3-0cb63d1a6458",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "acfcde36-5381-46c4-9484-5795153c5260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a0a62fd-8ba1-4557-8ce7-d7512c229355",
        "cursor": {
          "ref": "bb0fa7f5-f902-4089-8ca7-6a952de31987",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3687028a-8be9-4e83-995a-356b6a9f7929"
        },
        "item": {
          "id": "8a0a62fd-8ba1-4557-8ce7-d7512c229355",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3d8c89ed-2421-427b-b0ee-3a1552b68db9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0430f9-86f4-4476-9ef2-1cd8797d8f99",
        "cursor": {
          "ref": "1d2e3207-cd77-496c-97e9-7cedae6c5bce",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ce929c0c-a6eb-4b43-aa77-619d6905f130"
        },
        "item": {
          "id": "8c0430f9-86f4-4476-9ef2-1cd8797d8f99",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "7f61e0fe-97de-4455-996f-e3674b883b7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e8a1bd-b18b-4267-8942-012f4959fe89",
        "cursor": {
          "ref": "5a28ddcb-10ff-4f2e-8d8f-48b2139a6f56",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "fc8d5aa1-c9a8-415c-a87d-07f3816a4680"
        },
        "item": {
          "id": "b6e8a1bd-b18b-4267-8942-012f4959fe89",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "673e622b-e075-4c84-88e1-37da380b9eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "092b974d-577a-4961-aa6b-a2d73da1b074",
        "cursor": {
          "ref": "7227008b-56b4-4f89-8c64-7e4468942738",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "88721e46-ed19-46f1-929e-c1c28940acc6"
        },
        "item": {
          "id": "092b974d-577a-4961-aa6b-a2d73da1b074",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0bf5cc4d-e37d-4ed5-8db0-099bcff4f699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1eb46aa-ea14-4789-979d-65b9b2ac2bbc",
        "cursor": {
          "ref": "dff7942b-2c92-4888-aeab-2610234640c3",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "c4e507c4-93b5-45d8-a60d-1ca7cb38f6f7"
        },
        "item": {
          "id": "f1eb46aa-ea14-4789-979d-65b9b2ac2bbc",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "3d088098-260c-44ef-95ad-a85d53966a5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "685ba62b-dab7-4f7f-a1e3-0a470e00e466",
        "cursor": {
          "ref": "a25f5cc8-82af-4a58-a79f-72bafe383d26",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a113c659-24b7-47c8-9e65-3c04cec3e2f5"
        },
        "item": {
          "id": "685ba62b-dab7-4f7f-a1e3-0a470e00e466",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "a51f0fd2-672e-4130-8787-dfa9e63274cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "061baa7a-0b77-4405-a7a8-edc637d27ffa",
        "cursor": {
          "ref": "d5926db9-a8df-47c9-9762-384217f7bb88",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0d3e291f-4fde-4368-aae0-c6ecf993cc4e"
        },
        "item": {
          "id": "061baa7a-0b77-4405-a7a8-edc637d27ffa",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "239e9273-45b8-4bbb-8f02-4c2a0a87e638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1659534-d84d-4ef2-a300-cf622013f2af",
        "cursor": {
          "ref": "c4979879-0b8c-404d-9b3d-ac8466fcb472",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "01cfa462-c03f-44ca-8f2b-9cc32cb59d56"
        },
        "item": {
          "id": "b1659534-d84d-4ef2-a300-cf622013f2af",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ed3fefc6-2326-46b4-86e7-1d074c0193a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa2909fc-8820-4397-ac20-41eca239a185",
        "cursor": {
          "ref": "b16b675e-fdc7-48e5-816d-4576ffcbf8b4",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "91e06f32-3829-46ae-8de1-6626ad69b4a6"
        },
        "item": {
          "id": "fa2909fc-8820-4397-ac20-41eca239a185",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f932bc9d-b107-432b-b3ad-c6674d1aaa36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f107706-960d-4e05-9edc-3c21c9f19ab2",
        "cursor": {
          "ref": "0fcde148-e4f1-4d87-bd2b-dfa49655f8e0",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "932dc05b-51cf-4a41-a041-c102b13ce2cb"
        },
        "item": {
          "id": "9f107706-960d-4e05-9edc-3c21c9f19ab2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "58e72ad4-835b-4c0f-9ce4-bc06f20ea009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b16ea60e-3887-49c2-973f-53347b57a89a",
        "cursor": {
          "ref": "e767ea53-f6c4-4ac0-8344-dc59df326ef1",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "47ac324b-453a-4c33-a5c3-0ce07a6dfea5"
        },
        "item": {
          "id": "b16ea60e-3887-49c2-973f-53347b57a89a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "094284d7-a24c-49a6-9190-2d47635d93d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7462639-ec61-4624-ba49-d469c2cf0c45",
        "cursor": {
          "ref": "0257be76-68d0-461e-8afe-712503cf0942",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "54e8c426-36e7-44c6-bcf2-082b7b0ae246"
        },
        "item": {
          "id": "f7462639-ec61-4624-ba49-d469c2cf0c45",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "88503652-4f5f-4768-8775-33f17f27a1c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df1cfb61-12ac-40eb-ac3f-9a6bbd661b3f",
        "cursor": {
          "ref": "268e891e-fadf-413c-b29d-0bcd41b5d469",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b39c5c0a-784b-41c9-a516-4e5bee5224ba"
        },
        "item": {
          "id": "df1cfb61-12ac-40eb-ac3f-9a6bbd661b3f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "4a26d68e-b789-4953-8f8a-0952028f74a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc11dc09-5329-43ad-9fd9-b6adade2d369",
        "cursor": {
          "ref": "46baf104-8211-40e6-bdad-8b90175b2db8",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "3fdb7f0b-ee05-4254-9d1c-320053be26f7"
        },
        "item": {
          "id": "fc11dc09-5329-43ad-9fd9-b6adade2d369",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "1b9372f7-1d3d-4dad-a5f8-a205ebb23346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a877af04-667b-443f-b06f-06ff51dddf44",
        "cursor": {
          "ref": "53411771-35a7-4fd1-b87c-9989b55d7a78",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "948747a3-cc30-4026-9ce8-c0a3f40a469b"
        },
        "item": {
          "id": "a877af04-667b-443f-b06f-06ff51dddf44",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "eb82fce9-93ba-432a-ba5b-ac5476f67eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2021e6-2912-4db8-bb4a-c458d738335d",
        "cursor": {
          "ref": "84f71f15-610a-419c-a0a7-44704056a1a7",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "04776c35-64cd-462b-9ce9-936867256dda"
        },
        "item": {
          "id": "ca2021e6-2912-4db8-bb4a-c458d738335d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9cebe9f7-0aef-4326-98e6-10df8be60504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70af1688-e5cc-4e6a-8160-3057e129580e",
        "cursor": {
          "ref": "d287cdec-9c97-4f02-927c-eb7efcc77a1b",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9b17e44a-f878-43eb-96a0-526db9d84a61"
        },
        "item": {
          "id": "70af1688-e5cc-4e6a-8160-3057e129580e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b4d44934-b9fe-4a03-9b67-129e09552571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 393,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f00de1-1730-4873-a7ba-968bcea87c12",
        "cursor": {
          "ref": "2a669725-376d-4d0a-b7cd-9df97d99ab56",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "33505143-57e1-4142-98d5-4e563fcd7cf2"
        },
        "item": {
          "id": "87f00de1-1730-4873-a7ba-968bcea87c12",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8b6fae01-bf76-42bc-96d6-078ee2f7fcbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7995dc0d-2b04-4a48-9288-ac8080b7a9fc",
        "cursor": {
          "ref": "64767c7c-3349-429a-9d65-5b1ef8b3782e",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a26b8b4f-d8d7-4e46-ac7c-363ce65240a3"
        },
        "item": {
          "id": "7995dc0d-2b04-4a48-9288-ac8080b7a9fc",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "537b4644-3bc5-4c30-955c-904a06025d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5715ceb-e526-4796-8767-a71544fd33ed",
        "cursor": {
          "ref": "3f8537c5-d834-4764-919c-2cf5948ba324",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e4a5aa98-5cfb-4eff-82f3-1a6b7bc3a997"
        },
        "item": {
          "id": "b5715ceb-e526-4796-8767-a71544fd33ed",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9e99d999-69fb-4b7a-8fd7-91646f65e30f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c60062ce-2446-4ce1-8de0-908226d1feaa",
        "cursor": {
          "ref": "06a30f0a-77f0-46e0-a8b8-1d16a9c327fb",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "2fbcef42-c119-462a-ac01-c2bc039f5cf2"
        },
        "item": {
          "id": "c60062ce-2446-4ce1-8de0-908226d1feaa",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9805fc00-44a4-48f8-937d-9f6e237b3711",
          "status": "Created",
          "code": 201,
          "responseTime": 843,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "e2236741-a0b9-40c9-8c4e-fad6ce30d742",
        "cursor": {
          "ref": "e00b64ce-d999-4300-bb1f-27248eaa8798",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "dca25eeb-7e10-495c-bc5b-9cdfc42f08b0"
        },
        "item": {
          "id": "e2236741-a0b9-40c9-8c4e-fad6ce30d742",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d34ff8b3-c232-4cf3-b0b2-728e06817bfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1382595-a6dd-4d23-9e09-48ae4d52399a",
        "cursor": {
          "ref": "1262e204-a4b2-4558-abee-a68dfb09362b",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "32a7fad0-d5fc-4604-b460-2fcefd707a55"
        },
        "item": {
          "id": "a1382595-a6dd-4d23-9e09-48ae4d52399a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e426c903-d4c0-4a72-b534-88abc04cc163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eb32387-5c4e-4e4f-911f-1e37dca3ba35",
        "cursor": {
          "ref": "81052c87-ef23-472d-90d7-04486bd83038",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "181ad41c-d7cc-4e90-8ac4-8ffbb8939ebf"
        },
        "item": {
          "id": "9eb32387-5c4e-4e4f-911f-1e37dca3ba35",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "827177ef-e3bb-4f1d-9f75-e598deb9cc80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d6538d8-b331-4f29-91ce-0e61879ade52",
        "cursor": {
          "ref": "c941d864-0270-4ff1-bb84-0c4d8fa90c11",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "356263a3-fa5d-45f4-9573-140c9cf1886f"
        },
        "item": {
          "id": "5d6538d8-b331-4f29-91ce-0e61879ade52",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "ab716941-8fb7-4dec-97d2-a41b0a7ded26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09671eb0-b23e-490e-aece-786e8c213e4d",
        "cursor": {
          "ref": "7517a0d0-54ed-4bb1-9695-db1d1f9f21fd",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "41f42359-0178-4313-a703-c0239a8aaf07"
        },
        "item": {
          "id": "09671eb0-b23e-490e-aece-786e8c213e4d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "2670de96-b241-456b-b642-34953684648a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c1f6b3-fcdf-46ba-ab92-68863f187405",
        "cursor": {
          "ref": "fae27e52-be60-4793-ae86-0693594763ef",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "9103b1d1-9e80-45df-a396-a4f35058292e"
        },
        "item": {
          "id": "02c1f6b3-fcdf-46ba-ab92-68863f187405",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "24c6f7cb-0a4c-4327-83b8-7ce3620e816b",
          "status": "Created",
          "code": 201,
          "responseTime": 683,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "5fa34b1a-67fe-4829-82c6-886cfad91c6a",
        "cursor": {
          "ref": "923f217d-80fe-42ca-aa44-9eb5b3869c6d",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "faaed1a3-2102-40f4-bb4a-076de3a31d54"
        },
        "item": {
          "id": "5fa34b1a-67fe-4829-82c6-886cfad91c6a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "216df2c0-a169-4532-aa50-f8982d2b355b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b0caec4-26b7-4732-bebf-a061d59e7f4b",
        "cursor": {
          "ref": "b7fa2ba5-2a87-42ed-9fa0-22083001b227",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8c0d0c7b-ee1d-4b93-a778-bf359a10605f"
        },
        "item": {
          "id": "6b0caec4-26b7-4732-bebf-a061d59e7f4b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f3de5cee-bfac-4321-b186-119ded3d89fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bcc12b8-fe1c-41d1-875a-ef169bb0dc16",
        "cursor": {
          "ref": "e0d44ece-6c84-43c2-a481-53912962daf3",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a0d56ac9-6789-4d72-bb2b-67f550434a4b"
        },
        "item": {
          "id": "4bcc12b8-fe1c-41d1-875a-ef169bb0dc16",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a7bb5649-20f4-4ef5-92d0-39956692e1dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d65d135-4b6c-4c95-b3d6-480a2f5755f0",
        "cursor": {
          "ref": "1e533658-024c-4311-9f57-89e6c438b050",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "cbc19c1c-4ce1-4612-b93b-8b1909a7223f"
        },
        "item": {
          "id": "2d65d135-4b6c-4c95-b3d6-480a2f5755f0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "432ac93b-f7ef-42da-9711-41b786867d92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c82979c7-2c58-4c61-922d-500827fa7bf1",
        "cursor": {
          "ref": "89dbf320-8ac6-4702-a1fe-8be3d6e9af85",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "3ba865bd-21b0-4c2a-aa50-c0913cfd8676"
        },
        "item": {
          "id": "c82979c7-2c58-4c61-922d-500827fa7bf1",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d7b9519e-9076-47eb-9061-d6965e730094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f18d863-03b0-4fcb-b2d7-08a912c02656",
        "cursor": {
          "ref": "cca2c8ae-8340-437c-9aab-5c4d80b137ed",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0faeb5bf-2020-4ceb-9b48-9dc3dcc82f39"
        },
        "item": {
          "id": "4f18d863-03b0-4fcb-b2d7-08a912c02656",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e834d7c4-0a17-41a6-bc5e-d350b146c4a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19072914-72fd-4ba3-bd43-45435e493930",
        "cursor": {
          "ref": "cc5a30ac-2959-4f53-a07e-6865f79081d5",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "df008573-0a75-4aa6-9c1a-86c264378329"
        },
        "item": {
          "id": "19072914-72fd-4ba3-bd43-45435e493930",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "90318ebc-eade-485d-a5ad-8c0bbe61a9af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "928535a8-419a-433a-bb98-fbb21c0ac3e1",
        "cursor": {
          "ref": "f24fdb59-3e68-4c68-86c2-7e187cc885b6",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e47be0b4-f9ea-4d3b-9776-c527eab25210"
        },
        "item": {
          "id": "928535a8-419a-433a-bb98-fbb21c0ac3e1",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "03717678-0cb5-4170-a474-35af94ec3cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 175,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "831d45c9-706c-40a2-8000-d6a7280c0bbb",
        "cursor": {
          "ref": "cd9ed3d8-1e97-4f6d-9098-b5ec13bf7842",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2331ed6a-92f4-4a52-b2bc-0e97a3d18ddc"
        },
        "item": {
          "id": "831d45c9-706c-40a2-8000-d6a7280c0bbb",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "eb25e5c2-d3aa-4aef-bbab-e8bb08af4500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "4706f0d1-37cb-48c5-8b6b-753fbc2fa2f5",
        "cursor": {
          "ref": "e6ed2e19-ecad-4527-83d5-ef2b3810df5d",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7cface8f-1006-4b36-ae56-2a45532e820e"
        },
        "item": {
          "id": "4706f0d1-37cb-48c5-8b6b-753fbc2fa2f5",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "6868a2dd-aebe-4b73-bfd0-63a28ed7111e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "30e9d09a-e456-4d92-9951-a96f9129fe95",
        "cursor": {
          "ref": "2222b6e1-b5a8-4db0-bb72-015fc9faeaba",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3da6962b-b13d-4415-8ab0-cac3d9739e30"
        },
        "item": {
          "id": "30e9d09a-e456-4d92-9951-a96f9129fe95",
          "name": "credentials_issue"
        },
        "response": {
          "id": "45676073-634e-41c2-a748-6b08b125c74d",
          "status": "Created",
          "code": 201,
          "responseTime": 664,
          "responseSize": 723
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "da87ea3e-0362-4ab8-91ce-f956369a2c17",
        "cursor": {
          "ref": "c3774b40-9ea9-4178-a1d4-52d294f10214",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1461694a-0814-4dc7-9c9f-8977d2a9edbb"
        },
        "item": {
          "id": "da87ea3e-0362-4ab8-91ce-f956369a2c17",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1df1c8b0-95fa-495d-a2b7-3a63f1fb7d16",
          "status": "Created",
          "code": 201,
          "responseTime": 676,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3993f83-fa30-4dd5-bf6d-c03254da0d90",
        "cursor": {
          "ref": "859e13cc-7573-4c30-9fef-a72a7e35f194",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "bbe53148-4f7a-4e74-84fe-539c80541217"
        },
        "item": {
          "id": "f3993f83-fa30-4dd5-bf6d-c03254da0d90",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4b333ac1-b3d8-42a6-be00-b37acd84a3cb",
          "status": "Created",
          "code": 201,
          "responseTime": 671,
          "responseSize": 746
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "519d656b-b5dc-421b-81d5-7d7f49ddb617",
        "cursor": {
          "ref": "5d1e3bbb-e93b-4936-923d-efa8d8bcd193",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "bab39fab-fb54-4614-b16e-a869f565c2c2"
        },
        "item": {
          "id": "519d656b-b5dc-421b-81d5-7d7f49ddb617",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5697d9a3-ee99-47d7-88eb-debf1418a979",
          "status": "Created",
          "code": 201,
          "responseTime": 657,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ac591a-1c3c-4397-b376-ce6de3184203",
        "cursor": {
          "ref": "55ddb995-9930-43fc-9a21-d985119835a3",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "090f5315-3276-4126-841d-d34c9ad1743d"
        },
        "item": {
          "id": "b6ac591a-1c3c-4397-b376-ce6de3184203",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e519cb8c-7019-42a7-9799-f3d3967826c8",
          "status": "Created",
          "code": 201,
          "responseTime": 647,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "f365cc41-8e47-4a7f-984e-e7ca769c3be2",
        "cursor": {
          "ref": "d87631e8-23c2-4395-8d43-dbb6ca0401d5",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e6cfb14e-21e5-494f-bda6-0a0885955c45"
        },
        "item": {
          "id": "f365cc41-8e47-4a7f-984e-e7ca769c3be2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c0dc8e9c-36c8-4dde-b6a2-c07b69288d38",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "f365cc41-8e47-4a7f-984e-e7ca769c3be2",
        "cursor": {
          "ref": "d87631e8-23c2-4395-8d43-dbb6ca0401d5",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e6cfb14e-21e5-494f-bda6-0a0885955c45"
        },
        "item": {
          "id": "f365cc41-8e47-4a7f-984e-e7ca769c3be2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c0dc8e9c-36c8-4dde-b6a2-c07b69288d38",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "6907c022-63d5-4966-9b90-c7cfcbf0e04e",
        "cursor": {
          "ref": "ca5e7a84-3c10-4f27-a471-ea1ea786170c",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c30d7aef-70c1-434d-8af9-1818aba94eee"
        },
        "item": {
          "id": "6907c022-63d5-4966-9b90-c7cfcbf0e04e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7bde15bf-53e6-4b9c-9657-146c8b58c8ce",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "dd919897-6885-428d-99d9-865e4c21081f",
        "cursor": {
          "ref": "273a4790-5375-468d-ac3c-2f718baf22c8",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c2b3b8b7-ec46-402e-8eb6-82273f6cce53"
        },
        "item": {
          "id": "dd919897-6885-428d-99d9-865e4c21081f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3e1e80cd-20b8-4be2-a738-e22ad24e67af",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "aba957e2-f522-465c-8e57-cd94427861ba",
        "cursor": {
          "ref": "ee458e27-e442-439c-8277-484e351557ef",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b70510be-1af1-4126-83ae-bc7b82fdc818"
        },
        "item": {
          "id": "aba957e2-f522-465c-8e57-cd94427861ba",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "596bf953-8b9b-4e27-8fd0-b6e8beb4d456",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "42f7c7ea-4429-442a-8799-d5eaa41ddda0",
        "cursor": {
          "ref": "1104c1dc-d0da-4948-8ba2-d9f055e0fe27",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5adb1fe9-321c-40d7-b105-69b1d830e3d6"
        },
        "item": {
          "id": "42f7c7ea-4429-442a-8799-d5eaa41ddda0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7ddf0b4d-0624-4a80-ac3e-3bca14961a5f",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "1153e9f8-8f14-4c38-80d2-dbdf23fda312",
        "cursor": {
          "ref": "f77a719b-507e-4ec1-8c3d-e317a575e7cd",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e424ccc6-63b2-40cc-9442-6a74e8e18031"
        },
        "item": {
          "id": "1153e9f8-8f14-4c38-80d2-dbdf23fda312",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e2a354d7-2fae-44fb-9698-dc8b30ae6d18",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "28b050cc-6757-418b-a67f-2982a800084f",
        "cursor": {
          "ref": "71994759-d50b-4434-b904-b2f8dd2279e6",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d6e60a4a-e366-45ba-bd30-51680e6a40db"
        },
        "item": {
          "id": "28b050cc-6757-418b-a67f-2982a800084f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e107f6dc-db97-45ea-9f3e-39d8b75ec3d2",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "9e8de4a9-6385-4cb8-a6c3-50a0d8ade76e",
        "cursor": {
          "ref": "84d8c256-8350-4ee0-830a-a5ed678f9984",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "0b995bec-3004-40b6-8ef5-a453581b0ee0"
        },
        "item": {
          "id": "9e8de4a9-6385-4cb8-a6c3-50a0d8ade76e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6a877f96-7142-49b8-9dac-6aa3896dab88",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "45b4642c-d8a8-4328-b7af-f5cab591abf4",
        "cursor": {
          "ref": "8efb49cb-7d21-42e3-a2f6-0e5fc3790c3b",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "15a7d258-73e2-47b6-868d-a538f7febdf0"
        },
        "item": {
          "id": "45b4642c-d8a8-4328-b7af-f5cab591abf4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "cc2a996e-5e56-4b3c-8e87-135a40c70709",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "692d41e6-f6c8-4718-a0bf-06eb40a6e222",
        "cursor": {
          "ref": "1eb22e9a-8b59-451f-9e7a-e79923857fe9",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "b894d580-3e60-425d-b890-c651479588b2"
        },
        "item": {
          "id": "692d41e6-f6c8-4718-a0bf-06eb40a6e222",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2620c32b-8a36-4767-b498-1515ebe642f3",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "eb786b4e-f1fd-4e5c-89bf-cb65cfb15fb9",
        "cursor": {
          "ref": "5339ee61-28c0-4fd1-931f-6be0d53b6b4d",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8cc043b9-2cd1-4741-a182-fa69932390d2"
        },
        "item": {
          "id": "eb786b4e-f1fd-4e5c-89bf-cb65cfb15fb9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "37a3d241-5fe1-4770-b053-c6f12eb6d2fc",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "2fe743bd-7f5c-46fb-8fa3-87db27ac3701",
        "cursor": {
          "ref": "1ab9ba26-7c61-4efa-9728-32237e3f0d69",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0fe95891-19c8-403b-ac8c-35dba2d3bd3b"
        },
        "item": {
          "id": "2fe743bd-7f5c-46fb-8fa3-87db27ac3701",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "576590de-38b8-403b-83b4-990fb6e39e06",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "4defa75d-1bb4-470a-9ae2-ee0c0d93c698",
        "cursor": {
          "ref": "0647e1de-9afb-4544-9bc5-8d28abc1ab2f",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "3d2a5554-e570-4d99-8ebe-46d8a58d8433"
        },
        "item": {
          "id": "4defa75d-1bb4-470a-9ae2-ee0c0d93c698",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "db9e0ad4-73eb-4126-99f3-3b98101da99e",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "66c10a93-ea9d-441d-8811-27c8d4378a6e",
        "cursor": {
          "ref": "63f7b571-3f0f-442e-86d7-8b697b242372",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6559e605-88f3-4fd9-adab-c681ee669d0d"
        },
        "item": {
          "id": "66c10a93-ea9d-441d-8811-27c8d4378a6e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e54346f8-c70c-46a3-b777-7a3f51bc6b91",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "4c958e42-1e7e-4b29-9bc4-65926a2b057b",
        "cursor": {
          "ref": "deb549bf-790e-4b30-85f2-c6521752cd78",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "1775e42f-00a4-4e7e-be69-b85dc08ce4e3"
        },
        "item": {
          "id": "4c958e42-1e7e-4b29-9bc4-65926a2b057b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "68230f8c-cbda-40ca-a3f3-07cb6c02c8d4",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "36df312d-9f31-4a7c-a721-6d4441ef5d76",
        "cursor": {
          "ref": "c9033f9e-d45e-49a7-8cf9-7c980e52073c",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "840b6e26-ba4d-44db-8ea9-f87f6ead445a"
        },
        "item": {
          "id": "36df312d-9f31-4a7c-a721-6d4441ef5d76",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8d3ad986-243f-4a5e-be80-99e2067dca68",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "417da8ff-c12c-4108-a5b6-786c37e958ce",
        "cursor": {
          "ref": "1133b761-abe3-45d7-a749-b412504c3bfa",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f9ec0227-cbe7-4721-aac0-4be61655a4fc"
        },
        "item": {
          "id": "417da8ff-c12c-4108-a5b6-786c37e958ce",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "485cbd5f-bbba-42c1-b7ea-42d137a14a81",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "eacbbdc8-3ce4-4229-a9da-52a1ef0948c4",
        "cursor": {
          "ref": "6d91d299-38a5-499d-bb1a-2037a409e2a8",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d03079ed-8896-4577-bed2-949f34f7ee3d"
        },
        "item": {
          "id": "eacbbdc8-3ce4-4229-a9da-52a1ef0948c4",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "23b7980c-03ab-4595-996f-144c581eb94f",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "ceb5d8d8-5d34-4595-bd99-a54392f641a6",
        "cursor": {
          "ref": "9f5297ca-1d23-4def-9db5-26eefb62e9ed",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c5e5288d-3017-4b1e-9656-530805dbca8d"
        },
        "item": {
          "id": "ceb5d8d8-5d34-4595-bd99-a54392f641a6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e2893a77-3464-4cfd-9ac9-8551d66006c5",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "4d86142e-b314-4819-9f08-e85cfccf55c8",
        "cursor": {
          "ref": "9208da8f-d3d4-4691-81c2-dcd9c70f6920",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "01c6ae05-8769-48e8-af7d-f89b7e8a542d"
        },
        "item": {
          "id": "4d86142e-b314-4819-9f08-e85cfccf55c8",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9c54962b-3c83-4ddc-aa0a-09fc2b4b2e15",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "ca7424d4-8ada-4828-9932-1edb4ec490cb",
        "cursor": {
          "ref": "f32f63d2-3f79-45bd-8837-27de23e94a58",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b0298694-c9d8-4d78-aea1-9bbebc04b4f5"
        },
        "item": {
          "id": "ca7424d4-8ada-4828-9932-1edb4ec490cb",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7e6a54d9-72a9-4d27-94b5-36a45262385a",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "59760bfd-5006-475b-a9b4-ac9596797a89",
        "cursor": {
          "ref": "95894b0a-d594-4c55-a2c7-8219dc37b40f",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "def2ce0b-2b13-4d9c-80d5-1e437817fa4a"
        },
        "item": {
          "id": "59760bfd-5006-475b-a9b4-ac9596797a89",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5a3fd8ed-4efe-442e-8124-daf16b45e006",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "38b1d92c-0db9-405a-b12b-fb75d5f9c2bc",
        "cursor": {
          "ref": "95642697-519d-4c74-ad9d-72a8e65df993",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "be7997f1-7388-4aca-a4ef-b6b88ab4adee"
        },
        "item": {
          "id": "38b1d92c-0db9-405a-b12b-fb75d5f9c2bc",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9846d39b-9104-48a6-855f-78f471feaa8c",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "d3ccf21c-4a60-42ec-b2a4-f48e229e1789",
        "cursor": {
          "ref": "0a26bbbd-f9c1-42d2-b926-49ec824af80b",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "3cfb876c-2fd6-459c-b83b-ff9238248775"
        },
        "item": {
          "id": "d3ccf21c-4a60-42ec-b2a4-f48e229e1789",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "515ecd04-1562-4cd5-88be-a19fc1b98530",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "7d1ac865-c432-4945-a415-49b7e3e53ded",
        "cursor": {
          "ref": "02c39e33-3c7e-42d5-a256-30ba533c6b33",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "9af2e471-0299-471b-b937-eecefc91a6e9"
        },
        "item": {
          "id": "7d1ac865-c432-4945-a415-49b7e3e53ded",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5944ddc8-cb27-44ac-965d-43ca6a3ab7d5",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "0f320af0-eeab-497d-a607-d4d8ac80f8aa",
        "cursor": {
          "ref": "9aec015d-8454-46ee-aaa9-24822ac01eff",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c7bf8e5b-a12b-4375-a02e-21ebf3f8a252"
        },
        "item": {
          "id": "0f320af0-eeab-497d-a607-d4d8ac80f8aa",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "acbe5c1f-3ee7-47b8-8d20-28e923811dac",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "d3cca146-39ee-44b1-ad82-7c18594cc832",
        "cursor": {
          "ref": "e3289acb-fc54-42dd-b600-0601daa65825",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a411ac2a-d448-4f99-92b6-e1409f99050a"
        },
        "item": {
          "id": "d3cca146-39ee-44b1-ad82-7c18594cc832",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "89849335-55f8-4f76-97fa-9e6064283484",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "564b1ce8-b115-4016-8d1d-67e20116e784",
        "cursor": {
          "ref": "e42da415-9610-430d-b343-9ce0eece675c",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "26a78722-4a0f-41cc-b1b5-ba85ea1ca139"
        },
        "item": {
          "id": "564b1ce8-b115-4016-8d1d-67e20116e784",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fc9599ea-d2f0-4f28-8176-1d8c19baab9b",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "2403896f-e004-4872-8541-2009b781a7ca",
        "cursor": {
          "ref": "e27c0f11-5db0-4e24-865a-ff2eace100f4",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8b9e7b86-e4df-4a79-af63-149cdf5d826a"
        },
        "item": {
          "id": "2403896f-e004-4872-8541-2009b781a7ca",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a81947b5-93c2-40d3-90e2-5c4c668a4bec",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "ceb428d3-2ec6-4b03-8e1a-306d9693ea09",
        "cursor": {
          "ref": "5248c825-a345-4f82-b442-e06031058475",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e3e2fbca-4d48-47e0-bac2-77548f330e40"
        },
        "item": {
          "id": "ceb428d3-2ec6-4b03-8e1a-306d9693ea09",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a1f4065c-0c14-4a71-8266-08689667648f",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "ea8f8c26-1894-4819-b1d8-05ae6f75d7d6",
        "cursor": {
          "ref": "3a6a1021-a55d-4744-b2dc-ba4eba5d7d4a",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "4620a185-c104-4754-a983-704c634ce1d9"
        },
        "item": {
          "id": "ea8f8c26-1894-4819-b1d8-05ae6f75d7d6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "17b4ab96-dada-46f0-b45b-cdcbd7a87005",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "2e7b5e6d-53e6-43fe-810b-8a5718bb1803",
        "cursor": {
          "ref": "5f6d3b0a-3be2-4d86-855a-7c008b3594e6",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9e22aa17-0acd-4324-ab02-6e1d9ffddc81"
        },
        "item": {
          "id": "2e7b5e6d-53e6-43fe-810b-8a5718bb1803",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "36edd4f9-98ed-4f68-b60a-8aa480802186",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "702bf298-f1e0-4b7e-9b2f-649a6a33e03e",
        "cursor": {
          "ref": "cee4ed52-6c23-4a72-af44-de11ba8b4186",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "37013ad2-ba60-4629-be01-d641ff3cf023"
        },
        "item": {
          "id": "702bf298-f1e0-4b7e-9b2f-649a6a33e03e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a6806e8f-688c-4e83-9b2e-ffbb381c5389",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f6e9ebe-1e4b-4aee-a1b2-002c8c8e0afc",
        "cursor": {
          "ref": "9570fe8f-5cfe-4992-bf77-48b0fb4f8648",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "cc191a88-f2f8-47be-a965-9ae7d2e1fdc3"
        },
        "item": {
          "id": "8f6e9ebe-1e4b-4aee-a1b2-002c8c8e0afc",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "1dc4e592-3a11-4600-aa83-11675a687bbe",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37af8c23-6758-449c-be8e-2945cfb7b147",
        "cursor": {
          "ref": "f938fb6a-8605-4426-9868-9a6c00805179",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3c77896a-77e4-45ab-b3c0-f8c080e892d5"
        },
        "item": {
          "id": "37af8c23-6758-449c-be8e-2945cfb7b147",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1c7382e8-3cdc-432f-85a1-ae75d789eee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37af8c23-6758-449c-be8e-2945cfb7b147",
        "cursor": {
          "ref": "f938fb6a-8605-4426-9868-9a6c00805179",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3c77896a-77e4-45ab-b3c0-f8c080e892d5"
        },
        "item": {
          "id": "37af8c23-6758-449c-be8e-2945cfb7b147",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1c7382e8-3cdc-432f-85a1-ae75d789eee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ffc99a4-a280-4349-9acf-85742dc407fd",
        "cursor": {
          "ref": "0d840708-8d9d-451b-ad62-ed220a74d49b",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "b46f2cde-a4be-4aae-9755-2fffae6c8861"
        },
        "item": {
          "id": "6ffc99a4-a280-4349-9acf-85742dc407fd",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "941aa639-c3a0-4b20-bbd7-190687c02df5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a33062a0-9d0c-43e1-9aef-4c34434a19da",
        "cursor": {
          "ref": "9cc5d64a-9fea-464b-b071-b69ecc59984b",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f08f91e3-f13d-4f92-8121-a7b9ab26a058"
        },
        "item": {
          "id": "a33062a0-9d0c-43e1-9aef-4c34434a19da",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9a111cb2-d8ca-48f7-a0b9-7cbf82c0e990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05caecef-b2d0-41f6-ae34-f855a7fe03aa",
        "cursor": {
          "ref": "ceb8be39-b8d8-4a1c-ad1d-330f334e1fda",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "545d99bb-9214-40b4-97cd-44667126bb51"
        },
        "item": {
          "id": "05caecef-b2d0-41f6-ae34-f855a7fe03aa",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "9e35b954-78e5-4426-a75a-9b20d1d0f565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d940490-9925-46fc-82ee-3eb4f216c6e9",
        "cursor": {
          "ref": "d491c71e-f126-4ef7-bc4b-3b34e6975177",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a22e43a5-3179-4ac5-b535-28c44a9236db"
        },
        "item": {
          "id": "0d940490-9925-46fc-82ee-3eb4f216c6e9",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "26624c10-e315-4e76-9d77-3db9ab6cabd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1fa2a23-c2d1-440c-b538-9c42b8f41b1f",
        "cursor": {
          "ref": "0c04968d-fcf0-4de9-b23e-be5744d0ec8a",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "777b202a-2204-482b-8dde-0f5adf2b8d23"
        },
        "item": {
          "id": "d1fa2a23-c2d1-440c-b538-9c42b8f41b1f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "204c5f2e-0c07-4482-b363-4ececed4cd38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4218a894-19f4-42d8-95d6-b5c31ec0750b",
        "cursor": {
          "ref": "86ccfc86-b1f7-4992-8e11-01cfc65dd9a0",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9c638310-59a0-4243-b105-d29d5269a5e2"
        },
        "item": {
          "id": "4218a894-19f4-42d8-95d6-b5c31ec0750b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2eadd30f-dd43-49ca-86e3-5efcdc2c8d04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8eecef2-44cf-48a0-9a41-63036e92f872",
        "cursor": {
          "ref": "eb6bdd72-38e5-47b7-b782-8795db9d5d6f",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e7bbf546-a108-4fa7-8dde-d8e9226c2fbd"
        },
        "item": {
          "id": "a8eecef2-44cf-48a0-9a41-63036e92f872",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "fad71bba-ae99-40ac-9807-64a210150212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72a33560-f252-46cd-88a2-82757045c3bc",
        "cursor": {
          "ref": "e96acbc0-dff9-49d5-8e24-5ff8a203d86e",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "48de97c3-32d6-4996-bf32-048f0eb8c55c"
        },
        "item": {
          "id": "72a33560-f252-46cd-88a2-82757045c3bc",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "19a36e03-714c-4bf9-8aea-65e7f9b04f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eede9589-50e4-49cd-8daa-9c01d17b036e",
        "cursor": {
          "ref": "b71bc40a-a828-4f56-90ce-192d93a784f7",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "0751c92d-66c2-442f-bffd-7a59ea2eb253"
        },
        "item": {
          "id": "eede9589-50e4-49cd-8daa-9c01d17b036e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f20b2674-f8f3-41b8-8af6-952c513835ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9205da59-532a-42a0-86fd-fa6cb698081b",
        "cursor": {
          "ref": "f6670a2c-e6d6-43c5-b876-e9f4e9a119c4",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "544675bb-7ce7-4e2d-8b2c-013e39807b66"
        },
        "item": {
          "id": "9205da59-532a-42a0-86fd-fa6cb698081b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "24d6f301-74a2-4dd6-8e7b-f4eb151d84da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acfe6ab0-17ae-4603-b3a0-cc4459a8c8c8",
        "cursor": {
          "ref": "f88c111d-e120-4db8-907a-6a5968b4d853",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "452c009f-d0f5-4ce8-b72a-d3360a17b5ba"
        },
        "item": {
          "id": "acfe6ab0-17ae-4603-b3a0-cc4459a8c8c8",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c75b278b-bae7-4503-9d57-652b02827d24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee6e7c8-47d9-464b-b7ab-2567c0fa4646",
        "cursor": {
          "ref": "68a833a6-5c43-48e4-88f4-2484d1050fa3",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9e12db8c-946f-4614-b87a-14994db639d1"
        },
        "item": {
          "id": "fee6e7c8-47d9-464b-b7ab-2567c0fa4646",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "fb1c6172-bb34-4222-b4e6-804c66acb53d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcce0e5d-a669-4091-b97d-9b5b7a11c434",
        "cursor": {
          "ref": "0813eb18-d002-4ce8-9ad4-8c6b70a2f1d9",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "1fdd651a-a1d6-4675-821a-84704be4008a"
        },
        "item": {
          "id": "fcce0e5d-a669-4091-b97d-9b5b7a11c434",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "5c721d2d-99ce-4dc4-b27e-b257352d1b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "089f0513-f3dd-42d3-8b25-5691299ca034",
        "cursor": {
          "ref": "516754c0-cfc9-478d-ab4f-d2a0d13921e4",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "b0ccf084-0bcb-494f-8b67-2f9a4c2b65e7"
        },
        "item": {
          "id": "089f0513-f3dd-42d3-8b25-5691299ca034",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2d72f537-ae98-4898-832b-a455ded64f75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73487ad-ab2e-49ab-bcdf-6a6d7ba338d3",
        "cursor": {
          "ref": "ce9d7dc9-9040-45a1-a1b8-e3c37818860d",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "689f18b8-7a99-4f8f-bb1d-847d77fe5bb6"
        },
        "item": {
          "id": "e73487ad-ab2e-49ab-bcdf-6a6d7ba338d3",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c6591918-19b0-4cd4-95bc-ec90d77c5152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dce5400d-b433-4413-8a41-dc3f82a71f7b",
        "cursor": {
          "ref": "d31ecb3b-3841-41f1-9173-0269b9edeb17",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9020e5d0-71d8-4de8-b7a7-103db92c7b67"
        },
        "item": {
          "id": "dce5400d-b433-4413-8a41-dc3f82a71f7b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ed676220-5527-43c5-911c-98432ad7f88c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d96f14b-7859-4598-b651-8b097a8b1f48",
        "cursor": {
          "ref": "d376e69d-4eff-47de-bd5d-9b1f0e3047a5",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c9e690c9-db5b-42ff-8dff-97a4b026847d"
        },
        "item": {
          "id": "0d96f14b-7859-4598-b651-8b097a8b1f48",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "f620665e-4c44-45c9-8c23-a7123ffb7f5c",
          "status": "OK",
          "code": 200,
          "responseTime": 611,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "e231ca6c-3bfd-4b4b-845b-1d56767bd9e6",
        "cursor": {
          "ref": "2d8857af-a937-43d9-bd4b-ec51c2ccbbd2",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "67b7745f-14af-4c40-af88-69748aa51648"
        },
        "item": {
          "id": "e231ca6c-3bfd-4b4b-845b-1d56767bd9e6",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f6ae6177-c5d8-4f23-a283-523d43705679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 272,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ecd1d39-5819-4c5a-a5d1-19b3e7695a26",
        "cursor": {
          "ref": "7dadddd7-b130-4ebb-be92-dbc5a211c510",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "225359d9-6bb3-4258-8fb4-32a042a6b433"
        },
        "item": {
          "id": "3ecd1d39-5819-4c5a-a5d1-19b3e7695a26",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f9ff509e-f240-46b6-9ec2-b6d37e36011b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 274,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7966ecc7-ba97-4c42-8b9d-3e9b101d7842",
        "cursor": {
          "ref": "1de52d50-0a76-4ce8-bf5a-5fd94e926c4b",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8ab72ee7-8f1b-4e7f-b605-6a99169ed6b8"
        },
        "item": {
          "id": "7966ecc7-ba97-4c42-8b9d-3e9b101d7842",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "14319d3c-92a2-47ae-b4b6-a3ee9175c040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af00cad6-87e4-4bf7-b499-ab7177227772",
        "cursor": {
          "ref": "7a01ff32-6796-415a-98a5-459c425428bd",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3edfb8e7-f407-440f-9ab5-71f26f29c3b3"
        },
        "item": {
          "id": "af00cad6-87e4-4bf7-b499-ab7177227772",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "dfd769b7-33c6-4582-b7a8-1d94f1d96a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56cadc45-9562-4402-b4b2-f04bf7e2c341",
        "cursor": {
          "ref": "de9e382a-60b5-4f84-a656-22cef76ae9a0",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "2851c196-b474-41cb-b106-59c3381bf065"
        },
        "item": {
          "id": "56cadc45-9562-4402-b4b2-f04bf7e2c341",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3b50b4db-8e16-4551-8a18-9fc59cedae4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06989808-b70c-47ed-b360-eae7b6b43874",
        "cursor": {
          "ref": "8d30f70a-668f-4e31-a7b1-272cc3c8fb35",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0442368c-f807-4d9f-b862-46adacf9ba2a"
        },
        "item": {
          "id": "06989808-b70c-47ed-b360-eae7b6b43874",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "26089f46-4672-48c7-84ce-60a7be46465b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 272,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0ee5bfe-dfbb-4057-9a13-143597afa954",
        "cursor": {
          "ref": "6f8d8bb0-e0f2-4599-948d-8efc36115f99",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d5a0c160-df2a-4b39-ba48-072999eda07e"
        },
        "item": {
          "id": "a0ee5bfe-dfbb-4057-9a13-143597afa954",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "07ea75a1-eb72-4ef6-8f27-5913e48976bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a2b9d5c-473a-4642-827f-5d7d2ca317d1",
        "cursor": {
          "ref": "429ec390-4955-4736-a5c2-d21b047cbbc1",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "aaaf5bde-fdfc-4cec-afd7-8023026c258c"
        },
        "item": {
          "id": "3a2b9d5c-473a-4642-827f-5d7d2ca317d1",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a818f1d3-4bc6-4047-935e-250f1f4c9f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e22325f-c368-4620-830e-9a0836f13a05",
        "cursor": {
          "ref": "30a365f4-5dec-4e42-a8b7-2a965b88ea6b",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a9331550-780c-4555-8939-824367dfdea5"
        },
        "item": {
          "id": "2e22325f-c368-4620-830e-9a0836f13a05",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "541ae2f1-1a77-4b6c-afbf-f75ee2e10307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30afcd9e-7897-48b5-a288-084d1be10208",
        "cursor": {
          "ref": "7a4ec4cf-9151-4864-933e-c23d9d69eab6",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e79f4350-6e68-4d52-9fbe-6f9136f3c5f9"
        },
        "item": {
          "id": "30afcd9e-7897-48b5-a288-084d1be10208",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8ccedb03-c131-471a-9550-3918d4e3a67a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a64a2cf-4877-4750-a628-d3bea2e104e2",
        "cursor": {
          "ref": "2880b9da-bcf4-4255-a7ce-a6ae27c669a0",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f32c0319-6302-49d0-a61c-69822b0eeb3b"
        },
        "item": {
          "id": "6a64a2cf-4877-4750-a628-d3bea2e104e2",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "5bd6b6cc-1ccc-4120-99ed-a538430c083e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0931d4-72b9-419e-8794-09a261465789",
        "cursor": {
          "ref": "4baeebcb-d3bb-4b5a-ad93-2b666547c10e",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "772dae9e-11ed-4688-93a5-edc14cdd42a1"
        },
        "item": {
          "id": "7d0931d4-72b9-419e-8794-09a261465789",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "aa4b25e2-e767-4162-921a-5f2b1edcb363",
          "status": "OK",
          "code": 200,
          "responseTime": 238,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "ae97bdc8-cb97-484f-b80b-b66f5a6b9429",
        "cursor": {
          "ref": "208f7334-85ff-452a-8de3-12a81cacd6e9",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c22f166e-a509-4c60-a1f8-f5cccf1bc9f4"
        },
        "item": {
          "id": "ae97bdc8-cb97-484f-b80b-b66f5a6b9429",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b199a131-0c09-4347-b31d-043b62e912ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f05643e5-4c27-4813-85a9-65c100aa9abc",
        "cursor": {
          "ref": "394ff8b1-fcb8-4763-8edb-b6383d760d3a",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "71de3978-c09d-418d-ac75-fc77cb9e7f29"
        },
        "item": {
          "id": "f05643e5-4c27-4813-85a9-65c100aa9abc",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "5c862601-7559-4260-80eb-ef68a2553908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c9060c-ce59-4fd8-8ba7-f432a1d07d44",
        "cursor": {
          "ref": "5b7476d1-c359-47ab-a9aa-7cc9717250a6",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "fc783dae-e1d7-442e-9795-f28be36cbff8"
        },
        "item": {
          "id": "04c9060c-ce59-4fd8-8ba7-f432a1d07d44",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d192bde4-aaef-46ec-8524-ef3b87f8bcfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f32ae17c-94d1-41b7-9b33-77e1f8337379",
        "cursor": {
          "ref": "dee5bb3a-17ee-4f59-8910-de552784a304",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e093ca52-2c25-4f1b-8ad5-4cd5ae16f853"
        },
        "item": {
          "id": "f32ae17c-94d1-41b7-9b33-77e1f8337379",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "809ddf38-5dad-4df7-b7c5-8d49c8f7d366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 289,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5fb794b-4b2d-4155-a6e4-78b4a2641211",
        "cursor": {
          "ref": "54e4c9ab-1b55-40b3-af70-73ef6a876de9",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4181bf22-a7ca-42f2-9c4f-529654f7a9be"
        },
        "item": {
          "id": "c5fb794b-4b2d-4155-a6e4-78b4a2641211",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "95d28d93-73e2-487c-bcf6-976648dd53cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be8e839e-135e-4a9b-9676-d1a6921adf0a",
        "cursor": {
          "ref": "0859550c-65f1-4db0-84e4-f1ed3456d408",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8e39ff01-41ce-4a5c-920c-a161ceedfd9b"
        },
        "item": {
          "id": "be8e839e-135e-4a9b-9676-d1a6921adf0a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "65303e1b-f8d8-4f21-8bd8-4aef5c4f6619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 275,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b08092-262d-4f7a-b2bc-88337b9428af",
        "cursor": {
          "ref": "6f4d184b-22b8-4184-ab42-b620412fe932",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "fe7ab0d3-c4b0-4a0d-8f5b-e47cf8becbd4"
        },
        "item": {
          "id": "13b08092-262d-4f7a-b2bc-88337b9428af",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6bbc61cf-ddd9-4c0f-9a8c-91fa7679d9f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 271,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "522b513f-e1af-4f00-a5eb-5ff98f11f957",
        "cursor": {
          "ref": "cd14ad7b-c405-4c27-8621-bf78fd467b82",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "fdf715c3-6279-453d-83d5-89dcf46d065c"
        },
        "item": {
          "id": "522b513f-e1af-4f00-a5eb-5ff98f11f957",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "dc0ef436-43c0-40f5-97f8-ef8726d156f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "febf89b1-e3e7-4394-a693-779877e07e8c",
        "cursor": {
          "ref": "ed16c182-040f-425e-8db2-f5eeeddd6da0",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "1c6cd7c0-e79f-476c-bee2-e3237e330ba5"
        },
        "item": {
          "id": "febf89b1-e3e7-4394-a693-779877e07e8c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "4d66f5fb-fcef-4548-9b7c-de3d067a927f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 273,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b1274ec-20eb-43a4-be0b-b6657f2a7b87",
        "cursor": {
          "ref": "114c110b-be79-4dc1-b5df-1ca87dcad32b",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5fe7d1cc-8ad5-4c0a-b46d-35d800fa6336"
        },
        "item": {
          "id": "8b1274ec-20eb-43a4-be0b-b6657f2a7b87",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c16a9482-f3c5-489b-8258-99c830ba84ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 537,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af49bdf7-5422-40ab-9459-0f128b9ccd76",
        "cursor": {
          "ref": "d158a15b-2a86-4281-9521-3edc84aa1670",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "1a54e57c-238a-4626-acaa-de247698f297"
        },
        "item": {
          "id": "af49bdf7-5422-40ab-9459-0f128b9ccd76",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d1ec587e-066e-4af4-a581-ed437cdd43a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 277,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae9238da-a8bc-441a-85db-b1c70b735903",
        "cursor": {
          "ref": "a171fd94-c39f-4c66-b7c8-1c4835d0b9f9",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c44e9290-3823-4b16-af8c-30de27b873c2"
        },
        "item": {
          "id": "ae9238da-a8bc-441a-85db-b1c70b735903",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "891e22b8-a45c-43da-a5f5-08a9a5f1f6bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 287,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17f0a043-ea63-4ebd-80ee-47f83284d038",
        "cursor": {
          "ref": "121aaf56-8647-49b4-b1c8-619eede8de3f",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "98cc9699-3940-48b1-a6c8-041e4c1aaa9b"
        },
        "item": {
          "id": "17f0a043-ea63-4ebd-80ee-47f83284d038",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2d0fffcd-33a1-482c-b74e-b6845dda540c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 286,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a655d41-c5e2-4214-ac86-2a9bea668646",
        "cursor": {
          "ref": "e3ddc2cf-69d7-46f8-9aba-30483ad98e02",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d4861de6-6f5f-4895-8a66-d66a0bcde120"
        },
        "item": {
          "id": "5a655d41-c5e2-4214-ac86-2a9bea668646",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c75f6268-dadf-478e-b2de-d97ad8b7c5a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 292,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b89a04c0-a35b-47fd-82e1-11c1ada31d0d",
        "cursor": {
          "ref": "39611c78-feed-41ab-82d3-7fdc6fa164d9",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "5871b741-726b-4eea-95eb-50ba1fadb8da"
        },
        "item": {
          "id": "b89a04c0-a35b-47fd-82e1-11c1ada31d0d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9a532e6a-ddac-4de6-9012-00d76a13a69f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 343,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f529a09-86d0-4d86-beca-44e3627679d3",
        "cursor": {
          "ref": "244cdf9b-5869-4af3-b795-a56b60bcbcfb",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "6e1d8451-a3bc-4fdf-82bd-82ad3152fbf9"
        },
        "item": {
          "id": "4f529a09-86d0-4d86-beca-44e3627679d3",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a21b6800-7513-4c71-8a6d-6f7a24fb1224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc3c90f-223b-4e18-9786-808cf9645c5f",
        "cursor": {
          "ref": "5ecac899-b5e1-4ee6-91cf-125a885f0498",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "457adfa7-9a1f-425b-81e8-5447c05c2115"
        },
        "item": {
          "id": "1cc3c90f-223b-4e18-9786-808cf9645c5f",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "00f47bd7-e9f9-465c-b8ff-1ea491b68b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 285,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "183d23df-2fe9-4558-b584-eb301e2b5c92",
        "cursor": {
          "ref": "1ee5184c-293e-4f21-959b-92bd1f1f90b4",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "0f3f822e-b6b6-4baf-bd17-6892672e67f3"
        },
        "item": {
          "id": "183d23df-2fe9-4558-b584-eb301e2b5c92",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "88515659-ecbe-4a7c-890b-3713a0ebbcb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 272,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd07bc1a-fb5a-462f-801a-d617256370ad",
        "cursor": {
          "ref": "e39b7c1c-26f2-49cd-a20d-cca35d121f82",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "28931a0b-9e3e-4780-8e8b-9db039e15cda"
        },
        "item": {
          "id": "bd07bc1a-fb5a-462f-801a-d617256370ad",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "5678b97d-c072-46e0-92df-d89276936c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 272,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0fe9508-982d-432b-b30f-829cb8503a7c",
        "cursor": {
          "ref": "3265fe85-387f-4702-a26d-c509de0eeb10",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e77ceee3-c020-4b7e-be45-ee7f08fa0889"
        },
        "item": {
          "id": "d0fe9508-982d-432b-b30f-829cb8503a7c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "37e93332-2e82-4925-bcdd-44d2a351f7c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 277,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab82281-d8e1-4dee-bee8-4b9d1a7799fb",
        "cursor": {
          "ref": "4ad26b43-7b89-4aae-8321-35374f24fc47",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5ed62c9c-f8bd-435c-81d2-bf3d26438661"
        },
        "item": {
          "id": "dab82281-d8e1-4dee-bee8-4b9d1a7799fb",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a779436e-8cbf-46e2-9be3-bd595caf0a37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 308,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f46d6e5f-3eaf-43ad-97e6-1c016f06c8f6",
        "cursor": {
          "ref": "bc82b208-ef70-4bed-a89f-c05bd5481e7e",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e4fd6e4f-1030-4637-a51f-c5f92c2732cc"
        },
        "item": {
          "id": "f46d6e5f-3eaf-43ad-97e6-1c016f06c8f6",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c34bde30-e186-4ce6-98f9-502a0e1a97e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 316,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "385df75f-4ec5-405b-9c7e-65b7f91fc3bb",
        "cursor": {
          "ref": "34802d1c-6fc9-4172-a1d4-7f3b4b542fa4",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "bd8d67d5-969c-48e2-ad06-7eeb6fc06764"
        },
        "item": {
          "id": "385df75f-4ec5-405b-9c7e-65b7f91fc3bb",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ff0a1cbd-043f-431f-9368-c228dfdf20c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 287,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a669ed-2127-4176-8425-0c5f5157c00c",
        "cursor": {
          "ref": "01a410f1-210a-4133-870c-d96ea84d8d16",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "05458d1a-28dc-4033-9424-0a4ec3f154ee"
        },
        "item": {
          "id": "71a669ed-2127-4176-8425-0c5f5157c00c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "040b29ee-2da6-4315-995e-26550d012bfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 283,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6bbc817-fa9e-4645-aa02-724c05364f4d",
        "cursor": {
          "ref": "5cf55cff-e579-41b5-bfe8-8fa69a9e7336",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8c0aaf06-dd91-4781-8ff7-77b037831e47"
        },
        "item": {
          "id": "a6bbc817-fa9e-4645-aa02-724c05364f4d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "64770f37-bea1-4ecb-a5dd-189b286956b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b62c12-3e75-46e2-a5b2-c6e6116df8a6",
        "cursor": {
          "ref": "5be0459a-728f-4c3a-94a1-fa0424e6f915",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "6ae9364b-f26f-4e76-9230-021c72ded4e9"
        },
        "item": {
          "id": "42b62c12-3e75-46e2-a5b2-c6e6116df8a6",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b252b87a-9488-42a8-8ca5-d3265254e2cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8acfb9a4-eebd-4291-8c94-49f97b8b7256",
        "cursor": {
          "ref": "69e8949b-83dd-4016-bdce-530c15161a4d",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "2831194c-9d47-4eeb-8c7e-2c6c3afd9dfe"
        },
        "item": {
          "id": "8acfb9a4-eebd-4291-8c94-49f97b8b7256",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5e848474-7d84-4cb1-87a2-187bab331607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b147d5bd-52c2-4111-ad40-72dd99888491",
        "cursor": {
          "ref": "10b88cf2-3024-4f49-85b2-f063d3b0a737",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "8441c4c6-3142-479c-ab5d-b7a927ff8bba"
        },
        "item": {
          "id": "b147d5bd-52c2-4111-ad40-72dd99888491",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "3d1bad1e-efbc-4bef-bdc5-74a37fc001a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 280,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe44030e-26ff-4b00-ad9a-8f07bc6acf6a",
        "cursor": {
          "ref": "a57308e6-0645-4d30-8f27-80e8ced7299a",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c478c77d-de01-4a86-bb11-ad7b1f50ace1"
        },
        "item": {
          "id": "fe44030e-26ff-4b00-ad9a-8f07bc6acf6a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d120e2a6-151c-4787-b2dd-e914cc861d7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9f04e27-166c-408e-999d-b25171c1996b",
        "cursor": {
          "ref": "7a742b67-4aec-472a-bede-17473e26886c",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "9720844f-2623-4da8-ac4f-36e77be8954e"
        },
        "item": {
          "id": "e9f04e27-166c-408e-999d-b25171c1996b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "93779251-ad1b-4261-9026-01c3e09dc22c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f397db5-97ad-4c2c-ad67-b960b71048f5",
        "cursor": {
          "ref": "ce5e3b9d-afaa-4bd3-b17e-ecfe43359309",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d7fa14d9-8235-400f-97b6-4666fc361026"
        },
        "item": {
          "id": "6f397db5-97ad-4c2c-ad67-b960b71048f5",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2f8d16fc-14e2-40af-8bf0-eba7a8aca21d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a99116c-a6d0-4cd2-87a9-f30b45cea126",
        "cursor": {
          "ref": "ad173413-c251-4540-98b6-68288f6280ea",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "55ec78f3-61d9-4153-b99b-71398d42ded1"
        },
        "item": {
          "id": "7a99116c-a6d0-4cd2-87a9-f30b45cea126",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "faf9ff82-cec5-4809-8122-c8afa17b0389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c35b3d0d-f82c-452f-8199-ed42f09d7e72",
        "cursor": {
          "ref": "3b0662d9-01e8-448b-9755-0f515dd528e4",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "cdea71f3-70cf-4647-8f5c-c27735972e8c"
        },
        "item": {
          "id": "c35b3d0d-f82c-452f-8199-ed42f09d7e72",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "fdcfa061-d29e-4b4b-a818-fe00fe5979cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f5a0f90-c540-4c90-b945-b01d1794fff3",
        "cursor": {
          "ref": "78acb66c-52aa-40fc-870f-9c77f13c2637",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f6b81089-3533-46cc-9805-af95152e7951"
        },
        "item": {
          "id": "6f5a0f90-c540-4c90-b945-b01d1794fff3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b5125be4-151e-4f78-bbd5-9da45e8d9a35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d51684e-f625-4903-8b8e-f7f4ae5b8115",
        "cursor": {
          "ref": "81f12255-1cc6-4b3a-856b-266d23b4792d",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "dae6ee9a-cee4-43e9-958d-304858054005"
        },
        "item": {
          "id": "5d51684e-f625-4903-8b8e-f7f4ae5b8115",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "1eff9904-8fb0-489c-ad7e-549fea51bca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f3a3b53-60fc-4536-ad30-cbb7ebff3ba2",
        "cursor": {
          "ref": "850ac866-60aa-45d2-a5af-0a66126a6348",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c7a93864-787f-4f32-88a7-66b23b26aef9"
        },
        "item": {
          "id": "6f3a3b53-60fc-4536-ad30-cbb7ebff3ba2",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "13d56b86-acc0-4c2e-aaa7-d09b4ede241f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7df6d1c-4270-44b1-9221-8ae6db0a44e2",
        "cursor": {
          "ref": "08c5e063-d3b9-4f64-8f8c-b10a52f52b67",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "1ca00bb2-251b-40ae-8af9-741126db7a93"
        },
        "item": {
          "id": "d7df6d1c-4270-44b1-9221-8ae6db0a44e2",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b7d4d793-74bd-4f3e-904a-8f76be85fe98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "955f10ca-5b81-41c5-91cc-a92033dfff79",
        "cursor": {
          "ref": "8cbce2db-24d7-4c38-a2a7-731b93994264",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "20c2fb2c-54f8-4d00-ac8b-870d68819014"
        },
        "item": {
          "id": "955f10ca-5b81-41c5-91cc-a92033dfff79",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "174ac2d0-33fa-4942-8003-871efb77488f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e200c62e-fb51-4892-8b26-eedf70d85603",
        "cursor": {
          "ref": "9a7580be-3b8b-462b-8467-5266d11e55e7",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ba1f32d3-fef8-4b18-93b6-79ea4b460c5b"
        },
        "item": {
          "id": "e200c62e-fb51-4892-8b26-eedf70d85603",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "de064aaf-e884-48b1-a58b-631ad9e8b2e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36133215-7415-472e-9081-4f56da99c0e7",
        "cursor": {
          "ref": "0aca7047-bea5-4fd4-96f7-c11292c71015",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a781a98e-343f-4db7-a6d7-e9712d3704dc"
        },
        "item": {
          "id": "36133215-7415-472e-9081-4f56da99c0e7",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a8ff0294-1d73-43f5-95dd-37810050f2a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a96230d9-da65-4d81-b430-f0b3d96866e0",
        "cursor": {
          "ref": "6f7208a6-5520-453c-9b68-60528544fb52",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "676c5ea8-0c71-4870-869f-3d6b9ce71a2f"
        },
        "item": {
          "id": "a96230d9-da65-4d81-b430-f0b3d96866e0",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c4fc56cf-005e-4955-a0e8-995219b279e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10f9b8f0-e974-441d-ba94-65e4a72240e5",
        "cursor": {
          "ref": "f2bc755d-cb09-44f5-a1a1-d651c95a76ec",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "ec670782-f7a5-47b2-ae6e-1c26277f1f76"
        },
        "item": {
          "id": "10f9b8f0-e974-441d-ba94-65e4a72240e5",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "9555bb0f-6689-4d84-bb2f-7dba3f4b0d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "787799e3-847d-4969-a99b-de1560ad615b",
        "cursor": {
          "ref": "06a77272-21da-41a4-9e72-fa2decd00add",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "d9e3dac3-25e6-4d09-8181-7c0880f99903"
        },
        "item": {
          "id": "787799e3-847d-4969-a99b-de1560ad615b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "80fa58b8-496a-4724-8dc8-a8792bf73267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a53e2f3-dc05-4a03-8174-719744b3653c",
        "cursor": {
          "ref": "bf1b26a4-cfb7-43b2-8568-d506bf494b28",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3500ec0a-3bd2-41fc-b448-7327e0edc320"
        },
        "item": {
          "id": "0a53e2f3-dc05-4a03-8174-719744b3653c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "1aed880c-f0ad-4b0b-86fa-b483528bc61c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd866f7a-348f-48aa-b485-1cc481f0f91f",
        "cursor": {
          "ref": "2c9ffd08-04eb-46eb-85d9-c3d2516f9834",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "09556fd9-816b-4409-a2c4-904de2cc6b9b"
        },
        "item": {
          "id": "fd866f7a-348f-48aa-b485-1cc481f0f91f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d5514406-540a-4b2a-be16-93f5cd4765ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f87c5fb-cc28-4848-a097-1850cb745cf6",
        "cursor": {
          "ref": "74348891-8b02-4728-850b-33de81572c8e",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "73e6817a-0d68-49fe-835f-ae43db4bf672"
        },
        "item": {
          "id": "4f87c5fb-cc28-4848-a097-1850cb745cf6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "6c6037c4-b323-4472-962f-1b4f23148152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79a66223-4553-4975-b9c6-69d1f0f2f73c",
        "cursor": {
          "ref": "9bc0933b-83c8-4996-9045-ec6fa3140899",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "584cd83c-a2cc-444e-afe3-50639d1a7f79"
        },
        "item": {
          "id": "79a66223-4553-4975-b9c6-69d1f0f2f73c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "bf51e2ca-feca-4cfd-8eda-524294f90e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f570613e-9cd3-43fa-9cff-497b1d9ac4c3",
        "cursor": {
          "ref": "386c12e7-59db-4d2e-b9aa-289816365aaa",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "81968dc7-b79a-478c-9241-d06cbb5cb0d3"
        },
        "item": {
          "id": "f570613e-9cd3-43fa-9cff-497b1d9ac4c3",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f6eef376-bf1c-4c45-9e72-4b9dd9bfa985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d44ab5-0090-4322-9cbb-07445a948a24",
        "cursor": {
          "ref": "b1bc5e49-204d-4810-86de-efaf08df1188",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "449c6ed0-7385-4ec7-983c-353d07d9c6a6"
        },
        "item": {
          "id": "57d44ab5-0090-4322-9cbb-07445a948a24",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "352656f8-8a46-4a4a-9208-efdd5efc2062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d907d8cc-8444-4587-9944-5dbeb546141f",
        "cursor": {
          "ref": "174c64c9-6ab1-4a52-b134-a70ea2beffb9",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "454b5666-6976-45bc-88b3-d5d47f89adf0"
        },
        "item": {
          "id": "d907d8cc-8444-4587-9944-5dbeb546141f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "edb34a23-27c7-48fb-af97-af96e8e8462e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b69f84a-023d-4856-9e25-0e9429d4a4c4",
        "cursor": {
          "ref": "c8974082-56de-4416-9b2d-224b9dd5cbbd",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e3ae1672-f07d-42a2-8b57-aa553b7b7b1b"
        },
        "item": {
          "id": "5b69f84a-023d-4856-9e25-0e9429d4a4c4",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "8d49f11a-92b7-4141-a4bb-36c28cc2397a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4636e411-a063-4b7b-8768-d2c2be8d68fe",
        "cursor": {
          "ref": "629ad34f-e0fa-4ca0-8877-f1c4dce0bc0a",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "38ac139b-1405-4b36-9817-40e377f97e00"
        },
        "item": {
          "id": "4636e411-a063-4b7b-8768-d2c2be8d68fe",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "094c1f25-dfe2-431b-aee5-61cdb3cffda6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f5e36b-1faa-4d74-8290-fb3e444d02ce",
        "cursor": {
          "ref": "40d06ffe-a05a-47a4-8c07-af81cbeac6f3",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c7807a52-b308-4699-8dfd-90cdd595c40e"
        },
        "item": {
          "id": "f3f5e36b-1faa-4d74-8290-fb3e444d02ce",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "6c2277b0-125d-4ef1-8e66-60b84ba8d140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc9ed2d1-9a2c-475e-b209-6a9680890cdd",
        "cursor": {
          "ref": "ee8709cc-9cdd-4f81-a9ba-790858f5f32e",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8fe37895-2f51-4e94-92a7-c637132ee3d8"
        },
        "item": {
          "id": "cc9ed2d1-9a2c-475e-b209-6a9680890cdd",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "02dd308b-1e20-408e-ac99-240a4e532602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6eae48a-6080-4a4d-8399-73980d8e47fd",
        "cursor": {
          "ref": "b8df94e9-d2da-4b8c-b0b1-1b977bc66d25",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "7a45591c-edbc-44df-80a6-e9325176b842"
        },
        "item": {
          "id": "f6eae48a-6080-4a4d-8399-73980d8e47fd",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "576c818f-84d1-4b92-8eed-27ea7aba35ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f2fd9ff-eea6-4c6a-8a2e-10259159e0f1",
        "cursor": {
          "ref": "6fa9b377-03f8-4ae2-ba17-3fc431dfdc06",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "888adbc7-e31a-4c4e-bfd9-4579a5a26975"
        },
        "item": {
          "id": "8f2fd9ff-eea6-4c6a-8a2e-10259159e0f1",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "fbf6b990-9192-48b9-956e-c42e6452a821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2dae6a3-891e-4a18-a90a-787e6ac370ed",
        "cursor": {
          "ref": "47eaf184-2336-4c0a-9101-69efd59dd13d",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a25df661-b358-467e-af56-122248eddea7"
        },
        "item": {
          "id": "b2dae6a3-891e-4a18-a90a-787e6ac370ed",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "cf2cd44f-904f-4801-8183-786807ddcb01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59bd7a22-5556-45b1-b2dc-1ad89c9be7a2",
        "cursor": {
          "ref": "fc1b0183-2c0d-4ff9-b5b4-2ce2a9a7e50a",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "44d77ea7-e19e-43d4-9cf2-b632d94f1f40"
        },
        "item": {
          "id": "59bd7a22-5556-45b1-b2dc-1ad89c9be7a2",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5f3dbaab-7463-410b-871f-48d3d8224098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1bdb09a-db16-4983-ab4c-861e55463c4a",
        "cursor": {
          "ref": "8a0d5a4e-8a89-4b8a-add1-31943f9f1382",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "9c839d84-12c3-4dd6-bcd7-9db0bb66dd6c"
        },
        "item": {
          "id": "d1bdb09a-db16-4983-ab4c-861e55463c4a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "e46ce17f-fb95-48ed-933f-e284b54167d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0505b62-9ecd-42b1-b1ba-44676f32adef",
        "cursor": {
          "ref": "b29ac455-1d73-4183-8593-ff1d130eb6c3",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "207ade8f-4585-459b-90cf-46dd4f4b5501"
        },
        "item": {
          "id": "f0505b62-9ecd-42b1-b1ba-44676f32adef",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b4936b60-9340-4bc6-a701-5b8d3532c57f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8abf0da-02aa-4756-9df2-42d31b8494bf",
        "cursor": {
          "ref": "b38987bc-c08f-43ce-add1-4776e4f29db3",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "fcc16a24-472a-4c8e-86f6-6f58e3a55ba1"
        },
        "item": {
          "id": "f8abf0da-02aa-4756-9df2-42d31b8494bf",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "da67b2d3-0a31-434c-854e-1959451fa91b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53561393-369d-499a-9df9-e9f86113ae98",
        "cursor": {
          "ref": "46403815-08aa-42a1-8383-0491bb2a04ae",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5c66c7a8-b823-4862-91d5-ba0f4b90fd00"
        },
        "item": {
          "id": "53561393-369d-499a-9df9-e9f86113ae98",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7df9fba9-1fb8-42e7-9afd-c8c39d92e4b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c87079a-fe39-4806-b9af-8cec65697db1",
        "cursor": {
          "ref": "9f0d261b-c588-4030-a2a3-c2d6160f7769",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "611b4b57-dc6b-488c-a8b5-9cda2703c756"
        },
        "item": {
          "id": "0c87079a-fe39-4806-b9af-8cec65697db1",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "62750820-2864-41f4-b5f6-3ac66dd04e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f659636-e8cf-4b3c-960f-8707cd3607e7",
        "cursor": {
          "ref": "48e5e6a7-28ad-4515-9238-25e0473f63c8",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "44f971e5-b58a-4f78-b2dc-0236e062c246"
        },
        "item": {
          "id": "0f659636-e8cf-4b3c-960f-8707cd3607e7",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e7800adb-ef9a-4593-a1ea-e8c234749a6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4075ccd-9f58-4399-a71e-6fac208d997f",
        "cursor": {
          "ref": "598e620e-949d-43af-8a84-25c04063d962",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "2b261c8c-8724-445f-933d-de30fce18ef9"
        },
        "item": {
          "id": "b4075ccd-9f58-4399-a71e-6fac208d997f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0453131d-6ea4-47b2-b337-8009fd07e7b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b7e972a-8b74-4cb7-8525-2443b767d3e2",
        "cursor": {
          "ref": "f3f19d17-3929-472d-b12a-dd642b1a6147",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ccaef64c-46d5-414a-8834-be9bd3c6a33a"
        },
        "item": {
          "id": "2b7e972a-8b74-4cb7-8525-2443b767d3e2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "09db363b-e238-4c45-8a6e-f1c11828704d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "107858c1-7e57-4b1b-b0da-d3184d5a2b71",
        "cursor": {
          "ref": "372e9946-f468-47da-aca5-f33032ec29a6",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "5435eacf-4ba4-4a53-9bbd-a239013eeef3"
        },
        "item": {
          "id": "107858c1-7e57-4b1b-b0da-d3184d5a2b71",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b4b2992f-2f00-4716-b69b-6b3531eade39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c509a96-38ca-4007-bb41-035232d6c48c",
        "cursor": {
          "ref": "5e8ede41-02d5-4a63-9204-b2cf9bf9ae2a",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "bc357b92-df2a-4d5a-b373-3f53e40cf37a"
        },
        "item": {
          "id": "5c509a96-38ca-4007-bb41-035232d6c48c",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0382417e-f87a-46c8-bff5-48ee889d5912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2daa580a-d5de-4a55-bcd1-438a55017913",
        "cursor": {
          "ref": "7c23b833-eab2-4b6b-beba-b053fff34688",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "42924909-d653-45ae-89ab-d2d47aa45b67"
        },
        "item": {
          "id": "2daa580a-d5de-4a55-bcd1-438a55017913",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1d0f27ce-088a-4504-adcb-c9dfc12b11b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbe1407b-4021-4a30-af55-c992d97041be",
        "cursor": {
          "ref": "0c17f742-d478-4ad7-95b7-b96d2ec2961c",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ec47165a-7c02-4fd0-8872-5fd11d54085b"
        },
        "item": {
          "id": "dbe1407b-4021-4a30-af55-c992d97041be",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "6d2bab69-4838-4424-9808-55bd48b711bc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 13,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b75d102-65dd-4e04-9fef-251c27e6fbcb",
        "cursor": {
          "ref": "eabca4b6-9526-48e7-ba18-2f316baf964b",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9c96739a-3216-4063-bcb4-8c60d026541f"
        },
        "item": {
          "id": "8b75d102-65dd-4e04-9fef-251c27e6fbcb",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "2fe0ee02-0956-43c7-a0a1-a915cb8eac7b",
          "status": "OK",
          "code": 200,
          "responseTime": 232,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "e541dfc1-164d-475c-8fb5-17c8bd89a409",
        "cursor": {
          "ref": "314eace5-6231-4698-8fdc-352a0c8aef82",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fd75c223-a5ad-43f5-ad83-3fe3fdd29218"
        },
        "item": {
          "id": "e541dfc1-164d-475c-8fb5-17c8bd89a409",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6d673854-e575-462e-b256-dc3115bf8d09",
          "status": "OK",
          "code": 200,
          "responseTime": 654,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4f34d2-7a9d-4e78-bd9f-350853fa99a3",
        "cursor": {
          "ref": "187e8553-9287-4a1d-adea-20c77b9c8bfb",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5eee097d-663a-445c-9ae0-7bf08ebfe324"
        },
        "item": {
          "id": "1d4f34d2-7a9d-4e78-bd9f-350853fa99a3",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "21619515-c092-415d-8f40-0265f0148975",
          "status": "OK",
          "code": 200,
          "responseTime": 598,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf30d100-4bba-4517-87bb-ea3a9940325f",
        "cursor": {
          "ref": "f490433f-5fda-4bee-80e2-91192231f446",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f6460c39-a5ff-4386-84ca-eb5f5c3f15b2"
        },
        "item": {
          "id": "cf30d100-4bba-4517-87bb-ea3a9940325f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0b242158-4545-4323-b3c1-29c274c765aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf30d100-4bba-4517-87bb-ea3a9940325f",
        "cursor": {
          "ref": "f490433f-5fda-4bee-80e2-91192231f446",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f6460c39-a5ff-4386-84ca-eb5f5c3f15b2"
        },
        "item": {
          "id": "cf30d100-4bba-4517-87bb-ea3a9940325f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0b242158-4545-4323-b3c1-29c274c765aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf30d100-4bba-4517-87bb-ea3a9940325f",
        "cursor": {
          "ref": "f490433f-5fda-4bee-80e2-91192231f446",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f6460c39-a5ff-4386-84ca-eb5f5c3f15b2"
        },
        "item": {
          "id": "cf30d100-4bba-4517-87bb-ea3a9940325f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0b242158-4545-4323-b3c1-29c274c765aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e7ff4d6-9ead-4460-b0e4-6dbaa4a15ca9",
        "cursor": {
          "ref": "b60dec93-16b9-4d5d-ba7d-69ac4d01b811",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "64565ed2-88e1-43f2-baa7-7df2ee4fb6bb"
        },
        "item": {
          "id": "4e7ff4d6-9ead-4460-b0e4-6dbaa4a15ca9",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "e5f69140-5285-4e08-b7ce-dd58f6610a20",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f73360-43ac-49e7-9743-7c144e87413c",
        "cursor": {
          "ref": "e13d76ef-6728-43af-a916-9e32b3471d01",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6ecf43b4-cfbd-49a9-b371-dce8ebd0187b"
        },
        "item": {
          "id": "86f73360-43ac-49e7-9743-7c144e87413c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "14ef3f45-8bc1-495c-be1e-06df3b5c08b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "86f73360-43ac-49e7-9743-7c144e87413c",
        "cursor": {
          "ref": "e13d76ef-6728-43af-a916-9e32b3471d01",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6ecf43b4-cfbd-49a9-b371-dce8ebd0187b"
        },
        "item": {
          "id": "86f73360-43ac-49e7-9743-7c144e87413c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "14ef3f45-8bc1-495c-be1e-06df3b5c08b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "b8d3a284-fade-46be-a8ab-d23d4af47b64",
        "cursor": {
          "ref": "94623056-18fa-44cf-83cd-914d3c5b9212",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "13d3cfbc-c5ff-4e20-b7df-62b8f0dbbaf7"
        },
        "item": {
          "id": "b8d3a284-fade-46be-a8ab-d23d4af47b64",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "81eea4d8-e50f-440a-bc5c-2ab11d9007bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "36a8bb80-105d-4553-b915-368c0509bda2",
        "cursor": {
          "ref": "b2ea8708-149f-4f1d-94fb-4e88e2159b82",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8c2276df-31ba-4212-a33f-d34b59db5bda"
        },
        "item": {
          "id": "36a8bb80-105d-4553-b915-368c0509bda2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "491de3a3-19a0-4140-8763-5234fdca2950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "36a8bb80-105d-4553-b915-368c0509bda2",
        "cursor": {
          "ref": "b2ea8708-149f-4f1d-94fb-4e88e2159b82",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8c2276df-31ba-4212-a33f-d34b59db5bda"
        },
        "item": {
          "id": "36a8bb80-105d-4553-b915-368c0509bda2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "491de3a3-19a0-4140-8763-5234fdca2950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "664eb2d1-f28c-441b-8d30-c12d8ebf81b8",
        "cursor": {
          "ref": "9e4bfc4e-a544-4954-aca0-c481e9253f3f",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a12155df-4d63-4539-89d3-e6ef2b2d1e30"
        },
        "item": {
          "id": "664eb2d1-f28c-441b-8d30-c12d8ebf81b8",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "cfd6bb66-c356-46fa-a2c2-874b1afd0175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}