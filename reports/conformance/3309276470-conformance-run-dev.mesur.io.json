{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7e586ef1-0d4b-475d-9738-993233eb6195",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ae2e9de9-4625-4879-a2de-fa0f628e1137",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e798265a-be21-44bd-97e9-170a2d5f6860",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3c334f24-d641-467a-9da3-830af0fe669f"
                }
              }
            ]
          },
          {
            "id": "fc559009-28e5-4cbc-9612-ef6508fca9cb",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9f62f09c-52fc-4dd7-a4c6-46160dcdd8f3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8ace4b7a-2f78-4a68-82a4-f54839a0c7cf"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "aa4e19bb-4d75-465d-9c8f-5d5461f75e19",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6457e9de-7f55-48d6-80eb-be17f7be03b7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "149ecaab-e8ab-41af-a663-3f3160720a3e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9040f1a1-69e6-4ab1-93be-b66b75849ee1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b7ce14b8-4552-44de-aeb6-c30274298753"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c9fb7289-5c0e-42a8-b190-db0305df8732",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a8d4f430-4ec9-42f3-a4ca-dc70e44a0217"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1dc3f17a-b160-4811-86b2-f797df296d90",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "343842fd-46e6-4262-823a-6312b172c41d"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cb7451c3-667d-4b92-bea7-3f7c0e6e3a60",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "b60e6cf2-a4ca-46af-8794-f1beac537552"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f0fc275-2892-44a9-be87-0ae95c2576c8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "576c3a9b-fc9b-4d85-a61f-d89e0e96d5ad"
            }
          }
        ]
      },
      {
        "id": "14f81cb6-40d3-4bba-9030-3a9e00547a50",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "7e649143-94ea-4f8d-8fb0-dba1606fb0be",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0a0e15fc-2f38-4888-881e-62867d8ed6b6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "877bd01e-96cf-4c39-b6a5-01e97e8ec5cc",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac2ecb0-b21d-45d4-bcb9-fc762d79be83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "312a09d7-9c88-41be-abad-24744c71b9fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b4decb-9dc3-4c30-b547-e593e137628f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4206cd7-cc6d-47ce-bfac-bae0c7e439c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a41fb76-d9ca-40f0-bddf-bf31379a1e5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9081f7fc-d0b5-4193-a38f-ed8b8e14526f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9371f3b5-b2bf-45c8-80f1-47a2e79abd9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e58d610-07e7-4212-8ca0-e506ec745e4f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "88ce525b-1ca8-43cb-9bd3-be365423f96d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "24a15977-7b01-42b4-b7f7-e9f74b557a45",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99af9200-13be-4635-9da1-1bbb1cb2db69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "68bb4d0e-895a-4688-9e89-322800768f3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "835979c1-a9d9-4b16-84d0-c39c856ebd22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bff77271-e691-4cc1-ada4-d26ae933f54c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81515bd-9e26-4186-9e15-2686baefdc24",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "698e9a85-7724-4797-9c2a-f37d6947d676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6cdd951-dfd0-48ef-a896-72f90d140cee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07273e7f-bf4f-4f13-9796-87ea6fce1307",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "15cfad7d-73dd-4b96-bbc6-2cd278efee47"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7085ba8a-107d-4526-b43e-d03b211a2249",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d54d64a5-7ae5-4de8-8f69-cd7c3f34b42a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "92824090-776b-41af-9eac-104512489216",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f77ba9d5-7c70-4f54-a1ab-6075a4055b20"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bd29860b-e942-4ec5-962c-b1345fd7dae6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "2246656c-4ceb-4a2e-9ce1-bc8cfd6e2f12"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f4a29476-077c-492c-9b86-63adaf3c3e90",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0e2b8d1b-6080-43a9-898c-e7a8731fcfa0"
            }
          }
        ]
      },
      {
        "id": "2cc7c41f-c65f-4777-b5ee-cd7b52a78e87",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "fccb41b4-fd28-4566-bb0a-9b2a664126f7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8dd281a1-d7ac-40e9-adbc-4f024bb53fa7",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e97a8e90-43ab-4adb-a004-945e5faa0905",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "193551a4-5375-441f-89c0-4ceff081e46c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b5d29ac-da96-4079-b085-429337c61e4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "275b6443-8f2a-4f64-8442-4b39a122650f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e73212c-992d-453b-bd6c-93628c7c29c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7056cca-c1a5-486c-adc8-40838acedaf7",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "468b9da8-91bb-400c-a877-b06f2986cf6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd80add0-160e-4650-ab82-dd9fc46d7401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb8aff52-602c-41fc-8fce-284434079a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e1842c5-fef2-4df6-be09-cc02ed83235b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2cecb6-ec66-4d09-ad10-18c1baa41206",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a2fd8d5-0c11-4be3-82e8-eab6476f7849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "463dc7ad-1421-407c-961c-781119a7b958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc1d7ea-b3b5-41cb-9ca7-816f6055aad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c05eddd6-afba-4312-9088-ba9c60442c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "704bd822-05a2-46f1-b827-5b74c74bb214",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f56b6fae-08dd-415a-a34f-5eb6f025aa91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55cd68d1-64be-43f3-9b9b-a8a0409199fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f673ea29-5853-402c-ae95-432b8fef841c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74cb4e58-7e7a-4f44-9bf4-b49071d6e0ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e66716-08be-46a8-afd9-99575e73267b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "207342c4-c2c1-4888-9451-84c310c12db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0074232d-0060-47ba-8272-143087f9c7bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db645c9-fe90-47cc-a39b-370c5c9af2a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d450721c-d1dc-4080-aac1-332e7babf869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64c27d6-5667-421e-95fa-e4fba81b6c2a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dc31f4f-edc1-4e37-beaf-db04abe25a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a7e96f7-288c-4596-a5f4-3a65ce4116bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0213f38-6f23-4f73-af5f-5664ee8df6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47ce0635-84ec-4993-b29c-a1eea8664d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b1f396-ab8b-456a-8418-571ec6b0ff60",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7039866d-8a2b-4350-a2e0-538d7b917301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43544fd0-d9c1-49b9-b751-48ae3619b08d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c09be77-bbc9-43a8-a3a8-f86b1b317700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6ad9855-9155-4d76-918c-a6a3c99fb6b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5db394d-fc86-4614-9ce9-d6e6819d6f74",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39cb549f-eb2c-47b3-8601-be679e7b1ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "682f91e7-6290-45cd-a53e-ef82093ee5cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10e65e7-7779-41de-81bc-0051ee1afeba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7363f6e8-35ab-40d2-b007-563d5787daf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e61668a0-6652-4b2a-af21-ad89d850caa5",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92d28b42-1e40-4d54-9876-76a3faf1436b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb353e3e-c238-4554-97ff-ffe0bb905e49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbc46fd-5cca-4293-956d-b73ab4f0fc7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3b210be-7fb6-4c1f-aa4f-5073f384db05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b54c6f27-4dd6-4d13-9be3-756ee9cb5277",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe44d9e8-13b7-4c22-b541-061574170779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68a08cfe-7465-45bf-a32f-10373128598c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f7d6faf-8a17-46ef-bc4d-c79decf93ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d30736e0-f892-48f4-8149-797659c1779c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973e8724-da96-4880-9f63-ab8aaba67caf",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5fd9424-2162-4990-82b5-f63b5b68b084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8f2f472-10e0-489b-a15a-922e8b9d72be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c0b56e-1030-4dc2-af74-b0902d3a5aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89240341-898c-4e9e-a1a4-1a8aac7b4ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "072a7695-b483-4e0f-b7fb-6f1019846518",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31224529-7968-4169-854a-4d57ecb1c220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "434b86bb-5ae2-4082-aac5-72b36bfe830e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a689edca-cb26-40f4-ade7-89fa503499e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cda21769-5bfd-428c-a6a8-6ace6ae9fb91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d4ba4cf-2780-4828-ab8c-149e1562bd1a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30bd6aee-99d4-4541-ae3c-83aa8273109c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80580374-fb2d-4d94-9e00-fe144444c1c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221b9d8d-8a7a-4f88-9ae6-c30029666156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2584578d-9cdd-4304-a4a1-c9580fd471cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6088dd87-955d-48a0-a291-fb9e5994dafc",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6275bb4-8b65-4b6e-a371-9029db4fb20e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b047c5c3-bece-400f-8c86-5910ea3e00a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "642341e9-42b5-403c-a6bd-745fe136a8e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c13343ef-b1af-490f-ba12-3548598e8472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac976adb-4967-4bf4-ab29-d4440f622028",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ee8e2f-f0a5-4553-8dd8-444fa220aacb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ff79d86-9c4e-4977-8c8d-9f23933ab950"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5704a462-cb80-49cf-bdb1-1f9ad3e45ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85b7a159-c870-4073-b1e4-5e12827b2b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396106ae-4b61-4375-bec5-3c4eb0302277",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62366fc9-866f-45e8-9b88-ae8ccd8cb42a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27f74139-ad5d-4650-8bec-e0e89bdfbbc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e9f243d-a8f9-4cd7-9451-b4fdb5bfba86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bbc982cd-5b28-400d-b04e-657a6f0c3f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a84bd5b8-758a-4424-9b32-183d95354a58",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf8d26f6-0829-4d07-9c76-528e38451874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64db71c6-4261-4bb6-b7a5-3f48ccb44f66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "454cb59f-41aa-4273-be9e-e872d1ecc648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6262bb23-3cc1-417b-8530-3292edf74a8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e86c03f-5c05-48cc-9006-aea0371b5011",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d91b9c5-7a55-488b-9e7b-b2129224444b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5622c41c-c71c-44e9-b077-5e2e540b4681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a1b569-d9b2-409a-95a2-6cb22bde4955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4dd5df7-260b-49b6-aeef-dcb54797365b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b9d1fe-26d0-480c-b480-b0d95b2bf14d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dbb3b28-80ed-4f01-b23f-2be3b2a3c4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "225a206d-b754-4a61-a44d-86589db5eaf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1fc3ece-a8fe-442d-9020-ff9ee3045be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "685a60f0-75a5-425f-b596-223e69c3c6a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d0067f-adf1-4c6b-8a7d-1961cb34a9af",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b2e01a-6411-4e43-a6b9-2b6c86596e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "758fb52d-b6c6-4d8f-9f58-e310ab686e90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b39919-8bb3-447c-bf1d-beb3442d845f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "add39362-9702-4312-8eae-84d62bf94906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d52e4f3f-05af-43fe-bb36-eaef5167017a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07027c5c-b5e0-4ceb-b07a-b6e701c84aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5670c2bd-5dc9-4cb3-96a7-2b834de21055"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79202c56-eea7-4819-97cb-304374f03b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "715bb3a8-5780-470c-bd01-662cf35614ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87365a05-cd5c-4dfd-b478-9e293c06bee8",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1392e575-6c43-4bd5-8b74-203794ca728b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac5610ab-03e1-4e3d-9463-0c730d07967c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cfb5e2f-ace1-44cf-a247-9aefe4778afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba2964dc-c463-43ec-80e4-bbdcb0ec2e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0a22465-223d-4176-9f50-611f27e58fc0",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e8368a-98ea-4db8-9786-20f1731b8b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcfb74e7-9f37-4da7-8ea1-8d47c9c90a15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bab043e-64fe-4442-8faf-201d19c82908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "97219e44-e7fc-4277-88a3-ef205ccf972f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9599a57c-394a-4550-ac66-6549f3eb4228",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "699f74f8-877e-4f06-b772-29ab8d3f1425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88b74987-9714-4fb2-a1e7-6ac81795e520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8643965d-f83e-4b3b-be01-b54865df336f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "02cccf05-0280-4af5-baaa-1a8af93bd097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74ca220f-7664-4f4f-a400-bdb4fa204aa1",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcbcdc7f-d48d-469d-8250-8587926c7bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fe8a8ed-1205-4d63-9927-df64bcb40858"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046d1f85-5c32-4a7d-8b08-5a078c3e9491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f11d105-2e1f-496d-9744-8deda47ecb83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d094d1-a428-49c4-baf5-74f9eaa49057",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec96c06d-233a-46d0-873f-53a1faa2d666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "536741ae-850b-433d-91fa-397fe6251d64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4cf564-0aa1-49f2-ad82-8c1d49e8f60b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "761aecd2-a5fc-4162-8236-894d547c6305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f2de35-ac63-48ff-b440-ff5506b613a9",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d07461f-1775-49b5-a960-7525ca16c39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71d35f59-2b53-437a-aeb3-b973519661d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5eba37f-4f13-4131-8a22-131a740d088e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c85d3ed-6983-45af-a249-5deb6ab2d6a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74e8693-8c73-40cd-8bf3-fc5a2d011af2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "113de393-9f9b-44b7-82a0-49d94aaae7b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e5d08c-0863-4f63-9857-faff443c0108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27cb36c0-9e5b-4be2-9106-f618777e11af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a426791-6557-47be-895e-3676cbd2cd32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e887c1-7331-4823-99b2-f4021b88495f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e0947c-4e5a-4e0c-ada7-9ac17ba76cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00ce8535-0fe8-4adc-b785-01c96da34287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24bc91cf-092e-4ed3-b3ad-af349eb46e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "02b2a37f-e855-4090-8bb4-26bf5591bd1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65960cec-02f5-4e19-bc73-23a9a7ab082d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f5c84a6-7eb5-4c70-a48b-fa1f2ab8e362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f43bc4d-c76e-4c7d-bf70-f29c2dbec623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0473e25-3108-4a7d-9d06-b8ca656646ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3539ad2-f392-4747-b75a-885c0527c25b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b58e22bb-8887-414a-ba57-da2da6f8bb7e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb0cfd5-0e53-4829-adff-d2f583a0dffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96296251-1ba4-4aaa-b387-ec88a16ef64e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68d1f559-917e-4dc4-835c-1b14fc196067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a294a1fd-d526-40cd-bcb4-e337713cb415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f27f2fdf-bf1d-4d89-be2e-433a84030154",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e9a749d-4989-48b6-a633-9da179ccfff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb1dcbe1-6230-4080-9d57-99fda785864c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49e1e98-ba52-42c2-a6b1-7cea1e378a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3338c442-30dc-4966-a1ac-10d4aa65c48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0129c87b-6a26-4879-b74d-1e73c3940c22",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abcec907-18d2-4c57-896a-8e793ff089b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89e58c29-e1dc-48e2-b75b-6a96bc20269b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf29307-5067-4df1-9d7b-b837a6af07fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7051f400-9eef-416b-8820-3b1096f2a393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ee45ab-7808-4706-a065-2369589ad249",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68aacc8f-bab3-43d7-96b9-66e1ad6823f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b0979f2-0ee7-46fe-a5b1-6b06d47ea7fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe94b14-6922-42bf-94f8-d0d9117cb837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3d28db9-06b6-45c4-9fdc-322998d7fff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60dbab65-b6cd-4c5b-b751-6b6734e532e7",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d5f7c38-e25a-4980-9855-5bedd1ac5738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bdb91fd-c31e-429e-abff-c13e13a7eebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52109354-b518-4c74-b4b3-31852817596c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2fc59d6d-d29d-4974-bdc8-79a9b0143676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9918a420-988a-413a-b81f-f66ad0e8e029",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c0c0837-b476-475d-ba4f-37c0d04cd5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9ada8217-8860-410b-885a-c117dab0d9f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119960cb-936e-4805-8cf1-2bf1683be54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cf77ad69-aa4b-4eb4-9879-5c36a7b26a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c4368cf-1f2d-4917-b387-b8a054fb425c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "539d6752-d491-4bdc-a4b7-04299c9685a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfee0552-72f5-480a-ac78-c4440e96c05f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b43b7b-e629-44e2-b6c5-28973c989bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "25a4c58b-9f95-4e27-b7e3-7bdb099bebe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08abe2f6-71f3-427a-83d8-cc7cd25ee095",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae97e6b-2b04-4b54-9092-3e77e28f7811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0af24c4-f66d-498f-94a4-6520fae83d1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a5ec90-951c-4e70-8b6e-08247c2e03f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab6dde35-27cd-4db9-a756-325c8a7a27e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29fd2ec3-b929-43d2-8d06-35d093ee927f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc45c524-4d2a-4933-8cff-681c9b56649e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0a42c38-9bb9-4b72-bb30-45558c3d4f41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1915cd05-2590-401e-8de2-608fd8f4635c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe51842c-66db-4dce-a618-582b450ee2bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "823422a5-6f9a-4da6-892f-4e75abecdfd5",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb1491c-ab7d-4992-bf28-c7a6e1ecf7ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91f88528-f79e-4893-a082-6918ee1928eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839591b8-2e46-4306-8547-743f5009fbb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c185a82-71ee-4027-afab-63aba2ca7193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e0eff2-e117-4735-8a8d-8d560a49fa79",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6183a7-f8ba-4cab-af9d-ec413fb4403e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77c6c960-8e56-414b-ab49-75aa24aec8bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "076a6ac4-da69-4885-82b1-f8b499ae3854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8cd60357-d521-44db-8b1a-58905d6cb2f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ce3454-385d-4bd7-895a-6f23e4183252",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d8eb33-0274-4753-b749-5487920f2520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3938d17f-199f-427b-9f69-c8bc3e9b225c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25aab49e-ebf9-4b90-aa5f-d399b0847342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "26e9ad44-6845-4300-95d4-25c2a70e0460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca3f5f83-e857-46f9-a6b2-7e5e66141227",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a97b807d-556d-4eff-a195-861be57f45df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3e4d88d-5b14-4f64-8332-a056d856f36e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc64de9-0155-4e1d-bf88-56193aed3e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "759a7454-cc86-4845-bb16-0100879a2a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf4e83f-f806-4e2f-9145-77cf33a0a384",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a2bea0-1f86-45e3-8cb4-7f81fe11a64c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fbf6ba4-7033-4d6a-b0d8-f0aeba1758ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cdc0f73-eb9e-4b67-8af5-32dd9b8760b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0ee84ff-ca76-41ac-b631-f61a540504a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cd4233b-8118-45a1-83ee-3ce9aacf8fd5",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc13ed3-d120-4e5d-8d77-90cc26e7a880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a071ecd8-a965-4411-affb-c3fe27ca6ff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e145333b-11bb-47fe-a835-fed28039bd70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c0054fc-f204-4875-b565-81c64d1cead9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfeb7bd6-ffa5-4712-839b-88c317b30826",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf9967e-f72b-4c7f-a99a-df7ae00c9283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9fab07f-35d6-425d-bbd2-05b95bb2bc59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a63316b0-986c-45b9-9016-97f718ac67dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b512785c-0015-4aff-9a7e-1e5629ea48ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a6009a-99d7-4583-81bc-6e444604b05d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92bf9a8f-9bd4-4031-bc35-ebeaf1c33a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a59bdb2-dd2d-41a1-8fa0-5b07de81d9ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6cbca5-a53c-4d69-94f2-f7c6c401677a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1149980a-14f0-4c23-9553-019944d92528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84975de3-a031-4b8e-847e-7ef3393e9cf0",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57cdaae7-4549-4a7c-b3c4-8992c4b5eec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f165979-0290-4743-ab1c-9b04b9e0f299"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24906246-7eac-40b8-a8d9-6307af1b7f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "de4caae3-f499-49ca-8512-50b556141558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f774e8-3f82-4727-8396-b15438e56a6f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f0c6a43-014c-4bf7-8243-e65db175dff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4468dcf8-9253-4640-b838-99d7146bb09f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e5eb0a-be96-4080-a8f2-cbed0cba7ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3314c6f0-2248-4d38-9c7b-a7f5d402690c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "451e0cc2-b11d-4146-8a18-8809f967f51b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f6f65a-c3eb-4bda-8114-3e9ebb859549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53d812bf-1e46-4e61-8c9c-b2b28d0becfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5029abdd-77d6-42d7-bbf1-a3a5608cbcd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e3268f5b-007f-49cc-bfeb-e78914f1a8ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3f97722-a04f-4b1b-b949-cb888e0bdcb7",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9826112f-760e-4495-afc1-f3e5327116d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a5344b9-c6fa-4ec0-b3b0-c464575d091f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8bdc661-4d16-45af-aa72-b248de8e592e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "828ca8b9-2c2d-46ab-b4b5-7430755436e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e4a7a30-f916-4915-b85e-902136dc4265",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf8d1eed-b9fb-4b6e-adf2-18c8e4490490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f962db81-9685-4954-85cf-f7de0172f87c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342004a3-ae62-46b9-9e87-8a359f904a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "97b1e467-610a-4151-b8a2-076a45fd551b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d0c01c-0fb6-4a17-9797-7114e7bed401",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "354420bd-8f3f-4d7d-9b8f-ea1eacf35380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80aec077-6443-42f2-8c5f-d01822bc2360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15626a9a-5e31-468a-9ae6-c80b74691ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "98683d24-9a23-469a-9b4e-5b1cd2765a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a652b951-2275-4995-9360-a7859325a8b8",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed6ee2c-9494-4cbd-8a6a-c4b08aba3876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77365edc-46b5-4566-ae03-f3864c4c6a14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a90ec202-4731-43f0-ae28-735b8f8fe6a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "00633ee6-23e1-4420-9e83-9072d6484de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2100c152-c2e3-4f9f-8948-f9cef27802a9",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f7fa0f-3386-44e7-bd40-7f57d0f77ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "203611cc-1530-4a6b-b030-904a04976194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47272013-4973-4710-9cf5-1ea1c4608ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba3a58bf-cf9f-4248-8f3d-7dacfd5a2b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d5c3af8-4d54-4a32-8140-a7cfd5253aba",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c244d4a7-0821-463f-898c-a81842b18e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87b50ecc-ac3c-44c8-a128-51c45d5a4bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1283e8e-c6a9-4182-9eaf-efdbe3d7c14b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5b532404-9efa-4ab7-909b-4a30e390494c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abaa3d9b-8352-40ef-9e64-667848ffc92f",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f456cac-34c2-4ffe-9cca-7c684f61c9e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60751b0e-1bb1-40b9-88fd-6a0d1575caf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e4c927-0174-43b5-8612-623713f02e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1aa3355a-cdc3-497c-a23b-3f1d5fdb323b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1de705-906f-4996-9152-bb8f5066e10d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f363de-df9c-4aa6-83a6-c3d61a8b81d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "521a2417-a373-4802-a86f-f35652d9d3d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7b5f16c-e954-47bd-9b40-fd6e47936687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e19cd6ec-5fdd-4052-a497-6c2f3a712e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f8df78-48b7-4beb-b3e2-cfd66bd75345",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a66e73cc-1ed5-4850-829f-2a0f1ab3392e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d02df219-2b47-404d-9b32-3240834d416d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1353ce3-75c6-4a9b-91ed-c634dbfee949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "72a40786-1367-4ccd-bfba-951431d62121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dabbc07-047a-4db3-ac05-5b68fe7486c7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668d70b8-09b0-4882-ba41-75f2da22d206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "813bb9e9-7e02-472b-8aa3-bab2c00e42cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f22ff42-64b4-4f20-b5b3-3d17ee91c580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5bf611b-a961-4b9b-b140-3fa70a157a95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca3ae6d7-ce67-44ec-a099-ce65377e31bb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4501bc11-0ac7-48f5-b899-57188ac207e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "032a6ca5-8e37-464d-8365-f0f09a03a8aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e9609cb-04b5-4089-925b-88daea30d7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "514d37c1-deca-4f36-908d-2899849b0d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56ac2f0-6cd3-45b0-ba4f-9325972ce487",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab19ed67-6e6d-4a92-8399-9a223319aee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e92a01e-bc3e-42d8-b475-0074e7fbc84f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "443d658a-9969-4937-ba05-31239224bda1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "65b51c5b-fab3-4f27-b705-a02d7ab6d2d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44248dc6-d457-4977-82f6-53d93f835005",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdbc28c7-2359-415e-8f71-07ab96523357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48a66e8e-260d-489c-8fa4-88b77445399b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf48d6ba-96cd-42b2-b562-c582acbad8bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bd63ce6-d458-4a45-bdfb-042921e5d5f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d86cbb8-6f06-4777-b872-fff6554559e4",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8298ac96-e7db-45e2-8015-d4695a314377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eecf1b6d-8733-477a-86de-bba493732cd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50716844-0dff-4eb5-95e0-52ce0f927898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7944f89-b379-4be2-a8c2-6ad6908f86cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4684d89e-91a2-4d5d-aa98-145b09e38817",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c1f246f-5dba-4df9-9d2e-5d95a95d4650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c5f16d9-7955-4274-a227-e67fc1640311"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a5fbd6-da5a-4ce8-b57d-fb309f6e9561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b13083d-c8da-4563-80dd-566aa0f5779d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76fd80d4-78e6-4865-b83b-0ef781d90369",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e6ce883-1c90-47d7-9766-3e0f188822e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "204502ee-1331-4b66-b447-ab6404e1deed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "946269ea-98e9-49b8-9bd0-7fb7dedfd2ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4e43709-77d4-45dd-ab77-0c4db835bfbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d129e286-d598-4349-8fd0-f2e71a6c465f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c04207b2-9c59-47e8-b91c-49f4f8147e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1f6e4f0-c5e7-452e-b810-d24656aaa3f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d86a194f-e84a-4c2a-8c84-a0638089a3ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f0d5e86b-448c-47ba-9c53-5b9def49ab7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f9a9c8b-8914-4956-a6e9-0988dac1a9cf",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88edca51-42c1-479a-b7a8-28a75e2a1149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b9511ae-ebd2-4276-8dba-30756aa6eabb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26a034a-c901-47a2-ae0f-eb10cffb191f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b41827da-4f97-4ea9-8656-ed2de027b928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a482b72a-19e8-44e1-89f9-52a8480636c4",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d92e15d8-39ab-48d1-a041-8df72b1785ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae983230-aa7a-455c-9145-363a5cd4c004"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20520dcd-8c34-4cc7-aaa5-5b326f0e2e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "52bb869f-32a2-498f-add1-b6e22c3b691d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c744934-afd3-4296-bddd-df86c2201693",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "576d17bc-e9b2-4cc1-bbae-eea9a2a49c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5ba0edb-298c-49e6-b0c6-03bc20c38969"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ecc20c6-e649-494c-b6af-d7c709fee4e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7066a86-b353-4bb7-b58d-f9a4811bda02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9616796-0e98-4009-a224-df17215c7eb8",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "454d51f1-4ce3-4d0c-8a8a-6ebb04a950d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3de513d-a5f8-422f-9027-2010353ea744"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c60ce460-4109-4497-8c26-5eed8e3d4dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d579d313-2216-40ce-bac0-3f797cfbc37d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c92bd25-bc1a-4234-80c1-2d450e569ba4",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ae7749-8159-47ce-8122-63d7a280828a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6f52a6a-a82c-41c7-90e1-736a6ba46c8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa10a6f-d6ce-47a2-aaed-d923289029b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "07d09da2-5096-4a65-a232-00e14c59417f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da91964-3869-4a40-983e-cf3793478f98",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6592a142-bfee-4fe3-aceb-27e652bef539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f21f1def-b000-4f97-8a37-b76e13c7ad44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fab32f5-ce5b-4259-8929-6ed2a43d63b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b45e3d0b-2a84-498c-a71a-cd3087501d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f32847d5-1758-41cb-8901-ea17b7af4787",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c16670-3eba-4ad4-9480-7976ceb32770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78c7b0d1-734d-48cb-af6a-fdc1813e572a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2414f47-aa61-45a4-a7a7-dbfd34ed3428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7fe47084-71d2-4c3f-95ea-dc103ce2d8ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1020601b-ebe1-49fc-b8da-727bd2db1ea2",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a2184e-5aca-432e-86c6-6ebec1720121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9017aa8e-7bc8-49a4-bf5e-aaf3a2735991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8f15dd-fdd6-4325-b71e-a169a4ace352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7cfc535-8ef5-44bc-af49-8b279df2a53e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f345b2-8851-4582-90a0-5b35b67e8543",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "199fc4c3-9fd7-4d39-b7ce-e5454a1f7b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27cf0f63-0a1c-427c-8cdc-54fab8d32df3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf8502a-4533-4e61-9eaa-6983b7f6952d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b6daee7-6955-4627-bb39-c943ffb7010b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfb4e120-2202-4d23-b6be-ca6559e3558b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ad22d7-6dc6-49b0-99ee-13248b42ed05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef036619-da68-45af-99ca-4a6ea497726c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5051682-986d-45ff-9c09-b576c4d4ebf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7edbd1e-dcf0-48f7-8943-d96001944bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f091fb-1d02-43f1-b887-803f80ff2139",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e47ac0a4-a4b9-4beb-88fc-39503fca4b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f34aae4f-7e34-45aa-b9b0-d8c076088e67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51f6c63b-614d-4c60-b170-d726fce6770b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4935cd04-e681-44a6-83be-d878704bed4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60ae9d34-c394-4755-a3be-c3a7df0dafbf",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6625066-71a5-4476-ba01-b6acd36e4fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c758d00f-7992-4884-8cfd-f4d8ac3befaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "519846cc-7768-4d38-b194-8039e01b8118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6dd18c21-d1ea-43f8-8476-90215b288c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c52ebcc-c6ec-4c3c-9b6b-f34e988bb817",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da691d9-f007-49d5-a3a0-5b5b271f6541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97ea9292-d95e-4f7e-a6df-645dcabc26cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47ee2f9a-a802-4be1-97cf-7c3aa2887994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8c37c132-11ac-43ec-bc03-2cd230182d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c18ba2-4b24-4936-bdd2-cbeb23b193f5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7710f872-3b6c-4b1e-bd27-d01ef79b79a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85662088-8e2a-4b78-8e4a-cff1093435c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80346c38-a0cd-40d6-83d1-4ca232250ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bbda8db-d21e-492a-9c7f-1ddd55145af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3feca85f-91d2-4c43-9671-a032c9f334f0",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee34022-1d2b-460e-85e4-bb0a3263314a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e577b4b-0802-4d2a-bc02-2001b961b20e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a9ab68b-447f-4585-bcea-07a2c5206a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b56f023f-f535-40ea-8c38-5ae6fad4965c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6033016-1c31-43cf-9fa7-5504303fa1db",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce2b12a7-23f2-401a-83cb-6dbcd6eb48ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb3862f5-238f-4241-896f-b4c39eea21a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "933e4afa-8252-464e-af42-52cb6102d811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "08827966-2f2d-4cf7-99a6-d2fcbdaeefcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed0d445f-4e50-49cf-8015-c733b4fef4a5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c77d55-d904-4a20-bfba-50ccbd11f1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b523b22-4bb9-4527-b1f7-e768d90a710f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44299a5a-3e40-44f4-afe6-476cc2434660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7fc801c-d1cc-41ef-bd91-5f838d68e4dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ef2f9e-6ec8-4664-a90c-e7d4cfb190a3",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be02bfb7-bcd6-4a84-a2a0-214faccd2e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd673b77-790f-40c7-9a90-922943c3bb45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "628cb8ab-ff28-4f31-a0aa-2ec94b496b63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2bc9e2cb-28b9-4e42-b447-85108abbccf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ddad8e-73b3-4137-aeaf-fafcdc3d732f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6efb1e8-f2b2-4941-b5fa-0f31bf580de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f307f09-f5da-447d-afae-d7995fb45b06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ecf477-e744-4ff2-837f-25736fd8846b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d984cfeb-9ad2-44bf-8fd4-1163b18e140d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "330cc4b5-76d9-4abc-b309-0655a1179ffd",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c82bb826-5792-4840-bfc1-ecba52fa7426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37baf8ac-2486-4126-990c-87e3f745b968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09abe2ab-f87a-46a3-83a8-b2921b51491e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "92e53045-0e90-4db5-91cc-874170d96d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a7954e2-4bc9-406c-88f7-887a9b40b8e1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "187d13b3-6924-4b5c-a2f5-1cd0b9f3e63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1644493-d0f1-406d-ad2a-a325aa1f213b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78901df4-9966-4548-9f22-715652d419e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f240fd33-d8f7-4669-b7cd-5e41467df5b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf8756f-56a9-4f71-830b-242e672ff639",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a02e81-e1d6-4224-843b-580fe514b748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f078112-e523-46f4-a6f0-d72ed1364197"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8bc3403-df54-48d2-a76a-976f31b1d78b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "483b0f6e-8589-4d21-986b-a91f6259c436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3cb1883-ecb8-43e8-8b5e-e9e60c848c19",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3391b623-c61c-4f54-b890-19cf78b80812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba0e1a50-d32d-49b6-ad68-818265fbdaaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbd2fd5-278e-4d48-829f-5228bb9cf812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c51f0cd5-a819-4dc2-ad16-59e569227570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85260872-dccf-48fa-bce2-56ebaffd16a4",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a4cb47-983c-4ed4-aadc-af0cc7e9a676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9db319c9-6138-4185-afb5-2dc02052d808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "688e6cae-2514-4ce8-8ebb-da5ea034140a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7da5b69c-c997-43d1-b34c-96519be32303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42463252-01e3-48ad-8919-fde31f1a2f19",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5244cf9-bf05-4b74-8a1e-91c89d7aeda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "59ea6496-2d91-4cdd-af85-1e32cb2ee41a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59bb525e-ecac-4a15-ac42-55fe204a5b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a667570-6fa6-49a0-b051-fe093fc67f0f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "54ebac0e-1cc3-48d1-b0e7-94da3e113510",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d4243ddb-43ba-49ed-96f4-7020c1ac1f36",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "644d7d56-d3f7-46f3-abe6-0e8c1dab2e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad5a9037-c639-474f-9f56-f8b0fcf86296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a42eb00-cd4e-44bc-80bd-a471d1abc0ec",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "21377608-b540-42ad-90a1-da9dbc39722b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4746a13b-9309-4d37-bcbb-9d66971faf6e",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af1e2c0e-5c44-4a5a-a505-06e21fd576f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "03f54689-6ca2-406a-ae57-8921baa9b341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e75f493-2863-441e-b6a2-afa6c39801fb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "b7271022-ec93-47d1-81ea-2bb9f3343fa7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34242c5f-0c30-449f-8944-080be110a236",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae89d3c2-6fe5-47f0-a22f-7af2bf5ac301"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a038d893-8a1c-4df2-8843-c828a7250e6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e62fae5a-2947-4078-ae18-5b13a6eadbe2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3306f823-1127-49cc-adcd-995638874d80",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9c15a368-ce23-434a-9e94-0b7c51a183c3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5ef386b4-77a0-44b8-9bf2-5eb542987a67",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4297eaca-ed64-4776-8452-b8f46f5aada2"
                }
              }
            ]
          },
          {
            "id": "f2c4e134-8050-4686-bd2f-76539fb164ff",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ee607e41-d032-4977-8dd1-a6444a888071",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8043b4ec-2fb1-4af4-80ab-c3c5e47295a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "62384f67-b362-439b-a8bd-4a82be3962e8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f6babd8b-5e94-49f2-a58c-060694c3c6ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4ffe7149-33fd-4080-aed6-ca4504b2770f"
                    }
                  }
                ]
              },
              {
                "id": "36f6d3b4-6709-4f37-b74d-98247d89fb3c",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf236345-fc12-4e03-a12a-0004bf47bda5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9c8106f9-c9b6-4dca-abd9-7d0eeb525f01"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e71f745-6863-428c-8350-f09acfe829e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5b69f511-b490-4263-b542-5789e8044461"
                    }
                  }
                ]
              },
              {
                "id": "8acbc303-2d26-4e4b-a747-502d990a15e4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "830c84f7-0d4a-4ad6-b9fb-5f0ce897642f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a9e523ac-63b2-44b1-92f5-291dd987d19b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96c6ec25-6491-4590-92b7-9ca5e028ca17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "310162b0-8b9d-4bdf-8210-22934c63b87f"
                    }
                  }
                ]
              },
              {
                "id": "671ab72b-8c28-44f2-932e-2fba5463ac66",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a115e073-6d10-427e-b57d-61669513dad2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "993527c8-89a6-4ddd-a68f-8db81821c002"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "66a9d7e5-1ed4-4b77-aea3-1a35c8f91f7f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "30a10a8f-3f87-41e8-9fef-96fdd25cac8e"
                    }
                  }
                ]
              },
              {
                "id": "66f624a2-fa49-45f1-bf89-83da2111024f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4971aae8-c672-4c9f-9151-d3d3877dbfe6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fbe0638c-83bc-4a1d-b7be-9fd50216c8c9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e6458fe-b5ab-44dc-aa04-437b5feff59d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a71a5cb1-ca08-4760-870f-80b7f5708274"
                    }
                  }
                ]
              },
              {
                "id": "ed9999c7-6b27-4015-aa3a-84961093946e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a4d8a8f-6bc7-409b-9132-9a7d8d3d1fc0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4daf365a-0b65-4fde-b04a-11c570ce8d87"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75f88c1e-9c03-4b2e-9ed3-9e65063ad44d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b74fc35b-a6d1-48d2-9610-b0be74b25c93"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b4cedadb-7cf6-4562-8c05-85bac93e4a96",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cf2ae148-b198-4df0-a832-4e3d6c0b9fb5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "972941a6-48b0-488b-bf5c-2a99711c3e28",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "31ed77be-96ef-471d-9bf2-4b2299467811"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "00cd2149-634c-446b-bc8c-fb13ca313611",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f36c87ec-f54d-4246-940a-2ff00d10643f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d6bf002e-5e95-4954-8ab2-a510c215d014",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9c109730-42c2-4fe9-bf41-427050a7d2bf"
            }
          }
        ]
      },
      {
        "id": "6575ea9b-79c6-4307-adc9-5e9bcf3f6ce4",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5c1a4571-c251-46ab-b5fb-d06e7059cd5f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b23a96a1-876f-4794-af86-4da09b895752",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "075414e5-70ae-4b87-b5aa-8f30a7b4ee33",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c35a04-066f-4f65-9d96-cb988450a0d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0c18fbc-3303-4bce-adf8-b2b1e0bc0334"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe814d80-767d-4aba-b24b-89caf86d31a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f1e9683-877a-46cc-8731-a035abf2c648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0518ccde-13b4-4325-b4e2-622b106c6d24",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5484fd54-c9e7-4b47-aead-ba35223e7cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8b8b42e-5127-41fd-a3ee-40250de6b587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4924cb84-2d23-4e15-b4d3-caaf62b05036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b887b648-7723-4cce-9790-afc79c7894af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213cf8bc-423d-4ba6-ae19-b16a6a18f2c5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57404560-a860-4ea1-8bad-7883de0479ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb485954-7fd2-4129-b1d9-f2398e0bb69d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281f58a6-e2e4-498f-9b16-4201ba72b6be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f863410-c093-4304-8ce3-c286c6c5f772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a30ef6c-9ca4-4522-9eff-f1392f0ba31c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "561589bd-cfb3-49ca-8a35-67e644fd74f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "394023ab-b4f8-4ca5-9ca7-be7dc938b798"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7c2aab9-f145-437a-8467-c4a853552ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6db3acf-464f-4f38-9c12-a33d68a06eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d3e895-c28d-484e-b16d-20adfe87cae0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c845fa5-9965-4ba9-9ced-6f820dceafe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f715f05-7260-49f7-abab-584be85c6afe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf9d9e2-eff3-45fc-8d20-74356c5f5b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d66638e-6788-4112-b61c-9a9ffbfdecc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb7a473d-ef8a-4830-82e6-bfaa3b15176d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dddb331-bb45-4d0b-b773-04b0d29de77d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93c57e03-19ce-4d52-9635-eecf3620198c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf7aed9-f17e-430a-99f9-882504a5cc6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "390ceb8a-335e-484f-ba5b-da1fe6cb0067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cb55dc2-f4ed-493e-a99e-dad0beabf79e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb25fc0-6391-479a-b050-1389445178df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9b76d87-1166-4ad0-9d2f-ea39147828aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54b6e0b-ab9f-4e7b-b848-d1f7b4db581d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b84f675-85dc-498b-990c-365c80d735b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0006d581-2bb2-4c34-94fb-0029e676011c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "556ea289-59f1-4d6e-9183-2c6f0d68aff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f81f35b-6125-4266-bd73-a94c8d348fb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "251ca279-7fb2-47c6-90c3-215ae719e7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8050af72-6c30-46ab-b4ca-2837b1c2c4fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4025e65-a4a2-4e92-aa67-1f6ccdae7779",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a91aff5-46e6-4e82-b530-1833fea73f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e77d605f-0fd8-4ae8-9ce4-18d30372d69f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45210450-6240-4be7-ad2b-6c2887de8515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "631c504c-c1ec-44c4-bd8f-508951e95e47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c47125cf-cc23-4d28-aacf-2e41f2d753b4",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec5cab3-fa82-449a-89e6-8357d407696e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8cd0247-7338-45d8-85b7-6b7a205dc651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d66ff53c-5e57-4361-a165-93ad7a073d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "44ffc33c-4c33-4ebb-b35e-611c78989fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b777d476-9f7e-45b6-8787-3adcf135eb48",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67518d06-cbdc-4c54-8ec0-b03dda6eb5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33682fff-bd37-4bdc-9b52-9995f32afcf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7909298-7d6c-4550-a94b-810e8959afe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "db27aad0-3551-4c8b-8b72-45c62391d7b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8c77c0-bc66-49ac-8a32-daf7b2e92f10",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6285b1-cd54-4bf7-9682-a2849b18adc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ddd3b25-ab76-44f7-9a9e-ddcef8a3da04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ebf5f4d-5b4b-4758-a2a6-e42382db8013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "06fbe17f-8639-4978-88f1-2dc98de88a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d64c0e-0204-47a2-abb4-9ab4c12af296",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5328fd1b-3af3-401d-a1b0-6c4e0b4795b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b267839f-2d36-48af-a453-abdbe9eebe01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21a3ff4c-de2b-4603-afdd-2ba8fa65b6be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "78b4b1d4-392f-4c53-a35a-70f2cc984166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "730ee6a3-6d48-4948-9bb1-56094fc781c0",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668f4ebf-3a79-412d-9b08-6e0c38a38173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61166036-c336-4c9a-81a4-7fd17b007c0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae58ef59-9bc2-41ce-afcf-cb060fa8d0ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e928947e-d4f7-41c1-8dc8-e6b169b7dbad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b3541b2-44a3-4ff6-a8c2-df7ab5bedd75",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32328a8-9d95-4778-9790-b9ff75aad4ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a37e738-3bcd-4cd3-912a-1edbe4e011c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e267013-fb56-461d-9f29-482553e06109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "cef747b2-6a6e-4591-b14e-d71fd58062d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50380813-0ffb-4430-8bc5-b6ce9724f24f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e04af703-4bf5-47c2-a61a-f45cb6be4cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21fc18b2-4875-4023-9157-b224ce20f269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c56f89-827e-4f99-886e-fe69c128cbd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "dedd5f85-6e0b-4020-8c73-b64f6dcbc61c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe441284-df72-4122-a5bc-d96ea5668936",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b77654-3a19-448c-a366-a0f0e1c0aa6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bb99ec8-375c-4d9b-aa59-6a647d9df57a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22f16f2-7cc0-4f0c-97ea-5cd227d0b3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3fb51fe-8d2f-4262-a372-99ac7264c940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7166fccb-4007-47a0-8f09-38c41b290079",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b01a870-df25-472e-854c-9c06dede6073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac2c641e-7e56-4fd2-bebe-0bf804cbf4b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa929275-6a13-4c8c-a3a1-940f66f939a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2eafc25-1fd8-493f-9b39-9997ae699296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a30bc8-3b07-442c-a30e-b8a138f5e856",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baff1046-1a08-4e67-8b83-a1b7b8fe97ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "523c921d-289f-4240-8969-75553b26bee0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e9d5d9-cd9d-4cee-8e2f-cb3e2ae977a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89236b2e-da6c-47ca-8aaf-d6ac6abad00a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8129b2-b955-4652-96f7-1420c11e5d78",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40fd6b57-0d75-446b-944b-7091f4255355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f88aed0a-70f9-4353-970d-a1e8ff2400ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6651a612-3cdf-4598-b4ae-f7080758f65a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c9c118d-4d8d-497e-8206-3fd007e5e7a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4b568d9-5873-45b1-ab6d-03cf03db6ea8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ff6dcb-5cfd-4297-8b1d-f5437f0fed0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deb9dc19-4629-447a-963e-45542f81eff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49fe4741-491a-4f5e-80e0-fd221031f6c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f745028-1574-40dd-937e-71cace2e6286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5237c36-2a09-41fc-abb3-8ba3f770b293",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "122c4a16-1c37-4362-b1ee-957ed5418637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13516746-aad4-4693-abe3-a14363bcd634"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa4ef77-c2de-49f5-b1ca-49451305f2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "519a2593-fbc7-4d9c-9c5f-4ee4c4c8b87b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3694539c-87ba-4315-a237-97ffe67c2fa0",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab5ea65-ad3c-4849-b2e0-95dfbcce7030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2b680a0-414f-4e62-b06e-a867b3827fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644d9a40-8da9-4d25-96b9-a98cd2977302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5378812b-8f23-4a5b-adf9-ea91ea84030e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434db755-cd89-49c2-aad4-af09caebf952",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de692ff-9a4b-401c-a154-cc90bb9cb754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebfcbc24-be59-4339-837f-6c2319c16e2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25881609-9caa-47fe-ba20-5e842e892d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd3594e1-52a2-403a-98a3-0182be6fdf0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d3f5d4-3d39-4c36-8b1e-2e2509d31d4b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b10e15-27cb-4ae1-a398-4c7a03cda9b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c854fe4b-0e12-4ae4-9053-328c2b599842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "966e5029-88a9-405e-9bca-791b5a2bf7b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a889bdc2-88f4-4dc1-888e-633639e5c99a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c693c073-0673-489f-81c5-d0ed17e12724",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e7b1f0-27b1-41d4-b266-340f37a18f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba7d2034-4bc8-4431-89ca-c3df5ee7bb31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "524873b7-ec44-40e8-9c79-ecb61559d336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0838c76e-bb2c-4ea3-83fb-57b418361494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "575de8de-dcc2-4d6a-a42e-27b31aa7e24a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b02c63-acea-4231-8324-603d6c3efe3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2915d007-718c-4a83-bdf2-99e23abcfe86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340bd254-aab1-41c9-84ce-41194b18b9de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aeca2e0a-edfe-406a-87d5-d3d03d1a5886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16dbfadb-89c8-4b50-a597-6c16096f9d70",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "990145bf-947c-40bf-8787-cb1d70fd4f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cbdd34c-5b73-4cc4-a545-45081c4d50a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d87db00-b594-4b04-b1d3-5567edaea41e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0716746b-1ece-4a81-b837-44575575c8a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2537743c-8715-477f-b9de-e462f29382a9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2067dbe8-db73-4212-a49d-e64fb09a0f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6261a92e-e384-40d6-a5cc-5024a66ecf6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00654e5c-e97f-41c6-ae92-0787e51144be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f2b529f-d350-413d-8726-cd1e47f30586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04fbabb8-00c4-44e1-bed3-6076f4a3a80c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce04b90a-87f7-458b-89e7-1d35d6c4da78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf660073-cbcf-45ff-b9b6-ae53a33ab6de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a20774-7bfc-41ec-bc5b-782196d81260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be8c5c35-34ad-4e09-84b4-be754b955b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fcaea51-27e9-4712-ad96-296de33e4fb5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec86277d-e887-41c2-a156-6c8c77313341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaf5ce6e-e4a7-49d7-9835-53bf08f05874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e9fb5cb-b46c-4cc8-b95b-44bfa626b1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85660a62-d9bf-4d1d-8fa2-8f65a2465c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30f50aec-a191-49aa-a65a-31671a86013c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "294ff855-684b-40fb-9bd2-df9a86f470a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d0f215a-7ad3-4603-9165-cf05b28b59eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e837754-2e70-4561-828f-9cb1c44a517d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36ab5488-de98-4572-a647-925ce6d5ec45"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1d3bbac4-fbb7-443e-9859-75ca62863c27",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9001b4f7-d953-4d63-89dd-345f978d425b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585cc861-74c6-46c6-afb2-63ec8961579f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e517b3e3-dfce-4424-b2e8-b65238ae2560"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df1cbdad-6868-445d-8b4c-2e55c4a7d17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e011517-2486-4002-a253-ec5741224a8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b75ae7da-827b-4f70-852f-275c14d8fee8",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f8dac8-cf32-4f03-b3e9-58d414f34b32",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "c7112f4f-eebb-4a29-8755-5a75365b3b31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66723790-45ba-4669-b8e5-7aef3096f612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ed73c46-ba43-4a6c-bedc-2d490caf8006"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67c4d4d9-cf2f-4f7f-b2eb-7072870ce6d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b71374db-8d90-40d9-95dd-130660d5671d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b045a486-9229-4b29-b34a-b8afa98569fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "25a92d87-b655-4fb8-9c0c-01d4fdc4fc03"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "53d80c06-b7af-4208-961a-af84ecb29778",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2cb6c9e4-9e8b-43bc-8a53-a3bb9f0013bd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "33b05749-91c9-483f-a63b-021e11d1ca64",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "12570a09-948f-4ffb-9e5a-5f75ba20f329"
            }
          }
        ]
      },
      {
        "id": "4cdbc512-9cf8-45e3-a67a-fc6f8f2bda74",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ebdf1536-2ac9-4114-8274-221227accb4b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f3502138-8e9b-4324-8fa9-7ef51b116e83",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e64e9a20-608c-4780-86f0-7e80e1ee06fa",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1530079-b519-4be0-8ef5-87cace058aed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09535fb6-414c-44f0-a586-1bbb93724300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acb66ada-d8be-43db-bc48-e51112bfe0aa",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39373da-b05f-4b51-b97b-332706ed5abd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f9c110d-5d19-4931-bc57-6699981e364d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76f7f11a-3f52-43cd-9c93-7e0643cc9b4a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "354a6fc0-cc3d-4dfe-99cb-d08d9f60b72b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d019854d-1ecf-4da3-b157-70c7e63cec43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d2f9b7-a2c0-4264-87ff-cf5a5233b365",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87b2d58f-3ec9-46fd-b9bf-9923433f6d54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "233e47bd-4aca-4f6e-872f-a57bf481dcce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "249f0351-1cf2-40ac-85c8-b36004546327",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f90e69-ec5b-4ce5-b6f2-7433c7864ca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32ce891a-5125-411d-b1ea-2cddb4289379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba256ea2-f2f6-4037-a911-7f7266092db2",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c0bdfc2-fb17-4adb-a61c-3c629c38ed35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c76f7e7-356c-4cf4-8d9a-630584dac223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f48750-967d-41a9-8959-e26c534d280f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c80d19d5-af94-47af-a7d1-0e331b814d58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f67413cd-8910-45bb-82f8-0133a5e254c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef9a4230-6244-495e-a8fc-7379d6b12c6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33edb76b-7f4d-4976-8196-b064acb242a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4864c353-4ccc-4200-9905-a955b9ab722b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd04fd3-dcb5-4dfc-9eaf-48375228dc15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9b6a5b8-1c63-4b1f-bbaf-f34d82c4e9d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e86aee8-cb15-4737-b7f1-f67bf8916a11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b9492cc-3af9-435f-9a34-44a7603bb0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34bc008-222e-431a-998b-dc380ee0211b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eda86be-2cb5-4fbc-98b4-f015aeaa3ee5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efca5c55-6a5f-4bb4-a25d-b53766e8a18a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feee3719-48b0-446d-b777-d9417d33fddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbc06a9e-dfba-4956-b39f-06f2c4b92bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bebada3d-bd58-4924-a205-eeff9f7da3e9",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa424a56-000e-4d16-8d52-b64bf02a0fe4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d3792a9-b461-41f4-9cab-70e79d2fcf4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25130b18-a63a-4478-93f4-d6079ccb5eae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17a5dcb9-e6c2-4e78-b479-f0eb9541d105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e569e91-d7a3-45c8-915c-0ae815b5c643",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0858fb-1fa2-4094-938e-f6b5dc2de5cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "591eb6db-10af-4a25-b3e1-cacef65fc302"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "909b82f5-57c6-4890-9025-2d919e0f6eab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1fd3fd3-06ce-4913-9749-b70a0d8ce833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d17a6f3-b985-4e1b-838d-68280dd3b411",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa5612f-0089-4a41-83dd-74b44095d6f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75dfd185-5501-4130-94ef-28b79bb7bbc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9c11e4-695a-4dcc-b867-b92033e64b11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f5772c0-cebd-451d-892d-e6be1117ebed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41839357-d955-46e4-bda4-6780a3670f4e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4148ad23-0a41-44ae-82ad-1638c29d7e70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0f5da14-bba7-4631-b046-48af7c3b7c29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ded963f-4a27-46bf-950e-53d6700f694f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42751a93-79fd-4d75-be11-9b52216cd5ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c604182b-fb8c-4f97-b935-90c654a52f8d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9662cd-c7a3-4994-8ac9-8dd90c2205ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9be3beb9-bbf6-4a16-b611-6d78fb839fd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa83432b-9857-47c5-baf3-bc0aba8848e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3fcddfb-0520-4bae-bc5b-79331c02ac15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c67ca765-11b1-4550-a1e4-cb88e795f427",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee58390c-e892-4daf-9150-c08a4d624c16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08bdbb47-1b46-498b-a52f-1edbe35feac7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "678d2ec2-eded-48aa-b6ad-330d544cdbe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3be74aa4-e768-4ba0-baa3-c6ba1051e5de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6add7fc3-66e7-4361-8285-998f996734fb",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe9f738-6373-44b3-9018-522f71dbe6a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb403f2b-381e-446d-87ea-32a57f90ff9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "647a199d-5a0c-4f7f-988a-229a84b2ba43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f4564e3-4df9-4263-aa87-2c6b06f6c2cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7739eadd-716f-4dcc-b443-4029da977712",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef7cbcd-291e-4bec-a539-0a4b658aa324",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42063a5f-f1c2-4d75-b8e3-d625a56f165a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf8a85e-9e08-4bac-ac05-38dafb7ae0ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "638463af-306b-491b-af00-fc54e93c78a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c28742fe-6805-4cc6-8e69-87000dbfe1df",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9deaf537-856e-481d-a42e-01361733d2b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f1d28b4-e139-4b26-a89d-5e9bc1c0d0b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "504ed2fb-dad5-4047-9d45-a06b33a38aa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2257babf-fa07-4149-ac3d-0f03c6b138ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "874dd341-338e-4cc1-97e4-49e90b15079a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b05970-a65d-4078-a9d2-2cdacc7d0442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bf2aea6-7b92-4cc1-a1cd-9e393a3f2db7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "113958d9-2dd6-46f0-bdc7-2b1a3eb2fa22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4a0a370-373d-43ce-8a2c-e918349cc90e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162c61ef-5088-4826-9197-d5e8fa9dc855",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c03b1fc-7c91-47b8-a2a4-f44159e5ec5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75e30051-775c-4d99-8089-376d3cbc71d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83b0fb5-4a9a-4414-95e2-1d04be1bf8b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1942056e-db29-41de-b26e-5d16fd961523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "149e7d5e-891a-4809-8cfe-9447e296ac49",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f45e622a-b9b5-4119-8a23-caa6792086f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d99384c-628a-468e-8ff2-c67edf78107f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "affed32c-4010-4ea4-873d-6ed88ec75356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21ce8eac-778d-4bbf-8290-719cbb69a266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c49f2572-ec11-4fe8-a8a3-bc04b0cc2b2b",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5656da8c-94d5-440d-b985-a207c73b1190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c20ad9a2-c3a6-4650-b793-1f40f6d9c7f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6116531-b17f-458a-b016-6095096b96e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ec75ab1-5539-437e-a909-d5ec2cbdef96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14084d5-284c-48eb-85eb-eb7beb973c8a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb41b359-a931-4fda-9667-79dcae3b3194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3070ad0-f6c6-4a88-9f6e-db582a3d1ee4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e43d7cd3-bff2-4186-8743-3ce7d6101f19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0226d75c-0f3f-4907-b679-b21155388380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4c7f392-626b-4ebd-a563-4d836bdfbc6c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aea7476c-e5cd-40e2-b412-9a30bcb155f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed789877-bbd0-480f-a56b-ddd7fde90508"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f98428c-93b5-4b2b-9ef7-8e900633eb08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "668d5689-2bb4-4117-82bf-ceca344d6721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcec822a-7fb0-4b37-bccb-90379857bcdb",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "437e518b-1131-46e9-b140-14cecc76b18c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4c85e41-8a32-4448-958b-ab83d3f17376"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84fa8a78-d041-47b0-877a-39285c0be7d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44d56945-c83a-437f-9ca0-d131863c7497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41ce9a2-e0e9-4378-bc93-5f710a606f8b",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168afac9-dcd0-480a-9fb8-d6dd051ad8e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fc52577-d129-491c-b20b-92dcd4d73ff8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de094f0-baf8-47e0-932f-dd2f50c42b0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92fda1e0-d59c-4b48-9a77-ca1c814807bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866091a8-83ed-434e-a9fa-95453db1fde0",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "118afb1d-e744-4e79-adac-4ba9d85d4140",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f61d4eaa-2ed9-4f1c-a2bf-9c470e03f5cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0efb7807-8139-446d-806d-5ac41994f5bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52b13850-df93-49db-99bb-1ead1e54369d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b36886b0-6ede-48d5-8f39-936e427c7829",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603cd447-38af-410c-bbe5-cbf48f930015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c28acb8c-4c1a-4336-ac82-440583244f17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45499491-c7b1-473f-be1f-d09f98e97aa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14734040-8faa-44e0-a7a0-3a7c0b28e723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e4d360-dbd1-447b-8268-6ab738c6572c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7eb85c5-3071-41f3-803e-219116b9d505",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0eb0c956-dbba-4d6e-a537-56206e0fbada"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d5d9b59-0f1b-41fd-a960-e62a4e2c50a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4c10416-4280-4bd6-8cb3-a3097a4045af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e8adc80-d9f6-40cc-a80c-f54b55ef5deb",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a027f90-4220-4ceb-9500-248e3b4eb29f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab620ca9-096d-4ee8-9614-8c76df02d476"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab55657-edd4-4d04-be80-38520724705b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d847b7a8-e4d2-4a69-9203-5f83f603a2fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70cf7eb2-1b10-4282-9893-86eb5cf40784",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d1a177-6c8a-4324-84d6-e63b44aa6225",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c95d1d68-92f6-4789-93d7-de1461f48c36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db2c44a-1236-4337-bab4-a326b91fa17d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b9943df-e354-431b-afe9-2e42a261d84a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb1274fe-f9af-433a-80d3-5bb4450fe2f0",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a32aa39-9a35-45d0-80b1-13546ceb2a62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea25406a-6366-4412-97f4-66682ad52436"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce1baa8-2f1a-4068-ae4e-ee9029259091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a720f145-d07d-4e83-8794-cc89d0d11d54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5dc0a3-816e-468a-bf4c-62461c2e8d55",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9ad61c-7c00-461e-bace-2d36a92a52ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "201db689-ecfc-43e3-bedd-0234ea3e7300"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85f8f47-b2a8-46b0-8e96-d2da86df1708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "693c32b3-3f4d-4f21-b560-4d4a6543c71a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f73651c-0f34-4eb6-812a-676a109a3c40",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0cd7426-edbe-432e-b0f1-54688283a0e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a27f2f7-8baf-4757-ab74-5a1265586863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1deb4f-72bf-41d0-a7df-caeee53576ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87a13405-a3f7-4409-b681-6fc71e86e180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "232d4bf3-d48c-40ec-88bc-f19c48161a32",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "194ba9eb-3c80-4850-b463-ea10dba4c3d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03db4448-5b39-422c-bc63-ba393354f9cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0ec0eb-06c8-466a-abf6-68df22b55927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05a2f7d2-8d80-485e-9c50-4ee5ceaa598d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b3457b9-405d-4501-8dbd-177b47b6a2a6",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5adfe74-3e9a-4742-bc4b-02c4cd618aac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cc0c5d9-8c35-4ffb-9de7-9b2d47aa1098"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b784ebb-c1af-4331-8fa4-6c52e5b9afa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79295066-1a94-4001-a550-e2866ac72897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d3c3fd-affb-4715-b871-d1fc77a7c4c5",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b8de67-1462-4a35-b3f2-8800753537c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3920478c-d332-4fbd-b698-918bb8f14269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cdc6342-54c7-4393-8722-5dc15f82bc10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "819f312f-2c18-4615-94cd-2b727a5f6b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953700e3-f484-4d37-8462-083252154e6a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c60b6ad6-9941-4cf9-92fd-951f2a86b20a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f158e93-9347-41bd-96dd-91b9938ee810"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ccad752-d7b4-46c1-9cd7-5ba36f4caf47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e005be13-646b-4669-95d8-5e59737e09dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66bcb2ca-2ea9-45d3-9303-6f139b6ac318",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63011d95-e5f9-4104-966f-bc9d8d29ecb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc30099a-d7fb-4220-9353-61287e5cfe25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ee95eb-b30e-4b41-97b4-b6b89f9596c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "211baa89-4c84-41a8-87ff-14678f878168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b423376f-bc81-4bfa-ab75-a0351ce0e22e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76324009-4113-4db8-aef8-6b4d9a2983dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef0ee751-85c9-4ccf-b350-224c81e74baf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93089e8c-b63d-4449-8502-6d67bf692453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3121681-f047-4ff8-9519-472564b6c026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a62ab0e-aea6-43ee-8b7f-9965b7e1d364",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4441844a-8d4c-4141-aead-499c628e91da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0555fff5-9fed-4d7b-9f30-d8a67d134a45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32b1d7b-a0f7-458b-a7ae-5aa851d025d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9a390b5-9c89-4b43-9190-2049abd1f37d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "918eb140-45f6-4b65-a715-bc319aa7feaa",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3227b86d-fba7-4935-940c-29b2657186a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d502304-45c7-4a3c-b5d6-144c8caecd65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36db70ff-63dc-4f24-bbfb-223aca71d7b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dcf0247-143e-4129-8455-e8988b500eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b13664-d623-43ff-8f38-2f60893fc1dc",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c035c1f2-9e05-4d1e-ade1-f289b6bfa0cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e67ceca1-11f0-4456-ac3f-e7359fa90ab6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2fa226d-d57c-4732-a7fc-6331cba6d6d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a64435c-1546-408f-a02e-ec158f61debc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0edf1c-4cb5-4674-9da6-75baa54350f0",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54eb13a7-bd9b-438b-91a0-473fd1d07b5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc0913fc-ca3d-4b46-aaff-627238d1e3d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "879b1a5e-6364-4f18-828e-39cc19d1fe0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c0eade7-da9a-40a6-be24-714a1ec2da0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70e909de-ae2d-4ee2-965d-95ad2054b803",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a89feb1d-e3ed-4d03-9fa8-d24d8532405d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e053cf0f-f0ff-4b0c-a3fd-2ef0cb56dd6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76731b11-6dc2-4000-822d-5fb8f6bfc585",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e08bf7fa-0343-4e03-abc6-ea34875b4f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c417158-b83a-4db0-8f0e-e3c0a6f43e8b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e7d51f-ac49-4395-8c46-6c9f10a0a767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52fc3935-86eb-49ae-a4a6-761adbbaead4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a21be2f-58e3-4c98-a448-d44504774959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6986dcc-0742-41a3-8ebe-e18553565398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c558893e-1bd4-4c92-9865-7b6432898dfa",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd48f29c-1810-4308-9985-a2f49e8c7466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8131a51d-fed3-497b-8f8b-9b99ae1d6311"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e06de401-fb05-4dd8-ba35-64e0446efb10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d41dd62-5c96-4cb7-a19f-5259e2caef80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b46e54f-0e8d-457f-a898-10746b9f84c8",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa94d01-082e-4784-af9b-5a2036d6270e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ccff0c5-d30d-406c-8025-782bd37dec0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "161fd2e4-6b12-4a02-8e85-2a3ef0dc06df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a18d9b52-695d-478f-a56b-62f6d7a1c2bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460e9ce7-b9c7-4809-958a-326994853897",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf7668c-2123-4433-9e01-4e9990f63690",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e43dc177-39fb-4c75-af23-2749e06b67f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8ba6b7-6da8-4f4f-a490-2b0ae7ad3d52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d82542a-9297-4ade-a380-6a1fee841b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd1809fa-b314-4827-b957-973d7e178913",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bca4bf2-08bc-4036-9eb4-eec0e774f7a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfd84a9a-f7d9-4fd2-9da0-95da1e060b7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec90050-8e2d-4c72-9a0c-2440c3d5472a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ededa1bf-81c7-409b-bb36-3e37aba4fbfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8a3d7e-aa0f-4c94-8ddf-cff2d3d26d6e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bdf92e7-e509-424b-852f-8f122cf01b9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f44831a-741a-4780-9e19-1aa25cfbafc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69152a04-bef7-4019-9301-0a343ff7a1a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8afe03c7-9957-4e31-bb0e-365f9dcf752a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b78e532-3a0f-4ba2-8dde-25babfaaa2b3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a096cbf-d11b-4935-b1cf-7a1b5e9102ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05899297-34ac-43cd-ad16-384fbfb56b2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e95abad-0efd-483b-a7f0-064795a731b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3da390f-7f3e-401b-8628-ce1f852d19ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c413d4-7dfc-4fba-a298-a2160f752043",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b955a15-86ea-4c7f-bb86-b797869f06c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15c71697-c5f5-4d9e-990c-857c33f2980e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "208094b7-47d0-42c7-a13d-bba6e161a54b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c13c7cc9-238a-4be7-9066-8b013f8e7b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faf9d687-5357-48e7-8ce1-96c303062dfe",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d46a2e-be51-4f78-97f5-c9a7a63ded94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68856fe7-5efd-47e0-8aeb-847192dab61e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7edf1fd8-5ed3-489c-9894-3fcfa7d45047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f0254ae-1da3-4558-9a83-62836659985c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a908fba7-a606-43ae-8054-31aee8ac6d36",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9252e7-2459-4321-b22f-42777d0cb4e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d892a870-b997-487e-835f-06c4741397d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82066af6-48ce-422b-9099-e03faacba377",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44677e34-1d97-4978-adc1-d732d0150377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c1bdb5-4fb4-478c-8b04-aa38189245a9",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c53e0614-e046-4a18-919c-c10b483a72e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13550ef0-b9b2-4068-83fc-6367c14ff8c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3631500d-b412-4902-abae-717db3a1e5ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38697985-79bf-4d27-90a6-f352d434a761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b75b55-c556-47b4-bb66-9562b5091c0a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b6d6a2-54d5-49a7-a966-5d0d9d4dd06c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "818d4e81-276f-40a1-99ad-2c7203ffe68f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "438b95b8-8fc4-4506-a2bf-504ca15769ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "366f7577-3461-4027-b1ab-07bb01de245b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5360aeaf-91e5-4aee-9296-2a60fcc70b92",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5afd366d-8d39-43c9-bbc4-a815c223befc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "934ece71-812b-4404-97eb-b02fb882b4d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a1017a1-2538-4ae8-80af-863c098b72c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6ced9bd-251a-402b-b462-82b6f5956ad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "942cd51a-dc5e-4cba-af2b-1064797ed357",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27333eb9-853a-4f75-9442-5cf4ee80f685",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d898b2cf-627e-4bdc-8560-6971162a7b6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad4d4c1-139b-4fd3-9bfc-967701287fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85f7f236-476a-4711-848c-79c02b4070d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0ee12f-34ba-4e3e-9c77-f2968341c4c2",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f1e857-43fd-4f3f-a458-f6262a70f65f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4f6f8e4-511a-4178-8685-ab13ac758da4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "319953d6-495e-40ba-a4f6-34ba45693538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7ae9980-b6ef-4f35-94a5-9d5ac0dfbee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be253e52-33b4-467a-a14d-2871511bd6a4",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "835e2dfc-af02-4715-b7c7-265fab0d8a24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db7ebb5b-aeab-4ea3-ba59-c61ae039aede"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71365456-1512-48e2-9bdb-fcedd28d8ee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a924b415-6d3e-4e4d-b071-d27f50049792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d600759c-15fc-4966-9e95-840d396a4746",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd07e06b-ebf0-4763-bbe2-c82d53270bf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3090e7f4-99cb-41a9-a230-e3ff6cdb3001"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a01c4528-e1c1-4498-9ebb-a958c69140c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaeb52f6-6525-4693-ba78-0ffeb9884e17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "616de2df-0178-4a1c-b78f-922685093c34",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a283b829-3f43-4bfd-b765-069cf34cd2dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "052d8d62-afff-4638-94c8-c3b18d438e48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3450e4-f76a-44a7-b49f-cde601a35a31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "842324e9-6035-48c4-a215-e1d625708ec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f41a82ce-0044-46a3-b79e-161a39535f4e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86dd4019-9640-4d69-a28c-cdf414fa1de7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0549c7df-7dcc-437e-ab4c-a538e22f9e20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a966092a-af38-4cea-bc77-2bb30c3bce2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6c37925-6e78-4626-9856-8c2d2169fefb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c77e8c-4191-4ef8-b262-226b179faa8f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7bd087f-a76f-4c89-b811-7f3f68566803",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10cc3682-f004-4a66-b61f-a418a9c1474f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca84bba-8c5e-4334-88dd-2a2409b70607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6d7d1c2-3e34-4dff-9b4c-ee8a4b9dbc55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e137686d-1fa2-4d0e-bb6a-fefb867aab09",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5333c008-90f0-4ff2-81b3-146e7a3bc851",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20102137-75ef-41c2-83b0-bad1706a8aba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "120dae76-619b-461d-aad9-530813285b2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ef559da-5b6f-4156-a0d5-72bcc31d41a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b92570-a23a-4653-9785-20ead2ca3ee2",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d73b16ae-6c7f-4b48-8b03-4fcdb2cfcdf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac4507d9-0139-4be6-91b3-cd921b1baa81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a6d61ca-7023-4651-8d46-d4cbe4a454f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d6e80d1-a2be-4fd4-861d-e3367c115569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a24f41-f8e5-4036-8661-6d4bc9132328",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "394e88a6-8b15-4934-8f5a-811392d9a490",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36a1e15a-6a05-4a78-a64b-a8f8e008016d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef4945ca-934e-4884-90eb-629a9dd463a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9c842d0-4102-440b-bd7f-2cc84f7ef439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e65b8ea-34ba-41ba-a5b9-de46244f9d5e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56303f0a-1ccc-4b9e-84b7-046af9ad0850",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71a32ed3-d29f-417a-89e1-fffca7af6b3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b852d095-1a64-4ce1-9bd7-a9a450a141fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe6682a8-d78e-4e68-aebe-9048ad873e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac0b5af2-f406-44fa-895e-43933be209fe",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00586744-256d-4a71-864d-2f8a93b07788",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "534afc1d-e2b9-4612-9cbd-00786452de59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "247480a1-041a-4df4-99ea-9032cc4e84c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75f9cb2d-6872-4505-b6ee-9e93b37c26e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599fe4ef-8396-47c5-bf20-e6df6b88def7",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a3eb346-9f35-4c2e-8e4c-e5b21f416b86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4428894c-5c49-4a46-bd19-3bea0285aac6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a15577e-ae6b-45b2-90cf-cc3961944808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca2d6990-e0cf-49cb-aef9-32eb243fff18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c5c684-c6df-439d-b342-640fe7b3b5bc",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4add720a-c894-4f3f-bd0f-4711c2759ba3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "212cdd83-4195-48dc-addb-c370895ea641"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7305584-6444-4baf-bd7c-f7dc87086de5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cb62e65-fbd9-4cb0-a9dc-528f1b5e53c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35a3aa9-eb26-45f0-b651-c34b9706e564",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c18105-d440-4f16-ac71-21ecb0cc0feb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08c70679-ead8-402a-a282-4839dd85aae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d081ac-9f56-41b8-8d90-2259823db069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40bdc052-a098-45ad-9d19-0f436b61bf10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273fe1b1-8c9d-4a94-bf73-593da025fe49",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b7af89-fb79-4153-a57e-cd6dae04d9bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7c624cf-1361-4d70-b2c5-d4cf8b280833"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "414a820e-0838-439b-9d8c-3214911968cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a967f47e-870b-4fec-8a4d-b8ae24743ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c54e1d-ad70-4aaf-bb36-3d7275319856",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb5374f7-86e3-4359-bb47-3d672f8128f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "830b5e36-11a9-4f98-9a45-c7eb09edd9cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c93703-e3c7-472c-9dce-744c4542007e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d97c33a7-fe50-4bec-9f9a-80ad1cad9b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c5664e3-6463-460a-a687-02302ab856b4",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aeb8e7e-5b2d-4c3b-898c-87432743570d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea050b5e-3295-4455-af08-8fb5a7d117be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa16a10-ee37-4d79-9f23-d2a046ae055c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e64521d3-f5bf-4771-80d6-52f276b2f1f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7acd5d6-49f5-4eaa-9199-c101d3f381e8",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24710adb-5a20-48cb-9393-94008b059cea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3b7fd5e-35e9-4257-add5-c8648aa0dbb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2c908c-f2ea-4b57-bba4-89042ebbb31b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eec1a7c-6cd7-448b-9949-b9316c494638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278c2210-5955-45d3-9791-ca1cbf5c269a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b97672-6587-4ca5-bec9-befe219b2f42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad5610e2-2c99-43cc-ace7-795b19949a80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "690111bb-81e5-4029-b8df-35f52474216a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b417ef0-e0b3-40ab-97f3-6d2284a81ae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2eafde4-bb55-4b62-b626-f8699a39e003",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3397a6c3-086e-4944-8701-716d385b2e5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "917e8694-1746-42f0-b80f-b95a66be8ca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a1c2dc-e9a3-4a77-81d4-3855b73ee7db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d22f6571-6585-4675-afd3-a89cbab622a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f677bb-fa21-4522-8286-5856b39b9742",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "194fc223-dbaf-45bd-a741-acd85ccf6fa1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4aba57e0-82e4-4d8b-9d40-820d5a2d224b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d99461-d824-402a-a995-0ed141b42643",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87e0a8e9-f162-455b-86f7-aec31681da5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba3ea38-7c29-46ac-a4d0-965c0c9b31b2",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3e06a3-9e59-4bc5-9220-f819e6be451e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf98beec-d44c-4142-9b5c-c8c594b46349"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc20835-c499-4a84-b3d6-bdac9b246b3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4c8590a-7bb1-4fd2-9e37-c25c0248ef50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e424f6-3ee6-4e0f-8037-92ba24297779",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48ecedd-6008-4f8f-ade6-cabfc0d2fd53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bca30ac-c48d-4b76-be30-2bcddc827e82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89887f71-055e-4cac-826a-65535f7b2a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34b168d6-1b22-473a-9d09-615bde59819b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "710dd67f-8479-4626-a7bc-6dfb6468eca3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46edec14-08d6-4bd0-95c5-e20fec4bb7ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b543fa2-7b7f-4e70-8696-4ff3ba00815c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e732fa-db5f-4873-9556-e8cd419f9327",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1267064-a171-49b3-a8e5-7bc2a63353f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c605b436-9070-4023-94f3-f2463208ff9f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff062aa2-05a8-4d75-b7c8-d2313e34ec4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c1137e0-25e3-4232-92fa-dca8474f80cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf6da39-df25-4baf-81f2-acd68eed5c8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6316735-179d-48ba-85c0-886f94229943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078db951-0a9a-458e-b023-4c28bf178b6e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e18aa836-78b8-40b4-af9f-c67c34d83cf0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33fc2048-f945-486e-8d2f-b19d29e4c815"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc6eaa65-1f8a-4a30-a134-5ecc49de4520",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a16b92-8138-4144-aee7-91390137a259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de8cabd8-51c2-4178-8565-a568645f58e0",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42152a71-9724-43c4-ae67-02626b7bcdbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c84feea-45d6-498c-9655-b402327aa8a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70ddb2c2-72c8-43ab-bb90-114eb51d40e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8abc103d-4c2b-418e-afc1-18addeea4db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3882677-c2ae-46aa-8439-70bd21424bf7",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7beafa86-afad-4ede-b03b-3298c04e8562",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e529ce9-4d92-4409-948b-d4818b523955"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1131f59-0455-4981-b88b-78f84fd08235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4aa174b-5b64-4c16-b279-749113e29df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c122b943-7119-46b6-bd2b-c414e5c45b9a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea48e12d-7fa5-4c67-9a8a-d1e320f68fdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3775cc2-a686-4552-aaa4-3172f5b643c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7cdf04-5702-4d28-af28-ea66bc647dfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06d73d1a-ad16-4295-8052-b032cfde2958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5f9b78-9b9b-4a3e-a1a8-4efe12b53d17",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "364e1fa4-5e0c-49c2-9237-b1a3221f3106",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e6c506f-3d83-46eb-8a3f-dded57c0b7a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68dd092d-cac5-4db9-ab41-9ec958e94e60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "093526b2-fb23-4535-befe-f255d3ccf5df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e0ef1e3-2c80-41dc-925a-4171151c4815",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f0e4c99-6c72-48dc-93fe-f786b04a0341",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79fe4c48-93fd-487a-80c7-d9f8cc458855"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7831469d-959a-4992-ac82-bf6ecbd1c4a2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4627799-eae8-4795-a2a4-0f69f039ea72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc641813-78a4-4048-b8d7-e928a39c6934",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8badbb45-5580-493f-af13-ddcfed05de0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8285e33-8462-4ae9-b054-7e0c58d20076"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03abbb05-7e99-4003-a2af-d110cc78a66c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c48a2845-ccf2-49b3-b9e6-9e87940e3cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35456215-5a92-414b-9c72-828a56b08bcc",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d94d9a71-bdb0-479f-bbb8-77006f159355",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9faaa98-e9fa-4646-af12-030b60c782bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "364ef77f-063f-45ec-baf8-b421792e3267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65733846-e2a3-4a19-9234-e37a4ee43bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef258c9-e629-4839-bb29-f8ff425ee444",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f41bd4af-eaa9-4a5b-ab0a-6c8ee63c3da8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12b0f1e7-1417-4fd1-b428-6d5b619547e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0cf5ea5-5c79-4703-8878-6780cae83abb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba34dbe8-3f67-4c27-ab7b-a3b220912f02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde2fcbb-93a9-4d05-88a9-59639be19dc7",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a78fb09-6de1-44a4-958e-950b920ab645",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d556fecb-1970-4504-af88-c0b03fd1d0b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f949b6d-c729-4894-b342-48d19c32f3de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f595a5a6-73c4-4045-88b2-984acbbe8009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef391fdf-dd88-4658-8333-5f0510c7d2cd",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e936ca20-9e5f-433c-96d8-12be5949550d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "750a05a7-63be-4f4f-977a-f4e419612766"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33a8b12-a2f7-43bf-acc1-ec8b6b650c48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88b9560b-f66b-44a6-a75f-9c2a6958e74b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "321db01f-bf4b-48ca-b2e0-a5e26ae7574e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0ba8fa-b4c9-45b3-921a-7905121b188f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff031a65-ead9-4991-a886-4862595f6f6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2813b3-fc87-4aef-964f-594f8d9ae45b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb00c0cf-7bd2-4aa3-8895-1495dc6d81eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43abc4b3-61f5-40bf-ab5a-e8921028b1d3",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9ff4c5-8e71-4c37-ba3c-2953de7b30f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e342b853-4aa5-486a-9d71-0637a795d0f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ceb6fb5-7cef-4365-ad52-6eb7e728ec3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e8731cb-2bc0-4380-9447-3d8afb72f026"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "15d6f6e4-8934-47c3-b5d3-686dbbb9af07",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69cd77d9-def9-4155-a084-067978f3e352"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4146d27-c9ac-4ee6-bcce-2e6d2a8d6606",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ede7841a-4fcf-42f6-8b82-4ddd1cbc7c7d"
                    }
                  }
                ]
              },
              {
                "id": "cfcf949d-6192-4d13-b0b4-89191b7483f4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "384d8141-2cf9-4327-a335-3252d90d3882",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d1434e0-489f-46f8-9bf7-5589a07a76e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ab3a78c6-6b7b-4656-8c19-a7c2f6ee4fe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e98ccaed-81e2-486a-b9ef-9ecb0be86422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba7f8344-a30e-440d-afb4-61973ca4dc36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db3f22c8-0656-4494-b353-5d144a307dec",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af49725-b6b3-4368-8ff0-917ff48f829c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "96b1bc0b-994e-4e54-975d-09c25dd2adf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "187afda8-93fd-488d-9df3-fda564b9c477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26649f02-5dbd-4efe-9c0d-374b9da9d1ac"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6346d6b-e572-4b80-8a11-f31ee10614e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af29b845-b081-40d1-b5e8-4659fddbfc47"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ca5eb26-370f-4319-987a-735933a99f11",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f462f69-c37b-4576-b6f6-702ca90c820c"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "5865dac4-3af7-41a9-8d55-647be2458fb7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "72164810-444b-49a1-850d-527a90720bdb",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6900f97-ea49-4e0b-a2d4-fb726edf3839",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eb3c72d4-3026-4559-808f-1c8dce7e155c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "418f7d0e-26af-467b-a6be-3a8c6445521e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "639f61b0-a895-4a37-a793-df26c345992b"
                    }
                  }
                ]
              },
              {
                "id": "282dc5ce-8ec1-4d05-8f66-a0f50896e1c2",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8f4a3c6-dd77-41e3-ac79-8c48bc26ff02",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6a2a9007-ccc8-42a2-a676-f238ab07262e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82086622-a59d-4e57-bb6f-f56994bd28a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0dbbca1e-f136-44a6-9d7c-186614469b4a"
                    }
                  }
                ]
              },
              {
                "id": "6e30debe-493d-4ee5-97b5-fcdfb7992f7f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1025d31-4d83-4a0d-a980-015a2c6f1e4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e40a6186-3c86-4696-922c-a93150d187f0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f27d816-f713-4b5e-a2b7-74f289b126c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2b4faa3-49ca-4f2e-8c7a-9632c8fc3771"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b6e3c889-8760-4aa2-956c-bd79e9878466",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "15bc5602-908e-465f-83ce-63af946ce70c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9eec5508-7b96-4be1-8657-87ae9d500174",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "da45fd41-60a6-4aaf-942a-d93ebbe24090"
            }
          }
        ]
      },
      {
        "id": "db1bccdf-d45e-4f4d-8f1b-d0bcfab236c1",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b74c33d6-bfd3-4ea5-b66a-ed3671d31c45",
            "name": "Negative Testing",
            "item": [
              {
                "id": "832959d8-a6ee-4f34-9e8c-1df216574c8a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3c5dc293-2a06-4951-b6e9-edbadc964b42",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d3b3b87-338a-4df4-ade0-4a10dde9772f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "993eda59-5c55-44fe-a853-be1fa9c7c939"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a4b2b9a-2292-4616-afd9-ed01e4cf1742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a1bdf6f-a3dc-415c-8ebb-7ce42bfb952e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b25bf4f-140c-4976-b70f-cf5f6485d9cd",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5770ec87-b033-4287-a4ab-397767f2bc52",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6c896d3a-6f58-4e72-bb04-eb7a8f16140c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "997c10d3-beae-4bd4-8651-2977ba5174f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02129153-2358-4f2a-829c-003e77d6ed34"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad2356bf-0325-40f0-8ef8-628de034e585",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5acc859-0b38-44d1-b8d2-1ca732970bca"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8950b1e-0cfe-4178-8047-2371a8f01682",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "343a5f37-8fe0-44af-bfe4-f2496d5b87ba"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c5699ba8-57fc-4eb2-8a51-787c7ffb56e6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e336784d-e36f-42b4-8967-05596ed65765"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e3c8e99e-b613-4db5-9346-8770c19c87b4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff42d5aa-d8a7-4c64-b21c-9144c19ac4ed"
            }
          }
        ]
      },
      {
        "id": "a258a8fe-ce7f-4e3c-8b80-b8fed0d959ba",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "9e2d320b-293f-42ba-a5b8-8a6da4b5d465",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d616bbab-ac57-4365-b620-7b23111c51ed",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cbbc909e-41df-4e72-b45b-c0b5ffff5684",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c5b6976-d989-4ce2-bbe6-604a08d4e799",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d909809e-1cbb-4f5e-a3ed-cc7cf98fb0fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7563ef70-c462-4f2e-b91f-499551490b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "04b9d181-3309-486e-90ef-585e7d8b163c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a7ae6ba-4624-4e51-8722-bedcc177f68e",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f404c5f-6cd7-4fcb-b4a5-6294b59b5328",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4333fdf3-d6e3-4c5d-bd9d-a3c5853bdecb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9997b68-7669-4747-9f8b-22c1311e20af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2e25470-4601-47a2-a121-f7f13f9ddc60"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "faed35d6-f165-4b63-9ff3-e6f77f6d2007",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60502338-5d41-4729-8fc1-3604240f3324"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ecb5697-f3dc-4d4b-833a-d86beadbdcdc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e3ebb9c-6bae-46bb-b0cc-e7faa07a768a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "caa20353-879d-4a7d-8781-163daba82157",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "88e39d67-ab37-475c-b409-b823a362e6ea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "280dc3e5-5379-4bab-8da4-929bf5e0adb4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "74a2819e-548a-4fab-b821-61545499092e"
            }
          }
        ]
      },
      {
        "id": "2a0cc301-704c-40d9-a1a4-372b107763da",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "9fbb4d92-38dd-4235-8f52-8ce5919bae9c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "acf00887-68a8-448a-b9c8-f301aecb8a00",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c96a883b-b2d3-4fe1-88f5-44140579f637",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf4a7fd7-591b-4517-9a89-ee56a7b671fd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "eb281422-92d9-484a-a683-d249568b8074"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa1af05-ffad-4eec-a8d2-55970be9f2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3b262b8-316d-40c6-a30a-a82731ab9b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e24d257-80ab-4833-b776-1c37921f9ac6",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d51c6df-dc85-4127-892a-bb8d626409f1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "34a9a0eb-c304-447b-858c-40c1a4eab15a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd9c37c-c7ea-41f6-830f-1f6ad18f5323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "37e91e7a-b821-46af-91f7-846adc0d023f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65e6bc8c-4148-4b17-bc46-04c7bdcd8772",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d8146f5-6914-4beb-a655-49429a7fd11f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7fd61a5-b4f1-4b5e-98b8-43d47be0bdb1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c0df40d5-7b75-4179-a8c3-4b104559de1f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "494d2cc4-620a-4d52-9822-6265cf9570d4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "04859c65-a80c-4e89-8ee7-d80cc08b7f7f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "27182057-ae30-463d-a163-32f86ac82350",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8fd278e6-f404-45a8-8567-8e00743dba8d"
            }
          }
        ]
      },
      {
        "id": "05074e22-fc64-4bab-8af1-812fe1e20fc3",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3d91468d-4a4c-4aeb-8903-07911c066217",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8b8e8d76-6faa-48ce-9d45-c58d0a2ec7ec",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "f7a93b84-ed93-425e-bfe5-3e11070dd63b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "12e1db66-9e62-403b-9015-a205e6eda0dd",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c3efae7c-0934-4f66-941d-c9289bf2609e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 86
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 197.83461538461532,
      "responseMin": 5,
      "responseMax": 2663,
      "responseSd": 363.13821213068167,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1666573543044,
      "completed": 1666573605052
    },
    "executions": [
      {
        "id": "ae2e9de9-4625-4879-a2de-fa0f628e1137",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "da869d15-3a99-413b-8198-3ce08202569e",
          "httpRequestId": "df64cabe-2b01-428e-8758-87794db52b88"
        },
        "item": {
          "id": "ae2e9de9-4625-4879-a2de-fa0f628e1137",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "3d641e13-a3b4-4ee2-ac0c-0bc9d904b7d3",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "fc559009-28e5-4cbc-9612-ef6508fca9cb",
        "cursor": {
          "ref": "68ada47a-3255-4483-8b54-a226fd4a8da3",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a592da0f-ec43-4314-8f9c-f759e52600ff"
        },
        "item": {
          "id": "fc559009-28e5-4cbc-9612-ef6508fca9cb",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "68d3fd59-4594-4831-ae8c-76a92551ecda",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "149ecaab-e8ab-41af-a663-3f3160720a3e",
        "cursor": {
          "ref": "52ec4181-6b2f-4d08-b317-2ca39b48408c",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "13fd9deb-0d8e-4573-9c7a-93d093a22ed4"
        },
        "item": {
          "id": "149ecaab-e8ab-41af-a663-3f3160720a3e",
          "name": "did_json"
        },
        "response": {
          "id": "06d71a3b-a378-480e-82d7-026b4ede20d5",
          "status": "OK",
          "code": 200,
          "responseTime": 2359,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "877bd01e-96cf-4c39-b6a5-01e97e8ec5cc",
        "cursor": {
          "ref": "4d0120b5-21bb-4247-bb38-793b1b1b2247",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8c4aed2b-5487-432d-ba92-5810ac0ed403"
        },
        "item": {
          "id": "877bd01e-96cf-4c39-b6a5-01e97e8ec5cc",
          "name": "did:invalid"
        },
        "response": {
          "id": "9b93e76f-55b3-4eb5-8c60-2622c4f2c1ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "877bd01e-96cf-4c39-b6a5-01e97e8ec5cc",
        "cursor": {
          "ref": "4d0120b5-21bb-4247-bb38-793b1b1b2247",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8c4aed2b-5487-432d-ba92-5810ac0ed403"
        },
        "item": {
          "id": "877bd01e-96cf-4c39-b6a5-01e97e8ec5cc",
          "name": "did:invalid"
        },
        "response": {
          "id": "9b93e76f-55b3-4eb5-8c60-2622c4f2c1ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b4decb-9dc3-4c30-b547-e593e137628f",
        "cursor": {
          "ref": "3416aeb7-d8aa-461e-bc79-f43f4d37e341",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fbef8929-6c07-4a5d-935e-a8cfd1a58cfd"
        },
        "item": {
          "id": "51b4decb-9dc3-4c30-b547-e593e137628f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "8e2376aa-a30b-41ca-98d9-3c218d77b4c3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1358,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9081f7fc-d0b5-4193-a38f-ed8b8e14526f",
        "cursor": {
          "ref": "b16656ec-92ac-4001-b11b-e5043f061cac",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c8da6a26-4839-4548-bb07-a68e2f49c945"
        },
        "item": {
          "id": "9081f7fc-d0b5-4193-a38f-ed8b8e14526f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e0fc3fbb-b23f-4c34-958c-ed0e5e4d8310",
          "status": "Not Found",
          "code": 404,
          "responseTime": 12,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a15977-7b01-42b4-b7f7-e9f74b557a45",
        "cursor": {
          "ref": "651d1c9c-5f05-45aa-97f2-41f5efe8adf5",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "739e01e1-bbcc-4d91-9090-b4ee2ec3166a"
        },
        "item": {
          "id": "24a15977-7b01-42b4-b7f7-e9f74b557a45",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "599c32b6-48d2-4935-9f57-4b3e52c8e17b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a81515bd-9e26-4186-9e15-2686baefdc24",
        "cursor": {
          "ref": "39a4267c-e819-4284-a91a-5530e58af5b2",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8162b797-9e0b-42c7-978a-8cd8ca8be4c5"
        },
        "item": {
          "id": "a81515bd-9e26-4186-9e15-2686baefdc24",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "03383dec-4e8f-462f-9cab-324f00a3f8ce",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 17,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a81515bd-9e26-4186-9e15-2686baefdc24",
        "cursor": {
          "ref": "39a4267c-e819-4284-a91a-5530e58af5b2",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8162b797-9e0b-42c7-978a-8cd8ca8be4c5"
        },
        "item": {
          "id": "a81515bd-9e26-4186-9e15-2686baefdc24",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "03383dec-4e8f-462f-9cab-324f00a3f8ce",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 17,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d54d64a5-7ae5-4de8-8f69-cd7c3f34b42a",
        "cursor": {
          "ref": "6d7ab387-6efb-48fc-aa6f-e38c28d59bea",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "576d5c6a-af11-4661-8abd-7b51d6229023"
        },
        "item": {
          "id": "d54d64a5-7ae5-4de8-8f69-cd7c3f34b42a",
          "name": "identifiers"
        },
        "response": {
          "id": "24771f74-9617-4273-83c1-8bd6e2eddd9e",
          "status": "OK",
          "code": 200,
          "responseTime": 671,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e97a8e90-43ab-4adb-a004-945e5faa0905",
        "cursor": {
          "ref": "99e668df-de61-4f82-9ef0-27f34d5ce1e2",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3b140df0-0240-4196-89ff-cbb35be002dc"
        },
        "item": {
          "id": "e97a8e90-43ab-4adb-a004-945e5faa0905",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "832f21fe-bf37-4d78-8758-acbec2de5a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e97a8e90-43ab-4adb-a004-945e5faa0905",
        "cursor": {
          "ref": "99e668df-de61-4f82-9ef0-27f34d5ce1e2",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3b140df0-0240-4196-89ff-cbb35be002dc"
        },
        "item": {
          "id": "e97a8e90-43ab-4adb-a004-945e5faa0905",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "832f21fe-bf37-4d78-8758-acbec2de5a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7056cca-c1a5-486c-adc8-40838acedaf7",
        "cursor": {
          "ref": "76adec52-3e18-4d94-9b41-b6f2e0f7d019",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c5255670-f640-423e-b56b-f07bcfe02467"
        },
        "item": {
          "id": "d7056cca-c1a5-486c-adc8-40838acedaf7",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c007d27c-efac-463a-9835-fef9ce82f62e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2cecb6-ec66-4d09-ad10-18c1baa41206",
        "cursor": {
          "ref": "b5eaf2ff-17a9-4bdd-8a5a-4bda5513be94",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "bc313731-004e-459a-8b99-14db37977cba"
        },
        "item": {
          "id": "bf2cecb6-ec66-4d09-ad10-18c1baa41206",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "86040750-42d8-43b9-8cfd-f9cda20c324b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704bd822-05a2-46f1-b827-5b74c74bb214",
        "cursor": {
          "ref": "dbaad68f-99df-438b-ad7c-1129aef7c701",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8c29afc6-0ecd-47bc-a312-0384fe8c3794"
        },
        "item": {
          "id": "704bd822-05a2-46f1-b827-5b74c74bb214",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "338d3359-5432-4992-9b1c-d09a43449c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e66716-08be-46a8-afd9-99575e73267b",
        "cursor": {
          "ref": "04178dd5-5477-402d-93c3-52daedf85995",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d360d3e9-a9e5-4cb8-807d-1c03c75e45b0"
        },
        "item": {
          "id": "f5e66716-08be-46a8-afd9-99575e73267b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b335f09d-a704-4281-be74-c7551b63b0e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a64c27d6-5667-421e-95fa-e4fba81b6c2a",
        "cursor": {
          "ref": "bae44a34-93fe-450a-bb1a-a366e301571a",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e9a03a5a-8d3a-44a6-bca0-ef5cfd257756"
        },
        "item": {
          "id": "a64c27d6-5667-421e-95fa-e4fba81b6c2a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1b81600b-6346-438a-9f95-d077bad803bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b1f396-ab8b-456a-8418-571ec6b0ff60",
        "cursor": {
          "ref": "85494485-a8a0-485d-a785-5e6c6d9b3557",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "55f1d57c-5296-4a63-9681-29083753fd20"
        },
        "item": {
          "id": "f5b1f396-ab8b-456a-8418-571ec6b0ff60",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "fda2e429-b337-4478-b5d7-76721855bbec",
          "status": "Created",
          "code": 201,
          "responseTime": 759,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "a5db394d-fc86-4614-9ce9-d6e6819d6f74",
        "cursor": {
          "ref": "1a8acdb9-be84-433e-a821-f12f63f229a7",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0ed2fb6e-2ea4-49cd-89e7-6e79bdb60b1d"
        },
        "item": {
          "id": "a5db394d-fc86-4614-9ce9-d6e6819d6f74",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "cc7d6c62-d23c-49e1-8f46-e5f76afdca8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e61668a0-6652-4b2a-af21-ad89d850caa5",
        "cursor": {
          "ref": "79c9c60b-51c5-439d-8279-105e3ba47e12",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "221298ec-dc39-4aa2-9e99-e09a0abda115"
        },
        "item": {
          "id": "e61668a0-6652-4b2a-af21-ad89d850caa5",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "bb9cec63-eeb2-457f-9224-764a3373a9ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b54c6f27-4dd6-4d13-9be3-756ee9cb5277",
        "cursor": {
          "ref": "b355a933-9f9f-4631-b408-de2016be8f58",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "52d8fb06-1faf-49af-ac8a-6e8a8288085b"
        },
        "item": {
          "id": "b54c6f27-4dd6-4d13-9be3-756ee9cb5277",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "35def1f5-da23-4a0b-8ca1-c5aa6b56ec5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973e8724-da96-4880-9f63-ab8aaba67caf",
        "cursor": {
          "ref": "929e3537-c7ea-482d-bb1e-bf32107cf230",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1c47020c-10d2-4ead-a633-0492d533104b"
        },
        "item": {
          "id": "973e8724-da96-4880-9f63-ab8aaba67caf",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "8942eb71-91ac-4f27-8e47-965e0e586956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "072a7695-b483-4e0f-b7fb-6f1019846518",
        "cursor": {
          "ref": "f74cdc60-fa81-47b8-84a8-9986e57c4495",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9fba4c8b-24b6-41a5-919a-561b6c50d8e4"
        },
        "item": {
          "id": "072a7695-b483-4e0f-b7fb-6f1019846518",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "00cd1c02-34e4-4489-9c50-e46a953827a2",
          "status": "Created",
          "code": 201,
          "responseTime": 504,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "8d4ba4cf-2780-4828-ab8c-149e1562bd1a",
        "cursor": {
          "ref": "f30b50da-5bdd-4774-9d1e-385658aef917",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "2076ff0d-afda-4107-8df7-46bf7b84aeb6"
        },
        "item": {
          "id": "8d4ba4cf-2780-4828-ab8c-149e1562bd1a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6162398b-10ea-4158-b21c-f37a3389f4bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6088dd87-955d-48a0-a291-fb9e5994dafc",
        "cursor": {
          "ref": "1955dd5f-596d-4595-a73f-141fabd3797a",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "eccb8e16-b92d-4ec9-b5a7-18dc8786be71"
        },
        "item": {
          "id": "6088dd87-955d-48a0-a291-fb9e5994dafc",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "13be1d7f-fe7d-45f4-9a63-d88a41e7d119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac976adb-4967-4bf4-ab29-d4440f622028",
        "cursor": {
          "ref": "454228c2-18cb-4301-8aae-9a38938290bd",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "88606bc0-4788-46ff-ad0b-c7763ce5f4ad"
        },
        "item": {
          "id": "ac976adb-4967-4bf4-ab29-d4440f622028",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "eb4fed3d-999d-44e5-a290-941b389a0131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "396106ae-4b61-4375-bec5-3c4eb0302277",
        "cursor": {
          "ref": "4492bdb2-8fc5-472f-a5e6-673dbcdb081e",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3b95e808-13da-491a-a771-6e6d7e8d77ad"
        },
        "item": {
          "id": "396106ae-4b61-4375-bec5-3c4eb0302277",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "292145ee-3d81-4f26-a1f1-865b0a441a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a84bd5b8-758a-4424-9b32-183d95354a58",
        "cursor": {
          "ref": "5881e40f-bbfb-4a1a-b727-2e9a2233aaa5",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ccf8f517-8286-4224-a400-6c7fc4845339"
        },
        "item": {
          "id": "a84bd5b8-758a-4424-9b32-183d95354a58",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5ed38961-4921-4c5d-a5f1-9b6cbb12c6b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e86c03f-5c05-48cc-9006-aea0371b5011",
        "cursor": {
          "ref": "f97a2a03-6887-4c16-8506-018f7cf37c27",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "12cfaba2-5d48-4d66-b4ab-7c8bd237e8c8"
        },
        "item": {
          "id": "9e86c03f-5c05-48cc-9006-aea0371b5011",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "92e042fd-3ac2-4437-b32b-9c88d9624fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b9d1fe-26d0-480c-b480-b0d95b2bf14d",
        "cursor": {
          "ref": "5246e179-60ac-485e-adec-8fbc4e33dd6e",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9da12bb7-b5ac-4819-a5b3-b8300b07d5ff"
        },
        "item": {
          "id": "51b9d1fe-26d0-480c-b480-b0d95b2bf14d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a260bf30-ca66-419c-b1a8-6fa43b4e6c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d0067f-adf1-4c6b-8a7d-1961cb34a9af",
        "cursor": {
          "ref": "d27c5f9f-4c97-42d1-82ce-d68f2fb2fa8e",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6b12c536-4fa8-4c18-bb21-e0e585339062"
        },
        "item": {
          "id": "94d0067f-adf1-4c6b-8a7d-1961cb34a9af",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "bb7377d4-d5a9-40c3-b532-b426f54dde55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d52e4f3f-05af-43fe-bb36-eaef5167017a",
        "cursor": {
          "ref": "f54649ec-ad78-4335-8910-b9dc2a5811fe",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "96ac310d-8a99-4150-b947-eeb53d3de78c"
        },
        "item": {
          "id": "d52e4f3f-05af-43fe-bb36-eaef5167017a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7ca40862-ce98-4a04-88c1-e470b87c4b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87365a05-cd5c-4dfd-b478-9e293c06bee8",
        "cursor": {
          "ref": "2d0357ea-ecee-402e-bd9d-bd8d53651020",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "87432e0e-3339-4310-9597-2e045a9e2dd1"
        },
        "item": {
          "id": "87365a05-cd5c-4dfd-b478-9e293c06bee8",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6046f3c6-3a03-45d3-a10e-90cca5905727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0a22465-223d-4176-9f50-611f27e58fc0",
        "cursor": {
          "ref": "450d6ba3-53c3-4255-a2b2-de2212a0ef76",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8f5cb6ad-a4b9-42e1-add9-8ce278fbea99"
        },
        "item": {
          "id": "a0a22465-223d-4176-9f50-611f27e58fc0",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "383fff61-06b1-4afb-b75c-42dbe297c054",
          "status": "Created",
          "code": 201,
          "responseTime": 910,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "9599a57c-394a-4550-ac66-6549f3eb4228",
        "cursor": {
          "ref": "7006cfef-cc9f-4178-99c7-e69f53c5d0a8",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ca4f3576-0a82-4fd3-b5ff-e024f198abc4"
        },
        "item": {
          "id": "9599a57c-394a-4550-ac66-6549f3eb4228",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "19d64e3d-6107-453c-9ebe-5c42656273fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74ca220f-7664-4f4f-a400-bdb4fa204aa1",
        "cursor": {
          "ref": "dbded50d-9109-45a9-a680-7df9455c5599",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "746befed-6b77-4f2f-b12a-83a08d8ef0b5"
        },
        "item": {
          "id": "74ca220f-7664-4f4f-a400-bdb4fa204aa1",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "94336d7a-2aef-4c7b-a366-9cb51e5ed9ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d094d1-a428-49c4-baf5-74f9eaa49057",
        "cursor": {
          "ref": "d1e15de9-7b3f-4362-a44e-7c31f7d3dd51",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "5f480591-59e0-46fa-83a4-45751db81071"
        },
        "item": {
          "id": "75d094d1-a428-49c4-baf5-74f9eaa49057",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "cc6da8fb-0f50-4d51-a759-36f95757378e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f2de35-ac63-48ff-b440-ff5506b613a9",
        "cursor": {
          "ref": "50934e62-fd80-4b25-b892-47c1b6c4ec0f",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f0b2533b-231e-4d85-802c-9fe56071d685"
        },
        "item": {
          "id": "33f2de35-ac63-48ff-b440-ff5506b613a9",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d1d36de9-d892-448d-b9fe-da6e19ec5a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74e8693-8c73-40cd-8bf3-fc5a2d011af2",
        "cursor": {
          "ref": "f357f8a9-8691-407d-bc5d-a97ca9ea8b30",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e3562000-7b8d-4231-8cb3-a88d80f3d6d0"
        },
        "item": {
          "id": "f74e8693-8c73-40cd-8bf3-fc5a2d011af2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "46816f7e-8bf3-4b8b-9e19-2734a1806de0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e887c1-7331-4823-99b2-f4021b88495f",
        "cursor": {
          "ref": "a84d9f6c-35b2-4741-a725-05d848051000",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7db57761-7f00-4ddf-a0e4-60bdbd8bb87a"
        },
        "item": {
          "id": "f4e887c1-7331-4823-99b2-f4021b88495f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "0520e83f-21bd-4c13-90f0-d1c7c4c80989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65960cec-02f5-4e19-bc73-23a9a7ab082d",
        "cursor": {
          "ref": "8b7cf285-2b68-481d-9ad1-9415ba629f66",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "977b5267-dc16-4cd2-93f9-a2b9318043f1"
        },
        "item": {
          "id": "65960cec-02f5-4e19-bc73-23a9a7ab082d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "dba0a853-82e6-4c7b-b086-2186f1c0412e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b58e22bb-8887-414a-ba57-da2da6f8bb7e",
        "cursor": {
          "ref": "112c0170-87f2-46e7-9e7b-7a4c020cfbf1",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "cd15ee00-4718-4923-82ce-ffd3354c5963"
        },
        "item": {
          "id": "b58e22bb-8887-414a-ba57-da2da6f8bb7e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f0225a72-4157-42d8-9033-9009ae82079f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f27f2fdf-bf1d-4d89-be2e-433a84030154",
        "cursor": {
          "ref": "f7a30089-966e-43ed-a065-24c2eca62648",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "cadf3a58-4f59-4b0e-b39a-4b7b2988624f"
        },
        "item": {
          "id": "f27f2fdf-bf1d-4d89-be2e-433a84030154",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "69c5f3ea-92f7-4b22-9161-05678b021431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0129c87b-6a26-4879-b74d-1e73c3940c22",
        "cursor": {
          "ref": "6c7069bb-19c2-4409-bd62-3caccdbf360c",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ab6cd8be-abea-4cb2-8f9f-1a384ce9aa97"
        },
        "item": {
          "id": "0129c87b-6a26-4879-b74d-1e73c3940c22",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "3da19e1f-2bfd-4155-90ef-113db0669da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ee45ab-7808-4706-a065-2369589ad249",
        "cursor": {
          "ref": "52d31c85-9eaf-4651-a30f-1703c390ef3b",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5cf4497e-bf29-4042-92a2-0e77d0862cd3"
        },
        "item": {
          "id": "a4ee45ab-7808-4706-a065-2369589ad249",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "4d69ca7e-c07d-413d-af3d-82b969b3916b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60dbab65-b6cd-4c5b-b751-6b6734e532e7",
        "cursor": {
          "ref": "784ed5e8-9613-4493-b79b-e379c28508d8",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5184957b-7905-4a0c-85f2-d3acb3560653"
        },
        "item": {
          "id": "60dbab65-b6cd-4c5b-b751-6b6734e532e7",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "6ab43b84-1c06-4d7c-8311-cc2f39a668f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9918a420-988a-413a-b81f-f66ad0e8e029",
        "cursor": {
          "ref": "17711e0f-3c78-46fa-9587-3305af5309a2",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "292d4718-c755-4a13-a303-5fb2ab914e9f"
        },
        "item": {
          "id": "9918a420-988a-413a-b81f-f66ad0e8e029",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3dc07545-1d9a-4f23-a965-1365c6607540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "0c4368cf-1f2d-4917-b387-b8a054fb425c",
        "cursor": {
          "ref": "beb5cd1f-e66d-45b5-a3e5-cfdadfc2781b",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "deef9005-b062-49b6-b1be-c1d37e1cac7b"
        },
        "item": {
          "id": "0c4368cf-1f2d-4917-b387-b8a054fb425c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7e16b61e-84e0-4a1f-8fd6-9eea987f58f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08abe2f6-71f3-427a-83d8-cc7cd25ee095",
        "cursor": {
          "ref": "c1af6dc1-7ef2-482f-81f6-3d6c071a7c74",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1e71f689-9c8c-4f3d-9e54-79db3be8b006"
        },
        "item": {
          "id": "08abe2f6-71f3-427a-83d8-cc7cd25ee095",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "f9a33ceb-787d-4d35-9953-109d70c10d42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29fd2ec3-b929-43d2-8d06-35d093ee927f",
        "cursor": {
          "ref": "39ae31fa-32fb-4147-9e9c-16715b696c3e",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7457acb8-8689-42f4-abe2-94a2988b75b2"
        },
        "item": {
          "id": "29fd2ec3-b929-43d2-8d06-35d093ee927f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "16744ab9-0627-4d07-91d5-2fbad871d9a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "823422a5-6f9a-4da6-892f-4e75abecdfd5",
        "cursor": {
          "ref": "76a92bc7-b7f0-4984-89b2-d9b65a09a330",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6731b75e-b495-4129-8ea4-f92c5b0a23d4"
        },
        "item": {
          "id": "823422a5-6f9a-4da6-892f-4e75abecdfd5",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d1491ad8-9d8e-4bc5-9dcc-814997111807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e0eff2-e117-4735-8a8d-8d560a49fa79",
        "cursor": {
          "ref": "48f85d8d-e3a8-4b3d-9134-59fd63adab77",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7a6d7389-1b73-4bc1-82e4-a342ad6feaa9"
        },
        "item": {
          "id": "36e0eff2-e117-4735-8a8d-8d560a49fa79",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "9189cddd-7c48-471f-8043-3e302056805c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ce3454-385d-4bd7-895a-6f23e4183252",
        "cursor": {
          "ref": "38c0ced1-1add-456d-8f41-a73383e69e06",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "74994833-005f-4bb5-8e8f-042e2005352e"
        },
        "item": {
          "id": "76ce3454-385d-4bd7-895a-6f23e4183252",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4bbea398-b464-4b2d-add6-bc627ed0ff08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca3f5f83-e857-46f9-a6b2-7e5e66141227",
        "cursor": {
          "ref": "95ded5d5-1a2f-4534-aee1-ddcb1b7660e7",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a7ee6fc0-88cb-4795-914f-534829d5bbc5"
        },
        "item": {
          "id": "ca3f5f83-e857-46f9-a6b2-7e5e66141227",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f9f1954e-5f74-42cf-946b-a91a7f1ed354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 347,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "cbf4e83f-f806-4e2f-9145-77cf33a0a384",
        "cursor": {
          "ref": "0b022f2c-9425-42c0-851d-9fcff691a882",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6118d268-8d34-4a18-abdf-6f291050f1aa"
        },
        "item": {
          "id": "cbf4e83f-f806-4e2f-9145-77cf33a0a384",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "96a51ae9-20c8-4d38-ac9f-c3e560a6c862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cd4233b-8118-45a1-83ee-3ce9aacf8fd5",
        "cursor": {
          "ref": "1a71b78d-8cbc-4c5a-aa17-42a657268e5d",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "6eaa314d-970f-4afa-975b-1fc3a7be81a3"
        },
        "item": {
          "id": "8cd4233b-8118-45a1-83ee-3ce9aacf8fd5",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "01ec78af-dc03-43c0-8992-15f2fbf8c6fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfeb7bd6-ffa5-4712-839b-88c317b30826",
        "cursor": {
          "ref": "50d2415b-8a25-46c3-9b86-0561b239eeea",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "76d10152-1fcc-40ce-95b5-ceae3d10cf1c"
        },
        "item": {
          "id": "dfeb7bd6-ffa5-4712-839b-88c317b30826",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0827894a-cdf7-4896-8ce5-545411635275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a6009a-99d7-4583-81bc-6e444604b05d",
        "cursor": {
          "ref": "b301d027-1ee7-4838-a63d-5f1c876adb4a",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5193b3b5-dbc6-47f7-ab14-39d5fb9aba64"
        },
        "item": {
          "id": "18a6009a-99d7-4583-81bc-6e444604b05d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e53e421a-a3ce-4934-aeb2-4a92073a61eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84975de3-a031-4b8e-847e-7ef3393e9cf0",
        "cursor": {
          "ref": "2145bfe7-3613-4fc3-95db-9318b762f46b",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8ad03b38-0fa3-4bdf-a190-e1ada38abd11"
        },
        "item": {
          "id": "84975de3-a031-4b8e-847e-7ef3393e9cf0",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "26038f4b-d921-4b9b-9b99-3331a2652a10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f774e8-3f82-4727-8396-b15438e56a6f",
        "cursor": {
          "ref": "d9a6358e-c70e-45d4-94d7-b1eb1cdfa381",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0a427b24-f57e-4f96-9c04-7bf76f9b85e1"
        },
        "item": {
          "id": "16f774e8-3f82-4727-8396-b15438e56a6f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "7f66ce36-961a-4c49-b007-81c1a7dd792e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "451e0cc2-b11d-4146-8a18-8809f967f51b",
        "cursor": {
          "ref": "f38a1149-5f68-40ff-aa85-e3702ee10848",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f0db5a9b-85aa-47c0-bdd1-be89d3138df8"
        },
        "item": {
          "id": "451e0cc2-b11d-4146-8a18-8809f967f51b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a5848f29-6ca7-43f4-afd0-ea0c23b7e57d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3f97722-a04f-4b1b-b949-cb888e0bdcb7",
        "cursor": {
          "ref": "013fa5e5-0a86-4919-8de1-1bc38d066bed",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f347f4a8-094f-4a76-be2c-f23a36d9026c"
        },
        "item": {
          "id": "d3f97722-a04f-4b1b-b949-cb888e0bdcb7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3096a41e-1c8e-423b-ace6-8179caae72ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e4a7a30-f916-4915-b85e-902136dc4265",
        "cursor": {
          "ref": "845f8593-0b82-4447-ad7c-7aeb9bed2a9d",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "db168d69-072c-4857-85a1-e004f9f8876e"
        },
        "item": {
          "id": "9e4a7a30-f916-4915-b85e-902136dc4265",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "25515493-c81a-4960-9bcd-f3b1b6b7b929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d0c01c-0fb6-4a17-9797-7114e7bed401",
        "cursor": {
          "ref": "572d8d09-99ec-4b53-af4e-bfc209c7b163",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "85447007-a3cd-4109-bc38-9e02c31a71eb"
        },
        "item": {
          "id": "20d0c01c-0fb6-4a17-9797-7114e7bed401",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "0a97b849-81a8-447e-a7eb-25f2e2ff5df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a652b951-2275-4995-9360-a7859325a8b8",
        "cursor": {
          "ref": "28f21794-f9d1-47e5-9737-f5702581d252",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ac07a6ed-22d6-407d-a458-fe59d952048f"
        },
        "item": {
          "id": "a652b951-2275-4995-9360-a7859325a8b8",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "be552e6a-57fd-445a-9522-47b69d9039a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2100c152-c2e3-4f9f-8948-f9cef27802a9",
        "cursor": {
          "ref": "26a1fc47-1e51-46f4-bd7b-5b60f12ebc5d",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "83a1027a-d1c4-4941-b6fb-efac11f3abee"
        },
        "item": {
          "id": "2100c152-c2e3-4f9f-8948-f9cef27802a9",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4d750f37-e0d4-4bf5-9893-b279cb917f9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 430,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d5c3af8-4d54-4a32-8140-a7cfd5253aba",
        "cursor": {
          "ref": "9523be46-2412-4daf-bec2-ade0c304cadc",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "1474437d-f8ad-46b7-855b-94277fb05f88"
        },
        "item": {
          "id": "4d5c3af8-4d54-4a32-8140-a7cfd5253aba",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "dd9fe9b9-fe13-4f1a-981a-05f874d806c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abaa3d9b-8352-40ef-9e64-667848ffc92f",
        "cursor": {
          "ref": "ec0cef86-a989-4fbc-9d58-3a531b69dbd3",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "004ef436-77c8-499b-ad10-3123bdc23b0f"
        },
        "item": {
          "id": "abaa3d9b-8352-40ef-9e64-667848ffc92f",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b205603e-7006-4620-b018-21a6199a02ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be1de705-906f-4996-9152-bb8f5066e10d",
        "cursor": {
          "ref": "2cd8d0ed-5b16-4f26-9b55-e3245af14737",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2630cf60-d52d-4e6a-ab13-714bb1b9d5b9"
        },
        "item": {
          "id": "be1de705-906f-4996-9152-bb8f5066e10d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4004ed11-1613-4033-9861-3983f0ef33ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f8df78-48b7-4beb-b3e2-cfd66bd75345",
        "cursor": {
          "ref": "033b60d6-ab9e-4592-9184-fc6a49e29d7e",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e3d4ac35-0d1b-486e-a54e-70625d4bc8ad"
        },
        "item": {
          "id": "48f8df78-48b7-4beb-b3e2-cfd66bd75345",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "57a0cee1-42f7-42e2-8339-cd2922cca48e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dabbc07-047a-4db3-ac05-5b68fe7486c7",
        "cursor": {
          "ref": "40987931-5223-4779-9880-8305850855af",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1e2dfea0-c1c2-4a84-8180-ec6c5f791a1b"
        },
        "item": {
          "id": "5dabbc07-047a-4db3-ac05-5b68fe7486c7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "80e3a189-65d3-42b8-ac2c-75fd29bf2ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 410,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca3ae6d7-ce67-44ec-a099-ce65377e31bb",
        "cursor": {
          "ref": "5033f4e5-86b1-41e9-a212-6ce1f20275b6",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0fc33365-b49a-44e1-bdc5-370ebfbcaec8"
        },
        "item": {
          "id": "ca3ae6d7-ce67-44ec-a099-ce65377e31bb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a4841966-529b-4f4b-9e72-faec2b7fdaa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b56ac2f0-6cd3-45b0-ba4f-9325972ce487",
        "cursor": {
          "ref": "16a217f5-21c2-4aea-9249-5760bd85a846",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "45fdbc0c-4781-4a27-bd5a-be79b183956f"
        },
        "item": {
          "id": "b56ac2f0-6cd3-45b0-ba4f-9325972ce487",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "55f644f7-e65c-4c7e-b69e-aabee703a580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44248dc6-d457-4977-82f6-53d93f835005",
        "cursor": {
          "ref": "4c753d69-627e-4edd-84b1-5c968bbe483a",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "79d843f1-5dc2-47ff-9570-4752055b5d67"
        },
        "item": {
          "id": "44248dc6-d457-4977-82f6-53d93f835005",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "9bcc94d0-64fe-45d9-b0ef-5e6c82dd72e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d86cbb8-6f06-4777-b872-fff6554559e4",
        "cursor": {
          "ref": "6a97882c-6172-4364-92a0-6ed37c41df21",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "78980064-f0d5-4a50-af8b-244deb69a9a1"
        },
        "item": {
          "id": "0d86cbb8-6f06-4777-b872-fff6554559e4",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "55351af5-8d37-43a9-bcc4-1cbfd8517efd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4684d89e-91a2-4d5d-aa98-145b09e38817",
        "cursor": {
          "ref": "2fa79bf9-2525-43a2-a55c-3191697e9429",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "159e1ec3-b90c-4858-ae49-d44ae1794d3e"
        },
        "item": {
          "id": "4684d89e-91a2-4d5d-aa98-145b09e38817",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "daa6a7a9-ee60-436d-910a-ca8f4c276530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 252,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76fd80d4-78e6-4865-b83b-0ef781d90369",
        "cursor": {
          "ref": "654e89a5-e634-4afd-bb69-d04078424d47",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "d3d58b77-9d84-47c0-b356-a74add8a66d5"
        },
        "item": {
          "id": "76fd80d4-78e6-4865-b83b-0ef781d90369",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0d5f8a58-76d4-4377-977a-e78d6c4a90cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d129e286-d598-4349-8fd0-f2e71a6c465f",
        "cursor": {
          "ref": "874b310d-9209-4f20-84c8-568d96881ca9",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6d3ecad6-de8f-43f0-8f4b-9f798c05beed"
        },
        "item": {
          "id": "d129e286-d598-4349-8fd0-f2e71a6c465f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b2101128-44b8-49e0-9701-8ceee59ab498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f9a9c8b-8914-4956-a6e9-0988dac1a9cf",
        "cursor": {
          "ref": "dbf925e8-672c-43d5-9382-de980dbfc02c",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d261c87a-f98b-40e9-b9ec-d0b69c11d9c6"
        },
        "item": {
          "id": "7f9a9c8b-8914-4956-a6e9-0988dac1a9cf",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "7e2922a1-ecff-4b56-b0d9-b932d7538615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a482b72a-19e8-44e1-89f9-52a8480636c4",
        "cursor": {
          "ref": "786b396a-fcc9-4e77-b246-d6621c335d22",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "18361cbd-2740-4fcc-98cd-1b3cfa5d600f"
        },
        "item": {
          "id": "a482b72a-19e8-44e1-89f9-52a8480636c4",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "8169f9be-6966-4e24-b33d-a0ba31f2362e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c744934-afd3-4296-bddd-df86c2201693",
        "cursor": {
          "ref": "35a72d7b-e539-4acd-9651-dea7e2037cc2",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "60cb3e31-a107-401e-bd4b-0b1e244906f6"
        },
        "item": {
          "id": "9c744934-afd3-4296-bddd-df86c2201693",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "be342ed8-b1ff-4871-9b36-8df98f9b0cbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9616796-0e98-4009-a224-df17215c7eb8",
        "cursor": {
          "ref": "2e39c336-8c19-43c8-add7-ca5d1ff684d0",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f47a8e58-96f1-4f09-8ee9-c4324e5b8ef4"
        },
        "item": {
          "id": "e9616796-0e98-4009-a224-df17215c7eb8",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "54b04102-5c0a-4041-89f4-768a63118d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c92bd25-bc1a-4234-80c1-2d450e569ba4",
        "cursor": {
          "ref": "4af182fd-8b9d-4b43-ac74-266e2bd32833",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "07286860-f528-44d3-9b2b-45c2568b7675"
        },
        "item": {
          "id": "6c92bd25-bc1a-4234-80c1-2d450e569ba4",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b7b07475-d33e-472c-9c61-3023fcd61b4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1da91964-3869-4a40-983e-cf3793478f98",
        "cursor": {
          "ref": "0e8930f7-8c32-473f-8faa-63064ace2957",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "4c920ed5-b967-4349-8563-1657cc13d807"
        },
        "item": {
          "id": "1da91964-3869-4a40-983e-cf3793478f98",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e795efd4-ebfe-4082-8182-9f21711e0054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f32847d5-1758-41cb-8901-ea17b7af4787",
        "cursor": {
          "ref": "10284f7b-92b2-4b93-af55-0a581b9b360e",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "72a84212-bee2-4fc4-9e31-2e3c7979fb1d"
        },
        "item": {
          "id": "f32847d5-1758-41cb-8901-ea17b7af4787",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "afe67bc1-4ae2-4462-acc5-5e444c726d87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 728,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1020601b-ebe1-49fc-b8da-727bd2db1ea2",
        "cursor": {
          "ref": "a7755d5f-3299-4e1e-a2e5-42544b990e89",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "4f90c896-69f0-4180-8205-08402059840c"
        },
        "item": {
          "id": "1020601b-ebe1-49fc-b8da-727bd2db1ea2",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "07191a46-9b02-494d-9a5e-2dfa6610b501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0f345b2-8851-4582-90a0-5b35b67e8543",
        "cursor": {
          "ref": "c7069266-64a1-4d11-8150-fab077b188de",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2aac2912-617e-49fd-8fc7-54425ee58301"
        },
        "item": {
          "id": "d0f345b2-8851-4582-90a0-5b35b67e8543",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0773d785-a85f-4eef-9010-e832fb704fba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfb4e120-2202-4d23-b6be-ca6559e3558b",
        "cursor": {
          "ref": "40d3bef1-ee04-4416-a683-7fc37f09b3a9",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "71e73bba-01e5-4f82-bdc1-f2066aef6cab"
        },
        "item": {
          "id": "dfb4e120-2202-4d23-b6be-ca6559e3558b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "b4f92855-9fb0-4846-9a67-6d18647c2d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 646,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f091fb-1d02-43f1-b887-803f80ff2139",
        "cursor": {
          "ref": "dcaed1e8-843a-4c5e-946e-2370de288c55",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c15d05f0-976b-421a-8b2a-d323eee54f9b"
        },
        "item": {
          "id": "a8f091fb-1d02-43f1-b887-803f80ff2139",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "91835e1e-3f5a-4987-abc1-3b92ff5300de",
          "status": "Created",
          "code": 201,
          "responseTime": 1437,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "60ae9d34-c394-4755-a3be-c3a7df0dafbf",
        "cursor": {
          "ref": "48b3b3c1-3bf0-4cc0-9bc3-0dd72791a26d",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "64f7efc2-26a3-4438-9df7-40422264c3d2"
        },
        "item": {
          "id": "60ae9d34-c394-4755-a3be-c3a7df0dafbf",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "8cf1358b-003a-4e5b-b33b-b496f092f832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c52ebcc-c6ec-4c3c-9b6b-f34e988bb817",
        "cursor": {
          "ref": "ba699e94-0172-44f9-9f47-c8e7b89b8bf4",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "91e302c2-2378-49a8-a002-ebb46d11dfd4"
        },
        "item": {
          "id": "5c52ebcc-c6ec-4c3c-9b6b-f34e988bb817",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c1b72ee6-3728-455c-9f53-335a9dffb1aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9c18ba2-4b24-4936-bdd2-cbeb23b193f5",
        "cursor": {
          "ref": "e07f8202-5ef0-4839-ae70-0a17a9db328e",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "cea597d7-9e4f-418d-ab4d-0e66c19c9090"
        },
        "item": {
          "id": "e9c18ba2-4b24-4936-bdd2-cbeb23b193f5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "f582b1c3-cbae-4a0d-b2d5-f5349e7a389c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3feca85f-91d2-4c43-9671-a032c9f334f0",
        "cursor": {
          "ref": "3b681d80-006c-40e3-8840-2487c8dd9d21",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "e9b748eb-4502-4c97-86be-061e8ae6722c"
        },
        "item": {
          "id": "3feca85f-91d2-4c43-9671-a032c9f334f0",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7cec3e26-de37-41e1-9461-192940399201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6033016-1c31-43cf-9fa7-5504303fa1db",
        "cursor": {
          "ref": "d643f2cd-44d3-4d9a-9649-b20d976c33a5",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "fa380a22-8cd7-47c4-804d-d8824a1db8ce"
        },
        "item": {
          "id": "b6033016-1c31-43cf-9fa7-5504303fa1db",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9ec8124e-cd7d-4e56-90ab-dcc9eea29cc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed0d445f-4e50-49cf-8015-c733b4fef4a5",
        "cursor": {
          "ref": "aca1cb56-c69d-4257-87d5-c302ad82a831",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "138c4e99-853e-497a-8d53-94354cc31071"
        },
        "item": {
          "id": "ed0d445f-4e50-49cf-8015-c733b4fef4a5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c18d84de-e93e-4557-ab9d-c1d54e4bd12c",
          "status": "Created",
          "code": 201,
          "responseTime": 622,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "c2ef2f9e-6ec8-4664-a90c-e7d4cfb190a3",
        "cursor": {
          "ref": "5aa88cad-6d93-4195-aed3-64c560b559e1",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2f5e3b37-8796-45bf-ad6b-c7e59decbf53"
        },
        "item": {
          "id": "c2ef2f9e-6ec8-4664-a90c-e7d4cfb190a3",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "55811002-a658-4778-bd02-1a0f5db03643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ddad8e-73b3-4137-aeaf-fafcdc3d732f",
        "cursor": {
          "ref": "e7774c7f-50bf-4192-9c05-f8155cbc61a3",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "21b5b8e4-ac6f-4ff8-92d4-ca0936f89959"
        },
        "item": {
          "id": "b4ddad8e-73b3-4137-aeaf-fafcdc3d732f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d1c577da-a6dc-497b-9c63-4615f03ed04d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "330cc4b5-76d9-4abc-b309-0655a1179ffd",
        "cursor": {
          "ref": "9f1f0710-3988-4d5d-941d-13eefda55c3d",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "8a4d1c6a-1b21-43e5-9a2f-905eba49e2f9"
        },
        "item": {
          "id": "330cc4b5-76d9-4abc-b309-0655a1179ffd",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e6df78db-ead5-4aec-9626-9c7f70f45a5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a7954e2-4bc9-406c-88f7-887a9b40b8e1",
        "cursor": {
          "ref": "3e6946b5-c5e2-49dc-9646-4aa284b111f3",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "efa95631-931f-4fb7-95af-34c1643b3fec"
        },
        "item": {
          "id": "8a7954e2-4bc9-406c-88f7-887a9b40b8e1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3d22f3c5-eddc-4a1f-91c3-9a216d367e72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf8756f-56a9-4f71-830b-242e672ff639",
        "cursor": {
          "ref": "e5d92052-6223-4130-8182-6d418b5e3804",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1fe34c92-a4ea-4f41-9c85-07aef4b3e040"
        },
        "item": {
          "id": "ecf8756f-56a9-4f71-830b-242e672ff639",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a3e3a9c2-da2b-4be2-9e00-76d677d82dd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3cb1883-ecb8-43e8-8b5e-e9e60c848c19",
        "cursor": {
          "ref": "2c6eb67e-4b4f-46b0-a5df-6ec30a3c30a8",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "96a9dbab-828b-4ec4-8b77-949d78fe8519"
        },
        "item": {
          "id": "a3cb1883-ecb8-43e8-8b5e-e9e60c848c19",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "87bb8ca0-05b9-4a2d-b957-a4915f860a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85260872-dccf-48fa-bce2-56ebaffd16a4",
        "cursor": {
          "ref": "57ffe5c2-7107-45c9-9d41-748a3b1c4008",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a871a4ba-2364-498f-a44c-fa8c790164ef"
        },
        "item": {
          "id": "85260872-dccf-48fa-bce2-56ebaffd16a4",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b1975acc-a8e5-4ebf-ae99-b12a24ac9373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42463252-01e3-48ad-8919-fde31f1a2f19",
        "cursor": {
          "ref": "736af00d-2ad2-4428-9367-fd0bd6af7724",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c2b494e1-6b75-45fb-a31d-c03563c2b8ff"
        },
        "item": {
          "id": "42463252-01e3-48ad-8919-fde31f1a2f19",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "68d815c4-26ff-4bac-8cfb-ecb66056c557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4243ddb-43ba-49ed-96f4-7020c1ac1f36",
        "cursor": {
          "ref": "4fe0627e-259b-4566-a891-66720d3a124d",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "124c3f24-7b14-45fe-848d-f587b8dca8d3"
        },
        "item": {
          "id": "d4243ddb-43ba-49ed-96f4-7020c1ac1f36",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b2486c9b-db7d-43bf-91ee-b64adbd3d528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "4746a13b-9309-4d37-bcbb-9d66971faf6e",
        "cursor": {
          "ref": "528c51b4-1a6a-4263-b2e6-ad13e622648c",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "263ea941-091e-4a08-8efa-1b988962a22a"
        },
        "item": {
          "id": "4746a13b-9309-4d37-bcbb-9d66971faf6e",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "0e9b4d56-b54f-4bd3-a57c-cfbc2321fe3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "ee607e41-d032-4977-8dd1-a6444a888071",
        "cursor": {
          "ref": "3ec37980-fd72-49ff-af12-d6877c1f2f5f",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "9c80bfe3-512e-47ca-9eab-dfb2942e2ceb"
        },
        "item": {
          "id": "ee607e41-d032-4977-8dd1-a6444a888071",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8638620a-d20e-402c-8600-ae11fbe05067",
          "status": "Created",
          "code": 201,
          "responseTime": 550,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f6d3b4-6709-4f37-b74d-98247d89fb3c",
        "cursor": {
          "ref": "cb3afe61-f72b-484d-8544-42f2fe20135e",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "43f79888-87fa-42ae-bb72-9e3bdcc1d859"
        },
        "item": {
          "id": "36f6d3b4-6709-4f37-b74d-98247d89fb3c",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "cfaab888-8885-4261-92f0-ccbe4fb1e91d",
          "status": "Created",
          "code": 201,
          "responseTime": 413,
          "responseSize": 590
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8acbc303-2d26-4e4b-a747-502d990a15e4",
        "cursor": {
          "ref": "2816d037-9e4a-44d8-a7fe-1c277128ae6a",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "202d33df-115c-4dd1-8535-289c8eff0e38"
        },
        "item": {
          "id": "8acbc303-2d26-4e4b-a747-502d990a15e4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "7be9282f-7b9a-4ec9-a9fd-0566b2fdad13",
          "status": "Created",
          "code": 201,
          "responseTime": 508,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "671ab72b-8c28-44f2-932e-2fba5463ac66",
        "cursor": {
          "ref": "cd84b862-6d7b-46f1-b06c-404bf7cb7b3c",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0f3462a2-4d38-480c-8c8e-a3a515751af3"
        },
        "item": {
          "id": "671ab72b-8c28-44f2-932e-2fba5463ac66",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "dfc0d7cf-3e98-4d37-b43e-547d1a41b8e7",
          "status": "Created",
          "code": 201,
          "responseTime": 616,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f624a2-fa49-45f1-bf89-83da2111024f",
        "cursor": {
          "ref": "73d9e8e3-8ee2-4c16-99bf-ef2a5041fea8",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "99c67117-bdff-4321-992d-ab1a3ed97ff3"
        },
        "item": {
          "id": "66f624a2-fa49-45f1-bf89-83da2111024f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "833a6f0b-3669-4b62-aa32-49f1e10b17be",
          "status": "Created",
          "code": 201,
          "responseTime": 1921,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed9999c7-6b27-4015-aa3a-84961093946e",
        "cursor": {
          "ref": "ffb9fe88-4020-4723-9d52-b2251ccd9c9f",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d1b9b01d-eef2-4104-8c24-03c3af4978a9"
        },
        "item": {
          "id": "ed9999c7-6b27-4015-aa3a-84961093946e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8f438f61-e8a6-45be-ac00-a8af12201e2e",
          "status": "Created",
          "code": 201,
          "responseTime": 798,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "075414e5-70ae-4b87-b5aa-8f30a7b4ee33",
        "cursor": {
          "ref": "bc4b75b7-30db-4dab-a5cc-0220ea67b083",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7618cc29-e082-4b7e-9fa6-970d2591f255"
        },
        "item": {
          "id": "075414e5-70ae-4b87-b5aa-8f30a7b4ee33",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "781d48e1-c8aa-4b0b-864e-779d0f066420",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "075414e5-70ae-4b87-b5aa-8f30a7b4ee33",
        "cursor": {
          "ref": "bc4b75b7-30db-4dab-a5cc-0220ea67b083",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7618cc29-e082-4b7e-9fa6-970d2591f255"
        },
        "item": {
          "id": "075414e5-70ae-4b87-b5aa-8f30a7b4ee33",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "781d48e1-c8aa-4b0b-864e-779d0f066420",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "0518ccde-13b4-4325-b4e2-622b106c6d24",
        "cursor": {
          "ref": "cd8dfcac-091e-4b1c-bdbe-88b3bf8aae9c",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ab986b1b-3084-42f4-8887-103b2f3295de"
        },
        "item": {
          "id": "0518ccde-13b4-4325-b4e2-622b106c6d24",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1a9a111b-d63d-49d8-a49e-94d7cb6e11a3",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "213cf8bc-423d-4ba6-ae19-b16a6a18f2c5",
        "cursor": {
          "ref": "80dcaa98-5aa9-4931-9c22-a0c4b587a4c1",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ec07de01-29a8-4023-a95c-e9e79aa996d4"
        },
        "item": {
          "id": "213cf8bc-423d-4ba6-ae19-b16a6a18f2c5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9f2e20a3-f0c3-4647-84d3-4fc7b190dbf5",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "0a30ef6c-9ca4-4522-9eff-f1392f0ba31c",
        "cursor": {
          "ref": "f5fe4eee-22dc-4ec6-803e-86cd58c0fe2e",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d88d158c-6d7a-4a3e-bf2c-0d63ae7da29b"
        },
        "item": {
          "id": "0a30ef6c-9ca4-4522-9eff-f1392f0ba31c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "51663829-9f63-45eb-91db-0d278e95490f",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "38d3e895-c28d-484e-b16d-20adfe87cae0",
        "cursor": {
          "ref": "57170a55-20c8-4e80-911f-9b0e60fdb1b1",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8dbad7f9-a123-4eed-9b85-abdc95358324"
        },
        "item": {
          "id": "38d3e895-c28d-484e-b16d-20adfe87cae0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b000b4cc-6d88-4610-9d18-4b13909d1cb2",
          "status": "OK",
          "code": 200,
          "responseTime": 24,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "fb7a473d-ef8a-4830-82e6-bfaa3b15176d",
        "cursor": {
          "ref": "de96284e-6d39-4501-8402-a0475d749911",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f9f29cdb-810d-40c1-bc7d-b55ec9e2bc9f"
        },
        "item": {
          "id": "fb7a473d-ef8a-4830-82e6-bfaa3b15176d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "bc7a6a26-7b59-447a-99af-473e489f5fb0",
          "status": "OK",
          "code": 200,
          "responseTime": 26,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "5cb55dc2-f4ed-493e-a99e-dad0beabf79e",
        "cursor": {
          "ref": "879b60f3-7b8a-483c-8ef0-e42eaa7d7b4e",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "f4bf8651-2342-4122-855a-ffbbfe50b1ef"
        },
        "item": {
          "id": "5cb55dc2-f4ed-493e-a99e-dad0beabf79e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1d095870-d18f-4aa7-91ec-38a41987bc39",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "0006d581-2bb2-4c34-94fb-0029e676011c",
        "cursor": {
          "ref": "fa987648-dc2a-4451-bea6-8bfdb34aa9a6",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b1fd884a-e7ae-4bd5-8a4b-7570fdd0a4a1"
        },
        "item": {
          "id": "0006d581-2bb2-4c34-94fb-0029e676011c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "069e3ed3-684f-45b6-a433-2c6233280481",
          "status": "OK",
          "code": 200,
          "responseTime": 260,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "d4025e65-a4a2-4e92-aa67-1f6ccdae7779",
        "cursor": {
          "ref": "b8e0c4f1-6b87-4ac3-973e-4ddbb2fdd1e4",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a0ea9464-7b46-4b28-a66b-776c510f3a8e"
        },
        "item": {
          "id": "d4025e65-a4a2-4e92-aa67-1f6ccdae7779",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "99df4764-ce82-4bc4-bc30-9fd4c13f4fa4",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "c47125cf-cc23-4d28-aacf-2e41f2d753b4",
        "cursor": {
          "ref": "398e1f7b-ea8a-4efb-ab93-89045d68da68",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d3242ae3-045f-4765-9940-976c9decadea"
        },
        "item": {
          "id": "c47125cf-cc23-4d28-aacf-2e41f2d753b4",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "181565ae-2a28-49cc-a71d-abb894c1cf28",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "b777d476-9f7e-45b6-8787-3adcf135eb48",
        "cursor": {
          "ref": "3a9a55d9-a021-483b-acf0-49772c5cf975",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "4cc13df8-c98a-4c1c-91df-49a87a909d73"
        },
        "item": {
          "id": "b777d476-9f7e-45b6-8787-3adcf135eb48",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a423a780-b13d-4488-970c-77db6423669e",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "1f8c77c0-bc66-49ac-8a32-daf7b2e92f10",
        "cursor": {
          "ref": "3f2e4ea9-a491-4e3f-b7aa-bf04e95c39e5",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "25af1c1e-5dc9-461e-88f0-09928cf5810d"
        },
        "item": {
          "id": "1f8c77c0-bc66-49ac-8a32-daf7b2e92f10",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ec28f9ef-4ded-4b85-91c2-309a507821c1",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "c3d64c0e-0204-47a2-abb4-9ab4c12af296",
        "cursor": {
          "ref": "a7349005-2c49-4594-9acd-b6aea8936d6f",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ab427266-9b87-458a-acde-7d2c656de2a9"
        },
        "item": {
          "id": "c3d64c0e-0204-47a2-abb4-9ab4c12af296",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "32c29188-5755-4b70-bff4-89b96cc686f5",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "730ee6a3-6d48-4948-9bb1-56094fc781c0",
        "cursor": {
          "ref": "90b5317d-fa2d-4554-adf8-355d6fe0caec",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "709ca0c7-fe16-44d5-b455-430ad7b9ffdf"
        },
        "item": {
          "id": "730ee6a3-6d48-4948-9bb1-56094fc781c0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8f622f7c-59b8-436c-ab63-1262ee729b6a",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "3b3541b2-44a3-4ff6-a8c2-df7ab5bedd75",
        "cursor": {
          "ref": "e768c596-46a3-4a80-a277-444b8663cef5",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b805a0e6-41b9-4732-aac3-c67cb7eae89a"
        },
        "item": {
          "id": "3b3541b2-44a3-4ff6-a8c2-df7ab5bedd75",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "23675426-8ebb-4837-a065-c891cb4d9c07",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "50380813-0ffb-4430-8bc5-b6ce9724f24f",
        "cursor": {
          "ref": "e847a101-1c7e-48ab-9f40-66f05ceb012f",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e6fc6146-59f7-4067-ac3e-bd98c345a0bf"
        },
        "item": {
          "id": "50380813-0ffb-4430-8bc5-b6ce9724f24f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "89a29460-a87b-407e-8bde-f0c13dc900f2",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "fe441284-df72-4122-a5bc-d96ea5668936",
        "cursor": {
          "ref": "2a1c9702-5cd2-4111-9542-256027ed0b98",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "71b9ec21-82a0-4bd0-b379-16bf9be80ae8"
        },
        "item": {
          "id": "fe441284-df72-4122-a5bc-d96ea5668936",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "391d1cfd-7576-4e8a-9f8f-096133df3265",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "7166fccb-4007-47a0-8f09-38c41b290079",
        "cursor": {
          "ref": "8e4debdf-a7c0-4e0b-8070-bfd660cea189",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "01a3f786-8029-4c71-8fc7-364b3357571b"
        },
        "item": {
          "id": "7166fccb-4007-47a0-8f09-38c41b290079",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "94e70b5c-790c-421d-879d-98a44d16d834",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "67a30bc8-3b07-442c-a30e-b8a138f5e856",
        "cursor": {
          "ref": "0ec24a2d-637b-4fe6-a4c7-b60b82b25d05",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c51bcb4e-6854-438c-a306-d4155fbe2479"
        },
        "item": {
          "id": "67a30bc8-3b07-442c-a30e-b8a138f5e856",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "29ced245-7c5d-4753-a22f-c3afd9fc69cd",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "6f8129b2-b955-4652-96f7-1420c11e5d78",
        "cursor": {
          "ref": "46aadcca-7360-4847-af83-3ae6ad10f06e",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "063ede1e-b819-49af-8eb2-d51088e3d24e"
        },
        "item": {
          "id": "6f8129b2-b955-4652-96f7-1420c11e5d78",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1eafa28b-6b43-4492-9994-60a512c7ff79",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "e4b568d9-5873-45b1-ab6d-03cf03db6ea8",
        "cursor": {
          "ref": "ae8f4ecd-1ae5-4e7c-93bd-df255494a4a4",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "e92dcdcd-c079-4208-982c-970c7ce7f228"
        },
        "item": {
          "id": "e4b568d9-5873-45b1-ab6d-03cf03db6ea8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "41f650e0-f5df-4aa8-a056-7bd169568934",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "d5237c36-2a09-41fc-abb3-8ba3f770b293",
        "cursor": {
          "ref": "9d60fac5-ced9-4105-b6ed-b8e18ab1b41c",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "145abbf6-f544-4b9f-8ba9-76ea6a3ea309"
        },
        "item": {
          "id": "d5237c36-2a09-41fc-abb3-8ba3f770b293",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "94cb9d32-cf87-465f-9e59-b46e3ef424e5",
          "status": "OK",
          "code": 200,
          "responseTime": 327,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "3694539c-87ba-4315-a237-97ffe67c2fa0",
        "cursor": {
          "ref": "1bfcc722-63d9-4a38-b419-943e5819c87d",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5e220e3f-bfa2-4145-9a84-ec88b79dc33a"
        },
        "item": {
          "id": "3694539c-87ba-4315-a237-97ffe67c2fa0",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f2227be5-4008-4548-ab35-ef4c12835be8",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "434db755-cd89-49c2-aad4-af09caebf952",
        "cursor": {
          "ref": "2acded4f-db3a-4927-839b-2ccfd33b3fac",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "96468be0-5cd7-422e-95eb-228db3cf0f3a"
        },
        "item": {
          "id": "434db755-cd89-49c2-aad4-af09caebf952",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "71c27298-76bf-4700-8ca7-b6f8a2166dac",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "c8d3f5d4-3d39-4c36-8b1e-2e2509d31d4b",
        "cursor": {
          "ref": "c7900f74-7624-452a-8bec-d3504079f275",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f3a24d1e-be0c-4c1a-8844-bf1177b0f7f8"
        },
        "item": {
          "id": "c8d3f5d4-3d39-4c36-8b1e-2e2509d31d4b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a5aa7e47-ddfb-41d3-88ba-7d00209d080a",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "c693c073-0673-489f-81c5-d0ed17e12724",
        "cursor": {
          "ref": "ef19a8d4-e13d-461f-8bfc-9b89c00dfd3d",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "61d1a457-d5e1-4bcc-b3cd-09ec5d3906e0"
        },
        "item": {
          "id": "c693c073-0673-489f-81c5-d0ed17e12724",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "cbaff792-2334-4c90-9564-358a26293347",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "575de8de-dcc2-4d6a-a42e-27b31aa7e24a",
        "cursor": {
          "ref": "5fe9f63b-4c98-4644-a28d-532b3ea6879f",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "87fb3a3f-72f9-42da-9fbd-3963f3d19bdb"
        },
        "item": {
          "id": "575de8de-dcc2-4d6a-a42e-27b31aa7e24a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6cb20629-884e-456b-86fd-e2ece38c2dc9",
          "status": "OK",
          "code": 200,
          "responseTime": 239,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "16dbfadb-89c8-4b50-a597-6c16096f9d70",
        "cursor": {
          "ref": "4a13c53a-00bb-4688-b2d4-68a5673cd85d",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e45125a1-f48d-4bc1-87c3-7b05d795bf07"
        },
        "item": {
          "id": "16dbfadb-89c8-4b50-a597-6c16096f9d70",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "71b138b3-c4b6-4d08-9d58-bc9b0edbfd1f",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "2537743c-8715-477f-b9de-e462f29382a9",
        "cursor": {
          "ref": "c4c1b2b8-bfbb-4048-8e6c-6dc06b9aad3e",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "43b4f7cb-6703-419b-9be0-7db6899ebec2"
        },
        "item": {
          "id": "2537743c-8715-477f-b9de-e462f29382a9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4ad0cb8e-0dd2-4a8c-b773-6c094c8954e5",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "04fbabb8-00c4-44e1-bed3-6076f4a3a80c",
        "cursor": {
          "ref": "4ee97fff-6cdc-4481-8e35-78c7b5a983e1",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "3ed98dfa-4eb5-45e4-93da-baffe60951e2"
        },
        "item": {
          "id": "04fbabb8-00c4-44e1-bed3-6076f4a3a80c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3e5ea958-d94a-4e2c-a871-e940353e9c2e",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "6fcaea51-27e9-4712-ad96-296de33e4fb5",
        "cursor": {
          "ref": "8a8fd7c9-612e-44dc-ae84-78c2705eaf8e",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0b6130ec-c3c9-42e3-aefc-f12caa5da10b"
        },
        "item": {
          "id": "6fcaea51-27e9-4712-ad96-296de33e4fb5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "246b1ea7-8d46-449b-9ee5-27c8ddf77941",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "30f50aec-a191-49aa-a65a-31671a86013c",
        "cursor": {
          "ref": "45a6d5ae-b1a2-4031-a14b-a4f5a41e1cb9",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "cced611e-5433-4d26-85e5-5c3b45063786"
        },
        "item": {
          "id": "30f50aec-a191-49aa-a65a-31671a86013c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "f5c88a5c-05e6-4d3e-8ae5-62bab5fb4a03",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "9001b4f7-d953-4d63-89dd-345f978d425b",
        "cursor": {
          "ref": "50d82f77-afa6-4ba4-aed6-3fae34948d92",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8e8270cc-98b2-4f4c-8fdc-c83a88051d36"
        },
        "item": {
          "id": "9001b4f7-d953-4d63-89dd-345f978d425b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e2f61e74-d8da-4f9b-ad3d-ab4f61c47b8e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b75ae7da-827b-4f70-852f-275c14d8fee8",
        "cursor": {
          "ref": "431dc685-0c83-4bd1-bd9f-cc5c4218b25d",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b06ee98d-b053-4462-bb97-681317ea7270"
        },
        "item": {
          "id": "b75ae7da-827b-4f70-852f-275c14d8fee8",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "c154fd4c-84af-430d-a1c9-5cba57f6e9b9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 12,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e64e9a20-608c-4780-86f0-7e80e1ee06fa",
        "cursor": {
          "ref": "abacef56-7194-4e19-ab23-408cedf9d1fb",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0197f8ca-385e-4daa-99f4-692d130feda7"
        },
        "item": {
          "id": "e64e9a20-608c-4780-86f0-7e80e1ee06fa",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5ce283f0-8294-4c0b-8a6c-5c919d463b7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e64e9a20-608c-4780-86f0-7e80e1ee06fa",
        "cursor": {
          "ref": "abacef56-7194-4e19-ab23-408cedf9d1fb",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0197f8ca-385e-4daa-99f4-692d130feda7"
        },
        "item": {
          "id": "e64e9a20-608c-4780-86f0-7e80e1ee06fa",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5ce283f0-8294-4c0b-8a6c-5c919d463b7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acb66ada-d8be-43db-bc48-e51112bfe0aa",
        "cursor": {
          "ref": "0a10813c-6579-4c23-a50d-495807c104c5",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "77a010d7-0e93-4b67-8183-c133978887c7"
        },
        "item": {
          "id": "acb66ada-d8be-43db-bc48-e51112bfe0aa",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "33c0e95e-6efb-4d07-8af4-8cd0a8bd2021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76f7f11a-3f52-43cd-9c93-7e0643cc9b4a",
        "cursor": {
          "ref": "09856437-175c-483e-8b40-597677e7419d",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4ef0a169-351d-4b1a-9dab-9c6b5df4629b"
        },
        "item": {
          "id": "76f7f11a-3f52-43cd-9c93-7e0643cc9b4a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "38dd752b-5ebc-4290-a4ed-a1c258b334ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d2f9b7-a2c0-4264-87ff-cf5a5233b365",
        "cursor": {
          "ref": "a97f8727-6eec-461e-be3b-2767b0d67704",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "80d3e96a-95e8-4d01-b145-b48a0f77c535"
        },
        "item": {
          "id": "56d2f9b7-a2c0-4264-87ff-cf5a5233b365",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "165d8f07-855c-45fc-8cc2-8dee26417d73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "249f0351-1cf2-40ac-85c8-b36004546327",
        "cursor": {
          "ref": "5effe6e3-fb83-4abd-a1b8-9225e27f9a38",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "66e108e3-7be9-4d2d-9679-73de029160b7"
        },
        "item": {
          "id": "249f0351-1cf2-40ac-85c8-b36004546327",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c967ed6c-065d-41ff-a05d-b6039054325b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba256ea2-f2f6-4037-a911-7f7266092db2",
        "cursor": {
          "ref": "883059f5-02ec-480c-9612-e49f88bdac65",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c943030f-9e4f-4e91-bd14-3ff376de9e0e"
        },
        "item": {
          "id": "ba256ea2-f2f6-4037-a911-7f7266092db2",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c7c04927-839a-4bec-82f0-fec6a06b104f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f48750-967d-41a9-8959-e26c534d280f",
        "cursor": {
          "ref": "1efda72c-07f5-4b1c-bb32-a3c2f3c76a6c",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b8583c75-af48-4415-ae2e-2d5f12a8c71d"
        },
        "item": {
          "id": "06f48750-967d-41a9-8959-e26c534d280f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7ae84641-84b3-4509-9f89-439925bb3782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1147,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4864c353-4ccc-4200-9905-a955b9ab722b",
        "cursor": {
          "ref": "4d5bfd92-3b97-4af5-93eb-76ac13169e10",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "fcba4712-67bc-49c4-8647-f8d24fadf398"
        },
        "item": {
          "id": "4864c353-4ccc-4200-9905-a955b9ab722b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1f7c1b73-ccf5-4e97-9385-075b08b82f2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34bc008-222e-431a-998b-dc380ee0211b",
        "cursor": {
          "ref": "6e71d562-2352-4ebf-8e03-d2c6d02f0dd6",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "affc2367-a315-48bf-a151-c6e99776e083"
        },
        "item": {
          "id": "b34bc008-222e-431a-998b-dc380ee0211b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "42e4b01e-2708-4479-9cfd-5cc95267c837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bebada3d-bd58-4924-a205-eeff9f7da3e9",
        "cursor": {
          "ref": "4294b098-626a-4d3c-a13d-db18c95b18ba",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c37ff13b-dd25-4287-8608-48a85ee07ed5"
        },
        "item": {
          "id": "bebada3d-bd58-4924-a205-eeff9f7da3e9",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e482e9ea-91bf-4880-a21c-8f7da7283b2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e569e91-d7a3-45c8-915c-0ae815b5c643",
        "cursor": {
          "ref": "14542a2b-f242-482f-b247-f5d77539fa2a",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "dab42d2f-6a78-4853-9f75-1a0b76357b29"
        },
        "item": {
          "id": "8e569e91-d7a3-45c8-915c-0ae815b5c643",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "fc7855d3-595a-4ddf-86f1-d01c4f340721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d17a6f3-b985-4e1b-838d-68280dd3b411",
        "cursor": {
          "ref": "02283faa-13e4-4cd3-bfcd-78b5f0606687",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "22c92e92-8449-4a53-9e64-2f0338d096b1"
        },
        "item": {
          "id": "6d17a6f3-b985-4e1b-838d-68280dd3b411",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "8fc1e271-7537-4400-8e90-a2d536696258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41839357-d955-46e4-bda4-6780a3670f4e",
        "cursor": {
          "ref": "ca631dea-b52d-4294-ae42-ee83de280d28",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "1f3be157-7a54-4d18-93a6-31baa0ca555d"
        },
        "item": {
          "id": "41839357-d955-46e4-bda4-6780a3670f4e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "194b17e3-a2a8-48b1-a563-340c2fc02bde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c604182b-fb8c-4f97-b935-90c654a52f8d",
        "cursor": {
          "ref": "5ebc6b02-e5f5-46db-af1f-02f73073adc7",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "47879ebc-c82f-40e8-b664-2a662891c3f8"
        },
        "item": {
          "id": "c604182b-fb8c-4f97-b935-90c654a52f8d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "260bacff-e33d-4fa9-aade-660685b40b11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c67ca765-11b1-4550-a1e4-cb88e795f427",
        "cursor": {
          "ref": "160f1a1b-4c23-4b4b-b655-d787bacf8ca4",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "6476d2e3-08fe-401c-92b0-f5a767051423"
        },
        "item": {
          "id": "c67ca765-11b1-4550-a1e4-cb88e795f427",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a4a8a2a4-a25a-49e8-bc36-c3df62b51b1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6add7fc3-66e7-4361-8285-998f996734fb",
        "cursor": {
          "ref": "7682f33a-daf5-450a-8eb5-ccf912f2d5b6",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a9f6e44e-573a-4bef-a90c-d1856cdf5456"
        },
        "item": {
          "id": "6add7fc3-66e7-4361-8285-998f996734fb",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e948c556-03c4-43ac-ba5d-ef705cbb7e11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7739eadd-716f-4dcc-b443-4029da977712",
        "cursor": {
          "ref": "5ed3e778-7a12-4495-b03e-22ac5b462cdc",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "abed0767-4b7f-45b6-bcc4-d1e040211d7f"
        },
        "item": {
          "id": "7739eadd-716f-4dcc-b443-4029da977712",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "11e62138-e465-4777-ad2d-0ddcd59f93a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c28742fe-6805-4cc6-8e69-87000dbfe1df",
        "cursor": {
          "ref": "14561bba-1ff8-4b61-bbcf-0430ba269d9c",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8f98ff7e-bc89-4b61-a04a-4cb3b6da146d"
        },
        "item": {
          "id": "c28742fe-6805-4cc6-8e69-87000dbfe1df",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "46ba6a46-3882-4514-b3e6-c44b0112dfdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 525,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "874dd341-338e-4cc1-97e4-49e90b15079a",
        "cursor": {
          "ref": "57a1f250-8789-4f32-8497-2c86972220d8",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "28bba2f1-f3ab-4e92-b529-441f0d70ba58"
        },
        "item": {
          "id": "874dd341-338e-4cc1-97e4-49e90b15079a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "32397f17-0f9c-4fd9-8110-0d9e2374f7e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 414,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "162c61ef-5088-4826-9197-d5e8fa9dc855",
        "cursor": {
          "ref": "84919016-de31-4227-a4a1-0e2e36788402",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ececdc8e-8404-4d30-82a2-43bdc4c1d98e"
        },
        "item": {
          "id": "162c61ef-5088-4826-9197-d5e8fa9dc855",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "261c8829-84bf-4a43-8a58-7d227023aaee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "149e7d5e-891a-4809-8cfe-9447e296ac49",
        "cursor": {
          "ref": "10ac1cf6-5203-4234-beae-a8ab0278644d",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "50341125-f048-4464-a146-130cc2621e50"
        },
        "item": {
          "id": "149e7d5e-891a-4809-8cfe-9447e296ac49",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5ac06e30-2aec-47f7-a89d-10db2d15744a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 370,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c49f2572-ec11-4fe8-a8a3-bc04b0cc2b2b",
        "cursor": {
          "ref": "6cf29039-364b-4b43-a663-2834ea891c92",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "be43b471-b6d9-4e5d-872c-dd9a99c47158"
        },
        "item": {
          "id": "c49f2572-ec11-4fe8-a8a3-bc04b0cc2b2b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "84dbce70-7d7b-4450-9baa-a7f59df7786d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 284,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14084d5-284c-48eb-85eb-eb7beb973c8a",
        "cursor": {
          "ref": "0dd00c2e-33e1-4445-a541-03393fb30e86",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b2854f97-b927-4d9f-acfc-1f51606071c8"
        },
        "item": {
          "id": "f14084d5-284c-48eb-85eb-eb7beb973c8a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "eb852507-52d9-4863-be2b-2980b2b564a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 451,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4c7f392-626b-4ebd-a563-4d836bdfbc6c",
        "cursor": {
          "ref": "849a4e17-8b6c-4e8c-a0e0-cee2fdbad50d",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c943f293-ca76-4dc1-a76d-0c907533e0c4"
        },
        "item": {
          "id": "f4c7f392-626b-4ebd-a563-4d836bdfbc6c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "3ced7082-15d7-4411-8d59-7fe625bea502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcec822a-7fb0-4b37-bccb-90379857bcdb",
        "cursor": {
          "ref": "da59aa5a-1ac6-4980-b009-e185dea4d397",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5543dc07-b6d1-493d-adaa-f73339aed5c3"
        },
        "item": {
          "id": "fcec822a-7fb0-4b37-bccb-90379857bcdb",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "08ee6dd9-3f66-4d6f-946c-127f1fc436e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41ce9a2-e0e9-4378-bc93-5f710a606f8b",
        "cursor": {
          "ref": "424dfc47-9466-4038-a88c-40995b794c75",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3f53eec2-4da2-4f90-9c94-989d3d98c063"
        },
        "item": {
          "id": "d41ce9a2-e0e9-4378-bc93-5f710a606f8b",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e4e33e07-d51b-41f4-b2c5-6a07a8679701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 419,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "866091a8-83ed-434e-a9fa-95453db1fde0",
        "cursor": {
          "ref": "d38ecc29-0340-4f70-a53a-2b1a0433b0a1",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "58bfaab0-95de-44ec-8fd9-2bbd05275d11"
        },
        "item": {
          "id": "866091a8-83ed-434e-a9fa-95453db1fde0",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d53c5085-776d-424d-9b51-d930c7d50cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b36886b0-6ede-48d5-8f39-936e427c7829",
        "cursor": {
          "ref": "9e143e85-766b-4d9a-ab7b-950ed57cdf1b",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d1d72d54-8c80-4a31-bde4-0cb101baedf0"
        },
        "item": {
          "id": "b36886b0-6ede-48d5-8f39-936e427c7829",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "893194bc-e2fa-4fa4-ad80-3c2042d2d38c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e4d360-dbd1-447b-8268-6ab738c6572c",
        "cursor": {
          "ref": "7a219e32-1ce1-4d48-bf3a-fcf5b41d7871",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "908fde8b-8a36-404a-8cf1-b6571800254e"
        },
        "item": {
          "id": "25e4d360-dbd1-447b-8268-6ab738c6572c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "20c3fa27-e3f4-486d-8ca5-f514a6d76695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 319,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e8adc80-d9f6-40cc-a80c-f54b55ef5deb",
        "cursor": {
          "ref": "7ad7b620-a0d4-4ab7-83ff-c6177139712e",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7f53ed47-54c4-4a6c-be1d-2e0b98661420"
        },
        "item": {
          "id": "1e8adc80-d9f6-40cc-a80c-f54b55ef5deb",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5f0bfe9e-a4c3-4aa2-9785-8dff9af8563c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70cf7eb2-1b10-4282-9893-86eb5cf40784",
        "cursor": {
          "ref": "821ff0b1-5be7-45b0-9e44-fe73b48a1a4d",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7b0193cb-f698-4975-8ae8-711f048b63fe"
        },
        "item": {
          "id": "70cf7eb2-1b10-4282-9893-86eb5cf40784",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b4e0c032-7a0a-4a16-aa30-ee18b14952dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb1274fe-f9af-433a-80d3-5bb4450fe2f0",
        "cursor": {
          "ref": "0321a399-7a62-4ced-8756-26e96b7a726f",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0c9d103b-37db-4201-9131-72f84d42de59"
        },
        "item": {
          "id": "eb1274fe-f9af-433a-80d3-5bb4450fe2f0",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5ead6f8b-1e66-42f5-9947-843c72b2fa23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc5dc0a3-816e-468a-bf4c-62461c2e8d55",
        "cursor": {
          "ref": "cf90f801-8b74-4d13-9e13-ba3312442685",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "abbd4607-8965-477b-8d75-7a30a3b04184"
        },
        "item": {
          "id": "dc5dc0a3-816e-468a-bf4c-62461c2e8d55",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a2e88780-edec-47cd-b573-0d29bf076ea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 312,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f73651c-0f34-4eb6-812a-676a109a3c40",
        "cursor": {
          "ref": "a529bb93-f6ba-4ee7-a6f9-47ed4efe044a",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c1056364-20fd-4379-a64e-ad717eeb7a11"
        },
        "item": {
          "id": "1f73651c-0f34-4eb6-812a-676a109a3c40",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "eb2e8351-df7a-4565-8d66-91f89687d3e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "232d4bf3-d48c-40ec-88bc-f19c48161a32",
        "cursor": {
          "ref": "978d782f-2a5d-4de2-b23d-f2f7a8cf7706",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "75a5382b-ed2f-418c-8236-0e1936151c1c"
        },
        "item": {
          "id": "232d4bf3-d48c-40ec-88bc-f19c48161a32",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d37bbbff-0247-4c08-9af6-d88b5a8d8c4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2663,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b3457b9-405d-4501-8dbd-177b47b6a2a6",
        "cursor": {
          "ref": "8f3d0f2f-f2b8-4c16-9ec9-3ca8ba870e78",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7b700dfb-23b0-450e-88d4-a35884103a66"
        },
        "item": {
          "id": "6b3457b9-405d-4501-8dbd-177b47b6a2a6",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2253a82d-a464-4626-9505-cd7aa49a8dbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 992,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d3c3fd-affb-4715-b871-d1fc77a7c4c5",
        "cursor": {
          "ref": "212ec328-74f9-45db-a7c0-4c793e04e4dc",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3b8eb001-699b-4a0e-8d4e-cb3016384d10"
        },
        "item": {
          "id": "37d3c3fd-affb-4715-b871-d1fc77a7c4c5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "18855ead-ab7b-4518-8b6e-5e233ab5ac04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1158,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "953700e3-f484-4d37-8462-083252154e6a",
        "cursor": {
          "ref": "77f1190f-c712-4a77-b869-6718546fad07",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "5aa029ec-fa51-48c0-8be3-ab07f5ecb9f7"
        },
        "item": {
          "id": "953700e3-f484-4d37-8462-083252154e6a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0468628f-2b25-4c7d-9562-866ee7b9637d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 680,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66bcb2ca-2ea9-45d3-9303-6f139b6ac318",
        "cursor": {
          "ref": "837ce429-be60-4545-bad9-57e7bc26318b",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "bf2846bf-7ef5-40ca-a26b-acfd67458b11"
        },
        "item": {
          "id": "66bcb2ca-2ea9-45d3-9303-6f139b6ac318",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f91d0713-3b05-401f-b18f-0d29cec77da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 632,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b423376f-bc81-4bfa-ab75-a0351ce0e22e",
        "cursor": {
          "ref": "1701dbbd-9390-46d0-b500-3ba271647db3",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "bd81c9ef-7156-4e4c-98eb-5a0ad70e4ca9"
        },
        "item": {
          "id": "b423376f-bc81-4bfa-ab75-a0351ce0e22e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "43d6f3b6-68b8-40a7-9917-f71f68d44fd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 503,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a62ab0e-aea6-43ee-8b7f-9965b7e1d364",
        "cursor": {
          "ref": "d57084fd-562e-41bb-b5ce-c530f837833d",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "85cbe514-e2d6-4a92-8910-9ee26518aeb5"
        },
        "item": {
          "id": "9a62ab0e-aea6-43ee-8b7f-9965b7e1d364",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f56b5cd3-c51e-4ef1-bcb9-4a31800e4d15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 362,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "918eb140-45f6-4b65-a715-bc319aa7feaa",
        "cursor": {
          "ref": "04898b12-9172-40c8-980f-740fb36fe8bc",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6e7c2426-8584-49fb-981c-9a50c13941ae"
        },
        "item": {
          "id": "918eb140-45f6-4b65-a715-bc319aa7feaa",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c34377c2-0b01-4d2f-9ba1-409840144b64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b13664-d623-43ff-8f38-2f60893fc1dc",
        "cursor": {
          "ref": "1f0e31c3-6f43-4577-a598-b6c646bb7d3c",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "dce2ba89-6b27-4496-be58-ae3df866e7a1"
        },
        "item": {
          "id": "62b13664-d623-43ff-8f38-2f60893fc1dc",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "8b5a567f-78d0-4a5e-9e5c-3ebfb9da64c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 365,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0edf1c-4cb5-4674-9da6-75baa54350f0",
        "cursor": {
          "ref": "594f53fd-75bd-4772-9262-a4be15fa759d",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "90dfc842-6db6-4cb5-818b-13252bf8e9b1"
        },
        "item": {
          "id": "da0edf1c-4cb5-4674-9da6-75baa54350f0",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "849227a0-4ad1-4871-8841-546bdcb07f4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 331,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70e909de-ae2d-4ee2-965d-95ad2054b803",
        "cursor": {
          "ref": "c720f19b-93c0-4d62-8510-6c3c8be1bd61",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a4c56f21-abdc-4031-9b27-cb0ce3ff6a9a"
        },
        "item": {
          "id": "70e909de-ae2d-4ee2-965d-95ad2054b803",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "000cbcf9-4fc4-4357-9d05-dc4832542dfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 502,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c417158-b83a-4db0-8f0e-e3c0a6f43e8b",
        "cursor": {
          "ref": "9827728f-5236-4dff-8384-36e4d337a492",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "09a6d4ec-e992-439d-bd2c-82564e0c9009"
        },
        "item": {
          "id": "7c417158-b83a-4db0-8f0e-e3c0a6f43e8b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "42c641c4-751a-4123-bac5-5b6fab42ac5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 353,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c558893e-1bd4-4c92-9865-7b6432898dfa",
        "cursor": {
          "ref": "265d177a-9628-4560-af52-f47ffa354e65",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3958e352-7953-4cf9-92ed-fc56811be5dc"
        },
        "item": {
          "id": "c558893e-1bd4-4c92-9865-7b6432898dfa",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "38d4ded0-5927-4722-a0db-4e14b4e9dc32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b46e54f-0e8d-457f-a898-10746b9f84c8",
        "cursor": {
          "ref": "40aba36b-9f91-4cd8-95a1-0f536a28fe42",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9e93d503-b18a-4cfb-8536-fbc47beff2d9"
        },
        "item": {
          "id": "7b46e54f-0e8d-457f-a898-10746b9f84c8",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "1c6fb4dc-e4bb-4354-b405-b3dc7fb225ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 376,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "460e9ce7-b9c7-4809-958a-326994853897",
        "cursor": {
          "ref": "e5e4ad9e-9eb6-47eb-afa8-b028f1994f6e",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "2d4d483a-df2a-4ef9-b577-28d9f7f3cec8"
        },
        "item": {
          "id": "460e9ce7-b9c7-4809-958a-326994853897",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "90401772-dd2b-45bb-8e1b-2007d756aa27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 405,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd1809fa-b314-4827-b957-973d7e178913",
        "cursor": {
          "ref": "59e9c4a3-de99-47e7-86dd-9c98f1d0908a",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2c2d58a2-28eb-4498-919e-c49072b72ae3"
        },
        "item": {
          "id": "cd1809fa-b314-4827-b957-973d7e178913",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "c8944f84-abbf-4700-8485-b4e8c468eb33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af8a3d7e-aa0f-4c94-8ddf-cff2d3d26d6e",
        "cursor": {
          "ref": "298daf4b-550c-4b96-abd6-f9ef16a00898",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8fed7d4d-8960-422d-a072-ef430e005515"
        },
        "item": {
          "id": "af8a3d7e-aa0f-4c94-8ddf-cff2d3d26d6e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f60bf17b-fd1c-461b-9451-51dfa12b6db4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 374,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b78e532-3a0f-4ba2-8dde-25babfaaa2b3",
        "cursor": {
          "ref": "966482c8-1686-47d2-b2f0-a1a4a02ece3d",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f05d8156-b351-4420-8ac8-c17903895b7e"
        },
        "item": {
          "id": "2b78e532-3a0f-4ba2-8dde-25babfaaa2b3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ad237a2a-d73d-4039-9332-bcb7e9331f65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 405,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0c413d4-7dfc-4fba-a298-a2160f752043",
        "cursor": {
          "ref": "021f4868-2df3-43e0-a846-567d4a6f5b09",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2e2c683d-f881-4d48-bc2b-1b16e5c7e2e0"
        },
        "item": {
          "id": "c0c413d4-7dfc-4fba-a298-a2160f752043",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "5cdf1be4-2912-4133-8191-a39ce9302261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 509,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faf9d687-5357-48e7-8ce1-96c303062dfe",
        "cursor": {
          "ref": "f6160e32-09f9-46cf-b3c4-2a161ca677c5",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "3e3f3fde-c6bc-449b-89db-92d480f5f635"
        },
        "item": {
          "id": "faf9d687-5357-48e7-8ce1-96c303062dfe",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ad11243d-edad-4cbf-8ac1-3a02f781427a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a908fba7-a606-43ae-8054-31aee8ac6d36",
        "cursor": {
          "ref": "77aed76d-be27-455d-a530-cf390f636c25",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e01d2322-7bdb-4b38-80d7-70c14c6e8622"
        },
        "item": {
          "id": "a908fba7-a606-43ae-8054-31aee8ac6d36",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ff3b25d9-9924-4d8c-8655-30b160e276cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48c1bdb5-4fb4-478c-8b04-aa38189245a9",
        "cursor": {
          "ref": "df4f7218-adb1-4e05-8064-dc3a1847e5cf",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "cd96feef-6b96-46b9-90c2-f97d4ab624aa"
        },
        "item": {
          "id": "48c1bdb5-4fb4-478c-8b04-aa38189245a9",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "87f55fbd-f880-4e5e-9984-b1f3091fd120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24b75b55-c556-47b4-bb66-9562b5091c0a",
        "cursor": {
          "ref": "1f5678e0-4e74-4715-86fd-d2c761a1ac67",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f42e02ef-cf08-44b1-b549-25b058b52992"
        },
        "item": {
          "id": "24b75b55-c556-47b4-bb66-9562b5091c0a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a6a70820-d561-47c0-ba7b-17e8c32c2b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 465,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5360aeaf-91e5-4aee-9296-2a60fcc70b92",
        "cursor": {
          "ref": "cb5259a8-95c0-4685-a9bf-04b685ee8135",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "8905b6cc-51a2-463c-b7cc-f3c13fe06cce"
        },
        "item": {
          "id": "5360aeaf-91e5-4aee-9296-2a60fcc70b92",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "89b6b97f-1322-44f8-85b9-baca72c6e8ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "942cd51a-dc5e-4cba-af2b-1064797ed357",
        "cursor": {
          "ref": "b8fd0a96-32d6-4720-adcc-3aa978418b3f",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "760c8aa8-1265-4844-b438-79c18c15a7c9"
        },
        "item": {
          "id": "942cd51a-dc5e-4cba-af2b-1064797ed357",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "8af57c44-e8cc-4fc4-ba04-feea81c16fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0ee12f-34ba-4e3e-9c77-f2968341c4c2",
        "cursor": {
          "ref": "5e6cb704-3e7c-42e8-96c5-9a1d12e5e9b9",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "37f064f7-073e-4d76-b7d7-d5cedc7e1436"
        },
        "item": {
          "id": "0b0ee12f-34ba-4e3e-9c77-f2968341c4c2",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9da74995-261a-40b4-a90d-57e148cd530a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be253e52-33b4-467a-a14d-2871511bd6a4",
        "cursor": {
          "ref": "6109d280-1224-4be9-bbce-767b4f8f04e2",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "355675df-f0eb-47b6-8175-a92aad11affc"
        },
        "item": {
          "id": "be253e52-33b4-467a-a14d-2871511bd6a4",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "1d556126-a9ab-45ba-aa9c-54a93f619917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 154,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d600759c-15fc-4966-9e95-840d396a4746",
        "cursor": {
          "ref": "60d5fc0a-5d00-4edc-973c-c88008898746",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ccffdacf-8e4d-4eb3-9d04-df8a3dbc2b89"
        },
        "item": {
          "id": "d600759c-15fc-4966-9e95-840d396a4746",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e4401434-6160-465a-98c9-3b6997e32b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1097,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "616de2df-0178-4a1c-b78f-922685093c34",
        "cursor": {
          "ref": "81d00319-77ca-4398-8049-34ca3b42a9de",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "bcccf337-d73a-43d4-b86c-36b5c516b854"
        },
        "item": {
          "id": "616de2df-0178-4a1c-b78f-922685093c34",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a77edbd1-ed09-4983-8e67-7f9999e090c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f41a82ce-0044-46a3-b79e-161a39535f4e",
        "cursor": {
          "ref": "e66890a5-9930-48b8-8f89-16a69fe365bb",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "52faab28-93fa-4305-9901-21174ff6bc18"
        },
        "item": {
          "id": "f41a82ce-0044-46a3-b79e-161a39535f4e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d2cb6902-7b21-42e9-bb5a-4edc7adeadf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 311,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08c77e8c-4191-4ef8-b262-226b179faa8f",
        "cursor": {
          "ref": "b1dd3ccc-c76e-445f-87d7-2e7726a19b9b",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d4a48357-04f0-4ea8-a705-f379a8b49709"
        },
        "item": {
          "id": "08c77e8c-4191-4ef8-b262-226b179faa8f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "439fc0b9-4091-4619-875d-d74fe50b9268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e137686d-1fa2-4d0e-bb6a-fefb867aab09",
        "cursor": {
          "ref": "bdf8b6d1-4de0-44d1-8a6a-c331fc3e96e3",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "091bbee5-cdcd-48ce-ad02-e899814e5423"
        },
        "item": {
          "id": "e137686d-1fa2-4d0e-bb6a-fefb867aab09",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f3ea6f28-7e05-44fb-b5f1-32e7bad9b794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b92570-a23a-4653-9785-20ead2ca3ee2",
        "cursor": {
          "ref": "7e754132-cba5-4d17-8d82-cfd518d014d9",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e2c2eb65-b14b-4f8b-9511-62019566b0d6"
        },
        "item": {
          "id": "d2b92570-a23a-4653-9785-20ead2ca3ee2",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "532b962d-6432-416e-9e45-13f59c555818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 428,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a24f41-f8e5-4036-8661-6d4bc9132328",
        "cursor": {
          "ref": "335280c7-0e02-4ad6-97e7-be240a3c2432",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "36fac007-5a5e-4758-a922-d6410aee30f6"
        },
        "item": {
          "id": "a5a24f41-f8e5-4036-8661-6d4bc9132328",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "8404e101-ffc5-45c0-afdb-008588bb5e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e65b8ea-34ba-41ba-a5b9-de46244f9d5e",
        "cursor": {
          "ref": "085407d1-0776-43ce-a87e-1c99360572a9",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f60f7b7b-e0fe-4071-ad27-73dbdc0325b8"
        },
        "item": {
          "id": "4e65b8ea-34ba-41ba-a5b9-de46244f9d5e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "15d4a61a-1780-45bc-830a-f193021958a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac0b5af2-f406-44fa-895e-43933be209fe",
        "cursor": {
          "ref": "a372f3b6-0a4e-496c-96bd-4d085906a1ee",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "1796f22e-49a0-44cc-b028-76e6d5662515"
        },
        "item": {
          "id": "ac0b5af2-f406-44fa-895e-43933be209fe",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9e145ac6-75ee-4aee-9daf-5beac1d9a949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599fe4ef-8396-47c5-bf20-e6df6b88def7",
        "cursor": {
          "ref": "ca460575-513e-41e1-8d5b-e948cdd6233b",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "10e39d8e-7524-4ca2-b591-c414f922a2bd"
        },
        "item": {
          "id": "599fe4ef-8396-47c5-bf20-e6df6b88def7",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "adbb7fda-bbdb-4111-9721-e36a2d93c011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96c5c684-c6df-439d-b342-640fe7b3b5bc",
        "cursor": {
          "ref": "f72d91d1-49a0-4e99-a687-2c666d71f7bd",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "51497e1e-0ba5-448e-b97c-26821d65cb90"
        },
        "item": {
          "id": "96c5c684-c6df-439d-b342-640fe7b3b5bc",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b3dbf327-e81f-4b92-99ce-a48792815fba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35a3aa9-eb26-45f0-b651-c34b9706e564",
        "cursor": {
          "ref": "2dde716f-075c-4a79-8c42-ac0aba441d20",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "55284fb3-95e1-4545-8d85-111ee90667dd"
        },
        "item": {
          "id": "e35a3aa9-eb26-45f0-b651-c34b9706e564",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c651a82c-2912-42bb-87f9-d3ff4b3f4b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273fe1b1-8c9d-4a94-bf73-593da025fe49",
        "cursor": {
          "ref": "fe5e06af-be88-4231-ad2b-323e5e2db159",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "cea009f6-022f-43c2-92e2-8b154bd2b5fb"
        },
        "item": {
          "id": "273fe1b1-8c9d-4a94-bf73-593da025fe49",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6b3e3eeb-2299-4570-a0ba-c280ad15194c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64c54e1d-ad70-4aaf-bb36-3d7275319856",
        "cursor": {
          "ref": "7689cad5-ec94-409e-a0a8-d9f0bc08e50b",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2425e3e3-5aca-4d41-8bf8-6332b0249971"
        },
        "item": {
          "id": "64c54e1d-ad70-4aaf-bb36-3d7275319856",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7ee68819-f7b8-4836-9cc8-60e983ec9c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 378,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c5664e3-6463-460a-a687-02302ab856b4",
        "cursor": {
          "ref": "4deb73c3-33de-43b0-a230-7756b0fea541",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "8b59c3cd-55e7-491b-908f-99b2f0218549"
        },
        "item": {
          "id": "5c5664e3-6463-460a-a687-02302ab856b4",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "37bb21d9-e60c-443a-b2e0-1f530fc24471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7acd5d6-49f5-4eaa-9199-c101d3f381e8",
        "cursor": {
          "ref": "05e2435b-1fd4-4f9e-97ff-de3ca0bc2ccb",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "a78da9c4-7537-4adc-9e34-6273181ce4d5"
        },
        "item": {
          "id": "e7acd5d6-49f5-4eaa-9199-c101d3f381e8",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a945244d-7b96-40b3-b796-66257d8008d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278c2210-5955-45d3-9791-ca1cbf5c269a",
        "cursor": {
          "ref": "6cb2ce7a-17c8-48cc-9266-ede549703d8a",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "67bb3a82-4486-4d68-b629-3b2a1139f6d2"
        },
        "item": {
          "id": "278c2210-5955-45d3-9791-ca1cbf5c269a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "4c0ce716-9aaf-4a00-aa88-22c2c75c0179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2eafde4-bb55-4b62-b626-f8699a39e003",
        "cursor": {
          "ref": "852c6070-c12e-4871-b0cb-996b145531e2",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ed23d7b1-a1df-4bc9-9faf-d5998d81a3dd"
        },
        "item": {
          "id": "f2eafde4-bb55-4b62-b626-f8699a39e003",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a3e16502-3c51-4f32-b61c-5e0bfed7546d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f677bb-fa21-4522-8286-5856b39b9742",
        "cursor": {
          "ref": "29aabbf5-308e-47f2-9827-a043fb92a396",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a2087901-ed4e-4ce0-aa02-5adf69f1b0a7"
        },
        "item": {
          "id": "87f677bb-fa21-4522-8286-5856b39b9742",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5fcef4bb-57d8-44c4-91e2-a706827729d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba3ea38-7c29-46ac-a4d0-965c0c9b31b2",
        "cursor": {
          "ref": "c8916431-02f6-4c00-9e2c-cca61d06bc48",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "3cbe916c-80e6-4c6b-a2fb-4152f45987fa"
        },
        "item": {
          "id": "dba3ea38-7c29-46ac-a4d0-965c0c9b31b2",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "dc8dfce9-39a4-4e89-9c11-bc6ebdc6c41e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e424f6-3ee6-4e0f-8037-92ba24297779",
        "cursor": {
          "ref": "1577fe14-e800-485e-a98d-1cfda82ebe4d",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8ba50176-f47c-4509-b8e3-ccfdc285be26"
        },
        "item": {
          "id": "69e424f6-3ee6-4e0f-8037-92ba24297779",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "dc5437d2-a855-4cee-abe1-ded3766201d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 905,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "710dd67f-8479-4626-a7bc-6dfb6468eca3",
        "cursor": {
          "ref": "daab091f-f6c3-4c82-84a4-d57dc6fea904",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3b5e2d13-27f1-4ca0-beb2-00f71027faf1"
        },
        "item": {
          "id": "710dd67f-8479-4626-a7bc-6dfb6468eca3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ece3f7b2-d981-4f92-927c-21c07886f960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c605b436-9070-4023-94f3-f2463208ff9f",
        "cursor": {
          "ref": "2b5a2c73-c84d-4ffe-83ce-96747f47f2e5",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b5cc475b-109b-4143-9668-ca147873a639"
        },
        "item": {
          "id": "c605b436-9070-4023-94f3-f2463208ff9f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "017e5f5b-57a1-4c8e-9a53-4a3b039bfa48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078db951-0a9a-458e-b023-4c28bf178b6e",
        "cursor": {
          "ref": "ad659204-eb3c-4c8f-8996-e520086482e9",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "21e13f31-d7a4-43c0-b744-6560e7c9c009"
        },
        "item": {
          "id": "078db951-0a9a-458e-b023-4c28bf178b6e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d03e5556-4b35-4c11-bb41-0b67f7c4db1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de8cabd8-51c2-4178-8565-a568645f58e0",
        "cursor": {
          "ref": "5a594cbc-4c29-4568-bd4b-a7041ebfd1d0",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e37f5c27-53b0-4931-a2a0-4ff832f70701"
        },
        "item": {
          "id": "de8cabd8-51c2-4178-8565-a568645f58e0",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "043f9ed5-222a-4dbb-be3f-fc489bb71f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3882677-c2ae-46aa-8439-70bd21424bf7",
        "cursor": {
          "ref": "4ff72b43-3f74-4689-a029-839465f5282d",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8578128d-8034-4f29-b8c5-133c66ade8b8"
        },
        "item": {
          "id": "e3882677-c2ae-46aa-8439-70bd21424bf7",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "690c632f-b3ef-4772-98fc-6e80da5d693c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c122b943-7119-46b6-bd2b-c414e5c45b9a",
        "cursor": {
          "ref": "60cbf5d5-a7bd-45c9-9c32-c6de0bb93a37",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3aaff501-6433-4b0c-abdc-b9cd13347a60"
        },
        "item": {
          "id": "c122b943-7119-46b6-bd2b-c414e5c45b9a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "7ea3a181-c165-452b-a737-649379749a5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c5f9b78-9b9b-4a3e-a1a8-4efe12b53d17",
        "cursor": {
          "ref": "5f86d962-8a29-49d5-b5ed-a3deeaec9704",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "42587b7d-7427-48d6-ad48-0c90cfad7997"
        },
        "item": {
          "id": "2c5f9b78-9b9b-4a3e-a1a8-4efe12b53d17",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "48701d5a-403f-4b3f-b7c7-48fe8f9a4ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e0ef1e3-2c80-41dc-925a-4171151c4815",
        "cursor": {
          "ref": "6dce46d1-e77a-4437-9a9d-9edb9bacfa1e",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c115b627-d9aa-4bb6-8813-a4d72caa72ea"
        },
        "item": {
          "id": "5e0ef1e3-2c80-41dc-925a-4171151c4815",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d61ddbb0-beb1-44ba-8f1d-d8ef0df7dabf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc641813-78a4-4048-b8d7-e928a39c6934",
        "cursor": {
          "ref": "6e6fe417-1d33-429b-a34a-b15f409a3c32",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9db12268-0ba2-482e-97cf-27a4f76c761a"
        },
        "item": {
          "id": "cc641813-78a4-4048-b8d7-e928a39c6934",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "cffcbc6d-a536-43d6-a142-02c3934da66b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 371,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35456215-5a92-414b-9c72-828a56b08bcc",
        "cursor": {
          "ref": "cd28355e-bcf8-40ff-8762-76a83718ac3f",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3da1845e-f6d7-49fd-a6b8-c362773b2ffb"
        },
        "item": {
          "id": "35456215-5a92-414b-9c72-828a56b08bcc",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "55b577f1-c976-47c7-9379-3491450550ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef258c9-e629-4839-bb29-f8ff425ee444",
        "cursor": {
          "ref": "627820df-357a-47e6-96ea-3ef97c18d38e",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "07587a85-a3ae-4afa-9900-26826a358d66"
        },
        "item": {
          "id": "0ef258c9-e629-4839-bb29-f8ff425ee444",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d07688ee-4880-4623-ac43-05f675407938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde2fcbb-93a9-4d05-88a9-59639be19dc7",
        "cursor": {
          "ref": "d61f453a-dbf5-43b7-a312-4bfedba5a970",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d8fe7fd4-0288-446d-b73a-920ae8780b53"
        },
        "item": {
          "id": "dde2fcbb-93a9-4d05-88a9-59639be19dc7",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "67784f94-ef9c-46c7-aeb8-c77ce1dd1231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef391fdf-dd88-4658-8333-5f0510c7d2cd",
        "cursor": {
          "ref": "761afd54-5f4f-4866-9e56-13e146e9e2e6",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7cfdfc6b-44aa-4719-9fbb-49bc81347a1f"
        },
        "item": {
          "id": "ef391fdf-dd88-4658-8333-5f0510c7d2cd",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "39d74ea3-a78a-4715-a3b2-c238803dbeed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "321db01f-bf4b-48ca-b2e0-a5e26ae7574e",
        "cursor": {
          "ref": "1aa438f7-4793-492d-94ea-f6fb5353b4b6",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5e060520-9724-464f-a70f-d45fc77a930d"
        },
        "item": {
          "id": "321db01f-bf4b-48ca-b2e0-a5e26ae7574e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "6aa682d7-2210-42fe-b418-c1059591e99e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43abc4b3-61f5-40bf-ab5a-e8921028b1d3",
        "cursor": {
          "ref": "e3f8a6b6-2b53-42a1-b5ed-9ba1db3650ce",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9ccb7cbd-f94c-4313-96ea-cb121f67ab71"
        },
        "item": {
          "id": "43abc4b3-61f5-40bf-ab5a-e8921028b1d3",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f682a848-0adc-461e-bbeb-6d639f65d7f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "384d8141-2cf9-4327-a335-3252d90d3882",
        "cursor": {
          "ref": "1ce15ded-559c-4334-bb4f-2e4ecee3d16f",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "1cdc048e-0c19-4728-9c4f-6be2838d4e2f"
        },
        "item": {
          "id": "384d8141-2cf9-4327-a335-3252d90d3882",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "3765af7b-050a-40b1-87b8-91bbfe63f7b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db3f22c8-0656-4494-b353-5d144a307dec",
        "cursor": {
          "ref": "bf700b7c-58ae-4871-879b-0e0952e989d7",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "67052185-cf19-430c-8ccc-2c52056b0179"
        },
        "item": {
          "id": "db3f22c8-0656-4494-b353-5d144a307dec",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "ee055f50-3f4b-47b1-96d5-c8aa932d2c8e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72164810-444b-49a1-850d-527a90720bdb",
        "cursor": {
          "ref": "ab0bd7f7-a8fb-4fa4-9564-1019356456a9",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "328fa443-3f76-4327-9f50-755972bd929b"
        },
        "item": {
          "id": "72164810-444b-49a1-850d-527a90720bdb",
          "name": "credentials_verify"
        },
        "response": {
          "id": "c19b4b3e-46cb-44ac-9caa-d56925b08609",
          "status": "OK",
          "code": 200,
          "responseTime": 2244,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "282dc5ce-8ec1-4d05-8f66-a0f50896e1c2",
        "cursor": {
          "ref": "caeaab69-83dd-4d1d-a327-6a7ba05d782f",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "3947e94b-e90f-4cf8-9114-8492b9cbc0a1"
        },
        "item": {
          "id": "282dc5ce-8ec1-4d05-8f66-a0f50896e1c2",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "65a569cf-fd5b-4896-b656-e41b8c4193b4",
          "status": "OK",
          "code": 200,
          "responseTime": 942,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e30debe-493d-4ee5-97b5-fcdfb7992f7f",
        "cursor": {
          "ref": "695164d5-9611-47c3-8ce0-d3a9a99671b6",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6338b81d-30f5-4aea-8a12-ce4146e06d00"
        },
        "item": {
          "id": "6e30debe-493d-4ee5-97b5-fcdfb7992f7f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "820ccb93-b9c5-4018-a377-c6a0fdc529e4",
          "status": "OK",
          "code": 200,
          "responseTime": 590,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5dc293-2a06-4951-b6e9-edbadc964b42",
        "cursor": {
          "ref": "c74d9528-b128-4422-8683-dac753360539",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e4dbdc8a-b324-47b5-8f62-afb6288b1ace"
        },
        "item": {
          "id": "3c5dc293-2a06-4951-b6e9-edbadc964b42",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e09f9643-878a-4123-a570-0332324e226b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5dc293-2a06-4951-b6e9-edbadc964b42",
        "cursor": {
          "ref": "c74d9528-b128-4422-8683-dac753360539",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e4dbdc8a-b324-47b5-8f62-afb6288b1ace"
        },
        "item": {
          "id": "3c5dc293-2a06-4951-b6e9-edbadc964b42",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e09f9643-878a-4123-a570-0332324e226b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5dc293-2a06-4951-b6e9-edbadc964b42",
        "cursor": {
          "ref": "c74d9528-b128-4422-8683-dac753360539",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e4dbdc8a-b324-47b5-8f62-afb6288b1ace"
        },
        "item": {
          "id": "3c5dc293-2a06-4951-b6e9-edbadc964b42",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e09f9643-878a-4123-a570-0332324e226b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b25bf4f-140c-4976-b70f-cf5f6485d9cd",
        "cursor": {
          "ref": "9f3a3d42-8da8-4b7c-aac8-95f060cd430c",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c6b992b4-d279-4a61-b6ff-b77ca54fb3d9"
        },
        "item": {
          "id": "0b25bf4f-140c-4976-b70f-cf5f6485d9cd",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "4c93e8b0-d40f-4b7e-bd4f-182d1db36713",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 45,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbbc909e-41df-4e72-b45b-c0b5ffff5684",
        "cursor": {
          "ref": "2bea57ed-fb58-42db-81b1-1b77821b2354",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6f3ef6f1-c060-4193-945a-47c11061b13b"
        },
        "item": {
          "id": "cbbc909e-41df-4e72-b45b-c0b5ffff5684",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5e95ba87-2e27-42c4-9012-638f6359448f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "cbbc909e-41df-4e72-b45b-c0b5ffff5684",
        "cursor": {
          "ref": "2bea57ed-fb58-42db-81b1-1b77821b2354",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6f3ef6f1-c060-4193-945a-47c11061b13b"
        },
        "item": {
          "id": "cbbc909e-41df-4e72-b45b-c0b5ffff5684",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5e95ba87-2e27-42c4-9012-638f6359448f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "5a7ae6ba-4624-4e51-8722-bedcc177f68e",
        "cursor": {
          "ref": "39144f80-639b-4050-87c6-7e1aafd9f21e",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "96eabe1b-c3fd-4f1d-9f51-b569521a5c90"
        },
        "item": {
          "id": "5a7ae6ba-4624-4e51-8722-bedcc177f68e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "53a38900-faf3-426c-94eb-e45fa4da6cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "c96a883b-b2d3-4fe1-88f5-44140579f637",
        "cursor": {
          "ref": "eb1a1203-6ab1-4a56-9e4f-ef102e53105f",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "32c72227-e9f8-490a-b2d5-d35c221e0831"
        },
        "item": {
          "id": "c96a883b-b2d3-4fe1-88f5-44140579f637",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "51fdcd9a-6485-4eac-84c2-330186d15452",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c96a883b-b2d3-4fe1-88f5-44140579f637",
        "cursor": {
          "ref": "eb1a1203-6ab1-4a56-9e4f-ef102e53105f",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "32c72227-e9f8-490a-b2d5-d35c221e0831"
        },
        "item": {
          "id": "c96a883b-b2d3-4fe1-88f5-44140579f637",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "51fdcd9a-6485-4eac-84c2-330186d15452",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e24d257-80ab-4833-b776-1c37921f9ac6",
        "cursor": {
          "ref": "3f5c8f10-acbb-4935-a0c0-89b27fcf1ea7",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a96a9a3f-66e7-4a34-8a3b-c8b1d43c008f"
        },
        "item": {
          "id": "6e24d257-80ab-4833-b776-1c37921f9ac6",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "a1a663f7-314d-4a2e-a4df-efc7d3478cc7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 47,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}