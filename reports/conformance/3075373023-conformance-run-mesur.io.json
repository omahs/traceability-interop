{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "d1fa157a-b227-4a3c-9d5d-a782375c59c5",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "873bdb53-36d2-49b1-a960-9a638e9113ff",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6a895373-b565-488b-a0f5-597a0be1fde3",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2ea8f07-d51a-4858-83d4-f55c19f8f8c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "28d32180-9e27-4c0b-a3d5-af0c26db7bf3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "4efe616b-b6dc-4f2a-ad3c-e396e61739bb",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "065d6147-1ab9-4a50-85af-befc796f145e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b5c45a82-fc2a-424c-bab7-44ad2925e473",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cabff054-346a-4524-825e-03bcc730bcef",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda18771-8f59-499c-8832-621461f29ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b0c6e766-fc0c-48fa-adc8-d82f7ddc7258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f35e652-6425-43f8-882c-adeebfc6f106",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f0ed0b-bb4b-4c74-86a9-e0e368e3512e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "447cd6ed-30fa-4808-b035-7778a729978e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b3d912-0aa7-4eed-a9dd-b01ffdfae5ed",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1305c716-00b0-4635-9c67-308cca4ddd35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0302dbe5-a587-48db-9cf0-f1931fa69174"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "dfd395dc-f6cf-447d-8b03-dbdd4ecc9af8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7b3df591-8e2a-4981-b508-0b38b5bcd2fa",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "065756cf-6343-4da5-a80e-d54cc47ff122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f94f8354-319d-408f-b3a8-c3da7e59102e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a2b9aed-fd2b-49a3-adf9-9fb8402d45d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b7ea2c0-f9d9-4fad-b143-9cd7cc4fa0a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be8bea1-2b36-4b53-8f72-9459a67c001c",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7859ef8-26ff-4d41-8335-5c404d86bdb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "41f265f0-9c0a-4461-b3e1-f99890ea5477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1ceb70-cf0a-4d28-aad1-d5ab9df41428",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "f1f7d0ce-f495-4deb-85f2-1bae0e912ba5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b1aff86c-bcd2-4b5b-8a0c-8860518e947c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4f958e04-2769-4057-92c4-195797538352",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49cfa745-bed5-494b-a541-8cf39beb76d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "96b434bf-492f-4797-89a7-471b6eea970c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e4493d84-bc0e-40f5-b8fb-3a819e7e3ada",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "e13617a1-1b2a-49ce-88cc-f786b0e09ceb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f2aa35e3-61a0-48a6-8da8-d87466cf0028",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e3ab878d-5b62-4870-a59a-8d2bfe774385"
            }
          }
        ]
      },
      {
        "id": "3567788a-87d2-4d82-84ce-9540f3e91cd2",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "32c18f12-98f8-481d-ab3b-e1ac7a7391bb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "34eae4b1-1fea-40f0-ae84-a909b91aaff0",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "76cc65d1-6124-4b73-817a-d84de8c45d6a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9120f90f-d66d-4135-8d09-0f28dec2f5cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d5313db-e89d-4a19-994e-dea37bbf5eca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0cbaa0f-9471-4328-ac3f-eac54e406218",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "628817f7-3405-45a7-a57f-46b5530409f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cda93890-1634-4b19-8b72-dd2d7dbd0e25",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1137d2b6-bb16-4cdb-9710-38079962a0dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de52e30c-f242-455f-9571-65ef5e98c14f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8154aefd-0039-462f-8c9a-79848235ee56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce96b414-8e20-4d74-9c93-56d97bb9c444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e16484-af88-4628-a168-a5c4e6e8eeb9",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "731040fd-7575-4ca7-9a4f-00505f39eec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8206df8-37c7-4b82-b7db-bb5f733d8ca2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65abd118-1fcd-4d51-b7d1-c2b1738773a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "527fe3f1-ce68-4105-a0ab-153a861328b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a904b15e-8773-4756-8670-cc504a952b83",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50428a01-9324-4e7e-a74a-67f091207d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10add818-b14c-4b13-a373-37a448a39bb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "126530f9-72f5-4a22-8de0-6de2ee4a2b40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "daaf6fea-6444-4d4b-a04c-8dbee01c4186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c9d0a7e-1fda-427b-aaec-c7d42f45fdd4",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c03cff8-b09b-48a8-81be-9545ce0d06cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20a8956e-ece1-468c-9d98-71ec19c2474c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "132f09cc-70e9-4b0e-b540-2aa3962bacb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4a33577-90bf-48c0-937b-ef755750cfc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d81b611-57c5-4050-8ce0-bd3767dbbdbc",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9901c8fb-e11b-45cb-9a6e-56c2a07965df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8266759e-ff2e-4e83-bc7f-ac5adb089eca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be70094-8f3e-4f77-8dc6-8df880de6c6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c004224-a280-4eae-9e16-1768f5557b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f458490f-a4cd-456a-972e-21318b03eeaf",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5667274-c1f7-479b-b54a-0f68dcfb222d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfdd5af0-1e3c-41be-b4bf-e419748cadfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0874595b-7d49-4f45-8823-5964bd5ab5cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "303ec31b-5661-4258-8d6c-2bb56407fc05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6cb7325-cf21-4fbe-8097-d812bf6df70a",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26521199-87fa-4068-a3bf-2d8d552e746c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03c1e658-1f58-4ccf-9ec2-a24644f9877c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af38a3b-1efd-4c65-a928-296fff0eb682",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8572d51f-4d3e-435f-9d58-d12d717400cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "facbf5f3-41f3-49bf-88e1-a5e29a2000cc",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aeb103c-9209-4bef-bdb3-7c267be9953c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0e20144-488e-4c9d-b242-4afdd7c41158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4030940-3f6d-4908-8da6-20c6f9c3f7c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3725852-1d04-42f3-9085-1ebbbf4a9c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1605e5aa-995c-43ca-a740-818247caff96",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91df23cb-935b-4947-978e-64276a3e31a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec1dc99f-2b8f-447e-9d09-709fe39654cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd0c38f-770f-4a75-891d-5542760f325f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1c74a00-4eab-4741-ae8c-054b25b45bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c63a0360-9a0f-4de8-859d-e087eafcaf28",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb9b7e61-bbc5-48d2-b8b1-78fb087c154b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "503591c4-f89e-4e19-b5f5-0b221ee42800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18394b17-96e3-4c50-9cf1-d2a48f25e59a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "505fc4c4-2fa1-4ed0-9e43-0e9e189327d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b046e9d-46a1-4162-9673-0aca3ae36e54",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5769b912-0adf-4c5e-aa9d-1fde586f678d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0603f689-7425-4926-9fda-783a66fc3349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb580a5a-922d-4ddc-afc5-c810f8afc67e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "47daa187-4f98-4013-b451-9167293f2a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37106542-fd75-492a-94ee-d7c4ef216004",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b183ea3-c755-4314-831d-aff4dcf332ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9385731-9ddb-4457-8ad8-7abb522388b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce977ad1-0c84-4161-9621-0331acbd0390",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc1b0652-38ac-419c-9462-a576f0ea07b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83bbfe63-6791-4f43-8183-bb2d23acb84a",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37936795-21c2-44f8-9e24-b9a0eb0bd924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05c1b0e2-7650-46ea-a699-1f3bf51a70c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aab5e05-7a56-4a09-829d-04d8103941ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bda5909-9916-44c8-83c6-9a6181407eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49b750ed-0feb-4ede-b047-550b1eff3418",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab3a461-8230-4996-8833-899dabf065ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cb9e44f-ae37-4ba4-a197-291357237d7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "914f1793-2f95-4de0-b071-cb42c3f69f4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "245d1ee5-79c8-46da-a275-4809434d2fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b0ba8f-ef8f-4fe6-9571-1783e6891862",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8147c36-54ac-4453-8f23-5d7db527fef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fc56ef9-c807-4cb7-8a02-af2f37064e8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a543dfe-a868-4193-8caa-6552e4f6f38c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "d5655939-7ce4-4f10-840b-ab503dcb4520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "106d93f3-e044-4048-8884-76f1b252221f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b56e845-74f1-4b41-bf47-39b552efd07b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5163a364-2277-4336-9aeb-c08c2d635e18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70d0afa6-64ee-49d1-8b75-5771bfca2330",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c201aed2-631d-4e6c-b44b-2eb2075e8a80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db8bcb0-f1e1-4149-a98a-d19b61af8408",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a22bbe6d-4d4d-49af-8084-8ca5e73bd822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6dd3aab-36a1-43d3-b357-a0b010f9bc64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00261e34-4a12-4a58-a0c4-5edf4d6ddea1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6df6e222-dd1b-488b-8298-3ea3e6dc7309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96bd109a-f4aa-42e0-8967-4c0ccc8b10b5",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6aa3882-5789-4dcf-b69a-951f073022af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53d68150-f390-4032-bb9f-37d376210579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc2ea7d-78df-48b4-a871-a775cd729983",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20a40f12-aa4c-45d8-bcbc-d132b24d6177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7af709b-7d55-4d59-b392-e8d697d97248",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b3a851-2170-4e3d-975b-12bab91e5a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dd8ff73-3e51-4046-ad1b-7d5779894893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97c5ffb-8fde-402b-b3ed-bf00be630f75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f32dbd35-45fe-481b-8ad6-2e837e059402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6429edf0-2ad2-4584-ac87-708e181c2bea",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f63c8f6-4e9b-4269-8e61-a17f4d39a3bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "decae76a-d7b5-47d0-8b97-e70b66635ed7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de991612-b66c-4161-87dd-d768b5f26809",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61f201a3-c0a8-457c-b397-423c17e37708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1a78c77-65a7-42fc-8c05-7dc43c56937b",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2095bd-7737-4a6e-9597-409b86df1c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39563e47-8c79-4344-a815-ba27a039d057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "558200f2-6802-45dd-aa60-362fabedbee4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec34a460-8e90-4231-a93a-604a7fa8b9c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea13988c-5e6e-4110-baa0-cecdbab0e722",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "255de15d-cfe9-44da-b33a-af408267d63f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "376c05a7-f3f7-4e1b-998c-1d10de1a3381"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f96481a-d17a-4934-bd90-0e5082a1c572",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04b5fe32-2870-4432-857f-881c769102df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5682e9e1-5dd5-4e30-b5fc-cb38821581a0",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeeef9db-23cd-4cb9-8c05-0a20ffbdb2c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf83825b-f9bb-422c-b036-8b8f2b9f4e82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cfecce0-ef5e-4e0a-8f45-eed02d2b39ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5959df6-cc2c-4e5c-81bc-28a863a04089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e94ddf8-5b35-4890-9c0d-ea220fbb9c50",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa24e5a-9178-4085-949e-6d6cdda55468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a18b5da7-58fa-4f7f-a6fe-16a120d37d10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f43f0cc-e43f-44dd-af4d-5d4aa24db460",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9c976d3-a0fc-4e30-a703-ae2f75d61ec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3ad1cd-2d72-42aa-a0d8-2ea66855341e",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a7c4238-d75b-4707-945d-74d1e5f405f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0a8bbb7-d105-4f5d-8d85-ccfac145b641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39832d9c-e7aa-4dc0-a448-0017371a3e57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d7d033d-09a1-4dd1-b61b-87fb64d84a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284d9539-94cf-4155-b9c4-3005055f87d3",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1fa44b8-3a4e-4c2e-97e6-86fb8f8cea43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "202cb0c9-15c0-4f25-a074-941aa5942a4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01464db-3e37-4676-9050-5613ff1f617c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb2432fb-9b16-48a2-8ea2-4b82cc465791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eddc1c3-0e15-47ba-892e-85e55cdcd86f",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e6fde6-171c-4ddf-9e1f-8c333e674a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8053c18-e8e3-48c8-9cc8-8d5f60d3defe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b97a5b17-9aa8-4dfe-b1d9-29b655c19491",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "850d46d9-27bd-446c-bb26-9c4d42cf254a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58afb77a-67fb-4c2d-84ff-7988f272a209",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e25fa28c-e2ac-46eb-9c5e-c958c20efffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "729567dc-2c41-4d32-80bd-f43ec14cf611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "139fc7ac-9b2a-4e7a-8347-5a1526594a43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "089926ed-7b15-47a5-8927-52d02832321f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ccae670-8f96-40ed-8af7-199e726a5121",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b6d6d9-9004-481d-ac26-9e17ff03a8f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98854f19-46c3-4c2e-936c-f5b6807dfd59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15789b5a-30b9-465e-9966-f6178da22b73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65a0efb6-1ff5-4e4c-bbaa-3e854c83034b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e038bc-b08e-4579-b8fd-8adb92f61d44",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec632875-e775-42c1-91dc-b60155bf8549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "19198c8e-9d72-4284-93f7-3fdfabcd300b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745f05c7-f910-4bec-ba34-c59f48ee889c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9db4f78-141b-4e8e-a5ba-41a6eb402acd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "776fa986-9c6d-45a0-b70b-a0363a7d9149",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6124695c-aac3-42b0-b3f5-3d96d0afe11d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9bb9a1b-858b-40e2-a3ef-23ea2751af0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28c4ca3f-dfc6-4722-8f05-6d9a584bacc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7fc007e-3bcf-4a25-847a-bf2b2f870028",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "f1ef8311-3f27-4fb9-9681-25d75d9115b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e8ebc3-7547-4faf-bd5c-1ce24b5d616d",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b869805c-b1f9-469d-8a81-78e50bf7f845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "172cd08b-8da5-4ae0-992a-c537aa24b4fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6807307-6d12-4e4d-9878-f608c5e9ccc0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "ab46376e-d251-4f02-8659-93b5aa41d294"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "759a6a53-1b1d-4c51-9608-0f6dc6fb80a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "07f40c1d-3967-49da-b218-530d15d953d0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b30451e-22f9-492b-881d-2e26ba2ae581",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ef6fb0b-2c93-4bed-b7ec-f52c190c90d4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "34572df1-d8fb-43cd-b599-feef0f2c37c1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9f6a0a7b-88e0-4315-b35b-389874a1eb68"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "da532aa1-3ea7-45b9-9f05-8ca3dfe3ed9e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2bd2d802-8a1f-4d57-a080-8c15a3cdbd39"
                }
              }
            ]
          },
          {
            "id": "ea818479-4861-4360-bf47-00fb2399cee6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "688565f6-5536-4d3e-b333-d992d58d8365",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "420e306e-c7ee-4879-984c-8ae2e1770769",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "49e6d602-485b-4765-adf4-c91032379af6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d04a68b-15d5-43c1-9c0a-a16abd7066b5",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "1638cecc-a9c9-49b7-850e-444d79fb11a7"
                    }
                  }
                ]
              },
              {
                "id": "8717dab6-059a-4cdb-a29f-e0a25d027128",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "23a0adb2-9f0d-4ccb-8478-3b1d624740ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3c07ceae-7363-46e1-b914-dda56370d7fc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab0ed07f-9cd7-4fe8-bd90-b3c1ac12f390",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "641608a8-cebd-418e-88b1-b4ce69d864c0"
                    }
                  }
                ]
              },
              {
                "id": "58439798-dc96-424f-bd3d-ca3fd81694b6",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3dc4069c-180d-45b7-907d-395f245ff947",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "02d49231-beb1-4ceb-9f75-8cc7ab242ce3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36a28d06-0bf9-4bd4-88ee-74e03ab4f09b",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "b192bbc7-a7a1-446a-ba7c-401c5c56cc6b"
                    }
                  }
                ]
              },
              {
                "id": "f16877e9-c66a-49ec-a71d-c6bcf939da77",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd86c52e-b8cc-4b7e-99a0-41cb8be04df4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "15bf3329-21e3-4159-a94f-28ebcac2d9a6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "97d3f89f-3e1e-46d3-82b6-808d1b81b843",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "9cb1663d-a372-44eb-8610-484b251af36f"
                    }
                  }
                ]
              },
              {
                "id": "86433b03-33b0-4931-b638-6c92a557e0c3",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e08e848-ffe0-4fef-823d-2251b0b75fa5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "46da98da-f3c1-4c3a-8db6-915801185331"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1eecf020-46d7-4485-856a-854dbce463be",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "15219d3e-cd57-490b-892a-56b941fa87ff"
                    }
                  }
                ]
              },
              {
                "id": "1f7b4de7-a7f9-49a1-a126-3bb497e25371",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea26ead9-3271-4db8-b05b-02d7bc37eb64",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "af8c0548-bd3c-4664-9ef6-d74c010ccc89"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "378b1edd-f209-4113-b888-93b54a0f8615",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "504d4e41-1e50-4238-b527-d75d3249d569"
                    }
                  }
                ]
              },
              {
                "id": "a46c3461-ad75-41b2-9339-c5eca292b7e8",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "27e77b44-ec9a-45b1-9fc9-3ab5a901faf7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d31a3e4a-ce9e-4a55-b961-c3dfdf4a68fe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19e0fdc6-7bab-4525-b831-6341d6505b2b",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "38a48eef-e739-46d8-813f-4352f539e0cf"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d60af890-8d0f-427d-b3aa-b8750b90c4ed",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6ca453f3-762b-40df-a833-3e78c2918b5a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "54776621-98dd-4bdf-b0ab-b3a74565b6c1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8452ba96-34a1-4ae3-9f74-5cbdb5353531"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "14de5160-9325-47be-ba8c-090ffdd6d0a3",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "cdfbb5c0-61df-4314-a15c-01e596da3962"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1adfcc65-814c-46e6-99fd-39674fb71fe6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "23ffd69a-8a90-49bf-8ba6-e833ddd4952a"
            }
          }
        ]
      },
      {
        "id": "02553064-5560-408b-b522-8941a79d78d5",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "8ff23788-a962-4119-aec4-95bde34053b9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d2807696-1430-418d-8c38-79cf2367e2d8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "626095af-85a2-4c8a-b45a-702928d257fb",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78b0c0e-6b9c-4bf1-8088-b3d0aa43ebaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc9a0f7c-7130-49e1-87a9-95680d937ba8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d475ff-97ae-4ace-83ce-4749f7a5e549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9302af9-04c7-4952-a30e-fb168728c048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa75a9da-8f68-488a-bf81-453573c64487",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "958abcbe-9672-4842-a778-5ccd56103792",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "5491ebd7-9f17-4138-b067-4efdc87c25f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6dbdc82-103d-4cfa-b05a-8ac7f77d6057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c64e1d7f-6db7-4391-82fe-b6a173800a70"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88987a15-956f-4934-ba43-5c673957d707",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c023f42b-1da5-4397-b44d-991fc8a68e45"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6d1604a-11ee-4832-b8e6-a620a83bf067",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c42441c-a97e-434b-b7e6-9ad1ded0882d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e21cdf40-b3aa-490e-85d6-ba7ab21c0f64",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "bb153c5a-d75d-43a8-84ec-696c3dc67edc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a2938ba0-cb09-40f0-bc55-09e37c1e93a9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0b50d262-75a3-4161-a765-6c2ee860f9b0"
            }
          }
        ]
      },
      {
        "id": "764ef7a4-c347-431d-9626-9a19545fd51a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "866070d7-c948-470d-98d1-96fecf0164dc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0dc747a7-2227-48cd-ace5-2f57718ba3f2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bfc21e79-268c-4b42-9a26-ed55824bf8db",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9dd88c4-a495-4788-bade-bf1d2f53d07e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8c247c7-e3b2-44d8-92ec-dcd4e57a2713"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "764803de-cbad-4443-94d4-6d36883bd6d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "22f2804d-faaf-43ee-b501-57d4048f03cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "688563b1-2188-44fe-9938-90970d4a45ff",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "287e01ac-c75f-48e6-b485-4af16f08560a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9776308d-b3c5-4f75-a08b-0e165e27cca6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ebd6a4-859f-4fd5-9b67-a3165b9f79fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e4936529-7f0b-446c-80c3-85c6085e8184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99bb2fe2-e29d-4a62-a791-e4c43031434e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "598a3bbd-34f6-400f-8adf-7c3369c865e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d9eb3b2-3f50-4994-852d-cb2166527e2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "665fa490-e09e-4367-90a6-8f62dff5bb2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d97e21a-b250-4b61-8cb1-5fa170aa9bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806c5304-e5c9-4de4-bd38-2971cef56c17",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f44129a1-d401-4f4a-a71b-4956c124e1c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c87b47be-009e-4566-9b3f-98fbb7a185b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d7f314-f581-4037-88be-d00edadef166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d865628a-8b2b-4cf8-881e-c51bf3d0da22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bfb4467-50a2-4801-a51c-2a5550a3d96f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb2d54f0-11f1-447d-a0d4-d95275cc3d4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2aed7d09-444c-44ef-b5e1-455fb6bfe980"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0608c4-4ba6-435e-9e46-121ab4d93884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4fc7ef3c-6e37-4257-a1ab-6cbb401d5cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c258d70-5514-4ed9-8a3c-f770a21b9cab",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c31c225-5651-4366-a1fb-d1f111536742",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad874711-b2ef-4597-a9cb-5981ca5a128a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29e4790a-449d-4783-883d-71fbb2f1cf2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e8242333-d295-487a-92d9-ffbb2ec016a3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "84495df0-64a5-4186-93d5-0948c529e040",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "615f606b-b522-4ff0-8432-b5cc47b7fcf6",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30788ca0-dcc2-4c5f-a160-ab1925fafe1b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "6589875d-c3a4-4608-86c4-b9151beae198"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "829eb971-6401-4bed-a4d0-e266044c083d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a515184d-019c-439f-b202-74199145d68e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d604e7-6cb1-47c8-be6d-6676bbd761cd",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8359f060-8148-440a-9afb-3396bba0c3a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "dba88256-9dfa-468e-ac18-03506b3bb3ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e84d1e-233d-4194-8299-2458c15a6d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5d1aa6d2-6c39-4ed4-bea3-b4128ec3d75d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a60e6c9-8323-4ae8-8791-2d05baed3c4f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ef7461c-03f3-4977-a926-aa199bb478d9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "512e4d37-ac0e-4f6a-9215-3a65f8e39413",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae05b88c-56f2-4548-aeb7-5f569cbba7de"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1abfa03a-8b54-466f-9e32-0cc9dd4f4635",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "04be0350-62e0-47ae-88ef-35d21999d175"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ac5e9b67-5e10-46a0-b39f-11d55dcc1501",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "10d93690-6515-48b6-976a-9c6801d06b62"
            }
          }
        ]
      },
      {
        "id": "e26409e2-81c6-4046-b848-f18206ba608b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "9b651af0-1eff-472a-9a42-9487eda1b39a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "15453f02-9caf-41c8-a354-3fdcf3c2c4cc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9712edc9-ac9a-4f15-8f84-11c33d568ee1",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4f59903-f000-4021-b38c-344c4219ea89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d54d2bb-65ab-4f92-a5d1-51af637af8da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2f339e-ffb3-4624-a437-aa2a595d0775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f98fc4d3-0410-41f4-924e-f46c1dc0ee59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98869735-62c1-4e38-89f4-696deaca549c",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b92ee14-e17b-4695-85a7-15ae00450461",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "9674421a-1df7-4b7a-8dce-8455d734428c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "843ebff3-9829-4658-93b2-d5ec8ff6d010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd28c79b-3a93-4887-adcb-6b20c2e8822d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8aea4217-ca42-4349-9179-e5c026a43287",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6521b88-8f5c-4733-886d-1b05b833b878"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e3a272d-5e0b-41cc-9190-8c8c2706ddfa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0ff06ca-093d-41e3-b521-08aa136065a4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c93c64fa-be68-48f1-9f02-77306b579d1d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "8740585b-7ff9-476b-90ae-7dc58fb05a80"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b32f74b4-4804-44d4-9fd7-5f77ee2f093f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "31f5fdad-2897-40ab-8b6e-da233ff92a9c"
            }
          }
        ]
      },
      {
        "id": "c2e7156d-f889-45d7-9bbf-68c338392b54",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "04ed9d1a-2146-443a-a503-dcec5a33079b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "48275dd4-09c1-453d-9a03-3ff49aa552e1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7ed7dc89-2b1a-4d66-869f-f3254b6f9d7b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af782f2-9643-4c38-9703-0a3beaf12122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38d9ae3e-918b-4a56-9930-a1ccf92fc2e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47058120-5127-4182-bf79-bc8f725b7840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e4b63156-3815-46a9-95d8-c024f62593ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3740907-2175-4ad5-8de7-1cba1bc35e94",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475bebc1-91e4-479e-8120-39d969caf34c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "29944d30-1f4e-404f-9586-4cace7f65a3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0236223e-21e4-4d7b-87d2-0313de74b7af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9aadd0d-546f-4c60-9cbb-d26c001545d3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64243c85-dcf4-44de-a896-0d56ecb89d71",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01253767-2728-4507-b8bb-e75dc298cd41"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f1b1a28-712b-4d02-be19-6f6cd6f21441",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e581de48-e321-4a10-bfaf-3991b85162a7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e0c2647d-414e-4a56-8d6b-0c9de19ffe6d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "fed0355f-f7db-4852-9536-e19bb0d43f45"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "79a9efe1-7fd0-46a2-8ac0-bb05cd5f66f9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "38ec9a65-5c95-4154-99c7-049bc26d2c33"
            }
          }
        ]
      },
      {
        "id": "cc2cdfb8-5dbc-47cc-8b3a-ac1cd0d3d54b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "1c328e6f-2766-4229-8f75-20417ba3e073",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fb4afa11-b631-421d-95bd-e748401ce491",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "24fa6d7c-a619-47db-a95e-f07887d6ea9a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99b7337-8835-4a77-894a-c3984f12ab4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "635249cc-6284-4677-945d-3f25565b4a05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a254c7c4-3d3b-459c-8f99-60925b8801a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40f546c6-9e90-4875-a823-7e0866d9d10c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "552ea292-fb6d-4636-adc1-a52ba8e5d910",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae00371c-0691-40d4-bb3c-976677642b24",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "de9f6b5c-27e0-4b7c-bf13-3c521d392d2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bdcda00-948e-480c-b43c-3cdd530e921e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f69a3fe3-5c6b-442a-9f61-d15f8ebb81b6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7153ea3e-752f-4e03-8e2f-9384798edd48",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f77452e8-c542-4982-ad1a-da19381a8409"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1afa68ff-eb7e-4082-b81d-bc397665c989",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08191910-4db1-4cc9-bf9a-b27542cf3c8d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f5afcb1-00d2-4be7-9e05-99bb5cd51b72",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "14c03ae3-1272-4e59-915e-36ab23f39ed6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "074e6e67-a7a9-4f9e-9baa-d4e6963951e4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f175456-f6ca-48de-9118-b9f44169eabb"
            }
          }
        ]
      },
      {
        "id": "a6afa6aa-b0d5-4d7a-b1e1-56d8aa6b1577",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "ebf55267-009c-448f-87d1-4438c4d68bfc",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 475,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 111,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 131,
        "pending": 0,
        "failed": 103
      },
      "testScripts": {
        "total": 240,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 235,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 71.96396396396399,
      "responseMin": 31,
      "responseMax": 516,
      "responseSd": 70.4974509702018,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1663462423659,
      "completed": 1663462434857
    },
    "executions": [
      {
        "id": "6a895373-b565-488b-a0f5-597a0be1fde3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 63,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8efec649-5aff-4b65-9cdc-42959f0f45f7",
          "httpRequestId": "d2935bf9-4489-43d6-8a85-9d422c5ec02a"
        },
        "item": {
          "id": "6a895373-b565-488b-a0f5-597a0be1fde3",
          "name": "did_json"
        },
        "response": {
          "id": "80bc72c0-93a2-47e3-8ded-8d14ef484a89",
          "status": "OK",
          "code": 200,
          "responseTime": 210,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.service[0].type should be array",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.service[0].type should be array\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "cabff054-346a-4524-825e-03bcc730bcef",
        "cursor": {
          "ref": "59a79d6b-6bea-4c12-a94f-f1347033b8fa",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "094f2890-e92f-4a82-a9a4-cd656143f67e"
        },
        "item": {
          "id": "cabff054-346a-4524-825e-03bcc730bcef",
          "name": "did:invalid"
        },
        "response": {
          "id": "048483f1-6d35-4646-a841-d6201ad64708",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cabff054-346a-4524-825e-03bcc730bcef",
        "cursor": {
          "ref": "59a79d6b-6bea-4c12-a94f-f1347033b8fa",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "094f2890-e92f-4a82-a9a4-cd656143f67e"
        },
        "item": {
          "id": "cabff054-346a-4524-825e-03bcc730bcef",
          "name": "did:invalid"
        },
        "response": {
          "id": "048483f1-6d35-4646-a841-d6201ad64708",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f35e652-6425-43f8-882c-adeebfc6f106",
        "cursor": {
          "ref": "20253b33-6345-44fb-9b80-bcf3c3c1e7a3",
          "length": 63,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ae215744-53a3-4cab-a68e-90aedbb2ed54"
        },
        "item": {
          "id": "4f35e652-6425-43f8-882c-adeebfc6f106",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f5d35354-dc31-4908-9e4a-80a89272ca2d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 123,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "76b3d912-0aa7-4eed-a9dd-b01ffdfae5ed",
        "cursor": {
          "ref": "2e7789d6-7ac5-4056-82e6-806cfa933117",
          "length": 63,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "07f76f2d-b040-42af-a46e-bf595e2e1fda"
        },
        "item": {
          "id": "76b3d912-0aa7-4eed-a9dd-b01ffdfae5ed",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "20bf49aa-73a1-41af-8410-79404f0b6c46",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "7b3df591-8e2a-4981-b508-0b38b5bcd2fa",
        "cursor": {
          "ref": "bca3ddb2-3df5-4191-966f-9f1bfbfc81c7",
          "length": 63,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a72f0504-aa10-405c-a94e-043b6274140e"
        },
        "item": {
          "id": "7b3df591-8e2a-4981-b508-0b38b5bcd2fa",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "42d12cdf-3495-4f9b-9bde-ef5d5cad2271",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "2be8bea1-2b36-4b53-8f72-9459a67c001c",
        "cursor": {
          "ref": "cce239b0-1431-4457-91cf-d22c13271844",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "606b3dba-9e57-4016-94f8-b49c49fbddb1"
        },
        "item": {
          "id": "2be8bea1-2b36-4b53-8f72-9459a67c001c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "29f79b0c-f613-41d7-99a1-6572414fe172",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "2be8bea1-2b36-4b53-8f72-9459a67c001c",
        "cursor": {
          "ref": "cce239b0-1431-4457-91cf-d22c13271844",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "606b3dba-9e57-4016-94f8-b49c49fbddb1"
        },
        "item": {
          "id": "2be8bea1-2b36-4b53-8f72-9459a67c001c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "29f79b0c-f613-41d7-99a1-6572414fe172",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "4f958e04-2769-4057-92c4-195797538352",
        "cursor": {
          "ref": "eb8ab5bf-3ee9-4298-bda3-3a02399e962f",
          "length": 63,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "36c19b5c-3f93-4d9b-9bad-4a6ced75cd27"
        },
        "item": {
          "id": "4f958e04-2769-4057-92c4-195797538352",
          "name": "identifiers"
        },
        "response": {
          "id": "e27bd7a9-c024-4eca-a32c-115d43685547",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76cc65d1-6124-4b73-817a-d84de8c45d6a",
        "cursor": {
          "ref": "f05f2b5c-b0ec-4980-aad3-99a3fc9e7d7b",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5766bd8d-c0f4-4650-93e7-ce7d1e5d0ffe"
        },
        "item": {
          "id": "76cc65d1-6124-4b73-817a-d84de8c45d6a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0a0ec3f9-e02d-4d20-8ae5-15c0219e89f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 516,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "76cc65d1-6124-4b73-817a-d84de8c45d6a",
        "cursor": {
          "ref": "f05f2b5c-b0ec-4980-aad3-99a3fc9e7d7b",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5766bd8d-c0f4-4650-93e7-ce7d1e5d0ffe"
        },
        "item": {
          "id": "76cc65d1-6124-4b73-817a-d84de8c45d6a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0a0ec3f9-e02d-4d20-8ae5-15c0219e89f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 516,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "76cc65d1-6124-4b73-817a-d84de8c45d6a",
        "cursor": {
          "ref": "f05f2b5c-b0ec-4980-aad3-99a3fc9e7d7b",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5766bd8d-c0f4-4650-93e7-ce7d1e5d0ffe"
        },
        "item": {
          "id": "76cc65d1-6124-4b73-817a-d84de8c45d6a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0a0ec3f9-e02d-4d20-8ae5-15c0219e89f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 516,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "cda93890-1634-4b19-8b72-dd2d7dbd0e25",
        "cursor": {
          "ref": "c8d932f1-9374-4afd-8701-85e6ecf26736",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "986b386c-0c44-4551-a4b6-8fe56c95d19d"
        },
        "item": {
          "id": "cda93890-1634-4b19-8b72-dd2d7dbd0e25",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c43f884e-6ac7-457d-b88b-3b1f8732d48a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "cda93890-1634-4b19-8b72-dd2d7dbd0e25",
        "cursor": {
          "ref": "c8d932f1-9374-4afd-8701-85e6ecf26736",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "986b386c-0c44-4551-a4b6-8fe56c95d19d"
        },
        "item": {
          "id": "cda93890-1634-4b19-8b72-dd2d7dbd0e25",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c43f884e-6ac7-457d-b88b-3b1f8732d48a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "66e16484-af88-4628-a168-a5c4e6e8eeb9",
        "cursor": {
          "ref": "8467cd89-6d77-4ec1-9d67-182b193d6537",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1092964c-be93-4ff1-868d-409ba1fdaeec"
        },
        "item": {
          "id": "66e16484-af88-4628-a168-a5c4e6e8eeb9",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "cc700666-3cc5-4bda-91bb-7426be4bb430",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "66e16484-af88-4628-a168-a5c4e6e8eeb9",
        "cursor": {
          "ref": "8467cd89-6d77-4ec1-9d67-182b193d6537",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1092964c-be93-4ff1-868d-409ba1fdaeec"
        },
        "item": {
          "id": "66e16484-af88-4628-a168-a5c4e6e8eeb9",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "cc700666-3cc5-4bda-91bb-7426be4bb430",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "a904b15e-8773-4756-8670-cc504a952b83",
        "cursor": {
          "ref": "adfcd03e-0448-4bc1-b51b-bff299c6c041",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2a5d479e-440f-45ca-9c3f-223e4ded6107"
        },
        "item": {
          "id": "a904b15e-8773-4756-8670-cc504a952b83",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "18ef9ffc-4c4a-47a1-b9cd-c0e527d03329",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "a904b15e-8773-4756-8670-cc504a952b83",
        "cursor": {
          "ref": "adfcd03e-0448-4bc1-b51b-bff299c6c041",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2a5d479e-440f-45ca-9c3f-223e4ded6107"
        },
        "item": {
          "id": "a904b15e-8773-4756-8670-cc504a952b83",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "18ef9ffc-4c4a-47a1-b9cd-c0e527d03329",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "7c9d0a7e-1fda-427b-aaec-c7d42f45fdd4",
        "cursor": {
          "ref": "a504fa85-6a2c-42f7-94b5-8de0868b3551",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "631be152-89a7-4b91-9fe7-85d834d61d79"
        },
        "item": {
          "id": "7c9d0a7e-1fda-427b-aaec-c7d42f45fdd4",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "7d7a385f-a178-40d3-aea3-ba74f2159d36",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "7c9d0a7e-1fda-427b-aaec-c7d42f45fdd4",
        "cursor": {
          "ref": "a504fa85-6a2c-42f7-94b5-8de0868b3551",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "631be152-89a7-4b91-9fe7-85d834d61d79"
        },
        "item": {
          "id": "7c9d0a7e-1fda-427b-aaec-c7d42f45fdd4",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "7d7a385f-a178-40d3-aea3-ba74f2159d36",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "1d81b611-57c5-4050-8ce0-bd3767dbbdbc",
        "cursor": {
          "ref": "ad0a3fa6-3880-43f6-98d4-f26bd04fae00",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a7aa3159-ac14-49e4-aaa6-d55f267b1d6f"
        },
        "item": {
          "id": "1d81b611-57c5-4050-8ce0-bd3767dbbdbc",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "8d2142e2-84f8-45d3-8f3f-1bb638be0d71",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "1d81b611-57c5-4050-8ce0-bd3767dbbdbc",
        "cursor": {
          "ref": "ad0a3fa6-3880-43f6-98d4-f26bd04fae00",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a7aa3159-ac14-49e4-aaa6-d55f267b1d6f"
        },
        "item": {
          "id": "1d81b611-57c5-4050-8ce0-bd3767dbbdbc",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "8d2142e2-84f8-45d3-8f3f-1bb638be0d71",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "f458490f-a4cd-456a-972e-21318b03eeaf",
        "cursor": {
          "ref": "59a11e3c-e130-4d22-adf7-5f150cdfce36",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3abcc1cf-7e87-459a-9c1d-166a83f0f4b7"
        },
        "item": {
          "id": "f458490f-a4cd-456a-972e-21318b03eeaf",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "bc19e171-07f7-46ff-8012-d0be8f8bb046",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "f458490f-a4cd-456a-972e-21318b03eeaf",
        "cursor": {
          "ref": "59a11e3c-e130-4d22-adf7-5f150cdfce36",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3abcc1cf-7e87-459a-9c1d-166a83f0f4b7"
        },
        "item": {
          "id": "f458490f-a4cd-456a-972e-21318b03eeaf",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "bc19e171-07f7-46ff-8012-d0be8f8bb046",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "a6cb7325-cf21-4fbe-8097-d812bf6df70a",
        "cursor": {
          "ref": "062aae63-353b-4213-9ea9-9b7ed9507773",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "44808bfd-dac0-4664-8f3b-f1734d625fcf"
        },
        "item": {
          "id": "a6cb7325-cf21-4fbe-8097-d812bf6df70a",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "f411739d-8d1b-4e72-991a-3b2a22e5bce0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "a6cb7325-cf21-4fbe-8097-d812bf6df70a",
        "cursor": {
          "ref": "062aae63-353b-4213-9ea9-9b7ed9507773",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "44808bfd-dac0-4664-8f3b-f1734d625fcf"
        },
        "item": {
          "id": "a6cb7325-cf21-4fbe-8097-d812bf6df70a",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "f411739d-8d1b-4e72-991a-3b2a22e5bce0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "facbf5f3-41f3-49bf-88e1-a5e29a2000cc",
        "cursor": {
          "ref": "270a3f2d-7125-4fd0-a30e-a40cb95d80ac",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "08799c74-d247-4af6-a025-c11efd6832b5"
        },
        "item": {
          "id": "facbf5f3-41f3-49bf-88e1-a5e29a2000cc",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "2025b134-62da-4cd1-bd93-2adc6b873085",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "facbf5f3-41f3-49bf-88e1-a5e29a2000cc",
        "cursor": {
          "ref": "270a3f2d-7125-4fd0-a30e-a40cb95d80ac",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "08799c74-d247-4af6-a025-c11efd6832b5"
        },
        "item": {
          "id": "facbf5f3-41f3-49bf-88e1-a5e29a2000cc",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "2025b134-62da-4cd1-bd93-2adc6b873085",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "1605e5aa-995c-43ca-a740-818247caff96",
        "cursor": {
          "ref": "baab0255-27f5-48d4-bdf3-cc9dd730774e",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1cffd3a6-5f32-4d5a-a94b-e48eb37fcf1d"
        },
        "item": {
          "id": "1605e5aa-995c-43ca-a740-818247caff96",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "6cdec641-e967-4cff-b071-6fbd4188bd22",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "1605e5aa-995c-43ca-a740-818247caff96",
        "cursor": {
          "ref": "baab0255-27f5-48d4-bdf3-cc9dd730774e",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1cffd3a6-5f32-4d5a-a94b-e48eb37fcf1d"
        },
        "item": {
          "id": "1605e5aa-995c-43ca-a740-818247caff96",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "6cdec641-e967-4cff-b071-6fbd4188bd22",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "c63a0360-9a0f-4de8-859d-e087eafcaf28",
        "cursor": {
          "ref": "a4b0cf43-0aab-4d97-95ef-96afa220a6c5",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "1108976e-47a5-4327-87a3-9f342aad3c2c"
        },
        "item": {
          "id": "c63a0360-9a0f-4de8-859d-e087eafcaf28",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "2ba08092-2f05-4383-98bc-98cf1dcfab83",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "c63a0360-9a0f-4de8-859d-e087eafcaf28",
        "cursor": {
          "ref": "a4b0cf43-0aab-4d97-95ef-96afa220a6c5",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "1108976e-47a5-4327-87a3-9f342aad3c2c"
        },
        "item": {
          "id": "c63a0360-9a0f-4de8-859d-e087eafcaf28",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "2ba08092-2f05-4383-98bc-98cf1dcfab83",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "5b046e9d-46a1-4162-9673-0aca3ae36e54",
        "cursor": {
          "ref": "baf3c6e8-ff3d-4127-82b6-32cbe6c303df",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7faaa2e4-0748-440c-b0e4-f36bd317da87"
        },
        "item": {
          "id": "5b046e9d-46a1-4162-9673-0aca3ae36e54",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "fb818006-67df-4581-8f2d-a90cc1ab851a",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "5b046e9d-46a1-4162-9673-0aca3ae36e54",
        "cursor": {
          "ref": "baf3c6e8-ff3d-4127-82b6-32cbe6c303df",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7faaa2e4-0748-440c-b0e4-f36bd317da87"
        },
        "item": {
          "id": "5b046e9d-46a1-4162-9673-0aca3ae36e54",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "fb818006-67df-4581-8f2d-a90cc1ab851a",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "37106542-fd75-492a-94ee-d7c4ef216004",
        "cursor": {
          "ref": "f4755191-2ad4-49c0-9a86-309c11e4330e",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6446fc9c-6999-4fad-83e8-3ef924ab5df7"
        },
        "item": {
          "id": "37106542-fd75-492a-94ee-d7c4ef216004",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e3860345-003d-4d65-9e7f-c4b7d6bcac72",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "37106542-fd75-492a-94ee-d7c4ef216004",
        "cursor": {
          "ref": "f4755191-2ad4-49c0-9a86-309c11e4330e",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6446fc9c-6999-4fad-83e8-3ef924ab5df7"
        },
        "item": {
          "id": "37106542-fd75-492a-94ee-d7c4ef216004",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e3860345-003d-4d65-9e7f-c4b7d6bcac72",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "83bbfe63-6791-4f43-8183-bb2d23acb84a",
        "cursor": {
          "ref": "957051e0-3365-4fe1-9a06-cc3060b78e70",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c4ccfd38-0e2d-48ce-ae95-bd44982a97b0"
        },
        "item": {
          "id": "83bbfe63-6791-4f43-8183-bb2d23acb84a",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "e8eed37a-e050-462b-8fc4-c498169ce735",
          "status": "Created",
          "code": 201,
          "responseTime": 102,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "83bbfe63-6791-4f43-8183-bb2d23acb84a",
        "cursor": {
          "ref": "957051e0-3365-4fe1-9a06-cc3060b78e70",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c4ccfd38-0e2d-48ce-ae95-bd44982a97b0"
        },
        "item": {
          "id": "83bbfe63-6791-4f43-8183-bb2d23acb84a",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "e8eed37a-e050-462b-8fc4-c498169ce735",
          "status": "Created",
          "code": 201,
          "responseTime": 102,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "49b750ed-0feb-4ede-b047-550b1eff3418",
        "cursor": {
          "ref": "faf8002d-6760-4a58-841e-cbc2940db2eb",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e0c51bd4-fa4a-402b-8177-49f520fc91bc"
        },
        "item": {
          "id": "49b750ed-0feb-4ede-b047-550b1eff3418",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "ad5427c0-940a-49c9-b1fa-f72d9cadecfa",
          "status": "Created",
          "code": 201,
          "responseTime": 55,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "49b750ed-0feb-4ede-b047-550b1eff3418",
        "cursor": {
          "ref": "faf8002d-6760-4a58-841e-cbc2940db2eb",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e0c51bd4-fa4a-402b-8177-49f520fc91bc"
        },
        "item": {
          "id": "49b750ed-0feb-4ede-b047-550b1eff3418",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "ad5427c0-940a-49c9-b1fa-f72d9cadecfa",
          "status": "Created",
          "code": 201,
          "responseTime": 55,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "33b0ba8f-ef8f-4fe6-9571-1783e6891862",
        "cursor": {
          "ref": "001f8664-09fd-4fa7-a769-6ee9995aaf41",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d99d389c-d9d4-4ba9-9e12-1db0a2f49cbc"
        },
        "item": {
          "id": "33b0ba8f-ef8f-4fe6-9571-1783e6891862",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e09c0945-ecd5-479e-844e-f9e584c8821b",
          "status": "Created",
          "code": 201,
          "responseTime": 83,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "33b0ba8f-ef8f-4fe6-9571-1783e6891862",
        "cursor": {
          "ref": "001f8664-09fd-4fa7-a769-6ee9995aaf41",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d99d389c-d9d4-4ba9-9e12-1db0a2f49cbc"
        },
        "item": {
          "id": "33b0ba8f-ef8f-4fe6-9571-1783e6891862",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e09c0945-ecd5-479e-844e-f9e584c8821b",
          "status": "Created",
          "code": 201,
          "responseTime": 83,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "106d93f3-e044-4048-8884-76f1b252221f",
        "cursor": {
          "ref": "d57fa650-a94a-4ea1-bf62-e0fd876fd770",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3f8f7ae3-df7a-47a2-8da6-e4b105f7478a"
        },
        "item": {
          "id": "106d93f3-e044-4048-8884-76f1b252221f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "0481d2d0-c34f-424a-a275-5b769559a22a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "106d93f3-e044-4048-8884-76f1b252221f",
        "cursor": {
          "ref": "d57fa650-a94a-4ea1-bf62-e0fd876fd770",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3f8f7ae3-df7a-47a2-8da6-e4b105f7478a"
        },
        "item": {
          "id": "106d93f3-e044-4048-8884-76f1b252221f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "0481d2d0-c34f-424a-a275-5b769559a22a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "5db8bcb0-f1e1-4149-a98a-d19b61af8408",
        "cursor": {
          "ref": "b7502404-ae0d-4d55-99e8-5eea879c2a36",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "70639c6c-eecd-4ed7-b386-13ee4187750d"
        },
        "item": {
          "id": "5db8bcb0-f1e1-4149-a98a-d19b61af8408",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "0801d522-4432-4144-a5c2-4a6f80a73608",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "5db8bcb0-f1e1-4149-a98a-d19b61af8408",
        "cursor": {
          "ref": "b7502404-ae0d-4d55-99e8-5eea879c2a36",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "70639c6c-eecd-4ed7-b386-13ee4187750d"
        },
        "item": {
          "id": "5db8bcb0-f1e1-4149-a98a-d19b61af8408",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "0801d522-4432-4144-a5c2-4a6f80a73608",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "96bd109a-f4aa-42e0-8967-4c0ccc8b10b5",
        "cursor": {
          "ref": "c753bdee-f9cf-4f40-bb71-54e369d04f18",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "440775f7-fe0b-4884-8982-f72c072d5754"
        },
        "item": {
          "id": "96bd109a-f4aa-42e0-8967-4c0ccc8b10b5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a81a8ba5-f2f6-4dab-aa2d-dee2f6c0a1a9",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "96bd109a-f4aa-42e0-8967-4c0ccc8b10b5",
        "cursor": {
          "ref": "c753bdee-f9cf-4f40-bb71-54e369d04f18",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "440775f7-fe0b-4884-8982-f72c072d5754"
        },
        "item": {
          "id": "96bd109a-f4aa-42e0-8967-4c0ccc8b10b5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a81a8ba5-f2f6-4dab-aa2d-dee2f6c0a1a9",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "e7af709b-7d55-4d59-b392-e8d697d97248",
        "cursor": {
          "ref": "14239459-bba4-4629-bf5e-c048a1f7f7a3",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ca9959e5-2b34-4484-9fda-15a1f0dcdf4b"
        },
        "item": {
          "id": "e7af709b-7d55-4d59-b392-e8d697d97248",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5a024916-efce-41ce-ad37-1e3c47144ce9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "e7af709b-7d55-4d59-b392-e8d697d97248",
        "cursor": {
          "ref": "14239459-bba4-4629-bf5e-c048a1f7f7a3",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ca9959e5-2b34-4484-9fda-15a1f0dcdf4b"
        },
        "item": {
          "id": "e7af709b-7d55-4d59-b392-e8d697d97248",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5a024916-efce-41ce-ad37-1e3c47144ce9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "6429edf0-2ad2-4584-ac87-708e181c2bea",
        "cursor": {
          "ref": "32ec207b-12d4-4bdc-b3c6-54c0966b6d10",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f93a76bb-c134-4f36-9077-fd1031577a4b"
        },
        "item": {
          "id": "6429edf0-2ad2-4584-ac87-708e181c2bea",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "976ce1b2-0ef6-4320-8475-d40bd2ac0476",
          "status": "Created",
          "code": 201,
          "responseTime": 76,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "6429edf0-2ad2-4584-ac87-708e181c2bea",
        "cursor": {
          "ref": "32ec207b-12d4-4bdc-b3c6-54c0966b6d10",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f93a76bb-c134-4f36-9077-fd1031577a4b"
        },
        "item": {
          "id": "6429edf0-2ad2-4584-ac87-708e181c2bea",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "976ce1b2-0ef6-4320-8475-d40bd2ac0476",
          "status": "Created",
          "code": 201,
          "responseTime": 76,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "f1a78c77-65a7-42fc-8c05-7dc43c56937b",
        "cursor": {
          "ref": "d1bed741-41cf-472b-90bf-c3b39f70412f",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "025ae2cf-6881-46f5-8750-a2a5c00c773b"
        },
        "item": {
          "id": "f1a78c77-65a7-42fc-8c05-7dc43c56937b",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "31875155-cc01-4795-8947-ae8b63632791",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "f1a78c77-65a7-42fc-8c05-7dc43c56937b",
        "cursor": {
          "ref": "d1bed741-41cf-472b-90bf-c3b39f70412f",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "025ae2cf-6881-46f5-8750-a2a5c00c773b"
        },
        "item": {
          "id": "f1a78c77-65a7-42fc-8c05-7dc43c56937b",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "31875155-cc01-4795-8947-ae8b63632791",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "ea13988c-5e6e-4110-baa0-cecdbab0e722",
        "cursor": {
          "ref": "2f5f7cbb-67d3-46b9-bbf3-3daa087e84a5",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ef17a8c6-7a33-4dbc-b46d-b22046c1b79c"
        },
        "item": {
          "id": "ea13988c-5e6e-4110-baa0-cecdbab0e722",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e5a6120e-7475-40d4-b735-b01a5c1b6426",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "ea13988c-5e6e-4110-baa0-cecdbab0e722",
        "cursor": {
          "ref": "2f5f7cbb-67d3-46b9-bbf3-3daa087e84a5",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ef17a8c6-7a33-4dbc-b46d-b22046c1b79c"
        },
        "item": {
          "id": "ea13988c-5e6e-4110-baa0-cecdbab0e722",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e5a6120e-7475-40d4-b735-b01a5c1b6426",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "5682e9e1-5dd5-4e30-b5fc-cb38821581a0",
        "cursor": {
          "ref": "5f3853ed-2d13-4633-8ae3-174e344277fc",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a6c47c63-dd0a-437c-bd89-e896bc9b63f1"
        },
        "item": {
          "id": "5682e9e1-5dd5-4e30-b5fc-cb38821581a0",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "c82fbab3-0fa8-43bd-b7bb-ae82f6543498",
          "status": "Created",
          "code": 201,
          "responseTime": 106,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "5682e9e1-5dd5-4e30-b5fc-cb38821581a0",
        "cursor": {
          "ref": "5f3853ed-2d13-4633-8ae3-174e344277fc",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a6c47c63-dd0a-437c-bd89-e896bc9b63f1"
        },
        "item": {
          "id": "5682e9e1-5dd5-4e30-b5fc-cb38821581a0",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "c82fbab3-0fa8-43bd-b7bb-ae82f6543498",
          "status": "Created",
          "code": 201,
          "responseTime": 106,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "9e94ddf8-5b35-4890-9c0d-ea220fbb9c50",
        "cursor": {
          "ref": "b62dc816-d7c6-494b-803e-47400437ef95",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "597816c3-a151-4800-b272-99b64a1f6348"
        },
        "item": {
          "id": "9e94ddf8-5b35-4890-9c0d-ea220fbb9c50",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "62e4a5c3-256b-4239-89f3-07772e2dc27a",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "9e94ddf8-5b35-4890-9c0d-ea220fbb9c50",
        "cursor": {
          "ref": "b62dc816-d7c6-494b-803e-47400437ef95",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "597816c3-a151-4800-b272-99b64a1f6348"
        },
        "item": {
          "id": "9e94ddf8-5b35-4890-9c0d-ea220fbb9c50",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "62e4a5c3-256b-4239-89f3-07772e2dc27a",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "5d3ad1cd-2d72-42aa-a0d8-2ea66855341e",
        "cursor": {
          "ref": "b66fbd53-b3ab-4500-b4cc-4f7cc072a7b4",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "00011e0e-5c64-4aac-b2d6-3ec01747c1c5"
        },
        "item": {
          "id": "5d3ad1cd-2d72-42aa-a0d8-2ea66855341e",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "a5901ae0-91ec-4316-9643-6f710bb239e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "5d3ad1cd-2d72-42aa-a0d8-2ea66855341e",
        "cursor": {
          "ref": "b66fbd53-b3ab-4500-b4cc-4f7cc072a7b4",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "00011e0e-5c64-4aac-b2d6-3ec01747c1c5"
        },
        "item": {
          "id": "5d3ad1cd-2d72-42aa-a0d8-2ea66855341e",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "a5901ae0-91ec-4316-9643-6f710bb239e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "284d9539-94cf-4155-b9c4-3005055f87d3",
        "cursor": {
          "ref": "c4ff5069-5504-44f7-b848-32ba66aac0cc",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b3fae341-4756-43e8-b050-595dbe52e73f"
        },
        "item": {
          "id": "284d9539-94cf-4155-b9c4-3005055f87d3",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4cedd1f5-1920-42f3-95e8-985721625ea3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "284d9539-94cf-4155-b9c4-3005055f87d3",
        "cursor": {
          "ref": "c4ff5069-5504-44f7-b848-32ba66aac0cc",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b3fae341-4756-43e8-b050-595dbe52e73f"
        },
        "item": {
          "id": "284d9539-94cf-4155-b9c4-3005055f87d3",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4cedd1f5-1920-42f3-95e8-985721625ea3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "8eddc1c3-0e15-47ba-892e-85e55cdcd86f",
        "cursor": {
          "ref": "3241dc12-199c-4bd1-9af8-94d1c977c3a8",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "68e02bc6-963b-4686-97e6-0eece0caeea6"
        },
        "item": {
          "id": "8eddc1c3-0e15-47ba-892e-85e55cdcd86f",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "0881f82d-be0c-46c6-901c-f243ef1dff95",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "8eddc1c3-0e15-47ba-892e-85e55cdcd86f",
        "cursor": {
          "ref": "3241dc12-199c-4bd1-9af8-94d1c977c3a8",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "68e02bc6-963b-4686-97e6-0eece0caeea6"
        },
        "item": {
          "id": "8eddc1c3-0e15-47ba-892e-85e55cdcd86f",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "0881f82d-be0c-46c6-901c-f243ef1dff95",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "58afb77a-67fb-4c2d-84ff-7988f272a209",
        "cursor": {
          "ref": "610ccef5-057b-4461-93b2-c14dd6da3633",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c42ebe31-55bf-45cf-8cef-adc7813a6fc1"
        },
        "item": {
          "id": "58afb77a-67fb-4c2d-84ff-7988f272a209",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "728820f1-9778-4cfa-9749-fddb218059bf",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "58afb77a-67fb-4c2d-84ff-7988f272a209",
        "cursor": {
          "ref": "610ccef5-057b-4461-93b2-c14dd6da3633",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c42ebe31-55bf-45cf-8cef-adc7813a6fc1"
        },
        "item": {
          "id": "58afb77a-67fb-4c2d-84ff-7988f272a209",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "728820f1-9778-4cfa-9749-fddb218059bf",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "2ccae670-8f96-40ed-8af7-199e726a5121",
        "cursor": {
          "ref": "0c09c1b5-50d7-4794-a0d0-3e90e14876ea",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4186a79c-0181-46a8-919f-226a8a10441b"
        },
        "item": {
          "id": "2ccae670-8f96-40ed-8af7-199e726a5121",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "9dbb4594-77c2-40a5-aa32-c822472dfdca",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "2ccae670-8f96-40ed-8af7-199e726a5121",
        "cursor": {
          "ref": "0c09c1b5-50d7-4794-a0d0-3e90e14876ea",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4186a79c-0181-46a8-919f-226a8a10441b"
        },
        "item": {
          "id": "2ccae670-8f96-40ed-8af7-199e726a5121",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "9dbb4594-77c2-40a5-aa32-c822472dfdca",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "68e038bc-b08e-4579-b8fd-8adb92f61d44",
        "cursor": {
          "ref": "8f52af4d-a291-46ce-b974-ff30ab55b9d5",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d191fc29-bb1f-41c8-ae76-c1fc7ab6fdfb"
        },
        "item": {
          "id": "68e038bc-b08e-4579-b8fd-8adb92f61d44",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "dd7dfa31-d41f-4db4-b10b-d72520ab0851",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "68e038bc-b08e-4579-b8fd-8adb92f61d44",
        "cursor": {
          "ref": "8f52af4d-a291-46ce-b974-ff30ab55b9d5",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d191fc29-bb1f-41c8-ae76-c1fc7ab6fdfb"
        },
        "item": {
          "id": "68e038bc-b08e-4579-b8fd-8adb92f61d44",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "dd7dfa31-d41f-4db4-b10b-d72520ab0851",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "6124695c-aac3-42b0-b3f5-3d96d0afe11d",
        "cursor": {
          "ref": "9209d4f2-4981-4214-983d-316d630d1360",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d45d2245-3f03-42fe-b455-c2ecbdb99a90"
        },
        "item": {
          "id": "6124695c-aac3-42b0-b3f5-3d96d0afe11d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "462a2352-0fe7-4d49-89a1-3bb47b768e74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "6124695c-aac3-42b0-b3f5-3d96d0afe11d",
        "cursor": {
          "ref": "9209d4f2-4981-4214-983d-316d630d1360",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d45d2245-3f03-42fe-b455-c2ecbdb99a90"
        },
        "item": {
          "id": "6124695c-aac3-42b0-b3f5-3d96d0afe11d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "462a2352-0fe7-4d49-89a1-3bb47b768e74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "56e8ebc3-7547-4faf-bd5c-1ce24b5d616d",
        "cursor": {
          "ref": "c35dad12-b620-46d3-9695-d40f422ec379",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "904bf04f-e237-4a78-9901-cf298aef6e24"
        },
        "item": {
          "id": "56e8ebc3-7547-4faf-bd5c-1ce24b5d616d",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "7b101523-72c2-4a76-9a7a-58f36a433106",
          "status": "Created",
          "code": 201,
          "responseTime": 73,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "56e8ebc3-7547-4faf-bd5c-1ce24b5d616d",
        "cursor": {
          "ref": "c35dad12-b620-46d3-9695-d40f422ec379",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "904bf04f-e237-4a78-9901-cf298aef6e24"
        },
        "item": {
          "id": "56e8ebc3-7547-4faf-bd5c-1ce24b5d616d",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "7b101523-72c2-4a76-9a7a-58f36a433106",
          "status": "Created",
          "code": 201,
          "responseTime": 73,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "688565f6-5536-4d3e-b333-d992d58d8365",
        "cursor": {
          "ref": "d356b1d0-241a-41a4-aa28-a45f0e0f4d45",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e7375b77-6f06-4f58-9e0a-2336ae9eb2de"
        },
        "item": {
          "id": "688565f6-5536-4d3e-b333-d992d58d8365",
          "name": "credentials_issue"
        },
        "response": {
          "id": "62bb6057-26a8-4230-9e66-08b9c3e30285",
          "status": "Created",
          "code": 201,
          "responseTime": 55,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "688565f6-5536-4d3e-b333-d992d58d8365",
        "cursor": {
          "ref": "d356b1d0-241a-41a4-aa28-a45f0e0f4d45",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e7375b77-6f06-4f58-9e0a-2336ae9eb2de"
        },
        "item": {
          "id": "688565f6-5536-4d3e-b333-d992d58d8365",
          "name": "credentials_issue"
        },
        "response": {
          "id": "62bb6057-26a8-4230-9e66-08b9c3e30285",
          "status": "Created",
          "code": 201,
          "responseTime": 55,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "8717dab6-059a-4cdb-a29f-e0a25d027128",
        "cursor": {
          "ref": "00e2c4ae-2a27-479d-b4f3-27f69f6b71f3",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a92e990f-4a26-4e6e-9066-c3e3838b09c2"
        },
        "item": {
          "id": "8717dab6-059a-4cdb-a29f-e0a25d027128",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "46fe0372-9d1b-4b40-9596-089b3526937d",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8717dab6-059a-4cdb-a29f-e0a25d027128",
        "cursor": {
          "ref": "00e2c4ae-2a27-479d-b4f3-27f69f6b71f3",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a92e990f-4a26-4e6e-9066-c3e3838b09c2"
        },
        "item": {
          "id": "8717dab6-059a-4cdb-a29f-e0a25d027128",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "46fe0372-9d1b-4b40-9596-089b3526937d",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58439798-dc96-424f-bd3d-ca3fd81694b6",
        "cursor": {
          "ref": "34ddbda2-279c-4b18-8f34-3069fd99f99b",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2ff00e78-853e-4281-bc26-c81c3d0de1ca"
        },
        "item": {
          "id": "58439798-dc96-424f-bd3d-ca3fd81694b6",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b3e5fed3-7ab8-4c50-a8c2-3cfc606c7743",
          "status": "Created",
          "code": 201,
          "responseTime": 54,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "58439798-dc96-424f-bd3d-ca3fd81694b6",
        "cursor": {
          "ref": "34ddbda2-279c-4b18-8f34-3069fd99f99b",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2ff00e78-853e-4281-bc26-c81c3d0de1ca"
        },
        "item": {
          "id": "58439798-dc96-424f-bd3d-ca3fd81694b6",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b3e5fed3-7ab8-4c50-a8c2-3cfc606c7743",
          "status": "Created",
          "code": 201,
          "responseTime": 54,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16877e9-c66a-49ec-a71d-c6bcf939da77",
        "cursor": {
          "ref": "950a947c-5c35-4103-a73f-685c0890d679",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "dd553b00-e29b-42dd-8154-ecb009fd5a4e"
        },
        "item": {
          "id": "f16877e9-c66a-49ec-a71d-c6bcf939da77",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "98bd8beb-3a3d-457a-9c84-49dc3d16b8ae",
          "status": "Created",
          "code": 201,
          "responseTime": 55,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16877e9-c66a-49ec-a71d-c6bcf939da77",
        "cursor": {
          "ref": "950a947c-5c35-4103-a73f-685c0890d679",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "dd553b00-e29b-42dd-8154-ecb009fd5a4e"
        },
        "item": {
          "id": "f16877e9-c66a-49ec-a71d-c6bcf939da77",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "98bd8beb-3a3d-457a-9c84-49dc3d16b8ae",
          "status": "Created",
          "code": 201,
          "responseTime": 55,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "86433b03-33b0-4931-b638-6c92a557e0c3",
        "cursor": {
          "ref": "daca4333-e303-4246-9be0-eb5068ad6e98",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7813f82e-5a64-4a13-98ea-6252b4e72a4c"
        },
        "item": {
          "id": "86433b03-33b0-4931-b638-6c92a557e0c3",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6f4b6803-91f6-4f6d-8119-9fb3ead1e3a1",
          "status": "Created",
          "code": 201,
          "responseTime": 76,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86433b03-33b0-4931-b638-6c92a557e0c3",
        "cursor": {
          "ref": "daca4333-e303-4246-9be0-eb5068ad6e98",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7813f82e-5a64-4a13-98ea-6252b4e72a4c"
        },
        "item": {
          "id": "86433b03-33b0-4931-b638-6c92a557e0c3",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6f4b6803-91f6-4f6d-8119-9fb3ead1e3a1",
          "status": "Created",
          "code": 201,
          "responseTime": 76,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f7b4de7-a7f9-49a1-a126-3bb497e25371",
        "cursor": {
          "ref": "fb8c449c-900a-4703-ae14-a2edd0d20e59",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a7d5c356-01e7-41f2-b288-249e8070b5db"
        },
        "item": {
          "id": "1f7b4de7-a7f9-49a1-a126-3bb497e25371",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "64385948-18f0-4eef-b24e-60bf4223ba91",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f7b4de7-a7f9-49a1-a126-3bb497e25371",
        "cursor": {
          "ref": "fb8c449c-900a-4703-ae14-a2edd0d20e59",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a7d5c356-01e7-41f2-b288-249e8070b5db"
        },
        "item": {
          "id": "1f7b4de7-a7f9-49a1-a126-3bb497e25371",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "64385948-18f0-4eef-b24e-60bf4223ba91",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a46c3461-ad75-41b2-9339-c5eca292b7e8",
        "cursor": {
          "ref": "0ec5b438-7208-49a2-8e07-ef5539579700",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "dcc72369-ed7c-426f-8626-603e81780e8f"
        },
        "item": {
          "id": "a46c3461-ad75-41b2-9339-c5eca292b7e8",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "0bd8a00d-d3a7-4fed-b45b-9e71e3e6cd8d",
          "status": "Created",
          "code": 201,
          "responseTime": 54,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a46c3461-ad75-41b2-9339-c5eca292b7e8",
        "cursor": {
          "ref": "0ec5b438-7208-49a2-8e07-ef5539579700",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "dcc72369-ed7c-426f-8626-603e81780e8f"
        },
        "item": {
          "id": "a46c3461-ad75-41b2-9339-c5eca292b7e8",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "0bd8a00d-d3a7-4fed-b45b-9e71e3e6cd8d",
          "status": "Created",
          "code": 201,
          "responseTime": 54,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "626095af-85a2-4c8a-b45a-702928d257fb",
        "cursor": {
          "ref": "127c3801-7da2-4019-aabf-2de8dd3745c2",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6964446c-892a-4e8d-bf25-c8adaf1f1349"
        },
        "item": {
          "id": "626095af-85a2-4c8a-b45a-702928d257fb",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b8d3de84-0c85-4f0d-9336-519f8fcc475b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "626095af-85a2-4c8a-b45a-702928d257fb",
        "cursor": {
          "ref": "127c3801-7da2-4019-aabf-2de8dd3745c2",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6964446c-892a-4e8d-bf25-c8adaf1f1349"
        },
        "item": {
          "id": "626095af-85a2-4c8a-b45a-702928d257fb",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b8d3de84-0c85-4f0d-9336-519f8fcc475b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "fa75a9da-8f68-488a-bf81-453573c64487",
        "cursor": {
          "ref": "b66198c3-c1f8-4ca7-8b20-6c9a21dd5d59",
          "length": 63,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "79b896c8-5e7c-4fc0-b9f8-e38110f12119"
        },
        "item": {
          "id": "fa75a9da-8f68-488a-bf81-453573c64487",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "583fc61a-d1b6-4e2f-94b5-00de6df81fcf",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 33,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "bfc21e79-268c-4b42-9a26-ed55824bf8db",
        "cursor": {
          "ref": "f41c14cf-cd0f-4cb4-a104-a61c0a2f3bb0",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "886ffe0e-acbd-491b-bd61-7762771e0c80"
        },
        "item": {
          "id": "bfc21e79-268c-4b42-9a26-ed55824bf8db",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8b90a755-a063-46fe-84c3-4994e4f04f46",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "bfc21e79-268c-4b42-9a26-ed55824bf8db",
        "cursor": {
          "ref": "f41c14cf-cd0f-4cb4-a104-a61c0a2f3bb0",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "886ffe0e-acbd-491b-bd61-7762771e0c80"
        },
        "item": {
          "id": "bfc21e79-268c-4b42-9a26-ed55824bf8db",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8b90a755-a063-46fe-84c3-4994e4f04f46",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "688563b1-2188-44fe-9938-90970d4a45ff",
        "cursor": {
          "ref": "808f4c97-6d88-4c8f-a106-0c28c4bd5f68",
          "length": 63,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c8c9c8c0-0e78-4ac6-a283-ea7ea9df6476"
        },
        "item": {
          "id": "688563b1-2188-44fe-9938-90970d4a45ff",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "449a347e-6e02-4d51-bfa5-57edafeb55ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "99bb2fe2-e29d-4a62-a791-e4c43031434e",
        "cursor": {
          "ref": "db06a7b8-e951-4820-b972-7ed602e9dda2",
          "length": 63,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "274f9eef-33e9-4875-976c-4472272eb208"
        },
        "item": {
          "id": "99bb2fe2-e29d-4a62-a791-e4c43031434e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c67f1b15-8a4d-4cc1-bd26-bc09bcaaabdd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "806c5304-e5c9-4de4-bd38-2971cef56c17",
        "cursor": {
          "ref": "8de63c13-0e7d-4424-a703-41179f3e6693",
          "length": 63,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "0239d370-bf26-4757-aa58-31dddcdd05bf"
        },
        "item": {
          "id": "806c5304-e5c9-4de4-bd38-2971cef56c17",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e9a43e2c-576a-4164-8d8b-19d405fa9296",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "4bfb4467-50a2-4801-a51c-2a5550a3d96f",
        "cursor": {
          "ref": "ad4cd8ec-961b-4966-bb3c-e07dd51827a9",
          "length": 63,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "7dd2cce5-4020-436a-9ef6-29a0dc47111a"
        },
        "item": {
          "id": "4bfb4467-50a2-4801-a51c-2a5550a3d96f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "25a6db0b-3c76-4154-910f-409fbec7fca3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "0c258d70-5514-4ed9-8a3c-f770a21b9cab",
        "cursor": {
          "ref": "8482d533-57d6-4d28-844e-31ec733a606f",
          "length": 63,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "281c5c9d-14bd-49e6-afab-2b5af0bf384f"
        },
        "item": {
          "id": "0c258d70-5514-4ed9-8a3c-f770a21b9cab",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "caadd572-365f-4087-aeb4-a01620afe2a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "615f606b-b522-4ff0-8432-b5cc47b7fcf6",
        "cursor": {
          "ref": "2d6713a7-8aee-49c1-b370-9d579fff1b8e",
          "length": 63,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d838f885-b108-4d52-96e3-04cdf5b36cf8"
        },
        "item": {
          "id": "615f606b-b522-4ff0-8432-b5cc47b7fcf6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "5ac6e067-ba42-4656-8bb0-9be5670cecad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "97d604e7-6cb1-47c8-be6d-6676bbd761cd",
        "cursor": {
          "ref": "df9e1a4a-d18c-4b89-93e6-5669f5f0149c",
          "length": 63,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2e2c7c75-4e64-4bff-8b00-bde3e94e72fe"
        },
        "item": {
          "id": "97d604e7-6cb1-47c8-be6d-6676bbd761cd",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "9a71e669-5307-4391-902b-7eb7300513eb",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "9712edc9-ac9a-4f15-8f84-11c33d568ee1",
        "cursor": {
          "ref": "1d7107fa-c78c-4d74-9ff5-ee998a5a799a",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "07360e19-3247-44c3-97fe-d4bd184e1541"
        },
        "item": {
          "id": "9712edc9-ac9a-4f15-8f84-11c33d568ee1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e23f9725-a24f-4485-95c6-fff3b4fb10d2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 35,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "9712edc9-ac9a-4f15-8f84-11c33d568ee1",
        "cursor": {
          "ref": "1d7107fa-c78c-4d74-9ff5-ee998a5a799a",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "07360e19-3247-44c3-97fe-d4bd184e1541"
        },
        "item": {
          "id": "9712edc9-ac9a-4f15-8f84-11c33d568ee1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e23f9725-a24f-4485-95c6-fff3b4fb10d2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 35,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "98869735-62c1-4e38-89f4-696deaca549c",
        "cursor": {
          "ref": "ab905636-c4d6-49a5-aed6-f0f11244493b",
          "length": 63,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "34efe7b8-2757-4150-8d1e-3b4f2a0552a1"
        },
        "item": {
          "id": "98869735-62c1-4e38-89f4-696deaca549c",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "3b211972-3da8-411b-8f7c-07561f6fc558",
          "status": "Not Found",
          "code": 404,
          "responseTime": 34,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "7ed7dc89-2b1a-4d66-869f-f3254b6f9d7b",
        "cursor": {
          "ref": "f36a03b3-16bd-4a53-a692-0dfb76b53eb0",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "316ce831-59d8-4e08-94da-3303e8830346"
        },
        "item": {
          "id": "7ed7dc89-2b1a-4d66-869f-f3254b6f9d7b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "73fe70d3-3e1e-4502-a1cc-2dc15c50b035",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "7ed7dc89-2b1a-4d66-869f-f3254b6f9d7b",
        "cursor": {
          "ref": "f36a03b3-16bd-4a53-a692-0dfb76b53eb0",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "316ce831-59d8-4e08-94da-3303e8830346"
        },
        "item": {
          "id": "7ed7dc89-2b1a-4d66-869f-f3254b6f9d7b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "73fe70d3-3e1e-4502-a1cc-2dc15c50b035",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "c3740907-2175-4ad5-8de7-1cba1bc35e94",
        "cursor": {
          "ref": "ba45b215-a128-45ff-993d-4f8f86d123fe",
          "length": 63,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "6c6f41f9-fd6f-42a1-8b8f-36fdd2348f77"
        },
        "item": {
          "id": "c3740907-2175-4ad5-8de7-1cba1bc35e94",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "afccaa64-5b45-432e-af3e-df922c558408",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 144,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "24fa6d7c-a619-47db-a95e-f07887d6ea9a",
        "cursor": {
          "ref": "5d4da394-bd3e-41fc-a38a-d45bd859725c",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8517f2e1-1131-4f6e-b2a0-6d39dc5ab47f"
        },
        "item": {
          "id": "24fa6d7c-a619-47db-a95e-f07887d6ea9a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8e69b434-3cdd-4507-9763-bce343fee50a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "24fa6d7c-a619-47db-a95e-f07887d6ea9a",
        "cursor": {
          "ref": "5d4da394-bd3e-41fc-a38a-d45bd859725c",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8517f2e1-1131-4f6e-b2a0-6d39dc5ab47f"
        },
        "item": {
          "id": "24fa6d7c-a619-47db-a95e-f07887d6ea9a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8e69b434-3cdd-4507-9763-bce343fee50a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "552ea292-fb6d-4636-adc1-a52ba8e5d910",
        "cursor": {
          "ref": "3fd576cc-8521-4d0a-98eb-424bd43e7dbf",
          "length": 63,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "87e3961c-04da-40a5-8e8e-b780f8f630c1"
        },
        "item": {
          "id": "552ea292-fb6d-4636-adc1-a52ba8e5d910",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "eede1d5e-7a83-45d8-89c0-21b9953bc1ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      }
    ]
  }
}