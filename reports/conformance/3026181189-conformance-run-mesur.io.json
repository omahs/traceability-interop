{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3117cb58-8c21-4226-a2f5-5820e914c59a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d777ee2f-2baa-4ac8-af4c-202aeed57937",
            "name": "Positive Testing",
            "item": [
              {
                "id": "eef7d669-d038-4f27-b0df-1f5d8c158be5",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d296a56e-4db0-4acf-bd48-0e3f2d887880",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1f3faaf4-41f5-4885-9a25-8785685bfbb6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "135fa39f-1268-4bd0-a70e-fb96ff77da1b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "dbc3058e-4a0c-4901-a184-88e93b959576",
            "name": "Negative Testing",
            "item": [
              {
                "id": "94d7b462-2e12-4eb6-b547-eb4e30a9c833",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "385a8f00-9c8d-4b36-ba4d-abe44c5ed89f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8deb9798-4395-49e9-8dbe-2cfbb4cf3439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b5ad51d-7f8a-49b5-9c5a-44451630c574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a153c8-ce55-4bcc-b012-ef35c2acad89",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "264cc609-83b0-4a9c-a3d8-cb59b69226f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df5113c9-d004-4acd-9366-f54933262e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbcfaecb-678c-49d4-900c-74688e1613e5",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a2d4b9-0ac8-4f40-9cd0-046542cac43f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eca1f149-a890-4bec-9674-9c071b919fa9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5e6e0163-7970-4b90-815d-fa35f8fc05d0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "18aa062d-0a76-4037-942a-4fe76bc39547",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a32a7d4-24a4-46d0-9772-0c2cae70d2ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6a9086e-3341-4e20-a7e0-5f9265d2e008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf8864e9-567f-4b10-b100-0b702762739f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1808db96-fc2e-4c2d-bb47-3fd8f15ebcf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f16dc7-cb23-4c5b-b916-092aea0acf9f",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a99fa47-ddb7-4354-bcb0-f05cfafb0e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "940394fc-3a5f-4471-afab-3e474c40ff8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d50e71-8f88-4d2f-a835-783f8ec176d5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "52933199-49aa-4c26-a16b-1a26dfedd139"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "56c0c75e-ec5a-4aa5-b2c0-cd3c460481b8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "72399937-aaa9-4057-b8f9-6640b90e2177",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9881e03-09e9-4a95-8f50-2d1ed6a5e051",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2e8b791a-a4b5-4ae9-9000-a459ef9708fb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0f0fd6a5-ad12-444e-96ce-c7a235a4e6e0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "f05641c7-8296-4f54-944c-7a455bd39ab7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "332b55d0-5a15-4623-9728-2684da8432c1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6919c708-6a6d-459c-87bc-3b9ba3727493"
            }
          }
        ]
      },
      {
        "id": "4821e32a-0992-45d1-9ae8-62258297c262",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "8c8bdb33-1ed0-4c77-8ed3-93981f929480",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d491c0bc-b892-4923-9672-8e0b82f0f88f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7f56ced6-e347-4e31-b372-840ed7f999af",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc35a8d-c657-45f7-9f75-2b758bc69550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b755ebf5-d0e6-4114-a4bb-1bc8baa84d7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12144bd-0186-4efd-a355-0034edb37092",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "357a48cd-f8fc-440b-a865-9f7b5720c50e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11578c06-cd0f-4bf8-8ebc-a9f585ec9871",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b062459c-4757-4610-88a6-b2451dee36d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fee71124-c2f4-4772-8aff-99a310557d0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2796b70-6335-4c15-b3e1-746437cecbbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b9e30f8-4f12-4f29-82fa-2e3ce81b0c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a276eee-8baa-4670-9870-2552b18fd370",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "645c1604-e6fe-4ab7-90bc-376a0c89fad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2506995f-d890-4c36-9c97-91500729f09d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2a1e278-8b0f-4537-b9bc-77573f4db5ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ead8e504-c34f-451b-8fe9-03e1d6496c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2309593a-4170-4bc5-b280-75c530f8dba6",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c37f56d-fec4-4297-8378-203b293dec35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "596ec1c5-9d79-4a81-a38b-d448952fb99d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a81711-78f3-490b-8e33-c27e24ce5511",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0117286f-9da8-4f88-9add-ab317c52936b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "374c31d7-7468-4603-af4b-6d0a8dfc92c5",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c614de-1df3-4e57-a964-8ad6b6510a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77cb9230-0414-46a9-bd65-4bf29393ac6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4472269-53f8-4d1c-a223-470c3d7c3d08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48fc418b-0c6b-44c4-a9cc-63e785190bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f00ff4a-53e2-44ca-afda-340574ab75c2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bbbab7d-fba4-4108-a6f2-11f69dbd007c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5119f124-fbec-4d3a-a6cb-32af742ae1d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe90f1f-07c2-4705-af7b-c0e7fdf2f9e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "718e3c73-7dd9-446d-8a99-17c4b3d96099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c413361-d134-4cf9-8329-579ae878c5e5",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "717f8db3-1f33-4230-9d3f-3ea762cd96d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30d0bb73-e2a8-4478-9797-833032369836"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f26091-7d73-425f-9470-9f828be4cc0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c760054f-509a-4dd7-aed1-d7979edb4881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78290473-5127-4c1b-8fd1-287a274dc16d",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab68b134-ba03-4ead-9ea4-2a8bf7b9d87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2868ad2d-f898-4f2f-b40a-471b9c7c75ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "441267c4-c266-47d1-a783-4c052721dd5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18fdc937-0bca-4996-a03b-bb1bea8402a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea752f5-2c6e-4d90-99ee-f4e2edf7c284",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbbe76e0-aa06-4d59-b5fd-6d9a42c538af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "019bccce-9e2a-424e-a63d-05907872086a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c86d4d56-9da5-48bb-82b1-3c1087980af4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31665b37-563d-44fe-bdf3-7763a407bbf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23007b98-30f7-487d-adf9-b2c5f091ea76",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47fa4317-196a-4208-a83f-394305e61e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84f03007-797d-4342-86bb-1a42df9a4198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9beb0f0a-314a-4d58-94b8-40fa0af03574",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d0718cd-7915-42e7-8056-add471b66434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b6470b-6ee6-473b-9aa3-588be619fef5",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dbb2597-4d71-4483-9500-31b178a4905c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10c90b37-88fc-44fc-9f6d-c2872358bb00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393459e8-4f7f-4eaf-8126-2d4a938fdd75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "559bbb05-504f-47d5-97d8-8dc26dbd3414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35cd60ac-30e1-4e5a-bc79-3489b906ec0b",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30acee35-0473-4833-b15e-18a67c7260fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1c7b21e-bdcb-43e1-ba8f-3b4cb9ab795a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "399ba709-a180-4feb-926a-64997d51ab1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "ce7f03c1-4460-4cfb-b39f-e53ed717dc03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14986e51-8d12-4df8-af1b-aeaa6193cf75",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eff7f02-8f29-42e1-888b-74063e2ec03b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22fc9234-bdab-4f24-8716-28a3d02aaa2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a59fb5fd-8153-46f0-afc0-f38ade2a354b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c29fd356-233e-4f7c-8c6d-9010eab86c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb97dccd-b3fc-4a61-b083-d0a4d256c782",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e18e6978-d574-4d25-89b1-6ea4969f7935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44f6d017-bec7-41b5-bd01-89f097401f7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e093b8e9-6b3d-4510-b71f-192b03d1cbd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "402b13f8-e528-40b7-82f6-0e597a3b7df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e838902b-c845-47bd-bf99-ab5627d49716",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3423dd-51a8-4b0a-8311-8e04919a57a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65e09581-8b97-4a12-94ef-1d0b4ae47636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96b3259-3382-4587-8c65-e115a584348e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "b09bd7f0-6c25-4937-8bb6-49be45b1cba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c0da55-aecc-4efa-ae1d-2cd42df55ee8",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a72eab-3603-42bf-a853-4a556fd1f113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9105f13e-75f5-4a18-b865-a85fe5278352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7cfc19a-1649-473f-923c-e8919e381801",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "ca41ec7a-c584-4a9a-893a-43689fd8d1ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ea0da5-33bd-49b6-a8ac-9d89f2e88cec",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38047531-1ff8-44d6-94a3-44f3df28854f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feb8c661-4238-4648-86ee-fdca3b98536e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5985d22a-2734-42af-8ff9-cda1b91d8dd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcc8d81f-5d00-4c97-944a-09a18a98a15d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd6c196-f581-4d4f-b710-b0ab2099a8bd",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38cc0a4b-80be-47e2-a2da-6d9fa9704f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a70fde3-f6b2-4325-86fc-0f7eef4edfd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cab0f2a-8f6b-43a5-ab3d-0d8c63b18449",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16be49e7-a7fa-4d78-a7e9-022570204145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55206b4e-c579-4fc0-929d-5e7b468e2878",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de76f3dd-5e39-4e18-b41f-ef8fec4c7c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a15bbd3a-018d-4f76-88dd-a8e4b57d9628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "409f3d66-9aaa-4eaa-9771-b6763c78a0f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f27b6db0-6e60-4b26-835c-338815b37f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b859b232-1c39-42f6-af44-55d399cd294d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d66f3e1c-035f-482a-8615-c421be0fc595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b21efc9f-3307-494b-ab9e-429855ef59fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d75197-72d8-4ac8-b50a-0cfe4d88fe78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fe4f7d6-395b-4201-923f-d0d001f899ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b583eb8-ed1c-4b00-a30d-b890813b66d6",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09cf529-aef3-4b73-8ec2-1ce6304167f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2ebb5c8-83bc-402b-94a5-5e826b9a31e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f48bcbe6-982e-4e92-92af-89242da2187e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a60f115c-5c9e-42c0-b23a-48c17242b990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef99488-62d2-47b5-af78-8a53a3d4d0bc",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7266cdb5-32a5-4ac7-8f2e-e81e1f39d730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df77c428-944e-44f9-a67a-9e96f5f1ffde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4909749e-fa96-4e75-a04b-13990cf2cf83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89a66490-a99b-4e7d-ab3e-b9a3ec9a8d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6547f307-2e45-4d74-91e7-48c744a51a9a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace50c4d-f4ec-4683-a144-952182cf5e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92c6918c-903c-45b2-9afa-6a98c799aeff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa39e23-c8e8-43ed-83eb-bb1569ed6e7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f6fe1cc-3973-4649-acfb-657fc262556e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27f7b33c-f682-4251-ba86-fede787abcf9",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c236166-c7b0-4d4a-b924-a241f4b7fc5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a83ba5f6-18f3-4533-89ad-def2d05b59f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf0c825-cf39-439f-a126-b19f732b7581",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "622ca143-abeb-4ec7-af68-ab8b62947f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "449df5ef-9f5a-4127-9151-f2c11d225394",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd746866-fed7-493d-9f09-fcb46224dab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cfdf18d-452e-47de-9ba9-c5ca2eeb4ad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b475df47-e08e-4476-b727-a79f21a237a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25308321-f9c2-4c0d-9cc2-4947871725b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "324678c3-e0e4-463a-920c-db76dd134836",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9132730-2db8-4405-9fe7-ef4da0b3c270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "607d4449-df0c-4a6b-a599-be1f0dc8380a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86fa860f-410f-4976-a63d-85c45d36c473",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fb1fec9-dc86-4f64-abf3-15a35811dd54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1467c9b-5417-4bf4-93d8-a42ef9f866c4",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de4d65c-9883-4c18-b56a-998d3ab54e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c21d1c52-bde4-4fb5-a30e-51d2e4db14ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "906217aa-47da-44fd-a3f7-e618a82cd6b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27573d81-ec27-4091-991f-84a5d6a28ffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535f4527-481b-4366-b9db-9ed8b13893db",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d420256-d50e-4c02-8e9c-186d2dc8bb06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f240d645-d788-46de-aba3-0801c66eefe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad27a5c-75d2-4527-b594-a7cf31b7e71b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96a7373a-dd18-46d0-a226-098556b4d2e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8939218-1cfd-4f8b-b09c-972caf92902a",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50bbc084-e27b-4f2f-94b4-d48e98f70964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef1c8085-1389-4b9d-b2c5-3e51024f04b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0706b283-f19e-45d2-9b49-0da19b4ea436",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ac58dad-909d-4dba-8b0b-9d147fd8a3aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d1c3ae1-613d-409b-bbc2-19197790ff7d",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b07a156b-5e46-4bc1-b632-f5ba1153d76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95a064e1-5e41-4bdf-93de-3fd3a4d1cb11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f2d901-a2c8-44a7-9894-2393e44775c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d71ff92-e155-4c1f-845d-46633480b31b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832d41e5-b73b-42b3-ba2c-cf917fb7821f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b120f891-0113-4558-8d25-743b527f506e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "90a0bf70-f3e1-4ea0-af16-a15b53be1d05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a36e876-e2bd-4acc-bcee-0bf59773e0e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be71ee12-19bd-4355-926b-1137aee7ba1c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3b2a0985-e09b-4506-af21-c567cab0f2d2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1be68539-89d6-4b09-bce2-72ccab8f360f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "807ac5a9-1488-4566-a17d-e5c850a8815c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c527c08b-e8f7-4f3f-a043-bbaa0feb180b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9860d491-b0c7-4a2e-81aa-f180550b6224",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "fc990475-379a-4bb0-be3a-8fa2c56bb38c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8dd5fb7-50e5-4610-a339-5d4882c142b9",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "919a2500-d3f2-49cb-b158-d0ea12dcd7e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7aeddfe4-19ea-411f-b64e-bcd222db01ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "850618e3-4dfd-4a2d-8585-63405563af07",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "cdb3462c-b4da-4563-b79b-3f18ec0662e6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b160486-a095-4a13-b9fa-e874e5ce3789",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ada4a3a6-ee3b-48e7-b991-914c687111ef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cef8ecd9-9b5e-40cf-ad02-8a9e9c37b01c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f721c9f8-0161-4c56-8864-951922a1f692"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cb967e80-f2b9-4a8a-a60a-1fa6c10a3c88",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "00ad9c51-3f5c-44ec-b304-f9b7947cab20"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "81f77fd5-e99d-4cb1-88ee-c3969f91f620",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e1fe5e33-48b4-4b78-b099-be732e5a58ee"
                }
              }
            ]
          },
          {
            "id": "c19a30ab-b8b2-4ba1-ad88-77807e477bc3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1764aa63-4eb8-44ab-b6bd-aa4f11ee37ea",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad88a6e3-5eab-44d0-8bdc-6cc2a51762af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cb5b3131-953f-4874-adcd-9c21cf25e198"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89d5544a-ee91-40e4-bf89-3b7511cec3de",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "7b893c8a-aaae-4d4a-b443-b54f922c20f3"
                    }
                  }
                ]
              },
              {
                "id": "dd3868c5-65a5-4d38-b029-af843a607759",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "07c51d34-f656-4fda-b2e7-cc163e4b926f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5d296c96-134d-4111-b5e8-1476bd9cd898"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "246bfe82-60d4-4747-ba59-b84dc67eaefc",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "8880f35d-4f2b-466e-b94c-85e8bff1f0d8"
                    }
                  }
                ]
              },
              {
                "id": "0feb19f8-52ab-4cf5-8038-ced86a2b930f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e40b3e8-3aba-447b-a075-f2097f908ad6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5feb0d39-a855-4a55-8f46-93778cd3c6e6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13603f4c-2282-42cd-af0d-61efab91d6cb",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "a4ba220d-ff03-465f-ab84-85b30da1256a"
                    }
                  }
                ]
              },
              {
                "id": "f5574590-a07f-4e18-8648-622418adb567",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "63916b83-e821-45b9-9b71-208be3772447",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "733b802b-8cb0-46a1-a356-ee79eaa5709b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ef1a1b2-0ee9-415f-a4b4-d7ac98fb2557",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "cf21719f-45a3-4e27-859c-7afc4805b204"
                    }
                  }
                ]
              },
              {
                "id": "b7880a1e-6fca-44c8-99a2-6ca178bd065f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "67fe5cc9-4f1c-48a9-aaa0-83f7c831b699",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8dba2472-2f38-410b-8c52-fe5d364bec24"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "662c0d72-b21f-485b-beb1-7bb9871bf7e1",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "86abb7b5-4af3-438d-a872-d11e288c4512"
                    }
                  }
                ]
              },
              {
                "id": "55d153c6-fa91-4896-811d-17a9fb7727a5",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "309e1417-c3a6-4ecb-b07f-eda69a347c79",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5877e78c-c6ad-4749-a63f-ae53f9e0cc0a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f0e9372-9995-4b82-bd76-a48fa0610aee",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "0efabd4a-37ef-4d08-a0a5-17c20c824ae3"
                    }
                  }
                ]
              },
              {
                "id": "150e51c7-1000-4fcd-8f54-db9732c258d0",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea856bbb-c555-4238-baee-b492b8ddb153",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1118a71a-58cc-4999-8e65-263365a444b3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a374f278-bc73-4219-a45a-a737ae3342d7",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "c2ae4214-6595-4e69-a884-32c7322a1e84"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dce9e20b-2803-4c76-b9e9-1abaac5b8819",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bc118789-4950-4a99-9464-9920792dc20f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "467e2285-6521-4b1d-9d71-bdded5a59259",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c3917650-dd55-49f3-a017-e6b4f8e9ae30"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "829e45ab-9a45-4031-80e1-707fba967e72",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "64de1c02-ac00-41ad-8db2-795de3a4d3e1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "97b191dd-d67a-41af-9aec-bc2e4c9530b7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eafcd1f2-5db5-4cf4-866c-7726f6158b0b"
            }
          }
        ]
      },
      {
        "id": "6bf52752-1044-42f7-a08a-69ac311e7a95",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "9d335f58-2c79-4aa3-baf2-7a2865dbb81e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c17def83-1b0d-4655-8337-2b0c903f970a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3af5254d-7f1e-4ac8-b235-880cc7bb416d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be830c7a-b934-48c5-ac14-51bad27e06b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ecd8464-47bb-4ed2-8551-cbb1205a67f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "978d432c-e22d-4993-a08f-d8002f1ca992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "422b8bdf-e741-426a-933e-dbb5a73bed0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "833ed75d-b858-4c69-9556-13b9663d4d9d",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff4e0be-0005-42d2-a995-a461a74e26c9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "d197ae88-8c5e-4220-a586-dc26761ed00a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "439993b4-4c8f-4b1a-8b2b-49e17f310051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "01c36825-f1e4-494b-ab11-d744bb2ca1f6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4cc267fa-0167-46b1-a48a-decad281bcce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75c2e276-89dc-443a-b51d-1adecdb3b98d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d129f7c-d194-4a6b-8814-12a1e20512aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0791b6bd-3c3d-4e53-9554-f62853d184c7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "04d0face-4d57-4cf9-8bf0-7377454f3802",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "4a750c6c-d8d6-43d7-bc14-58132ad1c78f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "293b6207-5cf5-4229-898e-1f9068be8eb5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f60f2227-8370-4d39-be27-e9f933dff65f"
            }
          }
        ]
      },
      {
        "id": "d38f5306-ccc4-4cce-920d-56ba35917289",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "00cc6e1e-e983-47bf-bef5-ed42395e2517",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a44f5509-e307-49cf-9b09-0ecb57bfdb4c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "11c44520-640e-4377-aa0b-cd6ebc910966",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab3ed99f-2eb8-4fa5-a43e-0a1392de9631",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4995b748-3a31-4b06-b496-9eb551948603"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a17aaeb-f242-4443-a767-2d11e2d54322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb1b880b-eaa4-46d6-abe4-2505b84c8b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54198ff6-c4e2-4e8c-850d-e1e9c008c084",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00605ab-76bc-4d7d-b6c8-81da34e957d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b9de967-f273-46e5-9786-f19d39206ce9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b355ebf-72d8-4bf4-8174-fcea0c196d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f9862af-47a5-4914-aa50-b6a153c13b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bed9cdb-31a8-4561-9522-e036c65d9944",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e271fa1-f6f8-4b70-b014-9098ad9767a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a71fd0b-94d6-472d-a70a-770ceba834fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a251eb36-ece4-45a1-b34e-a05426fa1d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3dcc59e2-76f5-45b8-9395-db24e17cefe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce35a00e-d836-4695-b9e5-2b9b2dcc0168",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ae426a-000c-4011-8d2b-f6e3d70fdae0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5493753-4998-4f25-aa0d-39b29d20c0dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e6218b-fcaf-47a6-9f50-bb9170693d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c77c162a-1d4c-4c5b-87fd-0abdc8e95856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863d1cd2-2a92-47fb-9ba7-cf1a3c348462",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "487204f0-3bb4-4b27-8bd9-e01d85c71839",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7d9bac8-1403-4230-87f0-542a0617656e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e432bd8f-3110-4544-8a4b-78a743f0202d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9df0aa38-5364-4268-8202-81f5a6d788e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd8f9bc-2fd5-47ee-ad2f-c881d6899e88",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99252a74-149b-4987-8d00-c0416d842504",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da1441d7-2d08-4e29-b166-e6ceb6ef7d9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d17ba51d-7db0-45ff-8562-4b99ee7968fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f56b768-283c-492f-82db-35416651e86c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2eaf142d-4a47-42d8-8669-5406d6e81151",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b239f73a-8ea1-481c-8c77-9473440d4d34",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba96756-3ef6-4b8a-9906-742d4b52f9fe",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "3673062a-e2b3-4248-bea0-b117ccbdb877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a420df4a-e6fd-4f58-8689-433c42708ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "539b9a15-3954-4159-90bc-9722dfdd8692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad9ef42-64e3-4088-bc3c-2b172bebd183",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c548a8-011e-4963-b65a-e379f1513a40",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "6be88ed0-79da-4de1-b0a0-dfe84d6736a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0cfbda3-2efd-41ab-aa57-d277b7238946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "640b6809-47ee-4312-95ff-9018b7d34950"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "139f1985-0cc5-4ec8-a838-f38210a5b452",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ebaffa6-2566-4db8-9ebc-8d47a26e4dbf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "17590a3f-a8ee-4b8a-99d5-632410b3385d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e30eb644-3eed-475c-8aee-c0e27b32be43"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "38071007-b64f-4e01-b40f-dddb15dc6f4c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "10de6afa-dbea-4922-a93c-207c8a875929"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a120e959-db41-40e2-8dee-e3d1daa84cca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "657328f2-5406-426a-b8e9-8cfaea1733e8"
            }
          }
        ]
      },
      {
        "id": "3542cdc2-7a5a-4bb9-bc0d-258cfe623695",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1e6c2a16-cca0-421b-b094-ecbb442e23f9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8bf61684-32ca-4537-bca4-f3b3721af5f3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2ae95ce1-106b-4fdb-be26-aee8391f8d68",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d0e1ab-2009-4d27-9a34-e167f4f3f165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "700484aa-0bad-4e19-b9ac-918c1eeb81c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3de3ad6-ac78-4afd-b676-bf32b2901048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5ab4cf7-b0f8-4739-8a48-bdf8e214f29c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7779ed5-e55a-4941-aec8-efee64716fd8",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b3519bd-fce9-42e2-a961-ec7ed3d0fa38",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "e4da033c-0b68-4f27-bc76-f10a33603eba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ea282d-b67c-4d60-b247-745b8a3cc7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fd951021-4fc2-4a53-ab24-95851ef4bcbc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b75c4fa-730a-446e-a549-a19d0e95b2a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "521b5c61-943b-471b-ae52-15e4c0602838"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ffdcf14-ebca-4d3b-879a-7882550c6d60",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a27ffadb-ac30-4cd9-bb71-62db19c2ff12"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "70791108-9ec2-4402-ba6b-5e996afefa3b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "1a96be13-7345-462e-bce3-6c3fb3c2f954"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e1484c12-f318-4488-a1ed-5906db265086",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff523102-e4e1-4d64-a83c-8cb8f2f72c2b"
            }
          }
        ]
      },
      {
        "id": "0994cc92-4058-4517-b16f-aa8017c6e606",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "0ee94bee-b885-4664-b8fd-f483527c71d7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e0910f18-613c-4fc7-836f-e4dfd809477b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f64c66cb-ad10-4cc0-96c0-c6ad33570c5b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ecc6c5d-9cd2-46f6-9d47-ec4bc44ce54f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a23dbf8-814a-48a5-b33e-40dd7cab5654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e5f91e0-9882-4944-956d-2b26a74e7c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d0c74910-5537-408d-addc-779c68f28cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18cd2c31-3d63-4bbf-9ba7-13de28e32076",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9efb1062-1e0d-43d6-80ac-5d32beff8cdf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "aa6c63ab-c1d2-4603-9173-b68c1a2636b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "671dfa12-1449-4acf-9a09-b588d5308f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b030dc0-908a-4e27-b808-b09a84be7005"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fbb36d83-9a56-40cc-9a92-5d00880593d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a3338e0-48d8-4345-8b57-4620408e63c4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "50332aba-82d0-4d88-a2eb-423836e5975e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8949c908-0832-4b88-900f-de6c7dab6e69"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8097a94e-e4e6-49e1-8d0f-64180c19ea44",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "2702a38e-40fa-49c1-bf8d-d57c59396c16"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "055b050a-9af6-4cc1-a4e0-9cc29bb2311b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "74d0815a-c2d7-44c9-a27c-5d9a5564f64b"
            }
          }
        ]
      },
      {
        "id": "2a56bb5a-9022-41c9-9b25-493027c963fb",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "043be42e-19ba-4c18-a60e-366f9e07616e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4c1238f4-0f62-472f-9a6f-226dedf62112",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7d2e9840-9e75-4d1e-8649-8d8a740c84e9",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "254c8c7f-4901-4264-9c41-209b3b877d47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a50e868-b0af-4192-83c0-44dd359efb7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8a2532-64be-488a-8d7e-2bc893e842eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "704390d9-939e-4ad1-8e6b-a47268063b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa772e2f-2c3c-44a1-b424-b08362783187",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1080e931-d0d9-4063-8a8d-ac5c11a5ddc8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "e20387a6-7b10-4802-8308-2a49cc29a1fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88dc06f5-ff22-4cbf-a303-efc8f8c735c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "64829c76-73a8-49f9-aa21-fbf2d7f1ef0a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "703d35e7-f41c-4590-8f44-281b62954248",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cda57b64-04dc-4721-907f-7c34047fa5cb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2bc26ac4-1e70-4639-a01f-fa98dc893e67",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "331e5504-44bc-41b8-a266-8d8560ca8b68"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f470e88-290f-4258-95a3-5fff3a09c850",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "4041e342-8375-4857-92a5-2e1bafaa917d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b57b48a6-0b1c-433f-a185-ace49681a431",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "afe4823a-bb81-4616-9c84-3af81eeda02a"
            }
          }
        ]
      },
      {
        "id": "47934b59-f6f9-41e8-b4d7-71e8d0abd2c6",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "33a0c28a-a9a6-4c7b-8978-e4eec7c9b101",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 475,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 111,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 131,
        "pending": 0,
        "failed": 102
      },
      "testScripts": {
        "total": 240,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 235,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 81.3243243243243,
      "responseMin": 33,
      "responseMax": 315,
      "responseSd": 53.35807345586834,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1662771140044,
      "completed": 1662771152713
    },
    "executions": [
      {
        "id": "eef7d669-d038-4f27-b0df-1f5d8c158be5",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 63,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5a3fd1f9-e512-48fa-8bcc-b975e08a8f17",
          "httpRequestId": "ca075dfb-0846-4ce2-9f5d-70fbf964e162"
        },
        "item": {
          "id": "eef7d669-d038-4f27-b0df-1f5d8c158be5",
          "name": "did_json"
        },
        "response": {
          "id": "83ce6e9a-a987-463a-a1b7-2d694243408e",
          "status": "OK",
          "code": 200,
          "responseTime": 258,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "385a8f00-9c8d-4b36-ba4d-abe44c5ed89f",
        "cursor": {
          "ref": "e63b7481-5d1a-4bd4-a26e-153ded7bdebb",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "56fa99fd-3970-404c-a9b4-be3130ca6ad4"
        },
        "item": {
          "id": "385a8f00-9c8d-4b36-ba4d-abe44c5ed89f",
          "name": "did:invalid"
        },
        "response": {
          "id": "94a2bd1f-4598-47aa-ab3d-b34d9f6e7d7e",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "385a8f00-9c8d-4b36-ba4d-abe44c5ed89f",
        "cursor": {
          "ref": "e63b7481-5d1a-4bd4-a26e-153ded7bdebb",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "56fa99fd-3970-404c-a9b4-be3130ca6ad4"
        },
        "item": {
          "id": "385a8f00-9c8d-4b36-ba4d-abe44c5ed89f",
          "name": "did:invalid"
        },
        "response": {
          "id": "94a2bd1f-4598-47aa-ab3d-b34d9f6e7d7e",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a153c8-ce55-4bcc-b012-ef35c2acad89",
        "cursor": {
          "ref": "d5f467bd-54d6-4ad6-ad87-3f808a8493f2",
          "length": 63,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1a7c38ff-f28f-47aa-a074-cc126cf8a956"
        },
        "item": {
          "id": "f7a153c8-ce55-4bcc-b012-ef35c2acad89",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "db9ed4d2-0e00-429c-bb60-6e6c010be4a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 137,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "cbcfaecb-678c-49d4-900c-74688e1613e5",
        "cursor": {
          "ref": "90a55c24-fdc0-4374-93ce-98d14015242f",
          "length": 63,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "774f7d4b-e0d9-4870-a8b5-1f4dbfd02344"
        },
        "item": {
          "id": "cbcfaecb-678c-49d4-900c-74688e1613e5",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "87ce4676-d62d-4c96-a4d8-f9df60aa1469",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "18aa062d-0a76-4037-942a-4fe76bc39547",
        "cursor": {
          "ref": "7eb9f5d4-0036-4103-a077-d5ba20e48d87",
          "length": 63,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3634a215-378c-4b63-a358-01e671900e90"
        },
        "item": {
          "id": "18aa062d-0a76-4037-942a-4fe76bc39547",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "52ef2ffa-5744-4866-962e-2af9a6e630a6",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "51f16dc7-cb23-4c5b-b916-092aea0acf9f",
        "cursor": {
          "ref": "50f9d544-1106-40fa-8a1a-3802c1de4abd",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8d132247-fa4a-4cb4-b17a-f4c3759b7e60"
        },
        "item": {
          "id": "51f16dc7-cb23-4c5b-b916-092aea0acf9f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "75b3d9d9-272f-4e66-a56d-89b386413e59",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "51f16dc7-cb23-4c5b-b916-092aea0acf9f",
        "cursor": {
          "ref": "50f9d544-1106-40fa-8a1a-3802c1de4abd",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8d132247-fa4a-4cb4-b17a-f4c3759b7e60"
        },
        "item": {
          "id": "51f16dc7-cb23-4c5b-b916-092aea0acf9f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "75b3d9d9-272f-4e66-a56d-89b386413e59",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "72399937-aaa9-4057-b8f9-6640b90e2177",
        "cursor": {
          "ref": "e961021c-f73f-4753-b15d-32fb50534b87",
          "length": 63,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "dafe7f69-ee5f-42c4-9846-376fc83a6e24"
        },
        "item": {
          "id": "72399937-aaa9-4057-b8f9-6640b90e2177",
          "name": "identifiers"
        },
        "response": {
          "id": "49c28ef0-c95d-4e41-87de-f423ebb80da5",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f56ced6-e347-4e31-b372-840ed7f999af",
        "cursor": {
          "ref": "c158c8f1-6512-481d-85d6-a13e3030d2b3",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bec01411-e6dd-46ec-ba65-920c2da9da78"
        },
        "item": {
          "id": "7f56ced6-e347-4e31-b372-840ed7f999af",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "488866d3-5414-4ee4-9d14-0ed5bcb833d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 315,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "7f56ced6-e347-4e31-b372-840ed7f999af",
        "cursor": {
          "ref": "c158c8f1-6512-481d-85d6-a13e3030d2b3",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bec01411-e6dd-46ec-ba65-920c2da9da78"
        },
        "item": {
          "id": "7f56ced6-e347-4e31-b372-840ed7f999af",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "488866d3-5414-4ee4-9d14-0ed5bcb833d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 315,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "7f56ced6-e347-4e31-b372-840ed7f999af",
        "cursor": {
          "ref": "c158c8f1-6512-481d-85d6-a13e3030d2b3",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bec01411-e6dd-46ec-ba65-920c2da9da78"
        },
        "item": {
          "id": "7f56ced6-e347-4e31-b372-840ed7f999af",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "488866d3-5414-4ee4-9d14-0ed5bcb833d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 315,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "11578c06-cd0f-4bf8-8ebc-a9f585ec9871",
        "cursor": {
          "ref": "cef69ebb-23e1-4fca-8ed3-dd051933ea88",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b4703aa4-b675-4a70-bd91-454b0faf302d"
        },
        "item": {
          "id": "11578c06-cd0f-4bf8-8ebc-a9f585ec9871",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3cbe0a56-5b92-44d1-a946-892bdf0d30cc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "11578c06-cd0f-4bf8-8ebc-a9f585ec9871",
        "cursor": {
          "ref": "cef69ebb-23e1-4fca-8ed3-dd051933ea88",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b4703aa4-b675-4a70-bd91-454b0faf302d"
        },
        "item": {
          "id": "11578c06-cd0f-4bf8-8ebc-a9f585ec9871",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3cbe0a56-5b92-44d1-a946-892bdf0d30cc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "8a276eee-8baa-4670-9870-2552b18fd370",
        "cursor": {
          "ref": "66d37ee2-8887-4970-8ee0-ab73405b4876",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b7979dbd-3f5f-4e73-b961-b778135ff049"
        },
        "item": {
          "id": "8a276eee-8baa-4670-9870-2552b18fd370",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "3982e115-9a03-4b6e-957f-48b554661594",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "8a276eee-8baa-4670-9870-2552b18fd370",
        "cursor": {
          "ref": "66d37ee2-8887-4970-8ee0-ab73405b4876",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b7979dbd-3f5f-4e73-b961-b778135ff049"
        },
        "item": {
          "id": "8a276eee-8baa-4670-9870-2552b18fd370",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "3982e115-9a03-4b6e-957f-48b554661594",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "2309593a-4170-4bc5-b280-75c530f8dba6",
        "cursor": {
          "ref": "23b38c9f-7db3-47df-9475-bf9fe210cfcf",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "41865c4e-0a0f-4792-8288-4b54857b54f8"
        },
        "item": {
          "id": "2309593a-4170-4bc5-b280-75c530f8dba6",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "f53863cf-6814-470c-91b3-74a485130709",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "2309593a-4170-4bc5-b280-75c530f8dba6",
        "cursor": {
          "ref": "23b38c9f-7db3-47df-9475-bf9fe210cfcf",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "41865c4e-0a0f-4792-8288-4b54857b54f8"
        },
        "item": {
          "id": "2309593a-4170-4bc5-b280-75c530f8dba6",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "f53863cf-6814-470c-91b3-74a485130709",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "374c31d7-7468-4603-af4b-6d0a8dfc92c5",
        "cursor": {
          "ref": "30935887-392b-4548-97ec-54f5e9cb2397",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "780f556c-7995-461f-951b-27d53c3a4220"
        },
        "item": {
          "id": "374c31d7-7468-4603-af4b-6d0a8dfc92c5",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "cb342a1c-c45d-47b7-a257-b1c62ac0d26d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "374c31d7-7468-4603-af4b-6d0a8dfc92c5",
        "cursor": {
          "ref": "30935887-392b-4548-97ec-54f5e9cb2397",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "780f556c-7995-461f-951b-27d53c3a4220"
        },
        "item": {
          "id": "374c31d7-7468-4603-af4b-6d0a8dfc92c5",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "cb342a1c-c45d-47b7-a257-b1c62ac0d26d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "2f00ff4a-53e2-44ca-afda-340574ab75c2",
        "cursor": {
          "ref": "e64d4065-feea-4969-8b49-a120da633e97",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "0b635d16-2e76-4a5c-8cb7-6aeacf33c88c"
        },
        "item": {
          "id": "2f00ff4a-53e2-44ca-afda-340574ab75c2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "fc18029d-9e05-4ef8-b443-e5671f5faeb2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 76,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "2f00ff4a-53e2-44ca-afda-340574ab75c2",
        "cursor": {
          "ref": "e64d4065-feea-4969-8b49-a120da633e97",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "0b635d16-2e76-4a5c-8cb7-6aeacf33c88c"
        },
        "item": {
          "id": "2f00ff4a-53e2-44ca-afda-340574ab75c2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "fc18029d-9e05-4ef8-b443-e5671f5faeb2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 76,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "4c413361-d134-4cf9-8329-579ae878c5e5",
        "cursor": {
          "ref": "2d2ba5dc-f1af-4577-bbec-52133534128e",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "dac5f0f2-404a-4b4a-b71b-4528cd52f146"
        },
        "item": {
          "id": "4c413361-d134-4cf9-8329-579ae878c5e5",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "a5406378-f4d0-43c7-8879-006de3c52369",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "4c413361-d134-4cf9-8329-579ae878c5e5",
        "cursor": {
          "ref": "2d2ba5dc-f1af-4577-bbec-52133534128e",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "dac5f0f2-404a-4b4a-b71b-4528cd52f146"
        },
        "item": {
          "id": "4c413361-d134-4cf9-8329-579ae878c5e5",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "a5406378-f4d0-43c7-8879-006de3c52369",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "78290473-5127-4c1b-8fd1-287a274dc16d",
        "cursor": {
          "ref": "d24920b0-8853-47c2-901f-46f68915e9bb",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d9a68196-c681-478f-84da-e9e41667488f"
        },
        "item": {
          "id": "78290473-5127-4c1b-8fd1-287a274dc16d",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "3d65a6d4-5ec0-40ab-8b2d-89f28d3433e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "78290473-5127-4c1b-8fd1-287a274dc16d",
        "cursor": {
          "ref": "d24920b0-8853-47c2-901f-46f68915e9bb",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d9a68196-c681-478f-84da-e9e41667488f"
        },
        "item": {
          "id": "78290473-5127-4c1b-8fd1-287a274dc16d",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "3d65a6d4-5ec0-40ab-8b2d-89f28d3433e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "fea752f5-2c6e-4d90-99ee-f4e2edf7c284",
        "cursor": {
          "ref": "58d83b6b-2cb4-43a2-b101-10adefc1546c",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "185b2a37-dcb7-41f4-a89b-6194be705615"
        },
        "item": {
          "id": "fea752f5-2c6e-4d90-99ee-f4e2edf7c284",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "775db6a0-60d9-4b54-9633-f640d54b5fca",
          "status": "Created",
          "code": 201,
          "responseTime": 72,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "fea752f5-2c6e-4d90-99ee-f4e2edf7c284",
        "cursor": {
          "ref": "58d83b6b-2cb4-43a2-b101-10adefc1546c",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "185b2a37-dcb7-41f4-a89b-6194be705615"
        },
        "item": {
          "id": "fea752f5-2c6e-4d90-99ee-f4e2edf7c284",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "775db6a0-60d9-4b54-9633-f640d54b5fca",
          "status": "Created",
          "code": 201,
          "responseTime": 72,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "23007b98-30f7-487d-adf9-b2c5f091ea76",
        "cursor": {
          "ref": "e123388d-ab41-4ab1-87b9-46bdbeabffff",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5dc9152b-7f8d-498a-9eba-307ed5507fc4"
        },
        "item": {
          "id": "23007b98-30f7-487d-adf9-b2c5f091ea76",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "dd576084-4a1c-4424-bdf7-08756913eff2",
          "status": "Created",
          "code": 201,
          "responseTime": 72,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "23007b98-30f7-487d-adf9-b2c5f091ea76",
        "cursor": {
          "ref": "e123388d-ab41-4ab1-87b9-46bdbeabffff",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5dc9152b-7f8d-498a-9eba-307ed5507fc4"
        },
        "item": {
          "id": "23007b98-30f7-487d-adf9-b2c5f091ea76",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "dd576084-4a1c-4424-bdf7-08756913eff2",
          "status": "Created",
          "code": 201,
          "responseTime": 72,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "07b6470b-6ee6-473b-9aa3-588be619fef5",
        "cursor": {
          "ref": "2c4de390-19b9-40b5-a5f6-bfe128d6dc41",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c3371c24-9d92-4c25-998d-9ba20f7074ad"
        },
        "item": {
          "id": "07b6470b-6ee6-473b-9aa3-588be619fef5",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "1f96cab3-d6d6-4316-b2c6-3dcf0cc27b89",
          "status": "Created",
          "code": 201,
          "responseTime": 79,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "07b6470b-6ee6-473b-9aa3-588be619fef5",
        "cursor": {
          "ref": "2c4de390-19b9-40b5-a5f6-bfe128d6dc41",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c3371c24-9d92-4c25-998d-9ba20f7074ad"
        },
        "item": {
          "id": "07b6470b-6ee6-473b-9aa3-588be619fef5",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "1f96cab3-d6d6-4316-b2c6-3dcf0cc27b89",
          "status": "Created",
          "code": 201,
          "responseTime": 79,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "35cd60ac-30e1-4e5a-bc79-3489b906ec0b",
        "cursor": {
          "ref": "74e5952a-01a4-469b-a63d-d2efba4bc989",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2dba7b6c-10fc-4abf-9576-07ed1f7c0937"
        },
        "item": {
          "id": "35cd60ac-30e1-4e5a-bc79-3489b906ec0b",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9d890316-23af-4747-871f-b0c5b0e9dcce",
          "status": "Created",
          "code": 201,
          "responseTime": 73,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "35cd60ac-30e1-4e5a-bc79-3489b906ec0b",
        "cursor": {
          "ref": "74e5952a-01a4-469b-a63d-d2efba4bc989",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2dba7b6c-10fc-4abf-9576-07ed1f7c0937"
        },
        "item": {
          "id": "35cd60ac-30e1-4e5a-bc79-3489b906ec0b",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9d890316-23af-4747-871f-b0c5b0e9dcce",
          "status": "Created",
          "code": 201,
          "responseTime": 73,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "14986e51-8d12-4df8-af1b-aeaa6193cf75",
        "cursor": {
          "ref": "2dcc5acd-e3f6-4c8e-8abb-188bb4f4af18",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "65cd0492-51da-46fc-952d-b7b3d6af1513"
        },
        "item": {
          "id": "14986e51-8d12-4df8-af1b-aeaa6193cf75",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f68e8b91-c3ae-49ac-b454-fc003c2309a3",
          "status": "Created",
          "code": 201,
          "responseTime": 76,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "14986e51-8d12-4df8-af1b-aeaa6193cf75",
        "cursor": {
          "ref": "2dcc5acd-e3f6-4c8e-8abb-188bb4f4af18",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "65cd0492-51da-46fc-952d-b7b3d6af1513"
        },
        "item": {
          "id": "14986e51-8d12-4df8-af1b-aeaa6193cf75",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f68e8b91-c3ae-49ac-b454-fc003c2309a3",
          "status": "Created",
          "code": 201,
          "responseTime": 76,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "eb97dccd-b3fc-4a61-b083-d0a4d256c782",
        "cursor": {
          "ref": "e0bc5f35-4e9e-446e-8c7e-0c9b43e15859",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b6859584-fe9b-4702-bf7b-1096b36cf1ea"
        },
        "item": {
          "id": "eb97dccd-b3fc-4a61-b083-d0a4d256c782",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "02325e34-54c9-47e5-b71a-38f068deefc6",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "eb97dccd-b3fc-4a61-b083-d0a4d256c782",
        "cursor": {
          "ref": "e0bc5f35-4e9e-446e-8c7e-0c9b43e15859",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b6859584-fe9b-4702-bf7b-1096b36cf1ea"
        },
        "item": {
          "id": "eb97dccd-b3fc-4a61-b083-d0a4d256c782",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "02325e34-54c9-47e5-b71a-38f068deefc6",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "e838902b-c845-47bd-bf99-ab5627d49716",
        "cursor": {
          "ref": "3533042f-4404-4415-8036-7f7a6dc5dc5b",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "09e09d20-5df7-46b9-944a-6f07ace47558"
        },
        "item": {
          "id": "e838902b-c845-47bd-bf99-ab5627d49716",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "66d355a0-ec2c-4551-b458-2fb710465a67",
          "status": "Created",
          "code": 201,
          "responseTime": 81,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "e838902b-c845-47bd-bf99-ab5627d49716",
        "cursor": {
          "ref": "3533042f-4404-4415-8036-7f7a6dc5dc5b",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "09e09d20-5df7-46b9-944a-6f07ace47558"
        },
        "item": {
          "id": "e838902b-c845-47bd-bf99-ab5627d49716",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "66d355a0-ec2c-4551-b458-2fb710465a67",
          "status": "Created",
          "code": 201,
          "responseTime": 81,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "51c0da55-aecc-4efa-ae1d-2cd42df55ee8",
        "cursor": {
          "ref": "60f1d43a-fba3-4e7f-95f8-0e93f1e80246",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "678dc1f1-da53-4af1-802f-b5b010f37054"
        },
        "item": {
          "id": "51c0da55-aecc-4efa-ae1d-2cd42df55ee8",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "fb9b3f05-49c1-4dfa-9626-4e65a608c43a",
          "status": "Created",
          "code": 201,
          "responseTime": 78,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "51c0da55-aecc-4efa-ae1d-2cd42df55ee8",
        "cursor": {
          "ref": "60f1d43a-fba3-4e7f-95f8-0e93f1e80246",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "678dc1f1-da53-4af1-802f-b5b010f37054"
        },
        "item": {
          "id": "51c0da55-aecc-4efa-ae1d-2cd42df55ee8",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "fb9b3f05-49c1-4dfa-9626-4e65a608c43a",
          "status": "Created",
          "code": 201,
          "responseTime": 78,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "f3ea0da5-33bd-49b6-a8ac-9d89f2e88cec",
        "cursor": {
          "ref": "e24da622-51bc-4eab-a2a9-44c5959af2e8",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "fda5321b-41af-4625-8201-84f2ce79c869"
        },
        "item": {
          "id": "f3ea0da5-33bd-49b6-a8ac-9d89f2e88cec",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "7c92a931-82a2-4c89-8d02-bf8c3d9478be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "f3ea0da5-33bd-49b6-a8ac-9d89f2e88cec",
        "cursor": {
          "ref": "e24da622-51bc-4eab-a2a9-44c5959af2e8",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "fda5321b-41af-4625-8201-84f2ce79c869"
        },
        "item": {
          "id": "f3ea0da5-33bd-49b6-a8ac-9d89f2e88cec",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "7c92a931-82a2-4c89-8d02-bf8c3d9478be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "ffd6c196-f581-4d4f-b710-b0ab2099a8bd",
        "cursor": {
          "ref": "522865f1-311a-4e35-b553-fd964c9bcd8a",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "51924a87-42af-4bc5-b4c9-aa9486abfa02"
        },
        "item": {
          "id": "ffd6c196-f581-4d4f-b710-b0ab2099a8bd",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "a2fe94e8-26ff-4b37-84af-d375b3b0d550",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "ffd6c196-f581-4d4f-b710-b0ab2099a8bd",
        "cursor": {
          "ref": "522865f1-311a-4e35-b553-fd964c9bcd8a",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "51924a87-42af-4bc5-b4c9-aa9486abfa02"
        },
        "item": {
          "id": "ffd6c196-f581-4d4f-b710-b0ab2099a8bd",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "a2fe94e8-26ff-4b37-84af-d375b3b0d550",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "55206b4e-c579-4fc0-929d-5e7b468e2878",
        "cursor": {
          "ref": "5722b1f6-5f7e-45d1-8fcd-ce77e88e04fa",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f5860fdd-7e92-463d-9831-b1f04eacb067"
        },
        "item": {
          "id": "55206b4e-c579-4fc0-929d-5e7b468e2878",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "48075024-6545-46d6-8864-71ae120c3bc8",
          "status": "Created",
          "code": 201,
          "responseTime": 70,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "55206b4e-c579-4fc0-929d-5e7b468e2878",
        "cursor": {
          "ref": "5722b1f6-5f7e-45d1-8fcd-ce77e88e04fa",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f5860fdd-7e92-463d-9831-b1f04eacb067"
        },
        "item": {
          "id": "55206b4e-c579-4fc0-929d-5e7b468e2878",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "48075024-6545-46d6-8864-71ae120c3bc8",
          "status": "Created",
          "code": 201,
          "responseTime": 70,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "b859b232-1c39-42f6-af44-55d399cd294d",
        "cursor": {
          "ref": "5fa029e4-2856-4750-9f32-eff604242d9f",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a69c895e-5c4f-4efa-944e-d68e612c09d5"
        },
        "item": {
          "id": "b859b232-1c39-42f6-af44-55d399cd294d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7fba8ccb-0e5a-4d9d-b72f-edaaf0f395ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "b859b232-1c39-42f6-af44-55d399cd294d",
        "cursor": {
          "ref": "5fa029e4-2856-4750-9f32-eff604242d9f",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a69c895e-5c4f-4efa-944e-d68e612c09d5"
        },
        "item": {
          "id": "b859b232-1c39-42f6-af44-55d399cd294d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7fba8ccb-0e5a-4d9d-b72f-edaaf0f395ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "0b583eb8-ed1c-4b00-a30d-b890813b66d6",
        "cursor": {
          "ref": "b4828d2b-ab16-4d30-afe2-b5e485431828",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "094c07e7-6985-4790-9fb7-ae68a5bc054d"
        },
        "item": {
          "id": "0b583eb8-ed1c-4b00-a30d-b890813b66d6",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "2875664e-5cf1-4cfa-b19d-149eecfc47a0",
          "status": "Created",
          "code": 201,
          "responseTime": 72,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "0b583eb8-ed1c-4b00-a30d-b890813b66d6",
        "cursor": {
          "ref": "b4828d2b-ab16-4d30-afe2-b5e485431828",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "094c07e7-6985-4790-9fb7-ae68a5bc054d"
        },
        "item": {
          "id": "0b583eb8-ed1c-4b00-a30d-b890813b66d6",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "2875664e-5cf1-4cfa-b19d-149eecfc47a0",
          "status": "Created",
          "code": 201,
          "responseTime": 72,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "7ef99488-62d2-47b5-af78-8a53a3d4d0bc",
        "cursor": {
          "ref": "d0403e2b-37b0-4491-8d95-48cb3bbe85a7",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a6e15abb-980c-44fc-bbb4-54c1a6d1e572"
        },
        "item": {
          "id": "7ef99488-62d2-47b5-af78-8a53a3d4d0bc",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "cd591705-e27c-4a1c-a1b3-f17f4662d0af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "7ef99488-62d2-47b5-af78-8a53a3d4d0bc",
        "cursor": {
          "ref": "d0403e2b-37b0-4491-8d95-48cb3bbe85a7",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a6e15abb-980c-44fc-bbb4-54c1a6d1e572"
        },
        "item": {
          "id": "7ef99488-62d2-47b5-af78-8a53a3d4d0bc",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "cd591705-e27c-4a1c-a1b3-f17f4662d0af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "6547f307-2e45-4d74-91e7-48c744a51a9a",
        "cursor": {
          "ref": "4a699bfc-0bbf-49f4-8b9f-931d49b49cfe",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "65adc10c-4509-4910-8235-e72621764275"
        },
        "item": {
          "id": "6547f307-2e45-4d74-91e7-48c744a51a9a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "0dd7164d-8584-4ca4-a70d-2442606a53e8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "6547f307-2e45-4d74-91e7-48c744a51a9a",
        "cursor": {
          "ref": "4a699bfc-0bbf-49f4-8b9f-931d49b49cfe",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "65adc10c-4509-4910-8235-e72621764275"
        },
        "item": {
          "id": "6547f307-2e45-4d74-91e7-48c744a51a9a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "0dd7164d-8584-4ca4-a70d-2442606a53e8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "27f7b33c-f682-4251-ba86-fede787abcf9",
        "cursor": {
          "ref": "0109e560-251d-4e27-8f11-244c1ea58a33",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0e7e8034-25a1-4d62-917b-d861b270fb09"
        },
        "item": {
          "id": "27f7b33c-f682-4251-ba86-fede787abcf9",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "2084b86d-ec71-4f6c-b346-4a70e0c45824",
          "status": "Created",
          "code": 201,
          "responseTime": 102,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "27f7b33c-f682-4251-ba86-fede787abcf9",
        "cursor": {
          "ref": "0109e560-251d-4e27-8f11-244c1ea58a33",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0e7e8034-25a1-4d62-917b-d861b270fb09"
        },
        "item": {
          "id": "27f7b33c-f682-4251-ba86-fede787abcf9",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "2084b86d-ec71-4f6c-b346-4a70e0c45824",
          "status": "Created",
          "code": 201,
          "responseTime": 102,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "449df5ef-9f5a-4127-9151-f2c11d225394",
        "cursor": {
          "ref": "ea506764-b4b1-4746-aa74-ec5f4a131f92",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7b9b9bd3-b527-4f83-971d-6aea0ce49914"
        },
        "item": {
          "id": "449df5ef-9f5a-4127-9151-f2c11d225394",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8bd529fc-0f5b-44cb-8da8-0c33ddb3ee73",
          "status": "Created",
          "code": 201,
          "responseTime": 74,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "449df5ef-9f5a-4127-9151-f2c11d225394",
        "cursor": {
          "ref": "ea506764-b4b1-4746-aa74-ec5f4a131f92",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7b9b9bd3-b527-4f83-971d-6aea0ce49914"
        },
        "item": {
          "id": "449df5ef-9f5a-4127-9151-f2c11d225394",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8bd529fc-0f5b-44cb-8da8-0c33ddb3ee73",
          "status": "Created",
          "code": 201,
          "responseTime": 74,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "324678c3-e0e4-463a-920c-db76dd134836",
        "cursor": {
          "ref": "f1dea899-bb59-416a-8ae8-917d57f1186d",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ffcc18bc-3adf-4365-8df8-dfa2aef0b352"
        },
        "item": {
          "id": "324678c3-e0e4-463a-920c-db76dd134836",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "5ee530cb-ce76-48c3-b808-222f6a66d8a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "324678c3-e0e4-463a-920c-db76dd134836",
        "cursor": {
          "ref": "f1dea899-bb59-416a-8ae8-917d57f1186d",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ffcc18bc-3adf-4365-8df8-dfa2aef0b352"
        },
        "item": {
          "id": "324678c3-e0e4-463a-920c-db76dd134836",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "5ee530cb-ce76-48c3-b808-222f6a66d8a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "f1467c9b-5417-4bf4-93d8-a42ef9f866c4",
        "cursor": {
          "ref": "4603e0b9-db86-406a-be2c-149380c90115",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "735fc6d8-ffda-49df-91eb-45158ab30f74"
        },
        "item": {
          "id": "f1467c9b-5417-4bf4-93d8-a42ef9f866c4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8852aae4-9002-4329-966a-c90fb394a81f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "f1467c9b-5417-4bf4-93d8-a42ef9f866c4",
        "cursor": {
          "ref": "4603e0b9-db86-406a-be2c-149380c90115",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "735fc6d8-ffda-49df-91eb-45158ab30f74"
        },
        "item": {
          "id": "f1467c9b-5417-4bf4-93d8-a42ef9f866c4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8852aae4-9002-4329-966a-c90fb394a81f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "535f4527-481b-4366-b9db-9ed8b13893db",
        "cursor": {
          "ref": "746e3199-b245-4585-9d1a-23a11818b20a",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "38f006ba-9603-4cb8-9673-36c83b194f40"
        },
        "item": {
          "id": "535f4527-481b-4366-b9db-9ed8b13893db",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "48ff12a6-a7ce-4bae-8455-d51a8b9bf430",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "535f4527-481b-4366-b9db-9ed8b13893db",
        "cursor": {
          "ref": "746e3199-b245-4585-9d1a-23a11818b20a",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "38f006ba-9603-4cb8-9673-36c83b194f40"
        },
        "item": {
          "id": "535f4527-481b-4366-b9db-9ed8b13893db",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "48ff12a6-a7ce-4bae-8455-d51a8b9bf430",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "f8939218-1cfd-4f8b-b09c-972caf92902a",
        "cursor": {
          "ref": "128e0c74-2576-4f86-9528-09308f8f2961",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1c871ea6-722a-498b-b741-713cc90eb4e8"
        },
        "item": {
          "id": "f8939218-1cfd-4f8b-b09c-972caf92902a",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "301e9ce0-2b30-47db-9217-a285310f1b43",
          "status": "Created",
          "code": 201,
          "responseTime": 84,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "f8939218-1cfd-4f8b-b09c-972caf92902a",
        "cursor": {
          "ref": "128e0c74-2576-4f86-9528-09308f8f2961",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1c871ea6-722a-498b-b741-713cc90eb4e8"
        },
        "item": {
          "id": "f8939218-1cfd-4f8b-b09c-972caf92902a",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "301e9ce0-2b30-47db-9217-a285310f1b43",
          "status": "Created",
          "code": 201,
          "responseTime": 84,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "6d1c3ae1-613d-409b-bbc2-19197790ff7d",
        "cursor": {
          "ref": "85649ddb-7c77-4149-97dd-ee6e17f33301",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "667e380f-3718-4bb9-a22f-650448742b5e"
        },
        "item": {
          "id": "6d1c3ae1-613d-409b-bbc2-19197790ff7d",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "da90fb3a-df8a-4a7c-a610-e400d6f65528",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "6d1c3ae1-613d-409b-bbc2-19197790ff7d",
        "cursor": {
          "ref": "85649ddb-7c77-4149-97dd-ee6e17f33301",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "667e380f-3718-4bb9-a22f-650448742b5e"
        },
        "item": {
          "id": "6d1c3ae1-613d-409b-bbc2-19197790ff7d",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "da90fb3a-df8a-4a7c-a610-e400d6f65528",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "832d41e5-b73b-42b3-ba2c-cf917fb7821f",
        "cursor": {
          "ref": "1d8ee0ba-fc5d-4d52-9392-7adac211f9f2",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9bd0e74b-6a92-4c2b-9b25-a97508f1063a"
        },
        "item": {
          "id": "832d41e5-b73b-42b3-ba2c-cf917fb7821f",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "d16fff9a-4f84-4a5c-8e82-5b3161f8c1e9",
          "status": "Created",
          "code": 201,
          "responseTime": 70,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "832d41e5-b73b-42b3-ba2c-cf917fb7821f",
        "cursor": {
          "ref": "1d8ee0ba-fc5d-4d52-9392-7adac211f9f2",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9bd0e74b-6a92-4c2b-9b25-a97508f1063a"
        },
        "item": {
          "id": "832d41e5-b73b-42b3-ba2c-cf917fb7821f",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "d16fff9a-4f84-4a5c-8e82-5b3161f8c1e9",
          "status": "Created",
          "code": 201,
          "responseTime": 70,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "1be68539-89d6-4b09-bce2-72ccab8f360f",
        "cursor": {
          "ref": "3677ce2c-23a2-4e37-8f8a-dbd9137714d5",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "314869dc-f9bc-4bf7-a88b-08840f0f2dab"
        },
        "item": {
          "id": "1be68539-89d6-4b09-bce2-72ccab8f360f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e904422a-00a3-4f5a-ad59-365f6312ac01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "1be68539-89d6-4b09-bce2-72ccab8f360f",
        "cursor": {
          "ref": "3677ce2c-23a2-4e37-8f8a-dbd9137714d5",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "314869dc-f9bc-4bf7-a88b-08840f0f2dab"
        },
        "item": {
          "id": "1be68539-89d6-4b09-bce2-72ccab8f360f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e904422a-00a3-4f5a-ad59-365f6312ac01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "e8dd5fb7-50e5-4610-a339-5d4882c142b9",
        "cursor": {
          "ref": "f5d15b87-ed1f-4c66-8313-81bef3fbdfb6",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6a8c42e3-39cc-4ac0-8453-73bc0a93c345"
        },
        "item": {
          "id": "e8dd5fb7-50e5-4610-a339-5d4882c142b9",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "4337a1fb-577f-4f5f-aae2-106cef292af7",
          "status": "Created",
          "code": 201,
          "responseTime": 83,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "e8dd5fb7-50e5-4610-a339-5d4882c142b9",
        "cursor": {
          "ref": "f5d15b87-ed1f-4c66-8313-81bef3fbdfb6",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6a8c42e3-39cc-4ac0-8453-73bc0a93c345"
        },
        "item": {
          "id": "e8dd5fb7-50e5-4610-a339-5d4882c142b9",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "4337a1fb-577f-4f5f-aae2-106cef292af7",
          "status": "Created",
          "code": 201,
          "responseTime": 83,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "1764aa63-4eb8-44ab-b6bd-aa4f11ee37ea",
        "cursor": {
          "ref": "fbb49cd2-4419-41c3-8a6e-00dc48a47200",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "7d215401-5f55-4708-a588-a50c7e50fefc"
        },
        "item": {
          "id": "1764aa63-4eb8-44ab-b6bd-aa4f11ee37ea",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f7a6185b-8e8d-4d14-a360-076f7cea3af3",
          "status": "Created",
          "code": 201,
          "responseTime": 70,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "1764aa63-4eb8-44ab-b6bd-aa4f11ee37ea",
        "cursor": {
          "ref": "fbb49cd2-4419-41c3-8a6e-00dc48a47200",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "7d215401-5f55-4708-a588-a50c7e50fefc"
        },
        "item": {
          "id": "1764aa63-4eb8-44ab-b6bd-aa4f11ee37ea",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f7a6185b-8e8d-4d14-a360-076f7cea3af3",
          "status": "Created",
          "code": 201,
          "responseTime": 70,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd3868c5-65a5-4d38-b029-af843a607759",
        "cursor": {
          "ref": "16b9976c-53a2-4271-bf9a-6c751f4ed329",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b1197791-f4a6-46ad-8aff-03244c2ce34b"
        },
        "item": {
          "id": "dd3868c5-65a5-4d38-b029-af843a607759",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "a2735750-f41f-4dd8-ab66-4f8d45a19c77",
          "status": "Created",
          "code": 201,
          "responseTime": 79,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd3868c5-65a5-4d38-b029-af843a607759",
        "cursor": {
          "ref": "16b9976c-53a2-4271-bf9a-6c751f4ed329",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b1197791-f4a6-46ad-8aff-03244c2ce34b"
        },
        "item": {
          "id": "dd3868c5-65a5-4d38-b029-af843a607759",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "a2735750-f41f-4dd8-ab66-4f8d45a19c77",
          "status": "Created",
          "code": 201,
          "responseTime": 79,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0feb19f8-52ab-4cf5-8038-ced86a2b930f",
        "cursor": {
          "ref": "0f10681a-a371-4c74-a6a1-d04631c6dd32",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "819e8482-1099-425c-a79e-09056bdb5349"
        },
        "item": {
          "id": "0feb19f8-52ab-4cf5-8038-ced86a2b930f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0330312c-3ece-4e66-9c83-2d0255767bfd",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0feb19f8-52ab-4cf5-8038-ced86a2b930f",
        "cursor": {
          "ref": "0f10681a-a371-4c74-a6a1-d04631c6dd32",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "819e8482-1099-425c-a79e-09056bdb5349"
        },
        "item": {
          "id": "0feb19f8-52ab-4cf5-8038-ced86a2b930f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0330312c-3ece-4e66-9c83-2d0255767bfd",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5574590-a07f-4e18-8648-622418adb567",
        "cursor": {
          "ref": "23d45d89-4306-47e2-8242-544f8992d0c1",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "719712b4-9091-4aec-990b-194f860ed829"
        },
        "item": {
          "id": "f5574590-a07f-4e18-8648-622418adb567",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1df17a34-5b98-4e79-81cb-9705815c0c69",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5574590-a07f-4e18-8648-622418adb567",
        "cursor": {
          "ref": "23d45d89-4306-47e2-8242-544f8992d0c1",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "719712b4-9091-4aec-990b-194f860ed829"
        },
        "item": {
          "id": "f5574590-a07f-4e18-8648-622418adb567",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1df17a34-5b98-4e79-81cb-9705815c0c69",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7880a1e-6fca-44c8-99a2-6ca178bd065f",
        "cursor": {
          "ref": "41e45966-d89c-4245-9e3a-8d911c1722f9",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "fc80237e-b3ca-4126-b9c3-816169f0552d"
        },
        "item": {
          "id": "b7880a1e-6fca-44c8-99a2-6ca178bd065f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "bf357f10-4b09-4e14-b34c-4c3cd39353a1",
          "status": "Created",
          "code": 201,
          "responseTime": 76,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7880a1e-6fca-44c8-99a2-6ca178bd065f",
        "cursor": {
          "ref": "41e45966-d89c-4245-9e3a-8d911c1722f9",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "fc80237e-b3ca-4126-b9c3-816169f0552d"
        },
        "item": {
          "id": "b7880a1e-6fca-44c8-99a2-6ca178bd065f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "bf357f10-4b09-4e14-b34c-4c3cd39353a1",
          "status": "Created",
          "code": 201,
          "responseTime": 76,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d153c6-fa91-4896-811d-17a9fb7727a5",
        "cursor": {
          "ref": "38b8298b-ee4e-46d1-b8d5-1738bcf4bf51",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7b691b18-d59f-4cbc-a99c-460f8617d335"
        },
        "item": {
          "id": "55d153c6-fa91-4896-811d-17a9fb7727a5",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "550cd1fc-436b-4c49-a164-993b2b67c24c",
          "status": "Created",
          "code": 201,
          "responseTime": 80,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d153c6-fa91-4896-811d-17a9fb7727a5",
        "cursor": {
          "ref": "38b8298b-ee4e-46d1-b8d5-1738bcf4bf51",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7b691b18-d59f-4cbc-a99c-460f8617d335"
        },
        "item": {
          "id": "55d153c6-fa91-4896-811d-17a9fb7727a5",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "550cd1fc-436b-4c49-a164-993b2b67c24c",
          "status": "Created",
          "code": 201,
          "responseTime": 80,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "150e51c7-1000-4fcd-8f54-db9732c258d0",
        "cursor": {
          "ref": "29543145-8200-4f9c-9770-2c5aab916ece",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4c3d528d-5c42-45dd-bfe7-7c92858209e5"
        },
        "item": {
          "id": "150e51c7-1000-4fcd-8f54-db9732c258d0",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "c4c64449-ca94-43f2-9841-cfd57863e34e",
          "status": "Created",
          "code": 201,
          "responseTime": 71,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "150e51c7-1000-4fcd-8f54-db9732c258d0",
        "cursor": {
          "ref": "29543145-8200-4f9c-9770-2c5aab916ece",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4c3d528d-5c42-45dd-bfe7-7c92858209e5"
        },
        "item": {
          "id": "150e51c7-1000-4fcd-8f54-db9732c258d0",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "c4c64449-ca94-43f2-9841-cfd57863e34e",
          "status": "Created",
          "code": 201,
          "responseTime": 71,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3af5254d-7f1e-4ac8-b235-880cc7bb416d",
        "cursor": {
          "ref": "913a25f9-da17-4b94-a98f-66547c3e1d37",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d40f1399-970f-46a7-a85e-3ae54abd83e4"
        },
        "item": {
          "id": "3af5254d-7f1e-4ac8-b235-880cc7bb416d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f7011d5a-3b1b-48bb-8e60-938af08bb880",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "3af5254d-7f1e-4ac8-b235-880cc7bb416d",
        "cursor": {
          "ref": "913a25f9-da17-4b94-a98f-66547c3e1d37",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d40f1399-970f-46a7-a85e-3ae54abd83e4"
        },
        "item": {
          "id": "3af5254d-7f1e-4ac8-b235-880cc7bb416d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f7011d5a-3b1b-48bb-8e60-938af08bb880",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "833ed75d-b858-4c69-9556-13b9663d4d9d",
        "cursor": {
          "ref": "e78ea8a5-65da-474f-b5b2-0cbbc7c46549",
          "length": 63,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "0ac23603-b73c-4aa6-8e2e-5c2337dda798"
        },
        "item": {
          "id": "833ed75d-b858-4c69-9556-13b9663d4d9d",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "186f14ff-5e89-4517-ae7e-16a605f1d906",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 47,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "11c44520-640e-4377-aa0b-cd6ebc910966",
        "cursor": {
          "ref": "386877a7-babf-4135-99fc-b746261338c3",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1252d20c-8b34-4303-92e3-04e7c5aa12f7"
        },
        "item": {
          "id": "11c44520-640e-4377-aa0b-cd6ebc910966",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "779e429c-b302-4900-a244-f912a5d7d3fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "11c44520-640e-4377-aa0b-cd6ebc910966",
        "cursor": {
          "ref": "386877a7-babf-4135-99fc-b746261338c3",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1252d20c-8b34-4303-92e3-04e7c5aa12f7"
        },
        "item": {
          "id": "11c44520-640e-4377-aa0b-cd6ebc910966",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "779e429c-b302-4900-a244-f912a5d7d3fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "54198ff6-c4e2-4e8c-850d-e1e9c008c084",
        "cursor": {
          "ref": "1faec623-5697-43c3-8110-6048030a3b53",
          "length": 63,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8e144364-77a4-4e14-bb97-eace49750f47"
        },
        "item": {
          "id": "54198ff6-c4e2-4e8c-850d-e1e9c008c084",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2acc2372-002e-46b2-b9da-3f6c700f2c65",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "9bed9cdb-31a8-4561-9522-e036c65d9944",
        "cursor": {
          "ref": "50a82425-9ad3-4491-9089-df208005554d",
          "length": 63,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f8c99429-28b7-4c74-ae14-5fa95e36f424"
        },
        "item": {
          "id": "9bed9cdb-31a8-4561-9522-e036c65d9944",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "fc933b33-7be4-458a-9f7f-9ab2142ddb6f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "ce35a00e-d836-4695-b9e5-2b9b2dcc0168",
        "cursor": {
          "ref": "7c3ee483-ad0b-4b7f-914c-fa2101a65177",
          "length": 63,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d5a25a73-fff4-461e-b840-981411575413"
        },
        "item": {
          "id": "ce35a00e-d836-4695-b9e5-2b9b2dcc0168",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "d9dc4295-ceb6-4863-9369-b97e538bf032",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "863d1cd2-2a92-47fb-9ba7-cf1a3c348462",
        "cursor": {
          "ref": "81f27803-edcf-476c-b815-86f3a65cd96e",
          "length": 63,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "dd26aae1-b69b-4827-b955-222d5f7802f7"
        },
        "item": {
          "id": "863d1cd2-2a92-47fb-9ba7-cf1a3c348462",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "08d971f8-df1f-42eb-acb6-ad22241d3469",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "bfd8f9bc-2fd5-47ee-ad2f-c881d6899e88",
        "cursor": {
          "ref": "ce164a4b-b044-488e-927b-ffb002f16acd",
          "length": 63,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "970cb3cb-298b-4ec2-a5c9-166837e54d02"
        },
        "item": {
          "id": "bfd8f9bc-2fd5-47ee-ad2f-c881d6899e88",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0144da22-0252-499e-a93c-5bd5dae8dd4d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "b239f73a-8ea1-481c-8c77-9473440d4d34",
        "cursor": {
          "ref": "8448d439-c104-4ffd-b0d0-6bf4fd012b14",
          "length": 63,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "9c47f02e-5abd-4333-8aeb-7f89f5b6b06c"
        },
        "item": {
          "id": "b239f73a-8ea1-481c-8c77-9473440d4d34",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "4d23ef43-9fa3-48d7-a2c4-10b1a8b63dc6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "fad9ef42-64e3-4088-bc3c-2b172bebd183",
        "cursor": {
          "ref": "1de9026e-d097-4372-8223-858027064d97",
          "length": 63,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1a7d8d00-caed-4ebb-be4d-c1a178307b66"
        },
        "item": {
          "id": "fad9ef42-64e3-4088-bc3c-2b172bebd183",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "9f9776a3-f742-4bd7-b17a-dd21d582aec9",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "2ae95ce1-106b-4fdb-be26-aee8391f8d68",
        "cursor": {
          "ref": "9ad2fc36-0e9f-45f5-9997-499735a9f57e",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8e4b8fe0-cf3d-4936-8fe1-31f901456cfb"
        },
        "item": {
          "id": "2ae95ce1-106b-4fdb-be26-aee8391f8d68",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ea9a6cb9-59dc-4cb8-9d8f-4857d83575fb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 47,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "2ae95ce1-106b-4fdb-be26-aee8391f8d68",
        "cursor": {
          "ref": "9ad2fc36-0e9f-45f5-9997-499735a9f57e",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8e4b8fe0-cf3d-4936-8fe1-31f901456cfb"
        },
        "item": {
          "id": "2ae95ce1-106b-4fdb-be26-aee8391f8d68",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ea9a6cb9-59dc-4cb8-9d8f-4857d83575fb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 47,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "c7779ed5-e55a-4941-aec8-efee64716fd8",
        "cursor": {
          "ref": "a1a25ea3-dc96-43f6-8bc2-7041710a7a69",
          "length": 63,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "958b4d5d-2332-4caf-b251-03133aa4eb46"
        },
        "item": {
          "id": "c7779ed5-e55a-4941-aec8-efee64716fd8",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "a4aba7bb-920c-4f6a-b278-51707bed5842",
          "status": "Not Found",
          "code": 404,
          "responseTime": 47,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "f64c66cb-ad10-4cc0-96c0-c6ad33570c5b",
        "cursor": {
          "ref": "c4640c0a-e3bd-44d6-a434-53edfdb87f28",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b8919cc3-f526-4935-a01b-ece87540b46f"
        },
        "item": {
          "id": "f64c66cb-ad10-4cc0-96c0-c6ad33570c5b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e8b817a0-c791-4c0a-a7f6-2c4022023d59",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "f64c66cb-ad10-4cc0-96c0-c6ad33570c5b",
        "cursor": {
          "ref": "c4640c0a-e3bd-44d6-a434-53edfdb87f28",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b8919cc3-f526-4935-a01b-ece87540b46f"
        },
        "item": {
          "id": "f64c66cb-ad10-4cc0-96c0-c6ad33570c5b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e8b817a0-c791-4c0a-a7f6-2c4022023d59",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "18cd2c31-3d63-4bbf-9ba7-13de28e32076",
        "cursor": {
          "ref": "dba84c25-75a0-4821-8d80-893a918de5dd",
          "length": 63,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "53b06f93-d88d-42e3-bab1-edd801fee47e"
        },
        "item": {
          "id": "18cd2c31-3d63-4bbf-9ba7-13de28e32076",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "27bb3ec5-f365-4041-b6c0-81a8d98272dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 135,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "7d2e9840-9e75-4d1e-8649-8d8a740c84e9",
        "cursor": {
          "ref": "c9df1e9a-eea1-4196-a2b3-7e9b1789d4be",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "4912bf48-5a94-44ce-86e2-f7bfecd90233"
        },
        "item": {
          "id": "7d2e9840-9e75-4d1e-8649-8d8a740c84e9",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d360747f-ef64-47d7-ad04-c5701ac080ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "7d2e9840-9e75-4d1e-8649-8d8a740c84e9",
        "cursor": {
          "ref": "c9df1e9a-eea1-4196-a2b3-7e9b1789d4be",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "4912bf48-5a94-44ce-86e2-f7bfecd90233"
        },
        "item": {
          "id": "7d2e9840-9e75-4d1e-8649-8d8a740c84e9",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d360747f-ef64-47d7-ad04-c5701ac080ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "aa772e2f-2c3c-44a1-b424-b08362783187",
        "cursor": {
          "ref": "f9d792e4-020f-4809-8f92-8439295d24b7",
          "length": 63,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "657fa38b-4513-4d86-a36f-17a9ca1576b9"
        },
        "item": {
          "id": "aa772e2f-2c3c-44a1-b424-b08362783187",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "da3d7d93-7429-46bf-984f-0bcc742070ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      }
    ]
  }
}