{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f67b8a7d-1528-472a-a32e-d2a43caea430",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b31ace67-f15d-4517-8f2a-27712fb344f9",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ce291fbc-b075-42bf-a877-5aa6f621f058",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a89b6686-cdfe-470e-9eb1-007da8ea05e2"
                }
              }
            ]
          },
          {
            "id": "aac34b99-5286-4461-8f67-621db6f21338",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4c660a8d-487d-4fb6-af5c-c7f8c1061a90",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "18ba2fd2-409d-4126-897e-27fe04b6ad41"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "53b5c3ab-4dea-4ac6-8cec-5869ff51a7c1",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f5847563-5b5e-4624-ae69-1f398454eed2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d900b61b-026a-4d67-970d-fef1933d8130",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1249c07e-0ede-4e07-a958-09d2df4259ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ad543463-a7d6-48ab-bf72-50f21f8d38a1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "59395cb3-2bac-4c78-9098-ee4ca3f60cf5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b3773f02-71ea-4a45-b0e1-df4e448369c6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "008e427e-247c-432e-a1fd-5798587f2785",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "690c9c16-930f-4de1-8301-ed5c63545f88"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed88c5c6-0777-49c4-8ece-b25a00bd3a63",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "59b6c12a-f07c-4999-a2b3-f7140f73ac4a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2dc75109-a944-4169-b8e6-c57f0eed757e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "86aaba8a-5a8b-4a8d-b325-4c9c7f5fd1b3"
            }
          }
        ]
      },
      {
        "id": "bc191465-8ce7-470e-96f0-a4dac0772464",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4cc754d2-391c-4b26-b3d2-f6e9788650d9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "37b454a8-3034-4410-bfa7-82119dfa54f2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0d24972d-d67f-4c9b-bb60-90aefa9539f6",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a12300-9354-450b-89e7-f22f048be423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8705bf9-d4b9-451e-afe5-a83af924efdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24f092e-a24b-46db-9a6f-eacd70957b12",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "705284aa-5b81-499a-a239-917538abd9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cdb9ecd7-24ee-4913-a701-fcb28deb6867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff578b8e-7cd1-4266-a021-45e9aea59b2c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b42f2e33-8878-44f3-919d-d54fed0d5fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "abd3bdfd-a2e9-4720-8fce-4ecba882c1e8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9a9dcb89-10fb-4c20-91f5-20551f9cd6c1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2c12b944-3bfd-4094-8ece-a23fd30677d5",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d1f9df-fdf1-4c03-8fbf-19d1131116eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02e902bb-6221-41e9-bfb4-7af9ae9a453c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d07c84a-c59b-4e9d-84d8-1fde849c832b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c7f8396-97ce-46ba-ae7e-d0fd71d887b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d93471a3-58d3-4ddd-a04d-2b392c6bb596",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9744df71-bd06-40f6-8cb9-78ed8fc1dac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1930efa9-ea8a-41a2-9a4c-8fbc43ad0555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893c97e6-332f-4d33-b394-55c5cb305924",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "a5142e37-b599-4d92-b8ef-946d27974686"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f85c7372-2392-463c-abe0-cbf9aadda9c2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a1d2f5e5-7b4e-4a9b-9c23-8d7e5e766b71",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "057c0b41-e5c5-4649-8b4b-73083e604ba2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "acbaab77-b9e2-4430-88ac-dcffdba1116d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b33c80f9-97ec-46bd-a697-aa8b16588860",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "6e76b96a-535e-46ff-a2bd-dacd4b5ac3b1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e31d37d3-8f63-40e7-9069-8f939c56fc60",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cd41b518-f0e6-442b-b37d-f20b20155a42"
            }
          }
        ]
      },
      {
        "id": "11c44aa2-4704-4a5e-a6a3-80479aa68c79",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "604fff42-d1ce-454d-80fe-28ed2f0a70f6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5a6d978d-531a-410a-b99a-61a8d6e0993c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "bfd3ceec-6771-4c0e-950d-46747dbb1f66",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b45cff3-0382-44b8-9b7d-8e48a3458b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e970a70-79cf-4250-a895-e33b99e52491"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d852c4-782c-4b86-b0f2-ab916abaa0c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "125a4669-5cc7-4e81-b61b-5cfba2526b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0d177a-dc42-49b3-b2c0-61b52ae67bb1",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "561a9df6-c323-4350-a849-5a236f0bd8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acbcfc23-2c86-44f8-82cb-e2cd6b0ce48f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f794658-2984-4da3-b174-66bdfbf8a2eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fed1a4e2-8dff-4777-8e37-2c1d4c3ca8f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a0b57ea-965d-4de5-9822-6ba71e4b62fd",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15cf628-43f9-4257-af78-a0fc995bdde1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a99db7d2-0b65-4099-98cc-8db0cc34ac1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c28ae3-fe03-49f8-b5af-090572fca0d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b30161cb-cf38-44bc-908e-5b3d70498e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd80aa7a-ee21-4ea5-afbe-cf8a741c3261",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5574e318-fe63-4169-a371-a06788e0e75e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8064512-3666-4703-9518-8f988fc6b5b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab8f4122-5f68-422f-a7f4-1eb0151029c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad62150b-6ee3-42bd-b238-4179ea82b1df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee49f4d6-87bc-478b-b0de-8dc9baf5371a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e0c717-6b81-49c0-8af5-9db00b60a55f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9880547d-533d-4e3f-9a23-fb6c69f2d41c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "867d2e36-8668-4f07-806a-b82ba5bf785e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aceb900c-8d3f-482f-8b30-bc357d416acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae852992-1caa-4858-92a4-99bb4676e308",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5719ed12-ad6d-4eba-876f-76f662ea88be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ce76c99-ca77-4571-bed8-575d9bf6fe81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "540354b5-f2c5-4cb1-9c4b-8fa8a538c02b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1059e30-5307-480b-a973-3a58ac44fafa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae434df-2220-48a6-b8dd-bb7804b65bb5",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f784d789-5af7-4984-83d1-b2926ca1fa70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ca3cb02-79ab-45df-92fa-b7b3cc1100c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ecaac7-f48d-4b09-a8f9-9355061700c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2924a916-73fb-41c8-ad09-34542976788f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e89e6a91-0cfa-4e83-9b20-38edd08b88cb",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43cee3e8-c241-43e9-b13e-6181a5534aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7525f8a-c8e9-48f0-8fe3-4832c7681b6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c62c878-8e4d-4247-a1ea-a27c0a1f48d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6917f353-594e-4393-b130-9e55ed6a4e4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461a1084-9a44-40e0-89ca-8ddaaf49acd5",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d96d7fac-8970-459e-9f22-8716b70084b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b75b7652-8a03-4fe8-a1fd-f4644812df49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e348c02-6f74-448c-be5a-8ce1e9032cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c176786-c85d-4a0e-8b67-3e708ff75a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4184397c-35cf-4128-94b6-1ac55d99b5e0",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e51d1e-ed59-4d7b-9fef-61cc8925e160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c910b109-534b-48bc-bb16-0c3ea1762a2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "993ac97e-8bed-42d5-967a-3d67f0bc6c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c220e373-f535-4431-ac0f-4c481e9de454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "604dc263-814a-4718-969b-3c24016ebb0b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad89a36-620c-46e0-9bcb-34c471febd56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b5159cc-70dd-4cfd-b2eb-52739853c845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "939080ee-2c7c-48c4-aac4-24330dcf279b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6cdc8d07-7437-4cb3-828e-99491442deaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba537f5-fab0-4596-be31-9b6f582a4f8d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "205592bd-7137-44b0-b568-ad5c0ab23334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1e2fa58-60c9-48e2-a6a3-5f1b94248b90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa875002-44ce-4ea2-9ebd-c2ab81acb996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c777313b-3623-4bbc-b011-917f3f973ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d501e91-6edb-4899-87ea-cede58920ba8",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d92cf6-f8e9-4548-9ca6-9a270a06c0e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f2d6c6f-ab5f-4459-a45a-ed1bcd507784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8481f136-b5c3-4400-865b-617bca0977a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "914bde14-87e1-4313-8d86-6618d6458e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b33baac-f9f8-4119-89cd-72c2f67cd38a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e428a84b-00e2-4e91-b221-03539adf2247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7e31107-392c-481f-905b-1823dad28dff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7551f3bd-8592-48fd-aa30-0d04505e689f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "844131f7-c076-4439-a42d-6afd21ce4586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fbe1b3a-60e1-457b-8e73-48a09ed87972",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31023ac4-e4ee-439a-b6e6-7b54e108845f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ece790e-8f35-44b5-b537-0e393bf8e57a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70b5aeb-9c4e-4573-bd6f-990bf63ea098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e3345a1-5bef-4340-8cbd-8483eba16e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13e903c8-5927-4af4-b1bb-2c9beee51c09",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb8852a-3a12-4102-9d54-9f403a46e1b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af613b64-7ea1-4b9d-9b05-225dd9140de4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0207774-3bcd-4cb7-b5c7-7238584a81fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4fc81705-5c47-481d-b67e-20ec839c624c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b774da4-78d8-4183-bd30-cff6b4f28e1b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5914b3b-53d0-4e53-b55c-b0713fa25b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eb1cd7a-899f-49bb-94c0-f80c2093cf18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c51a3977-43df-44aa-8c44-b59a63bfa76e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cfba9437-e2bb-4741-b2fb-61315fbbb8bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd19fc7-4691-4289-97a7-8f55dd91a12f",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37799ade-b0f4-4eb8-bec6-00260521ac8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67dc8fc0-b3b8-46da-993a-56adb5aee3c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07326fbf-05d7-4c1a-afd0-a5956a0041e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c88846ee-6b92-49b7-82b6-ca24da54a071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac9931a-e3b7-4fbc-baa7-ce479fe35b68",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfad724d-6934-4af3-a2a9-9c955ac64a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43741ea6-43be-428c-b863-9bb60bd719b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8660ac1b-23d4-4b66-abc7-001cbe3c28f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "163e7d2c-336d-4ce7-953a-8bc6957ab51b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0fc76d-852a-473d-939e-d84e7bdcae52",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72827079-843d-4a15-8755-bd77bbfc16be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a67e518a-5e3b-4302-81c3-c07118cb8c8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a4aada-c149-43ca-8315-93e91e984a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86816236-8ba3-4cab-8125-6af35f248664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70284775-24d2-4164-aac6-2fad28666311",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee6445b3-e35c-4f20-b8f6-3b58af9d695e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe400468-b7de-41a2-8e72-7c3371efc528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec7c235-3887-4824-a109-4afc09516a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "054669f4-0d72-4f0b-813a-b0d1f85546ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d3322d-a085-4a4d-b461-489894741840",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af69d77b-e911-4a0d-923c-d4d339e09168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de3c6beb-3153-4d6d-aed0-7a60e16f0882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b86b29-2130-43dd-b1dc-29382c78bf35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e1b0ef1-1014-429e-8dbd-0d82be409847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b706eeaf-612d-48e1-811c-32e3ff37efca",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab77d22-b711-4fde-850a-566cf32659df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dffb805-2998-45c4-bfa3-7c6de3b9c4dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad925daa-8a27-4aac-8a2a-0ef127838ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "674c44a7-49ac-454e-8e43-c8e4f78b29f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "216f41a8-3c6f-4764-abb1-1efe73e1d620",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddee8bc0-e860-47ff-9122-68b71ca8638d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dcaf62f-93f1-41b6-a3fd-3bf43dc24705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7449f278-a437-4851-93a6-96dc5a1202ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3446c3e0-5097-46e9-805a-47bd729e6fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae249664-392f-40a8-a92a-414e2c68ec29",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0694bff3-2091-4dcb-8fd2-b4e6ddad67fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e915936c-c40a-4d2d-9454-5a101678cd3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "257cce97-da17-43cf-a606-d648ea6cac4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae0b8108-a8de-48af-bf6b-e20a97a15bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "803b9a63-4784-448a-961f-b14d1c78befc",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a520f1f-74f4-437e-a732-cb048392fe47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbdf6b47-032d-4a1e-9cab-ccb3ea0787cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f267227c-ce18-4d2f-b5a7-b901056f2b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbed5d55-9725-431a-a616-dc6ab046a892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4fb794c-6eea-43d7-b917-4412803418c7",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06784e1a-e000-436e-97c2-7d388bc28ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8270fff-e3f9-4472-9e6d-f0fe162a599a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26499f9c-4ba3-42ea-bb53-af335b0bffe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c754dc2-2f23-44c0-beed-c307b9ff0a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d475bf0-d9eb-480f-a32d-5df66e1dafa9",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f451cd2b-ef7a-499b-8ab7-b3d156b6acbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ad142a6-52eb-4106-8395-00afabd40ec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "792f81aa-f9b9-4cd4-913f-33d8b4044d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "457a7a6d-3db6-4979-8c8c-57c6bb38bf0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c2c10d-c53a-438c-808b-d3d9a765c872",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f12532-cc6c-405b-bdf9-438ab597ef96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1bce680-6db4-4ae9-abd9-fb0dd2369fb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b059dc06-9801-4e60-81c3-45eb86ddd032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbebc3bc-066c-4d4e-b17d-f2b2a8baf9da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba324e5-6c96-4971-9764-eaae2e5342e8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "946450e1-ad76-4572-82fc-b6a6ced726d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b90c58ec-de58-4635-affd-c6960fe4c4da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b3e8a08-78d4-40b8-b8f2-c252eb28827b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "c90b2ac4-c491-4925-a3af-474413fa25f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae539665-0309-4406-9c1a-4c6df9b7a849",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc180245-ae0b-46ab-b12f-4806b5e55d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65c760af-ab4a-4cda-9917-2e3586a660bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fad416d-66a5-4ba3-a03c-35ae00836c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c0c2fe3-9320-4cf8-9905-cf561cb07de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b399ff2-bf68-436a-a830-880bc8f9833a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c78b2a4-8c3f-4182-abac-c2398740803b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b08e43a-392e-45ad-91b7-6d0d2aeccd69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80b677a-2017-430b-8b8f-b97a40240491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "63fbca6e-38b0-4e8e-bc0d-4b3fe54237de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0efdb2-180c-4533-b9c9-6de2e7e1c6a6",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06629a25-239e-4f10-bb6e-0bfa1e8b9bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0b55dfc-df7f-4838-8947-556a60e84270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44326934-49b0-4016-9b52-0aaa2176f775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f6b5a6d-bb42-48d5-8523-56d7edfa69b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7bc8959-0931-492c-91e3-65f5ff7082b3",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e72c01bc-4c82-4e0c-b02e-ffb2e6e09434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65455a93-86cc-4ce0-98e5-7f6c55d8ccbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300cbc37-75f8-4e83-9655-8a3e5874e7a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f2bcdeb-746c-4b99-8cd5-94264047420c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59bc3282-4fdb-4819-a6c3-747638346bbd",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c8430a1-66c8-4dbe-93f0-c677a5aca061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bef151ad-f897-4c27-8834-b7bb8851be57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6d3eca3-1759-417f-acd2-6de956b5f210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "141d091d-89b8-4c1a-b21d-5d68f5d76a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29cd072b-7e43-4488-8498-037d7e506ee8",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e3dacf8-3bbd-4778-a88c-1c57511036e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c00eb98-2c15-47bc-b9da-016c319924e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae91869-0d95-458f-8344-ad248e3cf51d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a413e6fa-9b8d-488e-8164-3b24e3233d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff8f17d7-d1f5-42d6-9b11-35aec7db56e9",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8be99b2-4b21-47bc-a2e7-24b1e0f18647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa7b91e6-8a5f-4cff-8995-df151c62f503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "205b66e8-8fdf-482d-a213-7d889c171709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba71fdf3-a901-486b-947c-88c0cf66fcc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d4a4027-ff39-42f4-9b82-38ca21cd5380",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d546ac-342a-4e83-9490-ffd189bac278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91caded0-4249-4761-a1d7-0891635af9ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0ff2fa7-b6b6-4fc0-b3ca-97c3cd5c5479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9929c8f3-ccbd-48e9-b4d2-69555e7e7a00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a9da50-e5ec-4c47-941f-e4b974e04edb",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c95f040a-81aa-4ecd-a4dc-81b35dc5e5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c6e21bc-2d1d-4d55-9f94-24812374e732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "721cbdcc-d2f4-4c61-a069-a819c90393a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "917296ef-de97-4b90-a99a-27b9d34c5764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50275076-74c6-46ee-a78f-e73cdf0c1e70",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1308fb-00ee-4480-9eb8-0827eddbb4df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0edc232a-0829-4df7-bc69-4864a1ba5c06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f11dde5b-0140-4a18-8ac6-85203f9bff88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f028708f-150d-44d3-81b7-537f814824c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3372159-d76f-4c09-9c07-c57e8bcb03d9",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b755bab7-7744-4764-a5fe-bf820de680c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c3b682d-fccd-47b2-aa16-93a65d156031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "491b5265-e61d-412d-a43c-a0424bcb4155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b499a63d-c60d-477b-91d1-220a13bc3fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad46ee8e-8183-4f94-a481-ccb6e4e8e099",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7328a3a-7a90-43ed-9679-a74d7ef92995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c39cde7e-a66f-40f4-a7f9-9ca27d16751e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ead5cb5b-500b-4e77-bf5f-bf5753eaf2c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8efb9fa0-b3ee-45ca-ad7b-7bd2cbc6ccfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "716e21d5-d29c-4b98-884c-3e90af1e1f16",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acddaea4-72bc-4088-afee-c3f904987ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f435ee99-dad3-4519-b15f-5e0afdff9480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfdb01d3-8e40-4751-8c8f-e50ce11c1917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1bc3526-6941-48e1-a308-86b33817ab70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40692439-2a7e-45f7-ae3c-bb8dc3803d5a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82fe7be-08d5-44f9-b04b-19b50521a6ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a6641e6-0eaf-4fb0-97a1-7588b3f4ebf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea6bd66-868e-46ff-aa18-f17122a0cce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c464d83-ae66-4851-8faa-a15a2a001415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a085c24a-0407-4190-8808-af07b3c82611",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad607488-79e6-40be-9b34-7fd0906c35b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae823f44-7d46-44af-92ea-1bbb6ea7db56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5ca3334-cbb5-42ca-bfe8-ce076ded9308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2b2a56d-cef6-4cea-ae88-6c151cc8cc87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445ca68b-a50c-4eda-b45b-cb8b23b5d5d1",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "010b1ea2-ed84-4fd5-9c9a-e422c5ba356f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f68c37a-3613-4493-aa81-a6d782d084e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87b90a9-fd26-4f93-a786-465c9b624088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f9fd743-30e4-42c6-916f-3b4fec3707c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a1f559-3138-4803-9d58-bcb4c66aa72b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b1e8b57-0a5b-4b00-9534-4d7d066e7575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57e212fd-4f97-415b-b3e9-00bf9d59cca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62443ab8-ef87-4373-be59-c05250b1ac15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2900afae-a6ba-4691-9272-23cb4d073199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0725657a-f9f0-4cc8-b58c-ee37f070365c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "925bfbeb-a135-4d19-9b44-79f4469592e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc4b746f-0e7a-464c-818c-b06b0da40c92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c7cc129-f60c-4723-8404-495f2f1bb2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "33528024-84d8-4a7d-933a-7da7d2690b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03031b1b-0fdd-4765-9376-d3c80d8203d9",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "441dffec-ae71-469d-a04b-a84eee3efcce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "868077fa-c143-4551-b3c4-0c3126f54ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9b9fc7-5e33-42d7-b8a9-946c7e3fca2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "811244fd-1267-445f-b86b-ce6762b725ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9000e19a-1d79-4ca5-8ebd-f0eccb11ddd8",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60429c8b-4540-47a6-96ef-4dfd7fd6af42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "410d93d4-9d66-4ffa-b340-28f000ba0354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a799a9-cad5-455f-819d-6703b58e1b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "decf6817-ee19-4e70-a310-a89b2d7f8698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aded1f9-f04c-4c3f-9e5c-e22899dd4808",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e5dd06-daf8-4965-89e7-e8ee0d71558a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9097690-6503-471c-99a1-faf7b143a335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95687d21-7f39-43dd-b2a7-df1f726175d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "66092451-7ee1-4727-b91d-792e0b1370bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ed43ea-f873-4395-befe-87675ad87196",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "063c6509-0895-4180-8c48-cd602ff786bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "125070ed-f728-4644-94e9-978fc563d9b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7f3d6e-cd18-44f4-a519-cdf311b4d975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f48ba34-a689-4a98-9fcc-1e588911d0f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60ec272c-d5ce-48cc-968e-f50206a8ec05",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3848fe05-6f77-4d95-8f4f-ffac4ad77087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d9f2f40-15ba-4051-9d57-ab56dffa3a50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e88a3f4-717e-48eb-ae7f-463a29311a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a8be59d-907a-4b40-9e11-72409ab5a9df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9388639c-aea4-4195-a27d-076b25bc5f18",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d735fcdb-1a03-426c-9f86-96ebcc195c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a42257e-b13a-4ab6-b3a9-3ed63e76fdab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03609aa6-055b-4ff3-a29c-6b27c44681d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca77882c-d18d-48db-b8e8-b1d67a148d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3fc15f3-4280-4fd2-ac14-ef189e2b2174",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c7d0dc-f89e-44b6-a64e-1d7c2d05209b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d9d6d18-d151-4d0d-89d4-d9d9d180ddc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9bd508c-6049-42b9-847d-c79639d9d275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2341bf9-6ebe-42fa-801e-b5ca31a97d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ffb7ff-1e45-4860-9b46-e894cbbc55ad",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3dd969-8cb2-4e0c-ae62-d0485422918c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91780102-c65a-4573-9616-feb0d8261ac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c6db15-e52e-4a94-ad45-b435fdfa806c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "6fce82f2-3367-46f7-bac4-bc61641951fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dae4ad9-54f5-43fa-99ac-6d4594f8d308",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b905153-0a78-435f-b76f-272e6412c1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "581cdcbb-70bd-4dae-b746-8e3fc71fed54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ae8589-56e8-45d6-99e5-5c4344e3f149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "489b859b-8e31-4bab-8e25-777523bff594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed9fc468-a3f0-4168-b684-4532d1c21455",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f83e145-3fb7-4366-ad10-82f7223a6bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdcfcf9d-57f1-4cce-8a5b-03222f4ba5ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156e5fbb-cf01-4d1f-a7c1-7a65994ba4a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "047ce0fe-9ff8-49a4-99e8-56ef8fae538b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f476f8-ea77-44dc-843c-c406040a0d73",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37b682c4-54e6-45b6-bca8-0bb0d3f3c659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46a83734-aed6-4f46-a7c5-6af52f6ac8f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de96c443-68e7-4b9d-b72c-374f8b37c151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9edf3796-cf27-48fb-94ff-c28ff0b34e98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e3bab14-4917-4421-a323-b37e2ff135b8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03768bcb-6c84-4dc4-8388-e9d5c498f506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eddc3f4d-df80-48ff-8b77-851e43389a30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1525f747-ef69-41d8-8321-02f84d466f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "573f8152-03f2-4354-b64b-ca0b6a5ed5f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10545ae3-28b2-4474-a0ef-498e51d0d395",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f63d1e2-7e6e-41ee-ac42-7f30f027295f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a479e10b-92d0-4ea8-bc4e-e2b34a7f119f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c87b268-2004-418f-8cdc-c93b48bb8668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c60e39be-bb21-488a-bcd3-14ec6eefc170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d05d4bb-4d9c-4214-a52f-57de530fde49",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f04d6d-cff1-44b8-89de-c136c5f16bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f4b4b5-6a47-480e-a031-a39315d539e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9664d5f4-8b1a-41e5-9cab-3e4ca91adedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6603bbc-b576-4d45-954b-f82a9e52d18b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356240b1-10ac-4e29-a644-55fcaa94e727",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eefdfe0-440d-402f-a7b7-d7d6f97375a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56a9a266-d754-465c-a6ca-eb6608857537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27cc28c2-39c3-4f7e-98e7-d30e1360573d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "619e4a91-22d8-43b7-80ba-3fd303dc648a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b260bb95-c7f1-4424-9f2e-ba2401585af0",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e89c52-cb6a-4162-8ae1-889539d2b9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89d3733b-2291-435e-a8e0-8d848dab9908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979d6bc4-878d-4038-9d84-46e0bd4588b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eda6957a-63c8-4b87-b107-ba2d1b989019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b2ca02b-583a-4049-80c2-3130c2236804",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f71f913-2119-45f5-ac97-d245376f940d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3303e44-8cd2-4466-bd63-2d1504fe469e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2280ee0-a7c3-4f34-8d19-21cdd0d9a5ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff0e2853-d1c4-46bc-a516-9b9b4a67dda0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8934acb2-168d-4321-955c-78330cd5b32c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff59035d-bfa9-4f13-9468-ac96798c30d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26cd63f8-5f71-4004-a10d-fc92332d29ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e18f9dbb-dff5-4de6-aa46-c736ffb56adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d09abafa-259c-47de-abda-126f4954c96f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e630da-22fd-4851-b3d4-43e86874ed15",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87510abd-4a10-4812-bfce-bdd7a72b4674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62f785e7-becf-431b-b1d1-bc8383735001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e47332-b3db-4f01-b024-4a3af027cbc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0d48824f-3da6-48be-a9e9-7744c35c6d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "669c0867-8af6-414e-add6-cf837d0301cf",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1bc0da8-fd87-459d-b6ff-290539d2cf7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "242a4472-3eb6-47d9-9d7a-367bc0f90028"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0960ea14-0cc1-4be3-8da3-f080db7aef29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "caa8d8fe-cce9-4a30-8a57-9d89b220b1c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ed63eb-1692-4783-a519-2832193016eb",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe43f2a-d483-46da-b8dd-72c570d09957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bf92853-1304-4bc0-9c51-90c6cb987bea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a8dda84-8602-4a55-8049-0ff507bef792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "93230b88-9ca3-4303-a0b2-bc59c64bbd9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba866461-4239-4ba4-a7e5-8a58bb21df46",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "205141a1-04c4-461d-aec0-ea0cb8c97055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91a1749f-c07f-432e-820d-a31df6262d2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a9ee58e-cd60-48d1-8604-3f69a8ec77d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c284ce5b-8869-42fa-a54a-ccbfb119f1f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f73330e-dfee-4ca7-8591-585d22414a8e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45310307-94a6-4f11-b628-daad23dbbc81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bd370aa-33d2-4de0-bdb0-08e8816bb2fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aff7612-6d90-4222-a7c7-4b29a53961f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "76b92aa5-7938-421c-8e19-588f816c30a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "818aa691-6c2b-4812-96ed-03e63e9ca1bc",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f447e7-ded8-411e-ba05-7910ada8a3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e95aed8-f7d0-4eb4-8022-2c65538a226a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76540c5b-7e51-4a23-8091-ec8db7ef72a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a119eed-1d3e-492c-9d05-7ced75eba763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9003efe0-3045-42f5-9498-f80fe43ac00a",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8eb9d5-e696-4d60-b090-4c559f8fd6e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a705316-6db5-46a4-a507-f0dbc55e9e62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "635d8e4e-28e5-47b4-9507-ce070014f2d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "96fc350d-eb87-4176-87e2-2b44a38e9c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bbef5c7-a7e5-4370-ac48-410329187934",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee86ca3-c20e-4575-9be5-bed2461b0c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93efeea0-8e49-4ca3-9dad-c46492ca8670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "143a80cf-a404-462f-8327-40985e85c285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aa5d7746-d4ae-4751-aff2-3e5e3468f9c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dadf9dc-1c85-4209-977c-f5bf5ab5aca2",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2222ee1b-e16c-42f8-bfba-9d89eeb92e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a9e5ca7-2441-45d3-9f43-d19df69b0f1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0248050-e54d-4c29-bcd3-9c06b327204e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bc7882e-4016-4f87-99f3-5f323ad08f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af4a5e43-693d-44cf-9507-f5e10c96a10c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c228939-8325-44b8-bf42-dd646e09016f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "623bc303-f63b-42b2-9841-777de3bc4324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df8680d5-8988-4617-a3fe-46c1881f21d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b358b771-8cb9-4d9b-abad-da709904cb25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c42bbf-3dd7-403e-98c6-d1fee5feb9ad",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd67ebe-bf7a-469c-8a94-5a522feb14a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e411469e-6b3c-4ae7-a991-54abab7c064d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91debd38-2157-4f7d-9740-910cbbfbb5e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "52bf8d01-22b8-4bab-933c-aa10b44a786f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a2cbb0e-e912-474e-828c-62c30da40fb9",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b380d5b-c220-48f0-81a0-1d1c967111ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59203af4-958e-4ad0-a1a5-880bf25b5165"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee71aeaf-88c7-45e0-b5eb-39fd5fedb227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8cf5d21-1498-4662-a516-6df14fe6766c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e7fd7c-7cf8-44a4-8d7a-a3ead59289c1",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba66e4a2-625e-4d69-968e-f0519f049f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f0ebc0c-c98e-40d0-b19a-d24cca4f4dee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "500f9c00-efd3-4b52-91a6-4db7ee189c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "152c824c-6a55-4136-bcd8-1fbc8be75072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96917366-ecc7-4192-bc2b-9a23432a3c25",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6255207-c8b4-4887-a86f-56484537286e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d02a9439-2739-4979-967c-9a7ee088d61f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ee1a8ce-f790-46f6-82dc-c83dd4da67d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "729a6f26-4620-406f-89bc-f88f2d661a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e36d2d-6032-4571-970a-7111289aa9cb",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6abe9906-e1e9-496d-bab9-2453c420ae66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7782bea1-f0a1-4d1e-acb3-6beec902290e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e0bdd82-7254-4895-b672-28fe3f3f250e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0aba23d-1133-4d4a-b0e4-c8746fcf6390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da3af20f-18ec-4652-8fff-d4298f565f3c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc881ad1-91cd-45e6-94f5-1db61b3ace0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5da817a1-30c7-4d16-9fd7-0cfca21ed686"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b186d1b6-3c4a-487f-a909-fe0c9a934b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8837a6d-de54-4ab4-aaa1-32a6647da560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8870468-4ca3-4381-b977-ed0bdf9e0bcd",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "148ffb03-8489-4cb3-a46d-4bf196e8c7c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae99304e-5e62-4bd0-985c-ecbec941fa8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b7b3fc8-8770-4717-9320-a2977d8e91c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "788b6afe-e8b9-497b-81e0-6cdbcdbf8bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bbfdf7c-3b57-4b0a-b102-d3403ea372a5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff7e69a-f39a-4606-ac2a-e88d20aa1cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a0d8613-57be-4696-900f-fd53ec027986"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a3c292-d2d5-4482-bd08-a8b825210a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6791ed72-5614-4b3f-99b7-171d19a4f2e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb9ded04-4dc1-4ead-abb2-4010e2613dc7",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb6e12a-d9e8-452b-a6cf-757b0561c431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb2473ed-db49-4712-8a2d-fa7e101605a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f20f58-83c1-43a8-8044-0f85e995cee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6d4c4cfe-4920-4877-a5be-8188f503766d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfefe58c-fa43-47aa-b224-92fbd8453092",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d10b5631-43ed-4838-9bbe-f4a5db06c1f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b004e703-2c7b-4ce0-8797-26173e9aa291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbe8d34f-10c0-4b1e-92a5-5e1f6994f6cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebdc2b4e-9e43-44e2-b5a1-d6fba6b0edf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceacc673-a448-47c3-bc7d-a14aa9f204dd",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b85c9443-c919-4db4-a5f2-0898ef33db9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32522f5a-bc28-4533-952d-d82ba38e246b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce114e11-d8e4-4090-b0a1-b746656503ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "411994eb-4627-4dcc-8597-0fb082adbe36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ee492d-0590-429a-9e33-9aa4668287da",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f57e34c-6f11-4506-ba66-18cebd34cfcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "892c41df-0ee0-428d-91ef-e153ce4a0e66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ec99137-bdc0-4d1d-ab5d-4da4a85ff433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0711aa34-88af-4292-ab5c-fc9dae245d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cfb040b-73b8-4cb1-9038-2c8db032b38a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6563a3-6873-4f65-b99c-7b3b6d707edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfb15be1-3d18-410f-bfb0-e72bee4f3647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae083156-e5f1-489f-ba01-4fb31da83d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "959dfc1d-1e2c-4768-8fa0-14f622b89c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ae1d62-7f8f-493f-bbd3-ed7423374f42",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5706bb-565a-46bb-b7b2-7aeca353a89d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d07349a-2021-4b6b-8e84-4213f5c4f722"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77dcf0ce-c9f1-4665-93f1-24a45acde35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a99faa4a-9fac-4727-842b-b79889ededeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79d026da-50df-43ce-99f3-234cac234510",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5db253ea-dcec-4087-ba10-1e1163717d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44bf0e0e-1ab6-4c50-81b7-679a64c6ee5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d3db91-806d-4cc0-918b-bbbcd8a92ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4774c5d4-a3ee-4832-b7f9-b92400d0b3d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52205db3-8a77-4c3e-8a1a-42a86eeff348",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d89bacf8-6976-48de-ae03-cacef63463e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a7094da7-c2e2-41ae-9f3f-08eb1f8f9ea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "859872bd-8cb7-46ef-b6f5-fa984ebdbcba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ff14ab7-0f5c-4147-87de-e26c8648cc4f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a49a2b81-29b7-4bdf-b821-da2c79aa3811",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a8a20ab6-bbef-4188-8f40-8befa4173d23",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdfe4419-aa0f-4633-a521-042d9e5a75f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca44b4f5-37d2-4299-be78-b8de948023b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e629964e-b7af-45c7-85c3-1558941af653",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "18e59be5-fd9a-4944-807b-9fb3286f1ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0211b029-6373-4cfa-9fdf-16e87185bf04",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d129a54-029a-453e-b38f-2cfffc41784c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca89a37c-21fb-4047-b7b7-9a29463d5712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f39f60a-34ca-4af7-881f-49f6410c8d48",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "c31db6c8-1bce-4fe3-87e1-43c2e366ec24"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "25c1e2d7-3d03-4779-acf0-59727dc7ddee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77270ff3-728c-4bd7-b936-12e8484d10ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "70915e55-2cc8-4b97-a813-693668d8e189",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24492463-e367-43c2-8389-0e8fac7ee146"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2d3b206f-ea02-4fd1-b701-8a43a0c9ad2f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1b602563-c2a0-42cf-949f-700ec9b286a7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "75439510-f2c6-4a01-9f06-160883e0d85d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5ec2a54c-a1ab-4c71-a442-38597c88eeae"
                }
              }
            ]
          },
          {
            "id": "941bab77-6a6d-4a2a-a6fd-ad0dca50292d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e47f4ded-6374-4154-8832-943663c13768",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "745fd9ee-5042-4422-94a8-a61d122ba71c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1b2d9f7-c34f-40b8-a878-9b75f4419d29"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "efc0d400-cfc8-4bf2-94ce-e16b0c507df8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9e351f95-90e5-4db5-a34b-9593a3d45983"
                    }
                  }
                ]
              },
              {
                "id": "bcced5c9-fb99-4995-b247-1e1208c78265",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8bc5cd17-52a9-43a7-9512-e631376d38d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e9567be7-c12f-469a-9707-c48840052601"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82ad6b50-55c0-4f69-8035-e014c6b512b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4c293db5-73ec-4e31-8a1d-b4ad8043df51"
                    }
                  }
                ]
              },
              {
                "id": "6f67e9af-a1be-4b20-9be6-5334ba501de2",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e30813f-3fc2-471b-b8ae-c4d30c8cdb16",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "51539c95-202a-4063-85a3-eca1a3c2c31e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e471206-25f9-4210-950a-d5716a87488c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "534a3d23-46a4-4813-8696-1ee17eadbe83"
                    }
                  }
                ]
              },
              {
                "id": "af868e9c-2016-4bda-a4cc-4129cb0128de",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f188dc7-0d50-4340-8cbe-82ebaf881839",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "56d246db-b500-4071-9f19-6a6ee2fd2469"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "842e0605-9fa8-4760-9c10-20061443384e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "3f95a235-c6b9-4012-88bd-3b328d731cc3"
                    }
                  }
                ]
              },
              {
                "id": "0f6a741a-04c8-487f-8bf9-05627b336c72",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fda63fd8-a28d-45f5-9de9-889ad11a317f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d79448af-c12e-466d-b173-48c74a41e6de"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eadb42ea-4b45-45df-83e4-b5567a4f6703",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "0c7edc9a-3d9b-443a-9ba4-b0d6cd2a8b88"
                    }
                  }
                ]
              },
              {
                "id": "bc74817c-2aa4-4d55-bc27-8a2aba06daf5",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a6a83d35-9680-48f7-b3a5-d9ec57670324",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6430187a-bdcb-4541-ab9e-af3f9bceb3d7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8eda35b-edbd-4fce-b90b-cc27c2c5dc01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4bfbcde1-3ce9-4474-8b53-8e745e2ae5a5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3599966c-24ae-4dd9-a171-7fe8e33fdeed",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "524ce5af-25db-4a5a-a7e0-4fab6725b20e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a27110da-211d-426b-b949-7712f577b3d9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3da3410e-ada4-4a42-9ef8-cd8acd2ccdc7"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c8449237-43e1-4527-9658-c21ec549387a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d16447b2-e7fc-4c8f-9ba0-3e122c319e35"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "15d88ad2-bde3-4313-9dfb-da3e2171d7c5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7148ad0c-d281-48e4-81b5-6d318c42f131"
            }
          }
        ]
      },
      {
        "id": "924b41a4-bea6-49d3-a142-319f6f44ee69",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "845e8c10-0b38-4c95-88f1-185c53558bf6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "505d13c2-f7ae-4408-8c49-072ca513f9eb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "03205bb6-43f4-43ed-94cb-5303be6cafab",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9bb503-0950-4870-a9ac-b7417e7a1814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "477d4303-fdf2-4032-ad91-2f8bb4f72b21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26845e67-4446-4e16-8067-e9cfcf684d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ecfff62-4918-4209-a66d-cfe424eb233a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2419a81-40ed-4e77-be08-c8f1163cb970",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d081de3-c8fc-425f-a269-ac716f8c9808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9b627b2-c418-4e34-919e-99752343506b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0e98d1-98ae-42ba-a7a4-7323678ab1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c06b4cec-516d-43fe-b65c-40effed0ebce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f84071f3-369f-4ba7-80ac-c8014535822a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77bca24b-2288-4d1b-a9b2-f3dd3ef106a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ef613ac-0f72-4eab-9227-4cb3521788b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad4f5fd5-1992-480c-984c-fbba4c0b8177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa6d8751-4fcf-4950-aa45-8780a0aa519b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c49571-dbec-4008-9a1a-90076d3bd34f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f72a97-5d89-43d2-b361-8c99d04a6385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d4f281b-91ca-4990-937c-bb0b56cee875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff83fb5-07db-4c34-88e2-cde267bf6382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba06cef7-17f1-42eb-8333-03dd4324de83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daf63d7a-52ac-48f9-8a61-ce786cded38b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "462427a8-4133-422d-b435-65d5f32b66da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28ac785e-7e9c-4850-a027-358670d8e4a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bac4e40-eba5-4386-924a-365a87ded036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "efb7cfe4-c671-4b61-af51-a276413d1553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e068e0c-2e35-4d9d-94de-ec1acbd04308",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f399d3-00f6-48bd-8e1e-58981bb3c3ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8187a686-a1c5-4afd-9dbc-75211a17dbd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c518f95-75b1-4c32-8685-2f3a5203476c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b04ad6c5-6eb2-452b-8c0c-91ccdee2372b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c1a80f-ca6a-4fa3-bba4-83168dbc1397",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b864ecce-dbe6-4f02-9278-bcee6548828e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f63a253-7b37-46fc-9c6c-bb5eb065dac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db3d01ff-7173-4b3f-be44-9cb8b0c7dc17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "682b54d0-213c-4cf0-a9c3-60b2f8d6ac5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc41ff27-d45a-4c0c-98c2-9d6fbc63568f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed104c08-bf64-41d4-897a-a51949f9f416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74d4dfca-697e-4d6a-92b8-6c6fa0255f3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94932bee-9127-4a6e-bbae-925a5b2ed6a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ae17c6d-8872-421e-aeb6-329d187b3629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0395bad-20e7-4033-ac9e-f78c0291cc7d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "639ec656-d99c-4902-bd3d-fbfb7c848244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6385f77b-8bed-4172-ad7b-eaeacbf1fac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a909a057-f063-4c28-b5dd-85ba65f62189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "22dc7756-ba40-467b-ad73-350875ba68e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c29c859a-daf7-4b70-be5c-547ef5d1c2b2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a243f70b-7a46-40db-b808-0fcda9008140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e243cdf2-432c-4f17-9d8a-6627dd9742ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2421a7a-b3c0-42e0-8fb4-143a3a06572a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c0c3a20-63ff-4b2f-9bdb-8b03c111b969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3caba313-daeb-4746-a159-b7b537a3dcf5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f78f11-6185-4831-97a6-1e13cb956839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f04302da-7fb3-446e-9bc7-0d816fa4f8fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c363e51-d426-4928-b87b-3ef542a409f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "13f3be62-fe5e-4381-a966-c4454632dbf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03b07132-b20d-4faf-a9df-f97b9750c673",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e1fd6d7-49cc-454e-a440-9b97407e88d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aa57754-cc01-47ea-86e4-54245a73e964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4125e28c-f4f4-43be-8084-4e517c21e8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1f1d6643-9030-4052-94cf-a5030718ba97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "673dc131-20b4-4977-8ad3-f4f2ebb10674",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24f28f5-e05a-4197-a5dd-d13a3f1c55a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d83d6469-d910-44cf-9e2a-1e281d384d74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672f78d2-28e5-400e-9dd1-4033e5806138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dde95000-4ebb-4b30-b618-ee45ad35a2a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17f321be-d58f-45c0-beaf-7d581adcf04f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7481d4f-e22e-4f92-8d09-d8498a29cd2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14e43911-f625-43af-96fe-37cd1462770e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35014b2d-f647-4c8c-b6ed-182175a32fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "95a1f38b-ef9f-4a4d-90da-3c00580536aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c4cb31a-3672-4df8-bf9a-ee6b194c09e5",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de506e0-f1b4-469c-af11-d45872186520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70263e53-a1d0-46f6-8675-2d12c9e1b439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6613ec9e-27a9-4b85-b6b1-8576b1a2ed99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "372b6086-5998-420f-8277-fb2ecccb242f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "360a3017-2bf0-4835-9564-a355a75d7dc1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9912de3e-4ca4-436d-b9ff-5f4827be66fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9746ba7d-0723-4535-9903-9f5c5e0fa350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53c7c96c-9cd5-46b1-bb18-00f1bc7fc971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5e8e31d-78c1-418a-95ff-7965df1f2155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d496be9-9e70-4101-8f60-2c3d807668a4",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01699ee7-4b3d-4abb-a881-63eed9d300b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6b712a7-6f98-4f33-bb74-e630da934bdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c813c1-ec31-43ea-87d1-a22748599d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "888c4297-80bf-40f0-9acf-2f1c6c10cc18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f89c05e-b5e1-415f-b862-d7406e9dae4c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c06ea0b4-497e-4525-b280-a7da5430e90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e49c88e-1b22-401f-9cb8-d61087aafc4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979dfaac-f5cc-4422-9227-0cada680df05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "54032a10-d4ca-44c3-ae0e-05ea06ced0cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34699f01-5d7c-44dc-a992-da45779f33d6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a5713fe-75a4-4dd6-b81d-902694a79ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "558aba80-ccdd-4ad2-b4e2-e0a7ef382c5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df175d9-9ac9-42b8-9314-95769503e915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3c02e93-2512-4f00-80bb-7623621efaf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cadec46-067a-450e-829c-aad37899c4f4",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f0c1a6c-f869-40a0-9039-49c210ff4c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cec6b554-f3a7-4c45-9f98-63be4fd678a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d3da05-035a-47dd-87bb-e112d0e34461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e1568d5-bdd2-403f-adb9-ef6ea4133fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4723a6ae-00a6-4958-8527-4aa909d8f186",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19cd4dc2-0c7f-43c9-8252-b2e9996a7136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a02b099e-5a40-4555-b558-2ec72beead4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75272cec-7e74-4f3a-82bb-e45274c8a02a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c38d2794-c47e-4b83-bb7a-4ab0044e3657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa595a6-9532-4550-b3d4-e9fd220b05d2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b03288-bf87-43b7-8765-0afd5438d0ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9efb0eb9-6faa-4431-b661-09b048774829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa7899a6-158b-4a6b-a11a-68ca76e1f39c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3966a03-7942-45af-a329-c0f6e0e00f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d53491-2666-465d-b8fb-7e04fa71ba80",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe8019e-ce0f-4094-914d-480f67fb9718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1c8c6f0-8727-435a-98c4-32c1b9222786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32af733a-a671-483f-9d60-27ce97ec5f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e608f998-f4b9-4a62-91ed-ef95316c9264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a1dcbd-fe38-4a7b-9007-fe590276d4da",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c79c7a5-89c1-4b4c-ad18-d31cc918d944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d6f6262-5303-4cf9-915b-7fe376b789ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acaf31d7-9373-4afe-a456-26dd6bb9b704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a768e6e-5394-4639-b91b-7c4216ca1d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "050331e4-3796-42b4-bf0d-a28f8f78a5de",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a388253e-314c-4ffd-a3fb-1a6f3a6ee9b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2979d79-ce48-4e05-8a92-f2a94cc31901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0262beb-36f6-448c-89af-e60ff144b1d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c450a14f-9812-4b94-aac1-ff57187c0a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a97c1f13-d1e2-447e-b9a9-dab97d6a8b0a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "610f5ea3-e358-4733-896b-357551c9b5b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2095eca-a7aa-4e59-806f-63e6991857f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75b844ec-98c8-46f0-9945-6eebc16298a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c2792b8-4d5a-468d-a348-c6de2eba453d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4fe2842-acaa-44e2-b9a8-85398db598ed",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55e0fa3-d1b4-4804-a41e-f1c343f8066e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90a78a7b-b061-4c0d-9930-215fbbd6317f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd558aa5-5872-41b0-9407-c46dd1f92523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf8cf6fb-ae80-44d8-9eb0-ebe5e562ca72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c78dd5-0c6d-451f-98a2-0d25e7638007",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e986ff3d-eb1f-4916-a7df-aa9e921b60c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3704045-0a8c-4529-9887-3cb345843ad0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be10480-d912-4fc4-a4e6-728fe925b01e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "413c8895-20e6-4649-bc20-08940b467dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3cf39c2-fe2d-468e-a789-62abf470a580",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5161d962-f0eb-475e-be14-5d2f7ef85d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c8bd48b-523b-4cc2-b185-6ee510d0bf92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "813568d2-9c64-4722-b35a-50022fb187c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "618638f6-2b0b-4a42-9f41-28820fa5f74f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa0e9d5-0482-43a8-a1c6-a7b19fe0c332",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bee27e18-20a0-4a44-8a88-f9d8191f4137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6250e2e-b20e-4b0c-ac94-73ec750addbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27c71d8d-d102-4e78-b05e-e30af7e7d7a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "449418fa-9d4c-4814-8a0c-d1d4fe198fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1420be22-81cb-40e3-b8c0-6b902c2c1e7a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd4418b4-b6fa-4eab-9009-a8d45d6c9169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "901ba93f-0127-40b5-b393-a6da50bd8500"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a9cdf2-3950-4523-bd37-dd61b31d4457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6c64d86-2543-4d38-bf7d-328efaa2d972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b82f13a-85da-4e3c-b00e-03708e3984de",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ebba06-dbbb-49d6-bd8d-922792d36250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "403b4111-0c8d-46c1-9ba7-78dfe66ed8db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab6938a0-60c3-4199-a98e-d72e3604176f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a353a60e-d340-473c-b1ba-5b74f4febde0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "19292bd3-a8cb-4cde-a3a6-ffa28ef39e94",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b9b197d9-7e37-472e-8390-adda62b28e5d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "871cbabd-9ed9-4824-8ef6-4f1d7f5b003f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4c72d66-1340-42dd-b42a-47a6de6f259d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "045c148b-bd0f-4658-8fd5-b1e5d48d9e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b4787695-babd-4087-8a8a-25b8b354f136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80e7268-8a1e-4318-947b-0a3522d49297",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dcc8a1d-7019-4099-a22f-3639b72c0a50",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "4b1f6d36-fc40-4026-8614-38eb02291541"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0adcbf75-c040-4dba-bd3c-dca280cd8bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3cc2b3d4-9a9f-4013-9631-aee833452d4d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c9beb20-3348-47ce-9a7a-7f9ed2c6e3ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee398ce0-0925-490d-aaeb-8a1ab89f74d9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "251a290c-a9c8-41d1-850f-f819925844bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1795509a-174c-4def-8286-b4c46d6838a7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e1aa2ccb-f3c3-4c4d-8b72-7e1edc44b1a3",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7f4c43db-dacd-4d77-b4d2-79ec0d60b3b5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67826313-7aab-4285-8405-e0f90b3f7cb9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "04f9e65a-aa81-4aaf-abb0-760ffaf2620f"
            }
          }
        ]
      },
      {
        "id": "98f95aac-0beb-4daf-b0e9-8cb08e208ce3",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b59a2fbc-dfd8-42df-b917-8e2e814931b8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4ee18b72-91a5-488b-8ed1-a1663c603fdb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9338a76e-eb66-4f37-a071-b77cde16c94a",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "547ab25b-6783-48de-b721-cd36e9b4893b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae226866-9589-4af1-9c19-a9920c9b85d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511bb72e-01db-428f-ade4-4fb09d602e21",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b361351-4bf9-4ca2-9107-ec248400b4f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e7ee5f4-405c-4284-ad28-4c6b4ab0788d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c47ff7b8-0dcf-4d75-a0a0-2836a3119e5b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a84d14-cbf3-440a-ac5a-5eb864ba1433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5f7a641-59e5-46ce-a878-797764ff0d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c54cb779-3d1f-443b-b045-f6aea95c5f75",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e822911-e50b-4375-9e10-8d31b6003a03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca94fd51-ba10-45b7-a28b-f7dbfe6a7874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aeedb22-3721-493f-a040-3e226815c5be",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b59c144-61d5-4e59-b546-e78a63a37c29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f32e32df-c7a8-4505-bac4-e6374a792cdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a1e736-a5b1-4b71-8c52-dc4f7348a517",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "200ed9b1-d876-4c1b-adde-1ef73e1cc960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef69fd30-2ac2-43f8-be8e-67e152fbe029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "262c788b-0b20-4f46-91f4-22cf336e2f86",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dbe5f58-309b-4e81-9092-47afe4e080fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd39eb6e-e8bc-4bd5-94e1-71ee9c637160"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ed3790-98f2-4dc0-a8e2-555f8cf8073c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec76543e-e3da-4b85-ba8d-fbd41a67da1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d02f8dc-4fd3-4c19-82d5-2fa057928fe5",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c4b7850-cbc6-4171-8f85-2a93978b90cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cec8a68-0a9e-4bab-8d82-4e5f3cc45513"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67318a11-5258-4894-afa6-5437a439689d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f2394f0-cbd3-47eb-aadc-9dac0ae8aa98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee081f2-fd7d-4511-98e3-e603d0d169eb",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be485e77-6600-4bef-b91c-e26a257ccb44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cea64e4-ca88-4acf-86f4-3833632a141e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d9d7578-d841-455a-8ea1-a53e46c8398c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56591908-0a60-4109-9e27-d5184cacf4d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c5785df-01b3-4609-bb69-0ef613b87505",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce129eb-ecbf-43fc-9841-6b60450f4b6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2fea479-d018-41a2-9b83-782fc383827d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e72c58ec-0713-4e80-ba8c-af785340a9cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a2391bf-6a90-4fdd-8e17-a6556eeac18f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14270813-ecbe-4d16-8238-dc3018e4546f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d368e3e-b15c-43d3-9ea0-503625bb46d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf7b30aa-eca7-4548-aaa3-758b554dbfc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded05c34-b2e8-426c-97f5-ab1ebe975b40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7333d8b8-d260-4aed-9673-a8ebd8572ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbfc0049-43a1-4686-ac2d-cddb4cf60e4f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea6aa7c-288d-4bee-aae4-3cd053c553d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83747d11-5f33-4cfe-ac7e-4c9152ebc7e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f5e836-ad61-47dc-8cc7-d67580e460e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "474b37ce-61aa-4edc-869c-5da0853f134a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c97612-7c3d-49e2-af4c-fc480a8c2e93",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c192833c-770e-4f16-86b1-d6adc2e1314e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3073738c-5810-4c71-87e1-f7ea2824d146"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "965b26e1-54e8-4cab-b425-6e79065a6149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaba5b3c-0e15-42af-bd31-61e1b50ca182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f72068-3bfb-4280-8c92-8f5e225241f5",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "862c2206-3330-4de8-beb4-35e0c6926d15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b3c2a17-87f0-4e41-afb3-aaf7a5b5f9da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c264da3-711a-4bf9-b714-163c44eeaf59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a1ff0e2-9c94-4721-8db9-8f6536856744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98cea466-cf15-459e-9ddb-1a4fa0b970b7",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b98694-6c68-460e-94ab-9c031b55feee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48d8f63a-6036-40f6-8807-100fb0375c82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf17b746-fd5e-48ec-a59a-f537440e8475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e436977-64ef-4ff6-be04-21ff5be31cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e7dcf3-e281-404d-8139-c5c69f677d06",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3c2c4d-a019-42c3-80de-f0a56d9c98ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4ca4f84-2e2c-463f-94fe-bfa1b0932bec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "858ea93c-c8f3-47d6-8dc4-031e9e483838",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "989911fa-77cc-41ed-b100-e4a034c79448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2355f02-3115-4cca-be28-4969552286af",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa43c5cb-5d8c-4adf-88e5-3a3a642fec41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3452ae7-381c-450d-aaa3-abd9ebb1237a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa8fb69-750f-40bf-b60f-5fc47ac126f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57c25172-59d7-4db1-bf4e-63d32b31df26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b79ec059-440f-4e5b-8672-1c021119bb04",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd98f164-c2c8-4c7a-b99f-00871624a046",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60cde2a3-1dd9-48cc-9612-14db19c7c4c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab23367-f5a1-4379-9e5b-4cc9745b3e73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0902251-141f-475c-8fae-bba63d9bc649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e6c5372-42af-4c18-99b4-983178aa78ca",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01be0595-1651-4278-8b8e-9f13ed3905c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0349659-84ba-4c67-a787-4d646b7a44e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fae6762-fd4c-4624-b3f3-18038fd6e81e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d9e3a13-7a50-4136-9564-a63b300d9c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7277889-312e-4ef8-9910-ba18e174c23e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62dd6f2-ff21-4592-b707-411e46210e06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9431e9f-b7ac-43fc-a150-30266d94bc62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a620c39-43de-471d-953a-f8283d2ea5b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3c44e51-1e8f-4c35-a0c3-053574b9c130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083cd5bb-b41b-4544-9026-be77b12bca74",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47eee953-9b89-463a-b926-16741f81e760",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17f09bc6-e5a4-4992-970e-c6cdc446c74b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe730ec-b408-439a-a6ec-e38849312f81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c0a6d00-c49e-4998-b403-1dcb1da36bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a82bd07-b60b-4e2c-9941-45c523589527",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f130db3f-bb47-460b-9c0c-27e671423b76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e98b6c9-41cf-4dc6-9274-14d2ed761066"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eec36e3-ff20-48b7-a5e5-bd3ac40695b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70dc6c33-7a33-4f77-882d-1fc8ce9fedf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58589945-22d5-4f9e-8cbc-a65b19adc658",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b0cfa06-144a-43d8-933b-f135310b3466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dacfd19-34c5-41f5-8edb-33d89f40609b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f53e78cd-31db-4c19-909c-af2d4229565d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f12a542d-48e6-4f5e-bf4b-d039ee176d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ee27ccf-6e13-40d0-bd47-d572bdefe191",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f5bc95d-b708-4423-aad6-0baacdd51c51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac7d4d37-72d5-4fd2-b16b-4d67d55fa880"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c2c56c-1add-4ab9-8b09-065fb721604f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b96863b1-841e-4c55-8090-0647f6b0e5a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fddf7e7-6121-4234-9f40-8282cb07e68c",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8550f23a-6beb-4c71-b4f4-f24bc7f04c0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a47a064b-84d7-4727-8e85-9c9edfab7c2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe16f3f9-2356-400f-8520-4bfdff641a9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fecd28a-5581-45ad-8859-3529758ba2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084007ec-6daf-49a7-a7ac-1d17036d07a5",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f9279c1-7550-4be1-930b-03e6496c1b4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "052df924-0705-4073-a4b5-1869fb75653e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12562715-d8b5-46c9-8ca5-74ebec24a0cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be4dd91c-1263-4275-b2a5-0e832b22f5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c89998-b276-4070-9e56-c4dc094f9c25",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1161e2-e21e-4835-b531-b9eb99f86efd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bab684d8-9632-4cd9-8829-60f10a6f8898"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2add4fd-7493-412c-afc9-378d0e0f7889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df806d03-b927-482b-8157-22ff25be3632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6699d81b-6c00-4288-8a11-9f6b960c9a30",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77761c5e-91c9-41a7-b184-26851710dd9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41b84702-88da-4bdd-adca-3760afff2ca0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be41fd88-bb1a-49eb-9a32-3a8fdf0a53e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e19a56fb-7d7c-4353-a76a-6273171a7aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f11ad0a1-c609-44d0-b6f8-22626a763c21",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "196ef3f0-daef-4f6a-af50-d941f2d37033",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf54b437-36c4-4edb-9388-781eaacd2d2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f74691-4ee6-4f60-9059-cb2bb8697fa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "026084a4-c28d-4411-ac94-61339ce07b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26e1b9ec-e42f-4a26-bb95-46fcd5883315",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd6b190a-d9f0-46e3-9669-14717c08f792",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f5ac35b-426b-4586-b730-f887401df28b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a92290-66cb-4b9f-87a2-67ff83b582bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b400425-f829-42a7-9460-1bff589704b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8a8cc7-3bae-4828-a2ce-662f2e31c82d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b9dcbf3-a861-4555-a98a-26aa9b600518",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "066bfdcd-83aa-4c5e-95dd-88feeaea9454"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "beaf0df1-12bb-447c-9d78-0fe1ec6e954a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81ac69e9-ad66-4b3f-8fa7-d79f9f9ac1f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1efbf0da-8d14-46a2-9e2b-3844d66c9100",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ebf2972-0b31-40b0-86ad-fbd44bd62cb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcead694-1ec6-467c-a3c6-98e9f99a76b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f923021-d3f9-4454-b2c9-503753196f08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88e76398-e6df-4e11-a59f-6d008f161166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c15038fc-76a1-4d3d-9475-4ac04fbe353a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af8ece9-975d-4ca7-9bc6-673aa2ff4410",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2b614c6-16e2-420b-88d9-797029370263"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aafc324-4625-49b1-ac68-710f2031e825",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32f57f30-8488-4b05-8f3d-d1935652bf88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ad0c17-87d9-4a8d-9c39-fdac6ad454ab",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26859dcb-3f23-4865-97c8-df6250452563",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3e5edbd-6949-45b9-a554-62249399c2c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7331ec45-5424-4584-b3de-48d8e0368cd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1519145b-6cc1-409b-882f-c3ff96f06297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34717759-2aef-4b84-b8b8-334ddd570a61",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60b96f7d-5f8a-4a9b-a920-8898791f9830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8128f895-6ec4-4578-825a-cadce94e0193"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aedc2d8d-b12c-4a1f-81d5-5632741a5911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18bd1705-801b-47a1-9ada-fdd9b737c380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97fc1cfe-47f3-4940-abeb-b65cab8ba3c6",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de3ea43-db9d-4c96-b4af-8538af0db05e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0bc5093-af01-4464-8199-f6f6d259482d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05102872-6806-410e-976b-0a2d739daa6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "311b6865-c9cc-4929-ad43-d7ded95aacc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "169cf28b-0046-44d4-ac39-630fde42cff5",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fead28bc-f43d-48df-a2e9-30b452490753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb89c373-a4a0-4494-bb67-14a890f61220"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d45858-97d3-4748-b513-93d5f225e0ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33d0abd8-8fc5-481d-a9e2-feeae5348f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa4569be-3854-485c-a54f-454c7efad3f4",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9763acb-8805-4d7b-a138-c79e666d8810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a760d6e-0016-4f2c-9bf7-7f57c096bd67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de9812d-2246-4bcd-b17a-4e46435cbae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9ad2a25-01e0-4773-a36e-a5c1bb547f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5642cb0e-1d39-4810-ad00-758b87a72a63",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672fb94a-eecf-4e18-91ee-6d2415e2c3d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "986354e0-3dc0-494e-910c-ef050ccaf3b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d368603-23df-41a5-9ce3-83bd0897ca6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddd840ca-d3fe-47de-9986-91409ce2a653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04611214-297a-431d-aa7d-ecabb67ef881",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2217f4e-e835-4f10-9574-b946656d2200",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "882df4be-7280-47cb-a0e8-fa3f5be423a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b409cd5-44f9-4374-aa09-032294dbe8e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e586846-0d9f-4781-afce-4b49297d31f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca95b4e-d4ea-4c39-aa64-b44633adea53",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac87035d-5e87-424d-94d3-83848a756560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d4d1170-1e64-4e3f-a025-44d59ebee701"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bdc6a4f-9645-46b7-926b-f233ff90fa3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f535f56-d171-4461-b5b6-4919e5b4eebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9cfbcef-937c-4ba1-9b87-cf2704d638e1",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c1ccab8-c662-4d4b-8c9a-6df7bf12d6f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d768b34a-f996-4fcf-9928-3d8de01df39a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f254951-d8da-4ac6-a639-6c97512534a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "914ea71f-0e89-48a5-8a76-0bb987f2f63f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a55915c3-2996-4879-9517-05d196deba47",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faee31a2-893f-4775-8039-cbdca63170d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a666bb4-622a-4f76-8ea1-d3cf38732377"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5db33df1-edfc-436f-be41-589fb713737d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f822cc26-ae08-434e-b77e-f92c053d50d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21311be8-e1ae-4d6d-a53c-b657d2b2e235",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1b4280-fc32-4f03-8e76-46fa4da3a88d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b76d6bd7-483d-49cc-bce9-fead6af44e39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bfe3e99-7830-45b7-81c3-5d9f5d5ebc8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b21eb20-4e73-489d-b459-e6c4c3489611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a9e30a-fa6a-4bb6-af66-655ed535bc91",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb49b8ca-6b2e-4766-b906-fc952f0b14b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d535549-fadb-45c2-8634-9055c8d45f85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcedee42-594e-4feb-8af4-d7d5800095e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61d2abfa-2b8c-440b-8830-826293f36548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8205dd-1a93-4b38-bb33-bb0cc18e35f5",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17dd4f6b-951b-44bb-9c65-8d6aab9f5ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32f6a3c3-82d0-41a0-8de6-087b2800ac53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08642336-804d-4df2-8117-79078f556c69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "100c7f4d-c01e-4f1d-87a4-bd8a7726ed93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3744cd30-fe95-4fb9-8102-9a67e65d89a0",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f32693c-14d7-4bb8-b0e9-edb637d11922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e18f9c5-5d6d-406d-a799-7fdd0efb6164"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d6e350-7092-490e-980a-617da4017a6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4daf78f7-9246-447b-952f-9334894384d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a422fc73-1d86-4a51-8b47-569bd0d3a59c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc5390d2-c2b6-4672-957e-52d239f66695",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa7d5d97-43e7-4874-9e10-11d14b5e3e89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb57749c-c34a-4fee-9ce5-f144db3c89e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5950ed94-2219-4f11-8b76-80deeaca4e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e76e0c68-089e-4646-84a3-0487077022be",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "135b2402-e7cf-4992-8754-e326df0b6bd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5220b2d-dcd6-49b1-ab67-a27dae53fbb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc70766c-4a70-4213-999b-1f2cd04d6fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "920dec11-f922-482a-a514-32a59cb83993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b59a29cb-ee6a-4aea-bc62-6648c906875d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0805d8c8-6b07-4bee-9bda-921f21892aaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8f39ad9-7f1d-4ed5-885a-01657eec31b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0c007f-5bc3-40d6-b301-3e30057bfac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dfbb5f6-b568-4f54-bc5d-353d9942abc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19d5a3e6-7bc6-47a8-9c4e-6870b7cb80ad",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6534db05-cfea-4c6b-b3c7-fe1d24216e93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23516085-2778-499f-b461-db8be04fab65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ecfb5b-f5eb-41ae-a70d-6137b7e004b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b5ac2e3-c88b-4feb-bc0f-26c5ae89586b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362ecc3d-fc2f-4b5b-81f4-769123e56956",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdd4ae81-f5e4-4321-ae73-f60ecfc8d665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5833371d-c6e2-4ee7-ad18-7dc882617d18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "225a2a96-5327-40ad-930e-313fabbbfe27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed1d2e79-b5d0-4c32-923e-4da5e2895b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a914dd6-72ef-43f4-95df-7c5e8110f2a5",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1db9107-5beb-4436-9e3b-7cd093553434",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "983a7f8d-71b3-4d46-a451-5b75c0a9e42b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b6149e-a7d9-4c1f-ac90-7cfe356c1357",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fc6cec0-963f-484c-b9ea-6c4e23302f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601be44e-d875-485f-9538-01d1dad8f1da",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd41dae9-06aa-471b-90c7-f69832af0c13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e78b4b00-f3a4-4788-bef5-06c1aa2acef7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12aa7f0-a01a-4a01-b499-42774043a676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddf39d8a-51fd-4c54-927e-ecf908696ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "125f04c0-82c9-4444-93f3-67b18abce217",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fde860a-d79c-4cef-9ead-e32f1b5ffc9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12c99e7f-0af0-4207-a629-dc527e864ea0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bdac45d-d6de-4289-9215-a9264b0808f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfbb63c2-7254-4fb3-98d4-6c66441871bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c80d1e2-2531-4045-994f-471dbde28406",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b296a289-fd1c-45e0-ad28-223ef5d05293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8feba36a-4988-430b-96c1-2cb593a30e85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ee16c2-13db-4ec3-a0ef-4f8e2714a861",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec435c71-0339-495b-a01d-e1e5c63c95bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5a8c95d-f8ea-4d6b-8d9d-0a5ba9082097",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae8a95ae-a3b2-42a1-bc79-418ef2e9d4f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f267687f-0438-417e-93e2-712f03ed8e8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "074897d7-5a29-4645-b37f-458e1442c793",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54d1e696-6e37-4b03-9131-745dc2ac516a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de418b3-06fd-48d4-b233-4316ce8dfd5a",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "975c185e-262c-4b39-a6da-1c3f392417dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e67dd28-555c-42d5-bffa-c106080d016f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb00960-8351-4235-9c16-9ae141d21b42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0afb334b-e524-4812-8ce3-c9428b33445e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c262cb9-7082-4aaf-ace5-59041041632d",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70d9b03-4ae8-4450-aa12-502d0b681185",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b86324f4-2da6-4068-bf82-19c5102e8973"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f4c7fda-3009-4709-bae8-9cb33593da6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "030b9c29-5d2f-4a6d-b8ef-0cb2056e5460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3479c1bf-5c32-4e27-8aee-ad7552563f1d",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b4c1c6-d152-4444-8e36-7b179c1fd50f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7e75163-7814-4e76-b3a2-e573db7eefd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0e3d059-f906-4938-a56d-c4549789c52a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2786023d-b4ce-4a0a-af20-e70de0cc5b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9afd75c8-1584-4957-991a-a4e0b6bf33d2",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eddc8303-ed9f-4963-b1da-dd680d908e4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4f3a1c3-4a68-41d5-8d3b-153fefe97501"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d089fe9-62f5-4527-b598-42c3a3974dcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75dfcaf9-fbd9-4fc0-88a4-6ab16c25cd66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aefbcf86-e216-4972-8b73-6450ab039a7a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5117fc9-7144-4f62-810b-aadf1fc16af6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cedd2ed2-65bc-4232-aa42-32e8746304e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef4edf3-9411-41a5-a011-872206e6bf70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2df7c147-c0fb-4942-8583-dfe0f0839324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2684ab99-2c76-4e40-9faf-9575e1e759ab",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479c1643-d8a8-49a9-9199-d9c756354fe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b7325ee-a0e1-4cb5-99db-a77bf2899369"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c5e9d7-b0d1-4c01-88b4-b77493e3548a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fae7fa77-cecd-4719-9efc-19d77603fc4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc9caa0-ae64-4c86-9f78-336df39a2cb8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc7aa14d-6b6d-49dd-8140-ffc8019e9c5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d9d924b-ca81-4140-b453-db4f0dd7c8fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb4c07d7-692e-40fb-91a6-3a67327fa918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c183914-6f27-40e5-96bc-d8d4c27986ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac038d4-970e-4e39-8b78-aebd128598c6",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af47cd3f-bfdb-40ae-a146-1017bafd80a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef7dbaa3-08f7-4782-b67e-d69a0e7ad308"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04da2712-ebcd-44a2-93d3-35aeed6b1e12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbdf86e3-b97c-44dc-856d-93da8bab0371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "364bedf2-54d9-49b8-a302-7155cad48d67",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ab902de-c4ba-4830-8db0-d1cb08d843c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d05600b1-e115-4ecb-9982-5e5fabfcc1a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eec2d97-010f-42ee-973a-e7f334fbfa34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da98f2c8-9458-438b-95c7-3e0d47f3573c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "146d4ba5-6527-485c-a2fd-482887093dc0",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe936fd-e2d5-4ffd-9ee3-4aef2b1c8eb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cb5eb4d-4e27-4970-b328-df7d8da4322d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "200e6461-59b7-482f-84f7-5579fc7269a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "924ced05-92ae-4d59-bb8d-e4ba8da21bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38fb8569-ba89-4883-bbbc-9a97c30a9e30",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ba45c9-f364-4a4f-896a-0a773c6c8959",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3087518b-2a3c-438f-be73-4f06b4a3f4a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e3e8baa-4ffb-459a-8bcf-54d780c76b78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3583cabb-8d5c-41c9-98eb-8a38f71e802c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c0a0a52-a98b-42be-be6f-d790ff27b5dd",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc06424f-be32-4f35-9d6a-978e451b9885",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82faf75b-0438-45a0-9241-196897b5eb1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d47841-a5d2-4564-9fbb-4b1b141127b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "287ca44f-4d2c-474d-88cf-0abdf019836c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e79d364-83c2-4e0b-9c06-079e78f38207",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c30462de-e3eb-4e92-9a7e-a91ac92d4fe7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7486d4c4-fb95-4ad7-984c-128fd20319d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f8ad638-11d8-4642-bb85-df1fc069a9ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c17512a-b490-483e-b2bd-d48729dcec52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfdc21ff-c587-4395-9724-fb26f523681a",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d8f26e-37e5-4bf5-9741-dd83dc135817",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ecf7a4a-2643-468e-9e50-caa16d2b9cb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73bafde4-e49f-4fe8-9af2-f49b5a9ed0d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "957bf3e3-462f-41f7-9e04-b6b7ffd93e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c05aec-ca6b-40ca-8b42-53a9fb7c462e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d1e607-0bf5-43bc-b607-3311cfebf929",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1b5bfd5-ceca-4d57-a055-770e33c7f03f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e14716-8c2f-432f-8127-208426ea0d4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dae57968-ba80-43b7-9eb6-2b9085734d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "894461d3-2d0f-4117-9080-897a006b5161",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88550632-7a3b-4e90-9562-3f5753d75aa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d04ca532-bee1-462c-a7fb-1214d0970364"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df57cd12-3d4a-423e-b981-13c73bf1e5b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5c46549-3c0a-4376-bbd4-39814c5e0b5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516f6285-3d67-4534-b292-20ee34403b20",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db12e0ef-dc6c-4e7d-a520-e5cbf776da61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b80cd3a-377f-414b-863a-489af9571792"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b359975c-7d5b-4c94-b867-32cfebc69cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae49b574-e73b-460f-b603-7c7eba72842d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d8e8e6c-4097-4eb0-8e1c-75fc465df9e0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68d5ce6b-f28b-474d-9cee-3129f969bb32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "897f6e1c-8bee-4efe-9869-c3dbcd9170fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9b87e0-092f-49a4-9b73-138b498ba701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bcab7f7-cfba-491f-88ed-369cdd5d1192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "424752e5-9831-4826-a65d-2b5bd4ecf8a5",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820d8d27-9fb5-4b56-ac47-674d65419319",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "970482ac-688e-4591-aca9-ce682853b83a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4f9378f-573f-4e40-a462-c03920150602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3cbd0a3-d23b-4743-a7de-a996ba16b7f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc76ea8-5cce-4a51-961c-95ed6c05f815",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ddea70-eb9d-4aac-aeef-cb74fba4b267",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce6f8c99-f436-42e1-b401-c8f3cffffc06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53154349-b0ac-4230-b200-d7ad7447a635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e8e9cdf-d39b-4b03-83e2-e16913eb8c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a7b750-eb24-419b-9c18-3c2ebb5201df",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca5531a6-ca8d-4b81-ba78-a9590cd5df4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0707130-c879-43c8-bc39-c5468738cf39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9e74cc-bde0-4ec7-b2dd-c62b67922440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c7ae6ef-2f89-4ef4-9c3a-9dece6092a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84c164e2-c918-41c7-b34e-fccd9f146b4b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe1bdb65-f1d7-4bc4-8ba4-bc8d36d6c786",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d572917-e205-4047-a2db-f34b0023774d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "509f8cb9-f9e0-4216-9599-500e65ef761c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65705f44-5fca-4641-bdaf-39e797ff6e07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56062636-a780-4b12-a86b-6deebd5f93c8",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da85313-bbfe-4dcb-8c2b-c98d93a175d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab66c0f6-6641-419e-9258-d2ae9dd0f399"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f630705c-39be-4a3c-b157-b0cde8a46bb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c1b9785-dd02-4857-8976-fd1ea0fd9e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee77a5c-c3ff-4ec0-9560-195c24ae5ef4",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4daa8476-b34f-4299-acdc-239255185218",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c23e709-9fa3-4063-b283-3c73c2dbbc47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c9e7d1-313f-4e64-8acd-21bdab2d91a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00ab1a4b-0402-4b2f-a9da-54b14076bf2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "239ba4ed-71a7-4b13-ac96-76539fe75fd2",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3969bbe4-fa9e-4f07-ae33-1b8eb5acd3a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08fd91eb-803a-453b-ab34-5aef47a1040f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "005336d0-8d4f-4616-9e5a-a0b9c2949d5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "326e9d85-678e-4e6b-8c22-d49ea85892e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb3b4784-867b-449a-97eb-8d26ce1ab962",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd60becd-b6a7-44d0-88dd-c0d5e016a4ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a31c0490-008b-441c-8971-8a482f0aafe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e34508-cfc2-4e7c-b783-9d991854a709",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f03a5070-fe5b-4a30-9541-a48414b8cfff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1622fcb5-6c0b-4f1e-ac31-42984a10f3ba",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e62ba9-ae78-41a7-82e6-41df04df0bf1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c872ba27-b74c-48b0-971b-c0c1f9167b9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e260cf-a3df-4881-9765-6638bbfce62e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2bbf946-a6ab-4e4f-bfa6-1c3ebbcf24e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f467600a-e9ce-4aee-973b-f02b00183a8b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9053c7da-d060-4cca-9717-7ed132d5b74d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df3254cf-04a9-4f1f-9f47-14c85ca9a8a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f247c1b-3949-4408-9745-18b65e751987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4e1ab9e-6fe7-412b-be72-5e93f1a800a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d45441e6-d185-4d29-b330-b0da29398f3c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf82df9-da74-4c63-bcc6-6daf8e2b285d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09282067-5c94-4373-89b5-ff1951a03ada"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4146634-3f0a-40c1-944b-60f4ef493cec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a1d4607-c550-415e-9d03-b4c15eccad21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa129be1-7844-4a34-becc-9f8fffb661b1",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25543695-8492-41ed-9329-14b799b71201",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55cb6e0c-9df6-490c-b15b-eb5c9913dd33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f52546c-62f2-4d67-9635-21338f568a3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60d384e3-0bd4-4153-86b8-0c38baeb2fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0622da6-fc44-44d1-a4cc-1c2b5c162067",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df50d475-b688-4880-a77f-7465dfc781e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f997264a-7331-461c-b1ff-d6b01b6652f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1ba35b5-a352-40e7-a3de-8c60e26e9886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da466061-5e25-4183-b0a4-54a7662dbea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc123d7-38d5-4f60-b500-26418e5c47eb",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3d8a7d0-4b2e-45b6-a29a-6f967d69530f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4041b36d-116f-488f-8eb1-246b19db746e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bfeccbd-e1e0-4961-8511-01f9f93f5ac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7793c638-f8cb-49b2-b766-9dd6b615cf80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8efe2242-9ba0-4258-8474-fa734ec701dc",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f73847b1-7f3f-49cf-9b7c-e6354acc5494",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26b5adc4-a6cd-4202-a8cf-d74b6e761299"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a7d85f-f276-4cea-a596-5b69e724dd18",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0961cf21-86f3-4057-8f7f-4478528d4e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f181d0d-179a-42f3-b520-5329a5bc9dcf",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c8c11ee-1ae0-40b4-b74b-e15a091525da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49f39cfb-9dc9-415b-acf4-db154f6bfdd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c584a52e-3891-4980-88be-2a77447cc1b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5385cd11-fa66-4159-888b-3c6ea4e6f8b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc31b40-04a6-4b4e-bc17-0c6d50055451",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e4161fd-0eee-4929-ac4d-eb18f9ddb168",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4c739bd-1de3-49aa-8747-b4cfffbf676e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb3279e-6a60-4e49-8bc9-0e6bb53066f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bbcd0c6-e0b6-458b-ab23-06d22fb30ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acacffb1-600d-434a-85d5-97ac88da521f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "666eb176-fc45-4900-bcdd-56b03e97452b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbdb1022-5538-42d0-ad24-3c5a282d25b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "425963d8-4234-4cc2-906f-d29d92aeb401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cafb0ef0-4707-45eb-be27-a699b6d9bfdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a4dd9e-0746-4f2e-940b-5fa81eca20eb",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae60707d-b748-47cf-b19c-1d4a7317692f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ed4c307-e586-4175-87a8-ec41eb09c81c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a281f972-98bc-4a03-a8ff-aaaa6cdeab75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2490e391-619c-4bf2-a9b9-ab676ef377ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "847d99b8-e2ac-48f2-89e0-f6998df66b59",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a3ac92e-1a2b-439a-b804-530f7726f7f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78186731-7ce5-47e6-bee3-1d8636fe0a22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e876968b-42ef-4437-9e30-cf2645d0c963",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e04d5c25-14b6-4fe2-b585-71b39373a8ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc7fcaa-1b07-4fea-8296-7e42e1f19fef",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1541c5-1df0-484b-8a0b-572147067ff2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2ef0f0a-8362-4246-8c3c-adea0f0cb1ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fdcf6f9-4886-43b8-9cdd-8f9484181917",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce1eb1b-fd8e-4b76-a616-c9543da8a6ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273e752c-41fd-49f8-a602-abbcfa681ed9",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ab04bd2-bb57-4227-8988-36eb1267c13c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7ea1daa-4f7e-4fe2-b6e7-2046ea23030e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "220c2fcb-ff28-44d6-8b99-04546a5488a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "381eda9c-968b-484a-87ce-cb58868b663e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d58910e-3465-4e21-a021-34a417a984c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5face4d-ed65-406d-988c-23ff327aee98"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c82ee677-6a46-447c-81da-f530dd31b1f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "55fad375-de8e-463e-8d0b-9e2897937c65"
                    }
                  }
                ]
              },
              {
                "id": "fcfbc3c3-bfff-44dc-988e-ebe15ebbb058",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8752949c-2ce4-4fa4-a56b-116c917da0b6",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3abdbb94-92b1-4e42-b9b0-67c039c218e2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "efda6bb9-0992-4b18-8964-c015e30ba347"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "442be99d-1401-40ac-bcef-116d8693facf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b733776-ff67-458b-88eb-de0c8fb4ad65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a607b2-0d8b-4587-b6e8-d4db44bc87e8",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "170b67d1-e025-4c19-883d-4ad6619a27fd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "fcc1e65a-e85a-4d8e-a095-fce7a637a873"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffed2a33-2bbc-487a-a652-79b04ea61a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "92b18019-a905-46f4-97d8-59687c108ad2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d5a3b69-a333-493f-89da-56504d785083",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c1a8425-6c8f-44d9-88b9-8d94af7b97d5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "df68c317-2870-49fc-84a4-e85e6069fb97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6d216faf-c451-4d49-9ddc-1716036d31e1"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "2d5e855e-2bb1-42f7-8e5d-7e88c8770868",
            "name": "Positive Testing",
            "item": [
              {
                "id": "42b5a7f7-73b5-429a-b179-fef93e4f24f2",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8deb2b8e-2f58-43d4-b6cc-fa0bebc61cf8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "985c021a-123b-4c81-8cb8-66ffefa8d0d9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "87869d01-b959-4d62-ae23-506d18816636",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3b3a2f8a-2299-4eb8-a363-2f004eba2ccd"
                    }
                  }
                ]
              },
              {
                "id": "98e5e9c4-3a99-4965-b5c1-8f31ffcfbd2b",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b877dd3-55d6-4162-a4ae-d02a568ef91d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8061ec65-b1e5-4633-a9e8-9f423298be17"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "297fa172-bff5-46e9-979d-508953df93eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a51a0929-4683-495d-b16c-8a399cf115d4"
                    }
                  }
                ]
              },
              {
                "id": "57fa03e5-4a82-4607-9303-588e10528f4d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "502e1bb8-30c5-41b6-a6f2-42e79bb9d110",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9bd56650-a57f-410d-94bd-9b665ab08eed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40be7d94-d09f-401c-8861-110d6f8b4f46",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28813143-7c4f-41a7-b633-28b65a187786"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0617de0-46e1-45a9-8b3c-027b1bff7d34",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "7a525360-b976-46c3-89c1-25e4b9a7e6aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba6bd45f-5e6a-40ab-951b-b66135f6befc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "11bad17b-cf11-4d9d-b0ab-4ddd9ac1fb43"
            }
          }
        ]
      },
      {
        "id": "929123d1-5f00-431e-9cd0-4e2d2e957e92",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d5b9968f-1735-4ab9-ba04-bed36bba0c39",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9baffd84-22d9-477e-8a87-bf9228a69281",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8c5e0aca-dd83-4716-9ca5-3387872b70de",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621b4fbb-1b82-4aed-ae41-9ee961cd1d96",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3c037b5e-9507-4d36-8f15-3a416b29f9b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b7d4aa-1ccd-454d-be26-23c02f841d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d26d6a9-1aeb-4a7c-94d2-7c6a6a9dc49d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57216dcf-87b4-4c06-96f9-b3b3ba3498ed",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd9eab91-0647-445d-8113-8deb40e713e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7b16006d-a5b0-4971-b1e1-ee663c1681cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "109c14f5-b0a9-4e12-befe-fc02f14fccf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "90b9bf97-2b6a-40d7-99bd-5a3bb0494c5f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3055c86-4b3b-422e-8a30-4934a6478a07",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8ef3a06-fd3f-482b-8009-1b6e23448405"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a115a8c-9070-4b62-9b68-d747cf5b0474",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6b39cfc0-9f71-4199-838c-9a5c0d64ec5d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ffc224d6-f2d7-42d5-8d69-756934682db5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2115dbfe-f06f-4cf9-be75-618943882b3f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1c0e13bf-db9a-46ae-9632-a324df1ee9eb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cb4a213c-a092-4962-adec-3a3bf54ff6eb"
            }
          }
        ]
      },
      {
        "id": "053ed4ee-e715-4333-b535-2595b5bf6b22",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "80377b0d-2124-4fac-8ef6-40b6d2d3cece",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9f520e87-6ed1-4fd9-8168-6d0c2708eef9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "672abbff-3b80-4d6b-ba48-88217a8cbc21",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b3da82-5618-4220-b9b4-80c4055e8c50",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "932bba60-4bfd-4b64-a2bd-5df822c23a10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a11b0f-7e94-496a-9342-c87f62750042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c42e0c5f-ab65-44a8-8ae2-6b1f9a2df2f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b6db236-1abf-47ca-b712-78601a31fb11",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f1f8726-f443-4a7b-8d24-adf98a96bbd4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e4c53181-41c0-40f3-8373-5f06534879ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff57291a-c2c3-4d70-ae23-b865aa2baf27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00c3b2ed-af13-4474-b70b-107cb7ae3df6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd121bbc-d8f4-49b5-acf1-9d64b7a55995",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca1ca395-2ef4-4382-8bab-e3cfcd6ef514"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4ce0881-6a1b-4dd3-96b7-f1e177cedfb2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e24128a-1dc1-4217-8b97-b414926b502a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9206d86a-3f63-48e2-8e89-fdf041439ab3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "909c3c04-f674-4c7a-81e5-68428b363f48"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "58938022-ad94-40c5-8a62-1753aaf9f8d3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ffcb0fa9-bbc6-4861-841c-861b86a84b7e"
            }
          }
        ]
      },
      {
        "id": "97a6c8d9-4851-4f85-8787-11eb6b89ea64",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d0193676-b994-4be6-a80c-d8bcb3db146d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0a72b763-685c-41f9-9f77-b2fae59b3668",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "274609d9-3cac-4977-9ef2-625625174f9f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec55a5c2-11be-4d27-9962-09c0ab6a768f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d2f553b6-ff24-4b8c-b99e-fedb2110f795"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a451ac-bf09-479c-adf6-9e9857a4402f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9c00da3-9f57-443d-a343-bcbe9aef982b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceeae08d-bc78-46f3-bb52-174c91b4b47c",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8186a81-bfae-420f-b906-ed3e85dacd3a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2f8e6141-fbaf-42f7-8039-0a2e1fa71fc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "421db146-cd04-4bc5-9aed-f201e5538bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "333f781e-5cee-4c58-bfd1-bd59e5fb3a26"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b31b07f-cae2-4227-82b5-43c1b1526346",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83243fc1-d6b7-4eb6-9764-dc72409367a1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c370674f-6aeb-43fa-a479-e69420c2e666",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d845e73-21a1-4420-bd12-9aabfc39b7e7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a48d0437-33b3-4fe2-b0c4-8dd8a61fc5df",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f9a9cf93-f80f-4703-aeac-1449ceafe0b8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "70d6c3cb-8f87-4ef4-8f8a-b581acc96769",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "93157990-9560-4bb6-986a-7025d5f79e90"
            }
          }
        ]
      },
      {
        "id": "45bbc2e5-25bb-49b4-ac2a-af6c34773dbf",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "517a8e7f-8fd5-4e7d-a811-5a0033c2fa7c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f7ef5532-1790-4a8c-9054-663a4ef94f1f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "38b612a2-ee3b-41a9-a4c2-a0f6f82164b9",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aaafb392-36fd-4c50-8d3b-3668a04ab405",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5adbd384-2bfa-4995-b7db-e7ee13c60d07",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 86
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 188.80769230769232,
      "responseMin": 6,
      "responseMax": 3330,
      "responseSd": 395.9196712651124,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1667091427515,
      "completed": 1667091487283
    },
    "executions": [
      {
        "id": "b31ace67-f15d-4517-8f2a-27712fb344f9",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f9e3e18f-c7e5-4ef7-9a90-cf7b9cc65ad9",
          "httpRequestId": "e8ef262d-1555-4a62-84d1-13b694d3d774"
        },
        "item": {
          "id": "b31ace67-f15d-4517-8f2a-27712fb344f9",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "47a89b02-d5f2-4d50-bdf4-d833a65e48c4",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 0
        }
      },
      {
        "id": "aac34b99-5286-4461-8f67-621db6f21338",
        "cursor": {
          "ref": "d9253f55-831d-427b-997f-c72c1d7aa596",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "60b46c53-ba0f-402e-ba2e-1302f3da6312"
        },
        "item": {
          "id": "aac34b99-5286-4461-8f67-621db6f21338",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ce14f5c5-b0ab-459f-a36f-9faa4501d85f",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "d900b61b-026a-4d67-970d-fef1933d8130",
        "cursor": {
          "ref": "1bb142ec-22a2-499a-9035-8d2152b9f124",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7a57a193-21f1-44e7-a6d4-8094d567c90d"
        },
        "item": {
          "id": "d900b61b-026a-4d67-970d-fef1933d8130",
          "name": "did_json"
        },
        "response": {
          "id": "6bdbca6b-730e-4195-a62b-7245af8b84d3",
          "status": "OK",
          "code": 200,
          "responseTime": 1491,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d24972d-d67f-4c9b-bb60-90aefa9539f6",
        "cursor": {
          "ref": "1df0e671-dd27-43da-a32d-76d756f8989a",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a9a7fbfc-525a-4bb7-8b89-fb9777a24218"
        },
        "item": {
          "id": "0d24972d-d67f-4c9b-bb60-90aefa9539f6",
          "name": "did:invalid"
        },
        "response": {
          "id": "5ce1dba6-624d-4203-ac90-25ea435494b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d24972d-d67f-4c9b-bb60-90aefa9539f6",
        "cursor": {
          "ref": "1df0e671-dd27-43da-a32d-76d756f8989a",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a9a7fbfc-525a-4bb7-8b89-fb9777a24218"
        },
        "item": {
          "id": "0d24972d-d67f-4c9b-bb60-90aefa9539f6",
          "name": "did:invalid"
        },
        "response": {
          "id": "5ce1dba6-624d-4203-ac90-25ea435494b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24f092e-a24b-46db-9a6f-eacd70957b12",
        "cursor": {
          "ref": "28a6821c-286f-454c-ac63-0fd74622fec1",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d7ead5c3-f590-4604-b8d2-ba5f098c7edf"
        },
        "item": {
          "id": "b24f092e-a24b-46db-9a6f-eacd70957b12",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "92aceb5f-4589-42a1-b677-dddcd81a2f1c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 283,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff578b8e-7cd1-4266-a021-45e9aea59b2c",
        "cursor": {
          "ref": "aa65a62e-3ac3-4bde-b58d-1d1f576942d4",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9445f6c2-e9f8-43c4-bdc3-ade88558d966"
        },
        "item": {
          "id": "ff578b8e-7cd1-4266-a021-45e9aea59b2c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "62670ab3-3f06-4a15-9423-1d643dcf1a82",
          "status": "Not Found",
          "code": 404,
          "responseTime": 52,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c12b944-3bfd-4094-8ece-a23fd30677d5",
        "cursor": {
          "ref": "ceac469c-adc5-436d-9a40-8e2547ef9bda",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e57a90b3-6cee-4d7b-95b1-250a4e8b7366"
        },
        "item": {
          "id": "2c12b944-3bfd-4094-8ece-a23fd30677d5",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "09ba08ec-b91b-4f32-b7f8-a6492d80b426",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d93471a3-58d3-4ddd-a04d-2b392c6bb596",
        "cursor": {
          "ref": "44f9cf92-b0b9-4b84-9d89-c16cffe10652",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8dbd7dc7-d5da-4c46-9370-c1dafac58874"
        },
        "item": {
          "id": "d93471a3-58d3-4ddd-a04d-2b392c6bb596",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c65c6e8c-68a5-4ccc-9ecd-5f14757b5721",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 23,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d93471a3-58d3-4ddd-a04d-2b392c6bb596",
        "cursor": {
          "ref": "44f9cf92-b0b9-4b84-9d89-c16cffe10652",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8dbd7dc7-d5da-4c46-9370-c1dafac58874"
        },
        "item": {
          "id": "d93471a3-58d3-4ddd-a04d-2b392c6bb596",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c65c6e8c-68a5-4ccc-9ecd-5f14757b5721",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 23,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1d2f5e5-7b4e-4a9b-9c23-8d7e5e766b71",
        "cursor": {
          "ref": "958883e8-7f81-458e-96a1-eb6b32f6ffe6",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f1d176bf-a59b-43e3-9991-457b95ee2624"
        },
        "item": {
          "id": "a1d2f5e5-7b4e-4a9b-9c23-8d7e5e766b71",
          "name": "identifiers"
        },
        "response": {
          "id": "ace2b6f7-c74b-47f5-8b1d-182657bba2d0",
          "status": "OK",
          "code": 200,
          "responseTime": 308,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd3ceec-6771-4c0e-950d-46747dbb1f66",
        "cursor": {
          "ref": "7b98aa7d-3eaa-4904-8af6-67c11b77605a",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5c9853fa-7f71-47e8-a8ee-395f6c4860e0"
        },
        "item": {
          "id": "bfd3ceec-6771-4c0e-950d-46747dbb1f66",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9c2fd27f-475e-41af-a8aa-e413b0e82df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 425,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd3ceec-6771-4c0e-950d-46747dbb1f66",
        "cursor": {
          "ref": "7b98aa7d-3eaa-4904-8af6-67c11b77605a",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5c9853fa-7f71-47e8-a8ee-395f6c4860e0"
        },
        "item": {
          "id": "bfd3ceec-6771-4c0e-950d-46747dbb1f66",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9c2fd27f-475e-41af-a8aa-e413b0e82df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 425,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0d177a-dc42-49b3-b2c0-61b52ae67bb1",
        "cursor": {
          "ref": "5a6b02fc-3ae4-4d90-9ebe-d389a445b3f2",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "602cc7cd-48af-4ccf-a6fe-2b0389f20557"
        },
        "item": {
          "id": "7d0d177a-dc42-49b3-b2c0-61b52ae67bb1",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "ec3b2bdd-9c20-4d64-8163-0b16c3855caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a0b57ea-965d-4de5-9822-6ba71e4b62fd",
        "cursor": {
          "ref": "6de72425-0693-4add-993c-ec77fd3fa2a4",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2cf37155-b5a6-439b-8097-b40c536d4fc4"
        },
        "item": {
          "id": "6a0b57ea-965d-4de5-9822-6ba71e4b62fd",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9947ceae-b28b-448b-bfd3-70ff3c6b3fc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd80aa7a-ee21-4ea5-afbe-cf8a741c3261",
        "cursor": {
          "ref": "365ce986-4528-44c6-861b-949fb123a459",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7163ba2f-9361-4812-a0bb-46375ad245ef"
        },
        "item": {
          "id": "cd80aa7a-ee21-4ea5-afbe-cf8a741c3261",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e04b4460-27db-4fb4-939c-5ecec968705a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee49f4d6-87bc-478b-b0de-8dc9baf5371a",
        "cursor": {
          "ref": "2ca27204-5b9e-4cc8-8fd6-ce6eb9242e0d",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a011a571-8b1e-4e09-96fc-9d9c9ab76615"
        },
        "item": {
          "id": "ee49f4d6-87bc-478b-b0de-8dc9baf5371a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d4b2a940-ab44-40a0-935d-9911c42f13af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae852992-1caa-4858-92a4-99bb4676e308",
        "cursor": {
          "ref": "35238b60-4593-4ab0-bfa9-04a64a45e602",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ec92c232-512f-4c41-9f18-dbb529c81653"
        },
        "item": {
          "id": "ae852992-1caa-4858-92a4-99bb4676e308",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "e5f7de3f-fa6e-4cb3-863a-5bd0e810e07c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae434df-2220-48a6-b8dd-bb7804b65bb5",
        "cursor": {
          "ref": "976b03ac-dabf-4b04-a15a-ebaf75ea6cd0",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8d782f3a-8e46-4571-b2d9-6eee431c6c64"
        },
        "item": {
          "id": "dae434df-2220-48a6-b8dd-bb7804b65bb5",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "33749d44-f00f-4372-8ad7-058c58b8bcc5",
          "status": "Created",
          "code": 201,
          "responseTime": 2330,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "e89e6a91-0cfa-4e83-9b20-38edd08b88cb",
        "cursor": {
          "ref": "a12b6813-da1e-4f4a-9e9b-d15f8a6d5be8",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "91c268b4-c73c-4a55-9039-0e7e8af80f37"
        },
        "item": {
          "id": "e89e6a91-0cfa-4e83-9b20-38edd08b88cb",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "bd2fd1ae-fda6-4dd7-aeb7-8333b1652a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461a1084-9a44-40e0-89ca-8ddaaf49acd5",
        "cursor": {
          "ref": "366d0e5f-09bc-44f0-9840-a0d8b29b0395",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c8754a40-3a04-4ab7-8cfc-e749dc164b46"
        },
        "item": {
          "id": "461a1084-9a44-40e0-89ca-8ddaaf49acd5",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6337f76e-8e30-4053-b1c2-88dda8cec150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4184397c-35cf-4128-94b6-1ac55d99b5e0",
        "cursor": {
          "ref": "182eb7fa-87cd-42ef-959d-128c3166629c",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "451f74fa-3354-4c22-ac09-2ff3a40c4fb8"
        },
        "item": {
          "id": "4184397c-35cf-4128-94b6-1ac55d99b5e0",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "09a1688e-b3c7-42c8-9885-369f7c126b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "604dc263-814a-4718-969b-3c24016ebb0b",
        "cursor": {
          "ref": "c7c1f805-03d5-47c7-bb60-551edf819900",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ea26e4de-9034-43bb-bf01-982c87d5d33f"
        },
        "item": {
          "id": "604dc263-814a-4718-969b-3c24016ebb0b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "006dc219-03eb-4f8b-b714-fa5f1b92e3c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba537f5-fab0-4596-be31-9b6f582a4f8d",
        "cursor": {
          "ref": "91269000-611d-4ebb-b76b-6b701c1c3ce5",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2482d6a8-bab2-4b1f-9f63-412a1336bf34"
        },
        "item": {
          "id": "eba537f5-fab0-4596-be31-9b6f582a4f8d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ccd7fd34-8fb4-4775-8e0f-6b43b671e325",
          "status": "Created",
          "code": 201,
          "responseTime": 1003,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "4d501e91-6edb-4899-87ea-cede58920ba8",
        "cursor": {
          "ref": "5524d4ac-97af-4a46-a767-665381c7f934",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "776c3bd1-b683-43a2-acdd-d6df30dfa61a"
        },
        "item": {
          "id": "4d501e91-6edb-4899-87ea-cede58920ba8",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a1da0850-76b4-4f5f-be23-53fcb2164116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b33baac-f9f8-4119-89cd-72c2f67cd38a",
        "cursor": {
          "ref": "d69bb99b-da03-4f17-97d7-f47b027d415c",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a13a09be-8caf-4c1a-8fef-e94297bf7e83"
        },
        "item": {
          "id": "6b33baac-f9f8-4119-89cd-72c2f67cd38a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "dca15e77-d5a2-43d4-ad27-f2c356f67aaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fbe1b3a-60e1-457b-8e73-48a09ed87972",
        "cursor": {
          "ref": "833c4318-8151-4978-a1f3-3c0c2fa62ab1",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a462d4a3-913a-421e-9b05-9f7ee84ad8e9"
        },
        "item": {
          "id": "1fbe1b3a-60e1-457b-8e73-48a09ed87972",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "fa0591a9-424a-4474-aa06-c48332227680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13e903c8-5927-4af4-b1bb-2c9beee51c09",
        "cursor": {
          "ref": "c90ac45c-478c-4277-9120-486f46d233d1",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "45b74f32-384b-4f7f-a3d2-20a0ecca3269"
        },
        "item": {
          "id": "13e903c8-5927-4af4-b1bb-2c9beee51c09",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b6a42a93-e313-427f-9cea-cb7b55888905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b774da4-78d8-4183-bd30-cff6b4f28e1b",
        "cursor": {
          "ref": "32848125-3c04-4920-ac2e-f1123c950a13",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f7a4f50a-3fd6-4c75-859e-b595353df36f"
        },
        "item": {
          "id": "9b774da4-78d8-4183-bd30-cff6b4f28e1b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e7d649c2-5a08-45d9-809c-c879734d4319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd19fc7-4691-4289-97a7-8f55dd91a12f",
        "cursor": {
          "ref": "7f9db402-4b75-4adb-8e52-dd99fb50f9c3",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3e77b8d7-0cb5-4fe4-a4dd-b0065710e6ef"
        },
        "item": {
          "id": "bfd19fc7-4691-4289-97a7-8f55dd91a12f",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "930a90be-f7a0-4db3-ad54-74dd4022b3f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aac9931a-e3b7-4fbc-baa7-ce479fe35b68",
        "cursor": {
          "ref": "be2c5689-d3f9-4bee-b259-bb2ddec10433",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "025b3e93-f00d-4bca-9e0a-5d05dcf2c34b"
        },
        "item": {
          "id": "aac9931a-e3b7-4fbc-baa7-ce479fe35b68",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "0c6a6deb-8c0c-4358-93db-456bcc5427cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af0fc76d-852a-473d-939e-d84e7bdcae52",
        "cursor": {
          "ref": "98b7c0c6-d9a2-4f2a-a845-406ada718c9e",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "34bb1950-4743-42d4-b441-ce33c14fd6ff"
        },
        "item": {
          "id": "af0fc76d-852a-473d-939e-d84e7bdcae52",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d18427f9-30ab-4a89-a389-345284c8e853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70284775-24d2-4164-aac6-2fad28666311",
        "cursor": {
          "ref": "2d02b499-25d3-48ab-b604-ef4566baa3c4",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f0420bde-1c6d-4536-8537-f82a91c6d900"
        },
        "item": {
          "id": "70284775-24d2-4164-aac6-2fad28666311",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f2bedb09-7620-44f5-a799-fc764a4c9009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5d3322d-a085-4a4d-b461-489894741840",
        "cursor": {
          "ref": "d64d5c88-1b36-4cdf-935b-976dfea0af15",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ab91f286-a9de-417b-8514-c96535258aab"
        },
        "item": {
          "id": "f5d3322d-a085-4a4d-b461-489894741840",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "0b9dc89f-6deb-4489-aec1-b8e7c7872eed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b706eeaf-612d-48e1-811c-32e3ff37efca",
        "cursor": {
          "ref": "6e1df158-5b79-4d14-8007-21a7b2759bb3",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1f22e9f7-e6eb-4b06-b9f5-028eaa0b6bc4"
        },
        "item": {
          "id": "b706eeaf-612d-48e1-811c-32e3ff37efca",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f3805031-494f-4102-a76c-dd357cb74497",
          "status": "Created",
          "code": 201,
          "responseTime": 1753,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "216f41a8-3c6f-4764-abb1-1efe73e1d620",
        "cursor": {
          "ref": "5baf5541-cbc5-48e6-90b0-ebe71afbc060",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "05486797-f619-4523-9637-5aad567edb07"
        },
        "item": {
          "id": "216f41a8-3c6f-4764-abb1-1efe73e1d620",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "82fe81e0-c4e8-4d59-8879-ca3ea76bb7db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae249664-392f-40a8-a92a-414e2c68ec29",
        "cursor": {
          "ref": "4a0d7b5c-f2be-4d05-9255-3e97d347bb57",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "553a07b7-2313-41eb-9bbd-cd549d1f44b9"
        },
        "item": {
          "id": "ae249664-392f-40a8-a92a-414e2c68ec29",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "24469353-cadc-45da-9949-9d1ac0e4f393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "803b9a63-4784-448a-961f-b14d1c78befc",
        "cursor": {
          "ref": "1a4a446c-590e-40c1-8423-a10fc2cade17",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "fa06a113-e09f-4d6c-8c21-da495cf27762"
        },
        "item": {
          "id": "803b9a63-4784-448a-961f-b14d1c78befc",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3ab27447-9549-430e-9d80-3ea64fbfde2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4fb794c-6eea-43d7-b917-4412803418c7",
        "cursor": {
          "ref": "3089ddae-4a25-4dfc-8dfb-633948dab4d1",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "967fd806-7a59-4788-bfb7-a1b9b831f0f6"
        },
        "item": {
          "id": "d4fb794c-6eea-43d7-b917-4412803418c7",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "3eb5543c-cc63-4fda-9892-3310e9473773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d475bf0-d9eb-480f-a32d-5df66e1dafa9",
        "cursor": {
          "ref": "9392a339-5dfc-4804-b13e-3159c72e5b29",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "256cdcd4-3db9-4e15-97f1-b03b70b99637"
        },
        "item": {
          "id": "9d475bf0-d9eb-480f-a32d-5df66e1dafa9",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "37c0ec89-3418-4a20-aa82-c457d46fd24a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c2c10d-c53a-438c-808b-d3d9a765c872",
        "cursor": {
          "ref": "d3be1bf2-1df8-4d98-8fee-5a3bf65b1ea0",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "622bc5eb-39d3-44a3-966d-d65d59b3ad23"
        },
        "item": {
          "id": "53c2c10d-c53a-438c-808b-d3d9a765c872",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "acfa8b2f-b544-47f3-a0e8-e4b30db46c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba324e5-6c96-4971-9764-eaae2e5342e8",
        "cursor": {
          "ref": "eecd02c3-06bd-4eb0-adac-afff32eb43ef",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ee71214f-0177-4667-8183-75eecd518662"
        },
        "item": {
          "id": "eba324e5-6c96-4971-9764-eaae2e5342e8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "5dfbe7ce-d23d-4a4d-be16-02448239ecb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae539665-0309-4406-9c1a-4c6df9b7a849",
        "cursor": {
          "ref": "cf6cc49e-114e-44b1-a491-5e8a2eb36c36",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "47471690-a9ba-4811-b19d-3e307d843ce6"
        },
        "item": {
          "id": "ae539665-0309-4406-9c1a-4c6df9b7a849",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c1ccf959-25fd-4394-b7fc-5ea53bd883e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b399ff2-bf68-436a-a830-880bc8f9833a",
        "cursor": {
          "ref": "7dad48b6-6850-42e0-8ad9-005214305283",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "fd9fa2af-a61f-4d68-8d5b-a7c706e449b6"
        },
        "item": {
          "id": "0b399ff2-bf68-436a-a830-880bc8f9833a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "40f8d085-64eb-4665-888c-bb3f2a5c64f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0efdb2-180c-4533-b9c9-6de2e7e1c6a6",
        "cursor": {
          "ref": "877e5d83-da40-4524-9cc9-934633346bdf",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "59e97382-8be5-4233-a2f1-c70484b59a6a"
        },
        "item": {
          "id": "7d0efdb2-180c-4533-b9c9-6de2e7e1c6a6",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "99af27e2-a475-4c28-962a-b83b225ba3f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7bc8959-0931-492c-91e3-65f5ff7082b3",
        "cursor": {
          "ref": "a415003d-346e-47b4-9f0e-2af17ccd08f9",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "65ed5ceb-1eaf-4a8e-b0f0-9b01c48763ea"
        },
        "item": {
          "id": "d7bc8959-0931-492c-91e3-65f5ff7082b3",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "0d6bb013-7c6f-4ff9-bda9-bc8bf8d16e86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 180,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59bc3282-4fdb-4819-a6c3-747638346bbd",
        "cursor": {
          "ref": "c7c800e3-6602-45ec-ae01-142754425410",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0a925597-e1e3-4657-9a94-50a390d04565"
        },
        "item": {
          "id": "59bc3282-4fdb-4819-a6c3-747638346bbd",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2621d79c-3383-4ec9-8a15-6e3894445f1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29cd072b-7e43-4488-8498-037d7e506ee8",
        "cursor": {
          "ref": "8d380f2a-4b47-40e9-915f-cf1888bdcfbb",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6469e96a-447b-4162-8d58-b5cdc6794534"
        },
        "item": {
          "id": "29cd072b-7e43-4488-8498-037d7e506ee8",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a3e846f8-218f-4795-b240-fd493ed01bf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 337,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ff8f17d7-d1f5-42d6-9b11-35aec7db56e9",
        "cursor": {
          "ref": "fd963e2d-a1e4-445e-b234-fc3d25e9a526",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3021d5f1-4378-457c-abdb-24c9cfec8d7c"
        },
        "item": {
          "id": "ff8f17d7-d1f5-42d6-9b11-35aec7db56e9",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2828b612-1887-4bcc-955a-807871071f8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d4a4027-ff39-42f4-9b82-38ca21cd5380",
        "cursor": {
          "ref": "4b51834f-128e-43c5-9969-8df3ca74cda1",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "79943b00-d02e-4037-a5ea-297714b081df"
        },
        "item": {
          "id": "2d4a4027-ff39-42f4-9b82-38ca21cd5380",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "5b37e13b-2481-44f7-a0e8-040deab31f88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a9da50-e5ec-4c47-941f-e4b974e04edb",
        "cursor": {
          "ref": "15bce241-774c-4c07-9334-d41e89b81669",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "cd00d996-7c1e-49cc-94af-ef50e4dba4a6"
        },
        "item": {
          "id": "57a9da50-e5ec-4c47-941f-e4b974e04edb",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "3ac1293a-e9d9-4c6e-8e1a-95fbc6cb9cea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50275076-74c6-46ee-a78f-e73cdf0c1e70",
        "cursor": {
          "ref": "e7095415-08c8-41e5-aa4a-d1befa7bb5c9",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d465b946-3076-40fc-8976-cfd8d6772b4f"
        },
        "item": {
          "id": "50275076-74c6-46ee-a78f-e73cdf0c1e70",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e2249610-f0c2-446e-ab02-2102a585be4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3372159-d76f-4c09-9c07-c57e8bcb03d9",
        "cursor": {
          "ref": "5a2dae25-0594-4c19-8655-afff01f3cc58",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e42b3b7f-6946-45a3-ab5f-e70762c9a845"
        },
        "item": {
          "id": "f3372159-d76f-4c09-9c07-c57e8bcb03d9",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d6994c7e-f8aa-49d7-acb7-f339862f58f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad46ee8e-8183-4f94-a481-ccb6e4e8e099",
        "cursor": {
          "ref": "2674c86e-bc46-4688-af78-d5a1e5c53c15",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "cec5977e-2945-4f83-946a-bf34e300a318"
        },
        "item": {
          "id": "ad46ee8e-8183-4f94-a481-ccb6e4e8e099",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ad68f0a7-3cee-4cce-9238-0c74c7f218c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "716e21d5-d29c-4b98-884c-3e90af1e1f16",
        "cursor": {
          "ref": "7d0a4414-8ef2-4249-a827-309f53531df9",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "7d9b521d-ef06-4cf0-ae48-d08fef9da544"
        },
        "item": {
          "id": "716e21d5-d29c-4b98-884c-3e90af1e1f16",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "515b1e86-f044-4211-b6b5-755e18c9b8d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 393,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "40692439-2a7e-45f7-ae3c-bb8dc3803d5a",
        "cursor": {
          "ref": "75fc3d8a-db42-4537-ab98-7d3f97d065fc",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "cebcac30-9a5e-4c78-a786-04ac9619540f"
        },
        "item": {
          "id": "40692439-2a7e-45f7-ae3c-bb8dc3803d5a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "72c9c959-1b91-4deb-b597-769d4d84f92e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a085c24a-0407-4190-8808-af07b3c82611",
        "cursor": {
          "ref": "c45f7fef-9fc1-4f01-a6cf-87329d4e387d",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1d57ab52-0549-450c-8b97-8ed6aabc4391"
        },
        "item": {
          "id": "a085c24a-0407-4190-8808-af07b3c82611",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "7b7a8087-d217-418e-a8b1-4df2d9573f05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445ca68b-a50c-4eda-b45b-cb8b23b5d5d1",
        "cursor": {
          "ref": "08e137e3-1727-4ef4-9699-6bb7f28cf4cb",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "2b5f4b8a-31fe-40c4-b9e3-09c85e28b317"
        },
        "item": {
          "id": "445ca68b-a50c-4eda-b45b-cb8b23b5d5d1",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "86c1f0b5-b5ae-466c-822c-d2cd086d5f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a1f559-3138-4803-9d58-bcb4c66aa72b",
        "cursor": {
          "ref": "ecfb0d2e-d361-4daf-bc5e-874467427057",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "9928b81d-e1f1-46bb-9385-075e066ec871"
        },
        "item": {
          "id": "80a1f559-3138-4803-9d58-bcb4c66aa72b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ac68833b-bc7c-444c-a921-4c7654a3800a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0725657a-f9f0-4cc8-b58c-ee37f070365c",
        "cursor": {
          "ref": "c87312ee-89d1-472b-9d84-661967fc613d",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ffcd8ec0-8da7-4889-aa58-0a833badd2c8"
        },
        "item": {
          "id": "0725657a-f9f0-4cc8-b58c-ee37f070365c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "03ee649e-ce76-4c9a-804b-c5721c3096e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03031b1b-0fdd-4765-9376-d3c80d8203d9",
        "cursor": {
          "ref": "39aa7884-1196-4451-8354-c9bc5cb005e0",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "16b275c5-d535-4390-bfd6-a670e41fe947"
        },
        "item": {
          "id": "03031b1b-0fdd-4765-9376-d3c80d8203d9",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9afc33d6-463e-4417-af14-b66ab227804b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9000e19a-1d79-4ca5-8ebd-f0eccb11ddd8",
        "cursor": {
          "ref": "2d050e00-b016-4ffe-85e0-d65477a05ddf",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "1477001a-db38-41a2-af14-fd2e63e10c85"
        },
        "item": {
          "id": "9000e19a-1d79-4ca5-8ebd-f0eccb11ddd8",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0c32be37-be50-49e2-bd9e-d10cdce602cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aded1f9-f04c-4c3f-9e5c-e22899dd4808",
        "cursor": {
          "ref": "ba485647-3ab0-4bbf-a790-2f7db85f5ec0",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "bead756b-a7a0-4e4b-a665-ae32e5ab8408"
        },
        "item": {
          "id": "3aded1f9-f04c-4c3f-9e5c-e22899dd4808",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "b7864b98-e7f4-411a-89ec-b92e53d330fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ed43ea-f873-4395-befe-87675ad87196",
        "cursor": {
          "ref": "acffff95-06c0-4df2-bfe3-b7719b601196",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "2d6f2b7a-ca24-4e8c-b923-8d7b3352a3b8"
        },
        "item": {
          "id": "73ed43ea-f873-4395-befe-87675ad87196",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e69e4b03-fe22-4243-b7d6-198b03a10cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60ec272c-d5ce-48cc-968e-f50206a8ec05",
        "cursor": {
          "ref": "2cf2602a-f2f8-4fc0-8bba-e8ae714c8f00",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "7ea28917-8ea5-486e-bc90-c99445158cc6"
        },
        "item": {
          "id": "60ec272c-d5ce-48cc-968e-f50206a8ec05",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a4fc628f-b4e1-4991-a4f4-a52fd36ced61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9388639c-aea4-4195-a27d-076b25bc5f18",
        "cursor": {
          "ref": "bd3c9ad8-4671-400b-9d2a-bbeb933dd6cd",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "17d2f16b-a662-4f3d-b18e-62cc606f30b2"
        },
        "item": {
          "id": "9388639c-aea4-4195-a27d-076b25bc5f18",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "383d32bc-3ec2-467e-90be-bcef4c1540f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3fc15f3-4280-4fd2-ac14-ef189e2b2174",
        "cursor": {
          "ref": "2c0f590c-b54c-4856-a842-aa35e678ce73",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b9b9b9b8-38b8-4f19-8334-622ff43c6d17"
        },
        "item": {
          "id": "b3fc15f3-4280-4fd2-ac14-ef189e2b2174",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8972cbd0-9789-4ff5-add3-3eb06cc42edc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ffb7ff-1e45-4860-9b46-e894cbbc55ad",
        "cursor": {
          "ref": "00da5163-bc24-47ff-998e-b59f2fcec85d",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d61f0754-8f9c-4323-8f52-f1fa991746be"
        },
        "item": {
          "id": "c0ffb7ff-1e45-4860-9b46-e894cbbc55ad",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "4b8a9d79-8fe4-4964-bf3b-851162ffcc61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dae4ad9-54f5-43fa-99ac-6d4594f8d308",
        "cursor": {
          "ref": "88ee99de-2f88-44f0-9c11-8f29736fe557",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "21bbaa9f-e020-4768-b3c0-76579f6c80e6"
        },
        "item": {
          "id": "6dae4ad9-54f5-43fa-99ac-6d4594f8d308",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "89a833a8-a8e4-422a-9b4b-6a7c9dbb65a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed9fc468-a3f0-4168-b684-4532d1c21455",
        "cursor": {
          "ref": "7002b88a-8301-4b29-982c-9e28a91f2afb",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "578d8ef9-043a-46aa-bda7-427ac76ea4bd"
        },
        "item": {
          "id": "ed9fc468-a3f0-4168-b684-4532d1c21455",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "0c3f2c84-7bd8-49b3-8ba5-b8c4fa28d273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f476f8-ea77-44dc-843c-c406040a0d73",
        "cursor": {
          "ref": "6e711446-af8d-4183-83ed-f11f740ebaf6",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "4c665948-1301-49de-9492-aaec47224596"
        },
        "item": {
          "id": "a8f476f8-ea77-44dc-843c-c406040a0d73",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b00e6735-1cb9-47aa-8961-3f4a7cbb67c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e3bab14-4917-4421-a323-b37e2ff135b8",
        "cursor": {
          "ref": "e951b580-ead6-4940-ac22-7b039989864a",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "4c5511c7-534c-41a3-a0e6-1ef94ed595d6"
        },
        "item": {
          "id": "9e3bab14-4917-4421-a323-b37e2ff135b8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "99615cb2-f0c4-4473-a72a-42e55e06b1dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10545ae3-28b2-4474-a0ef-498e51d0d395",
        "cursor": {
          "ref": "6422a53b-be68-4705-9766-37f492109e37",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "76502052-b61d-4511-aa90-e93b46c4b595"
        },
        "item": {
          "id": "10545ae3-28b2-4474-a0ef-498e51d0d395",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2ddc9bbd-7f65-4c20-a230-b815b6ab3de0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d05d4bb-4d9c-4214-a52f-57de530fde49",
        "cursor": {
          "ref": "a348b2a7-f786-408a-8551-94080f77371a",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "6112d7a1-e546-43f0-be74-8010b5afc9fb"
        },
        "item": {
          "id": "6d05d4bb-4d9c-4214-a52f-57de530fde49",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "b5b6999e-e64d-421d-ba48-0f94cc40afea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "356240b1-10ac-4e29-a644-55fcaa94e727",
        "cursor": {
          "ref": "3cbb3801-7a5c-4737-aa57-e95b0f7e550b",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "07baafbb-2e04-4fd8-9273-26bfccd78d0b"
        },
        "item": {
          "id": "356240b1-10ac-4e29-a644-55fcaa94e727",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e7ff9467-78af-4f23-900d-1447ff27a350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b260bb95-c7f1-4424-9f2e-ba2401585af0",
        "cursor": {
          "ref": "49064edc-4c7a-4641-9fe2-334617966231",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7f4a2495-1846-4e90-98fc-a47bce4c60d0"
        },
        "item": {
          "id": "b260bb95-c7f1-4424-9f2e-ba2401585af0",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "b4933cec-3706-4e5f-86c6-9126007bbabb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b2ca02b-583a-4049-80c2-3130c2236804",
        "cursor": {
          "ref": "84b620d7-ccca-49bd-abd2-d0b19b005b1b",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "87d7fe3e-6171-44d8-a1ad-f0e3fb9cdfe8"
        },
        "item": {
          "id": "4b2ca02b-583a-4049-80c2-3130c2236804",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "41a63231-649d-49ac-8e14-d30d83d9d7d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8934acb2-168d-4321-955c-78330cd5b32c",
        "cursor": {
          "ref": "682d8c06-a7e6-4f8e-ad7e-a8b8f0be50c5",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "7cdd572d-e635-4f4c-b492-4adf996bc64d"
        },
        "item": {
          "id": "8934acb2-168d-4321-955c-78330cd5b32c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0d84e20a-5b91-47d7-944b-3150fb6463b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e630da-22fd-4851-b3d4-43e86874ed15",
        "cursor": {
          "ref": "58b2b67f-1b3e-4382-a4e3-11fb339716ee",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "0173e1b7-1a9e-4ab2-b951-70bfada47c4a"
        },
        "item": {
          "id": "62e630da-22fd-4851-b3d4-43e86874ed15",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2bfff80a-e117-4cb6-9caf-48d2a1a378cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "669c0867-8af6-414e-add6-cf837d0301cf",
        "cursor": {
          "ref": "3cb16974-ccae-4e05-9e0c-fe4b91f13d16",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ef7dbd1d-9bdf-4e98-bb4c-e46d2305cf82"
        },
        "item": {
          "id": "669c0867-8af6-414e-add6-cf837d0301cf",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "98486ec4-4b16-46d8-a891-d5da0423ea1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ed63eb-1692-4783-a519-2832193016eb",
        "cursor": {
          "ref": "1ed52dd9-2d47-495d-9d28-e462dbc4648f",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "2dde461c-bce9-40d2-84f7-b3c9f6ffb3fb"
        },
        "item": {
          "id": "c0ed63eb-1692-4783-a519-2832193016eb",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e56c4c6a-4e10-433b-b605-327973dca1d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba866461-4239-4ba4-a7e5-8a58bb21df46",
        "cursor": {
          "ref": "e088d53f-ff49-4edd-a285-50f613dd767b",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5ad5cd20-4ec2-4a7c-b405-c76a3bdecf47"
        },
        "item": {
          "id": "ba866461-4239-4ba4-a7e5-8a58bb21df46",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "709f34ec-2081-4363-8ce2-3bd2d2f4197e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f73330e-dfee-4ca7-8591-585d22414a8e",
        "cursor": {
          "ref": "b218acb8-cbee-45cf-b6a0-a8e1051e51bf",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "99f66b6c-55c6-46fd-afe8-ef7185cc65a6"
        },
        "item": {
          "id": "8f73330e-dfee-4ca7-8591-585d22414a8e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "5bd8d020-005f-41d7-bd57-bf1503bfb03a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "818aa691-6c2b-4812-96ed-03e63e9ca1bc",
        "cursor": {
          "ref": "3f28e4c3-b54f-48e4-89fc-ddc7cd92e369",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "29314b44-17bb-4de1-ae50-d21b1b0a6faa"
        },
        "item": {
          "id": "818aa691-6c2b-4812-96ed-03e63e9ca1bc",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5daaa93c-a209-4b6d-9908-7925be0be5b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9003efe0-3045-42f5-9498-f80fe43ac00a",
        "cursor": {
          "ref": "1eda65be-aa43-48df-80be-6249a164e8cd",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e8c3bd5f-4de3-418b-aef6-f700283211f5"
        },
        "item": {
          "id": "9003efe0-3045-42f5-9498-f80fe43ac00a",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "11a26371-ed19-4011-a980-cebfad3f58ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bbef5c7-a7e5-4370-ac48-410329187934",
        "cursor": {
          "ref": "8b351b92-81f2-473b-b3fc-4f9580baec1d",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "925cb002-c228-47fa-a400-4dd7e4448839"
        },
        "item": {
          "id": "8bbef5c7-a7e5-4370-ac48-410329187934",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f8e8d48e-0ccb-4337-8c09-3fc0c8ec13ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1146,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dadf9dc-1c85-4209-977c-f5bf5ab5aca2",
        "cursor": {
          "ref": "e244f2f2-786f-4ca7-9ae0-55d1dda964a6",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "418f913f-5df2-4d3a-a480-184268e66ad7"
        },
        "item": {
          "id": "8dadf9dc-1c85-4209-977c-f5bf5ab5aca2",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8f386e4c-2e34-4a75-8e07-e26c966927dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af4a5e43-693d-44cf-9507-f5e10c96a10c",
        "cursor": {
          "ref": "adc8234d-5e8f-4dce-9c0a-21c3fa7fea9a",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "dc2ae4c0-1b71-4e31-8652-c5e9c75e281f"
        },
        "item": {
          "id": "af4a5e43-693d-44cf-9507-f5e10c96a10c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0b4be240-0e05-4cab-9031-966b3174d4ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c42bbf-3dd7-403e-98c6-d1fee5feb9ad",
        "cursor": {
          "ref": "31f8c53a-dd44-468e-b3f4-15a9055cad37",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "cd3742d5-bf9d-4c38-8a7c-f0777a892f35"
        },
        "item": {
          "id": "22c42bbf-3dd7-403e-98c6-d1fee5feb9ad",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "36a6d20c-fa7a-4773-9c16-2518f872f95d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a2cbb0e-e912-474e-828c-62c30da40fb9",
        "cursor": {
          "ref": "927a2207-a03d-49e7-8895-7c53f11b693a",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "78267f2c-7c61-412a-9b9b-4fa839e48fd0"
        },
        "item": {
          "id": "5a2cbb0e-e912-474e-828c-62c30da40fb9",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d5d259b3-8ec5-4ed7-a065-55b46366bb52",
          "status": "Created",
          "code": 201,
          "responseTime": 639,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "31e7fd7c-7cf8-44a4-8d7a-a3ead59289c1",
        "cursor": {
          "ref": "f3de1e28-50b9-46d0-99f8-fc6dabde8981",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "3b20df61-c230-4c3e-b35e-c3136a23023c"
        },
        "item": {
          "id": "31e7fd7c-7cf8-44a4-8d7a-a3ead59289c1",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "2eb7f276-684c-48f6-8614-1cae1342b417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96917366-ecc7-4192-bc2b-9a23432a3c25",
        "cursor": {
          "ref": "25c41d08-3021-484a-b7a5-b5cf11b95ce7",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "649ab884-7c2c-4888-931a-b0745e9b9661"
        },
        "item": {
          "id": "96917366-ecc7-4192-bc2b-9a23432a3c25",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "43aedb0a-1fa4-4b9c-940c-978e4c81d105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e36d2d-6032-4571-970a-7111289aa9cb",
        "cursor": {
          "ref": "0a59085a-2388-4f1d-afc6-3a5b6d1acba3",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7758a867-497e-4a09-9c7d-fa1a20a5f806"
        },
        "item": {
          "id": "f9e36d2d-6032-4571-970a-7111289aa9cb",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "836730f0-25c7-4ba1-97f1-c91f16788353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da3af20f-18ec-4652-8fff-d4298f565f3c",
        "cursor": {
          "ref": "5279f479-9181-4e4f-9c22-88e69d671437",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f5182cc7-c169-44d6-8a52-fbf6a7bd909a"
        },
        "item": {
          "id": "da3af20f-18ec-4652-8fff-d4298f565f3c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "9c33efc5-dc3f-417d-b733-070dc5e4657e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8870468-4ca3-4381-b977-ed0bdf9e0bcd",
        "cursor": {
          "ref": "47b630b4-3c99-4a18-9ea7-55e9de161d59",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "18a3094a-3463-48ef-9d15-0d15d4d60477"
        },
        "item": {
          "id": "c8870468-4ca3-4381-b977-ed0bdf9e0bcd",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "a158b6e7-01e7-457b-bf22-62a82fb9302f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bbfdf7c-3b57-4b0a-b102-d3403ea372a5",
        "cursor": {
          "ref": "c7e565f1-06fb-45eb-b122-df4143d97d2c",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "5a2b601b-6aaf-4770-8490-e8bf94e8df21"
        },
        "item": {
          "id": "6bbfdf7c-3b57-4b0a-b102-d3403ea372a5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e0845479-3536-45e7-a2b2-0421c9cf2e3d",
          "status": "Created",
          "code": 201,
          "responseTime": 1797,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "fb9ded04-4dc1-4ead-abb2-4010e2613dc7",
        "cursor": {
          "ref": "d20ebd95-be92-46f8-bcae-b6574d0c4866",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "827259cd-9a55-4a4d-8163-2a0e3b78c281"
        },
        "item": {
          "id": "fb9ded04-4dc1-4ead-abb2-4010e2613dc7",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8af8a279-499d-447d-8d22-541846f4d165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfefe58c-fa43-47aa-b224-92fbd8453092",
        "cursor": {
          "ref": "64264440-9e46-420c-bc87-840c9acfc9aa",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b214784e-ce9d-4fbc-b66b-9aa767754687"
        },
        "item": {
          "id": "cfefe58c-fa43-47aa-b224-92fbd8453092",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a5afe46e-95e3-479a-ac6b-9ae716ff4969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 841,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceacc673-a448-47c3-bc7d-a14aa9f204dd",
        "cursor": {
          "ref": "268e539f-910c-4094-bbc3-f5676fff1d38",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0946e485-60b5-4609-9f17-103dba7b7814"
        },
        "item": {
          "id": "ceacc673-a448-47c3-bc7d-a14aa9f204dd",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a9bd9e92-56f6-4324-8a25-cc82b36c72c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ee492d-0590-429a-9e33-9aa4668287da",
        "cursor": {
          "ref": "e028d54a-82e9-467d-a49e-e280e2c117cc",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6d278b7d-a90a-43c6-941d-79d692ff7bba"
        },
        "item": {
          "id": "59ee492d-0590-429a-9e33-9aa4668287da",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "aa1b08b6-59d1-41ed-9978-99b508371e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cfb040b-73b8-4cb1-9038-2c8db032b38a",
        "cursor": {
          "ref": "e569f395-326d-4465-bd22-fcfc4836891b",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c147eba4-9e12-417a-bd57-96d0fa0e8a8c"
        },
        "item": {
          "id": "8cfb040b-73b8-4cb1-9038-2c8db032b38a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "513da393-1cf4-4710-8b42-9de06bf6bcbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85ae1d62-7f8f-493f-bbd3-ed7423374f42",
        "cursor": {
          "ref": "b3216d03-feea-4978-84c3-79c625612c04",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4d727bb2-1051-4b68-bd12-bd9c525a0dce"
        },
        "item": {
          "id": "85ae1d62-7f8f-493f-bbd3-ed7423374f42",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ee7b7a91-8a51-4131-8c25-43795c4ef19d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d026da-50df-43ce-99f3-234cac234510",
        "cursor": {
          "ref": "b5e949ed-2831-4721-ab38-730a5f404c9f",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "083aaadb-5d59-4128-9266-bb15de8a2ecf"
        },
        "item": {
          "id": "79d026da-50df-43ce-99f3-234cac234510",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d560c14b-423b-42fb-ac75-af13b95efd86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52205db3-8a77-4c3e-8a1a-42a86eeff348",
        "cursor": {
          "ref": "23a93f7b-f915-4e11-9340-363dbc35654a",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "bf48bfc6-0cd8-47ce-956a-65cc93e40782"
        },
        "item": {
          "id": "52205db3-8a77-4c3e-8a1a-42a86eeff348",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "2d5f2833-6c9d-4a51-8340-6ca15cd3b21f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 283,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8a20ab6-bbef-4188-8f40-8befa4173d23",
        "cursor": {
          "ref": "061cd9cc-8198-4b66-b2bc-9cde7c8bf32c",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "53b560a7-3831-4b2b-a402-7804e0e185c4"
        },
        "item": {
          "id": "a8a20ab6-bbef-4188-8f40-8befa4173d23",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "11df371b-3a75-4451-b003-b2d8a9532c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "0211b029-6373-4cfa-9fdf-16e87185bf04",
        "cursor": {
          "ref": "0034194d-11dd-4618-93c2-370678e16d26",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c6d2f179-5a5d-4fb8-bfbe-6bdd0382872e"
        },
        "item": {
          "id": "0211b029-6373-4cfa-9fdf-16e87185bf04",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "eceb746f-c07f-4a1c-9cd4-aa15480c9b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "e47f4ded-6374-4154-8832-943663c13768",
        "cursor": {
          "ref": "ae8ce163-ae8c-43a3-944e-47c3d5d2c89b",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "fb864211-1eb6-4277-82ba-b896c1c5b491"
        },
        "item": {
          "id": "e47f4ded-6374-4154-8832-943663c13768",
          "name": "credentials_issue"
        },
        "response": {
          "id": "2b9cae9c-98fd-4771-8f04-4ca45684e321",
          "status": "Created",
          "code": 201,
          "responseTime": 777,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcced5c9-fb99-4995-b247-1e1208c78265",
        "cursor": {
          "ref": "8b2ff0d7-3894-408a-a2b7-4c2048b9a724",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7dab9234-915f-49b5-a688-b50d3108e9de"
        },
        "item": {
          "id": "bcced5c9-fb99-4995-b247-1e1208c78265",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "e0f6589c-e05a-481b-a573-44266c3664cf",
          "status": "Created",
          "code": 201,
          "responseTime": 501,
          "responseSize": 591
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f67e9af-a1be-4b20-9be6-5334ba501de2",
        "cursor": {
          "ref": "b84785d2-88f8-4b6d-900c-21a3389dbff4",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "768e0383-84a5-4b05-ac97-2255dd43b5c2"
        },
        "item": {
          "id": "6f67e9af-a1be-4b20-9be6-5334ba501de2",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0ac49ec9-94ee-41b2-8e39-04984e52df95",
          "status": "Created",
          "code": 201,
          "responseTime": 704,
          "responseSize": 537
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "af868e9c-2016-4bda-a4cc-4129cb0128de",
        "cursor": {
          "ref": "c7cef5da-73aa-4a27-b343-436919977a2b",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "acea83d2-6a87-43ef-85ac-ef92ec68dd72"
        },
        "item": {
          "id": "af868e9c-2016-4bda-a4cc-4129cb0128de",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "47ca5c39-d1c9-4287-96af-57e190c8c52a",
          "status": "Created",
          "code": 201,
          "responseTime": 1041,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f6a741a-04c8-487f-8bf9-05627b336c72",
        "cursor": {
          "ref": "f441b5b6-d151-4d7b-bc6d-fe03fd9ba012",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "cfd09a05-2db0-43dd-bf50-d86743148d5a"
        },
        "item": {
          "id": "0f6a741a-04c8-487f-8bf9-05627b336c72",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "aacc7960-8627-4cb6-aa8f-a0d3355e63c8",
          "status": "Created",
          "code": 201,
          "responseTime": 446,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc74817c-2aa4-4d55-bc27-8a2aba06daf5",
        "cursor": {
          "ref": "d755f11d-12d2-4bfa-af47-3349b4efc47f",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f302f3f4-3242-4968-86cf-fafbbf89bc76"
        },
        "item": {
          "id": "bc74817c-2aa4-4d55-bc27-8a2aba06daf5",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "315e7521-8ece-46d6-b6be-6e67773a24c3",
          "status": "Created",
          "code": 201,
          "responseTime": 380,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03205bb6-43f4-43ed-94cb-5303be6cafab",
        "cursor": {
          "ref": "2fd2eea1-9464-4339-a11c-a2d69783e8cb",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f66b36e2-80d6-4aff-b104-e1b9410b1cd9"
        },
        "item": {
          "id": "03205bb6-43f4-43ed-94cb-5303be6cafab",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3e8b9de8-2e64-42ad-8da1-94c664d5acbe",
          "status": "OK",
          "code": 200,
          "responseTime": 26,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "03205bb6-43f4-43ed-94cb-5303be6cafab",
        "cursor": {
          "ref": "2fd2eea1-9464-4339-a11c-a2d69783e8cb",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f66b36e2-80d6-4aff-b104-e1b9410b1cd9"
        },
        "item": {
          "id": "03205bb6-43f4-43ed-94cb-5303be6cafab",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3e8b9de8-2e64-42ad-8da1-94c664d5acbe",
          "status": "OK",
          "code": 200,
          "responseTime": 26,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "a2419a81-40ed-4e77-be08-c8f1163cb970",
        "cursor": {
          "ref": "8343083d-ca1e-47f7-b2a7-4c5779b354fd",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "98e4421e-7d67-4fd6-be48-07351f0564da"
        },
        "item": {
          "id": "a2419a81-40ed-4e77-be08-c8f1163cb970",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ff017bed-9dd9-4211-a195-771c81c95618",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "f84071f3-369f-4ba7-80ac-c8014535822a",
        "cursor": {
          "ref": "f472a39a-461a-43e9-952b-40bab6dfc3a3",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "1b8aa332-4209-4e70-b4f4-95fcafa3e1eb"
        },
        "item": {
          "id": "f84071f3-369f-4ba7-80ac-c8014535822a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "17b88532-4a49-44b5-b196-686fb0ca686e",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "a0c49571-dbec-4008-9a1a-90076d3bd34f",
        "cursor": {
          "ref": "dfe9c397-4de4-4658-8845-203860bd61c4",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "931f0bcf-672a-4c46-ae65-ba06f09eee3b"
        },
        "item": {
          "id": "a0c49571-dbec-4008-9a1a-90076d3bd34f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0c8259a9-4db3-4bfd-9f3a-0f4f69e0f80a",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "daf63d7a-52ac-48f9-8a61-ce786cded38b",
        "cursor": {
          "ref": "70f31583-5e51-4619-82c0-7f85bc2032f7",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "fe02d9aa-4f23-47cf-9bcf-dde418745f5c"
        },
        "item": {
          "id": "daf63d7a-52ac-48f9-8a61-ce786cded38b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "aeb7ca56-ee7f-4f8b-9cea-10d0bf053a04",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "4e068e0c-2e35-4d9d-94de-ec1acbd04308",
        "cursor": {
          "ref": "e7642544-b796-47ef-b0a3-b51f3485b2b3",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5bfb4895-99f1-4d81-a80f-348a04fc83e2"
        },
        "item": {
          "id": "4e068e0c-2e35-4d9d-94de-ec1acbd04308",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b234c5e6-93cb-46f4-9201-1dde68547e51",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "c7c1a80f-ca6a-4fa3-bba4-83168dbc1397",
        "cursor": {
          "ref": "1f4f0600-0786-491a-8106-c817d493b6c9",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b5f95d61-db82-4989-a446-91e968f6dc0f"
        },
        "item": {
          "id": "c7c1a80f-ca6a-4fa3-bba4-83168dbc1397",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "17cca9a3-52ea-4e17-9308-5351c49583f8",
          "status": "OK",
          "code": 200,
          "responseTime": 240,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "bc41ff27-d45a-4c0c-98c2-9d6fbc63568f",
        "cursor": {
          "ref": "d700ec99-6b8e-442b-8d0c-c203048392a4",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0ca7c458-ee42-4721-8a7a-a820bf63b9c9"
        },
        "item": {
          "id": "bc41ff27-d45a-4c0c-98c2-9d6fbc63568f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "06d75360-5076-46f8-9456-3acdbc6c7f17",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "a0395bad-20e7-4033-ac9e-f78c0291cc7d",
        "cursor": {
          "ref": "fa7949c4-581d-4666-b27d-26225684d423",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "e7e53bb0-3e25-4e22-85fc-68ca0878fbf1"
        },
        "item": {
          "id": "a0395bad-20e7-4033-ac9e-f78c0291cc7d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "60185be0-3f7f-424a-883d-b5fca28a9f32",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "c29c859a-daf7-4b70-be5c-547ef5d1c2b2",
        "cursor": {
          "ref": "c787437d-728b-4317-b000-4a2fd3c2a235",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "11ee7058-a529-4fde-a000-43a2da8eedbf"
        },
        "item": {
          "id": "c29c859a-daf7-4b70-be5c-547ef5d1c2b2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "cca9fbc8-bbd2-4b6e-8aba-bb2813dc1190",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "3caba313-daeb-4746-a159-b7b537a3dcf5",
        "cursor": {
          "ref": "12dc62af-cfef-4bb6-965c-934701abe9af",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ada8b91d-120f-418a-a780-5c5a3e35ca4c"
        },
        "item": {
          "id": "3caba313-daeb-4746-a159-b7b537a3dcf5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f7a946b7-3e24-43fa-9785-3d988f462e90",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "03b07132-b20d-4faf-a9df-f97b9750c673",
        "cursor": {
          "ref": "9173584e-4ef1-43ed-b4ab-0a50baac22ac",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "09a8ef06-0843-427b-be80-a508693793ca"
        },
        "item": {
          "id": "03b07132-b20d-4faf-a9df-f97b9750c673",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "fd6ebe08-6b29-408f-9bb4-3f265333f720",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "673dc131-20b4-4977-8ad3-f4f2ebb10674",
        "cursor": {
          "ref": "263a0e9c-de62-419e-9c35-1923187a9b0c",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d42b006d-4d92-4133-9950-32c8b231b26e"
        },
        "item": {
          "id": "673dc131-20b4-4977-8ad3-f4f2ebb10674",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "97bd2b1f-85e9-4454-896a-57fa28646245",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "17f321be-d58f-45c0-beaf-7d581adcf04f",
        "cursor": {
          "ref": "507b8f87-2564-4e2b-855c-401170c73815",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f9afd013-ac17-4c4c-9ac1-47a43a3436c7"
        },
        "item": {
          "id": "17f321be-d58f-45c0-beaf-7d581adcf04f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5f0b2690-f637-439e-8c97-f8c8f6385890",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "7c4cb31a-3672-4df8-bf9a-ee6b194c09e5",
        "cursor": {
          "ref": "4ec22772-e0c0-4fcf-aa7d-79f6bc045ac2",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "345250b5-4f5c-4ee6-ba18-a9477ded22d4"
        },
        "item": {
          "id": "7c4cb31a-3672-4df8-bf9a-ee6b194c09e5",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "03a5cf08-f203-4d2d-aa42-21630702998a",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "360a3017-2bf0-4835-9564-a355a75d7dc1",
        "cursor": {
          "ref": "18b3c5d1-b522-4734-8711-de74328019a0",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d02a7b70-e82b-4318-b818-868110ce11f4"
        },
        "item": {
          "id": "360a3017-2bf0-4835-9564-a355a75d7dc1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b3b8c918-7f61-4560-b99c-952786e7b00c",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "4d496be9-9e70-4101-8f60-2c3d807668a4",
        "cursor": {
          "ref": "404b5e4f-6b6d-4897-8521-88d311995431",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c3421398-9c98-4da8-9dca-a2881dacbd92"
        },
        "item": {
          "id": "4d496be9-9e70-4101-8f60-2c3d807668a4",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "aa87681d-0dbd-411f-ad7e-425af7f7801f",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "5f89c05e-b5e1-415f-b862-d7406e9dae4c",
        "cursor": {
          "ref": "cd1f854a-8bf4-4221-b049-0d5d4f8e002b",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "575f6f6d-24a1-40f3-9020-e9db1e40f745"
        },
        "item": {
          "id": "5f89c05e-b5e1-415f-b862-d7406e9dae4c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "19dae827-306d-422f-8f84-1fd82a3d05c9",
          "status": "OK",
          "code": 200,
          "responseTime": 25,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "34699f01-5d7c-44dc-a992-da45779f33d6",
        "cursor": {
          "ref": "f8a87c4d-c724-4b2b-bf40-c78d7f12da17",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7692aa2e-79e0-40e9-87fc-0b969c046d32"
        },
        "item": {
          "id": "34699f01-5d7c-44dc-a992-da45779f33d6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a33428f9-5779-41fa-a373-f8940d1f3c35",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "6cadec46-067a-450e-829c-aad37899c4f4",
        "cursor": {
          "ref": "a4803308-5dab-4e73-bd1a-671c657339cb",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1b964030-a50e-4346-a5a8-951f1e8201b1"
        },
        "item": {
          "id": "6cadec46-067a-450e-829c-aad37899c4f4",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ee999b37-0b0c-46fa-ad0f-2a75ab02afd3",
          "status": "OK",
          "code": 200,
          "responseTime": 157,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "4723a6ae-00a6-4958-8527-4aa909d8f186",
        "cursor": {
          "ref": "09e9ac7a-19ac-4f32-97ec-8bdb69486d27",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "aafe0be8-b059-4ea5-8c7c-452f512842dd"
        },
        "item": {
          "id": "4723a6ae-00a6-4958-8527-4aa909d8f186",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "087205aa-0ef5-4761-b007-7e64eb1df1f7",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "caa595a6-9532-4550-b3d4-e9fd220b05d2",
        "cursor": {
          "ref": "cdde18bc-93b1-41a1-8ba5-b813d5630f1b",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b97c9a62-92ce-4b39-92c4-a20832baadb9"
        },
        "item": {
          "id": "caa595a6-9532-4550-b3d4-e9fd220b05d2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "468db3e1-0ae6-42e0-8f95-bfa35f3a1ca6",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "d1d53491-2666-465d-b8fb-7e04fa71ba80",
        "cursor": {
          "ref": "10ba1df4-0d15-429a-b639-8f6bdd63a741",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "20b1d740-f7ae-438d-a9a3-e3d749474013"
        },
        "item": {
          "id": "d1d53491-2666-465d-b8fb-7e04fa71ba80",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8d280cc6-57a2-4b14-858e-ae5c31fa5c0e",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "c2a1dcbd-fe38-4a7b-9007-fe590276d4da",
        "cursor": {
          "ref": "f30972f2-a601-4180-865b-abc3638c3867",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "34392b5c-6128-4ee0-9e85-e2f1d69f9b81"
        },
        "item": {
          "id": "c2a1dcbd-fe38-4a7b-9007-fe590276d4da",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0f504f22-c35d-4c57-ad93-1e530992f283",
          "status": "OK",
          "code": 200,
          "responseTime": 26,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "050331e4-3796-42b4-bf0d-a28f8f78a5de",
        "cursor": {
          "ref": "f6b8e472-18b7-46eb-ab9b-57c3f377709b",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "d3b2fe40-7e24-492f-90a3-6c75250cc4d5"
        },
        "item": {
          "id": "050331e4-3796-42b4-bf0d-a28f8f78a5de",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2e84187f-eb57-4036-a18c-9b49c0246556",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "a97c1f13-d1e2-447e-b9a9-dab97d6a8b0a",
        "cursor": {
          "ref": "c1f84635-287f-4c1c-a12f-33b92c145a72",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1db564e5-c1e3-4535-9c1c-0fe7abcce67e"
        },
        "item": {
          "id": "a97c1f13-d1e2-447e-b9a9-dab97d6a8b0a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "23a7708d-dcce-4b2a-931c-89ee0a61d4a9",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "f4fe2842-acaa-44e2-b9a8-85398db598ed",
        "cursor": {
          "ref": "bd2694a2-7a6d-46c1-b6da-96cc9857520c",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "09a6aa90-8da5-4b63-b04c-44f2a236af46"
        },
        "item": {
          "id": "f4fe2842-acaa-44e2-b9a8-85398db598ed",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "161c8c91-a3f8-4691-a10f-310e324938ef",
          "status": "OK",
          "code": 200,
          "responseTime": 171,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "09c78dd5-0c6d-451f-98a2-0d25e7638007",
        "cursor": {
          "ref": "9d96aa85-e9d2-4631-abe5-763cdbca0cb3",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6cf7584f-183b-423d-9331-6e4e923f0c64"
        },
        "item": {
          "id": "09c78dd5-0c6d-451f-98a2-0d25e7638007",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d2d2bbf2-e0f0-4103-894f-4fa8136b3985",
          "status": "OK",
          "code": 200,
          "responseTime": 186,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "d3cf39c2-fe2d-468e-a789-62abf470a580",
        "cursor": {
          "ref": "d6f9111f-0fb8-4eef-bc73-8ee3357dbb06",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9a66225f-834d-4b36-9d8a-eae1dd199249"
        },
        "item": {
          "id": "d3cf39c2-fe2d-468e-a789-62abf470a580",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6d24dfdf-44ce-46df-a0be-21c2b7bf3e32",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "3fa0e9d5-0482-43a8-a1c6-a7b19fe0c332",
        "cursor": {
          "ref": "da4c6da2-a231-478d-91cc-915b1594d01a",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "306dad89-42c7-4d5d-96ba-323467404396"
        },
        "item": {
          "id": "3fa0e9d5-0482-43a8-a1c6-a7b19fe0c332",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "330b7e31-0d20-4816-9919-d5ffc069c5ca",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "1420be22-81cb-40e3-b8c0-6b902c2c1e7a",
        "cursor": {
          "ref": "0e232991-e002-4100-9c44-b3f70ad4285a",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "dbef6803-f81c-4f1d-8666-9717f2f59070"
        },
        "item": {
          "id": "1420be22-81cb-40e3-b8c0-6b902c2c1e7a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ec4274bc-a439-44ca-a533-463d3a2c0938",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "7b82f13a-85da-4e3c-b00e-03708e3984de",
        "cursor": {
          "ref": "b4463fe0-c4bc-4596-b0ba-546cb786bd14",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "56f5f671-cf3b-4aec-89e5-e6493508cf80"
        },
        "item": {
          "id": "7b82f13a-85da-4e3c-b00e-03708e3984de",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "1ec2c1bc-8628-4bb8-a814-fc092942fe4d",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "b9b197d9-7e37-472e-8390-adda62b28e5d",
        "cursor": {
          "ref": "d00ff655-36a6-4db9-934d-3ecc098810ab",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a4fd753f-d929-4603-ac5c-5574fae3f346"
        },
        "item": {
          "id": "b9b197d9-7e37-472e-8390-adda62b28e5d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c155355a-65c6-47a9-850b-511fe74c8b15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e80e7268-8a1e-4318-947b-0a3522d49297",
        "cursor": {
          "ref": "4032df2c-217e-4008-a5c3-4341017ef310",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a18a4fd1-4826-40c4-b77b-ebc30e139fc4"
        },
        "item": {
          "id": "e80e7268-8a1e-4318-947b-0a3522d49297",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "fc7aa4df-21e0-4962-ae15-21e84c68f398",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 35,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9338a76e-eb66-4f37-a071-b77cde16c94a",
        "cursor": {
          "ref": "e163ede0-27da-403e-a8a7-fdce17db44ec",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "91feebeb-6cfe-4bcc-b8f6-7badd9862cf9"
        },
        "item": {
          "id": "9338a76e-eb66-4f37-a071-b77cde16c94a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ac386a81-8e17-4d97-9597-f9fa75cf0a61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9338a76e-eb66-4f37-a071-b77cde16c94a",
        "cursor": {
          "ref": "e163ede0-27da-403e-a8a7-fdce17db44ec",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "91feebeb-6cfe-4bcc-b8f6-7badd9862cf9"
        },
        "item": {
          "id": "9338a76e-eb66-4f37-a071-b77cde16c94a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ac386a81-8e17-4d97-9597-f9fa75cf0a61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511bb72e-01db-428f-ade4-4fb09d602e21",
        "cursor": {
          "ref": "7cd85398-a623-403d-8d51-e19d37316382",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "dbb4e51f-05d5-48f3-bb2d-755fc38f3a5f"
        },
        "item": {
          "id": "511bb72e-01db-428f-ade4-4fb09d602e21",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2797ddeb-00db-4630-b265-e107da7fa723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c47ff7b8-0dcf-4d75-a0a0-2836a3119e5b",
        "cursor": {
          "ref": "755bb52a-7d4b-49cf-8826-4844f5f63304",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a33bc0a5-e478-4488-a8e5-5bdc1dd8071b"
        },
        "item": {
          "id": "c47ff7b8-0dcf-4d75-a0a0-2836a3119e5b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "063dcc1e-d5db-4f1c-8c64-e28a7fe77fa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c54cb779-3d1f-443b-b045-f6aea95c5f75",
        "cursor": {
          "ref": "a4cedb07-8d03-430d-b18e-4f0c38d559d7",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a3e504da-a944-4f67-b8fc-965c16fff228"
        },
        "item": {
          "id": "c54cb779-3d1f-443b-b045-f6aea95c5f75",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "467814cf-7128-4939-a88b-dddc1cc5161c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aeedb22-3721-493f-a040-3e226815c5be",
        "cursor": {
          "ref": "6e748e96-67d9-4222-8e41-fcd340db1813",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a4ff6c7e-3b3d-448e-894d-5b151d0bfa3c"
        },
        "item": {
          "id": "4aeedb22-3721-493f-a040-3e226815c5be",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5e8a130b-7961-4374-9a0b-7dd24465a01c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72a1e736-a5b1-4b71-8c52-dc4f7348a517",
        "cursor": {
          "ref": "0d692a9c-7455-4e26-91e9-977f5184f3b0",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d5e1f67b-bb29-4ea1-af1f-009fcde0562e"
        },
        "item": {
          "id": "72a1e736-a5b1-4b71-8c52-dc4f7348a517",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "5774293c-e7f2-421d-b180-85bcff9699ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "262c788b-0b20-4f46-91f4-22cf336e2f86",
        "cursor": {
          "ref": "186136a4-87cf-41b3-852c-43903f20a9bc",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "477421eb-5d61-41ba-8e3d-832c540122c6"
        },
        "item": {
          "id": "262c788b-0b20-4f46-91f4-22cf336e2f86",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "bb3bf567-d5cf-48c6-88e5-b72271ff7079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1851,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d02f8dc-4fd3-4c19-82d5-2fa057928fe5",
        "cursor": {
          "ref": "67ee5d7f-dd9b-4b50-8fc3-7f81aa3e906a",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e32ab4d3-c8f9-475e-af77-c084b4c4b207"
        },
        "item": {
          "id": "5d02f8dc-4fd3-4c19-82d5-2fa057928fe5",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f08a5f7b-b37b-4fba-b42e-19e91740d1a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee081f2-fd7d-4511-98e3-e603d0d169eb",
        "cursor": {
          "ref": "8260cb83-274f-4bfd-81b7-ba97f154dcce",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "29f5bf41-c3f8-4277-b1ac-9b08a3e62c91"
        },
        "item": {
          "id": "5ee081f2-fd7d-4511-98e3-e603d0d169eb",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "023bebb8-eedb-4e6d-8a88-756e2b0f6e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c5785df-01b3-4609-bb69-0ef613b87505",
        "cursor": {
          "ref": "5eefbf45-9058-4285-a431-479a059a2129",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8ec86b4c-0823-4b7f-90a8-b0b71c632eda"
        },
        "item": {
          "id": "9c5785df-01b3-4609-bb69-0ef613b87505",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3f6b2b0b-f83f-4db3-9971-6757d444b3db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14270813-ecbe-4d16-8238-dc3018e4546f",
        "cursor": {
          "ref": "e9d9def7-797d-434e-8ee5-4ff754bbb6f7",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "4b3cbdd1-227f-4ad5-be35-3ec9a93fbdff"
        },
        "item": {
          "id": "14270813-ecbe-4d16-8238-dc3018e4546f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "13dad380-de4f-4e55-bc1e-5ffca228a123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbfc0049-43a1-4686-ac2d-cddb4cf60e4f",
        "cursor": {
          "ref": "d6a819ec-4beb-4a11-84a0-d80cfcf1d929",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "843e5111-e8e8-4ee6-8991-2dea2c3fb19d"
        },
        "item": {
          "id": "cbfc0049-43a1-4686-ac2d-cddb4cf60e4f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2ecedf0d-f6cc-47d9-9d52-6ffeea39dfa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c97612-7c3d-49e2-af4c-fc480a8c2e93",
        "cursor": {
          "ref": "12d79bd9-6155-4668-a2d6-093767555596",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ed244807-467e-4117-a7e4-b8ee8ac5d4bf"
        },
        "item": {
          "id": "22c97612-7c3d-49e2-af4c-fc480a8c2e93",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e102f72c-b8f7-497c-b945-142993069575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34f72068-3bfb-4280-8c92-8f5e225241f5",
        "cursor": {
          "ref": "e8e51d2b-57af-4487-be7c-ee4d49f755b1",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6cd3ef3f-f1fb-4110-a74d-fc5088b30e38"
        },
        "item": {
          "id": "34f72068-3bfb-4280-8c92-8f5e225241f5",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c7a260aa-24ce-4577-94d6-70470408d995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98cea466-cf15-459e-9ddb-1a4fa0b970b7",
        "cursor": {
          "ref": "e166e8f3-0e11-4a1f-9959-ced6bf7c0241",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "dd18ad8e-9568-4af1-be46-4f7cbd28895b"
        },
        "item": {
          "id": "98cea466-cf15-459e-9ddb-1a4fa0b970b7",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2b621b80-9077-462d-a47d-0685a4d0a02b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e7dcf3-e281-404d-8139-c5c69f677d06",
        "cursor": {
          "ref": "e3829f96-e232-4581-88bf-ebe30d299dd4",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ec9ef41e-9c10-4f55-a361-d8d3eaa951d5"
        },
        "item": {
          "id": "b2e7dcf3-e281-404d-8139-c5c69f677d06",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f4ad3330-2a85-4a2e-a8cb-c7d5acec68f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2355f02-3115-4cca-be28-4969552286af",
        "cursor": {
          "ref": "a46afec3-abdc-43b9-a68f-01688b1373f3",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d21cbc4a-7529-4cba-8f87-081ab7a464ab"
        },
        "item": {
          "id": "e2355f02-3115-4cca-be28-4969552286af",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "33ffe935-ee72-4def-a4df-6fb9664c870d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b79ec059-440f-4e5b-8672-1c021119bb04",
        "cursor": {
          "ref": "c22f065f-198a-44e1-9c22-b4697863462c",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1202b996-7e07-4eb3-819b-e02d84a09b41"
        },
        "item": {
          "id": "b79ec059-440f-4e5b-8672-1c021119bb04",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "90690756-adac-4fd8-9211-e9c219f217e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 655,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e6c5372-42af-4c18-99b4-983178aa78ca",
        "cursor": {
          "ref": "a602f75f-c3c0-426e-a58d-f9d33a24f28e",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "27620419-61df-49e8-a1d5-325e5509509c"
        },
        "item": {
          "id": "1e6c5372-42af-4c18-99b4-983178aa78ca",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "d5490ad6-dc54-40cc-aa6b-e5ae4096b22e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 342,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7277889-312e-4ef8-9910-ba18e174c23e",
        "cursor": {
          "ref": "33ab0c0e-6d62-4b3b-8e43-53828aae1584",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a5a78a56-2d8e-4981-9f05-37890619d5e6"
        },
        "item": {
          "id": "c7277889-312e-4ef8-9910-ba18e174c23e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "aa3391d7-e2b5-4016-a3c4-435fd02017a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 284,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "083cd5bb-b41b-4544-9026-be77b12bca74",
        "cursor": {
          "ref": "f0d4c33e-90fc-4d05-bec8-22b2ba7e61eb",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ff73beeb-b782-4b79-9e5f-5e528a2af2ae"
        },
        "item": {
          "id": "083cd5bb-b41b-4544-9026-be77b12bca74",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "035d0272-685b-42e1-93b5-867309a4bf01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 339,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a82bd07-b60b-4e2c-9941-45c523589527",
        "cursor": {
          "ref": "463bd3b9-0273-4842-a449-05cb7d33d04a",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "897dd2f7-58e8-4da7-b59f-c7b80583605d"
        },
        "item": {
          "id": "7a82bd07-b60b-4e2c-9941-45c523589527",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "1c70c6dc-50ed-4226-9d2e-c9de65f0ab35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 289,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58589945-22d5-4f9e-8cbc-a65b19adc658",
        "cursor": {
          "ref": "85722ebc-aca0-49d5-bd37-bd2318da0328",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c1c9282e-c53b-4853-b80c-18f49f7ce9a3"
        },
        "item": {
          "id": "58589945-22d5-4f9e-8cbc-a65b19adc658",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f6779997-5c03-4242-ad38-3c437f7733f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 549,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ee27ccf-6e13-40d0-bd47-d572bdefe191",
        "cursor": {
          "ref": "6bf8e35d-241d-4600-bac7-c7a2c084e108",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "72ae4599-6c81-47a8-97f8-cf99082a6b59"
        },
        "item": {
          "id": "2ee27ccf-6e13-40d0-bd47-d572bdefe191",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a3ad9926-0f3d-4bd2-92dc-08a8d0faad58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fddf7e7-6121-4234-9f40-8282cb07e68c",
        "cursor": {
          "ref": "e3e3a688-8272-415e-8f51-720e7621e2b6",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0b224f5b-a2ef-41f4-a0b2-a01cd9661c54"
        },
        "item": {
          "id": "4fddf7e7-6121-4234-9f40-8282cb07e68c",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "6309e3ae-6374-4407-9390-b9e76e858110",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084007ec-6daf-49a7-a7ac-1d17036d07a5",
        "cursor": {
          "ref": "40a255a8-aa45-4de3-b8b8-f949db4c313b",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f44ea259-02e0-474a-b5aa-1fa7e2ba4a1e"
        },
        "item": {
          "id": "084007ec-6daf-49a7-a7ac-1d17036d07a5",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a7d2578d-fc03-4fc5-9d3e-91703bddf96f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 391,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c89998-b276-4070-9e56-c4dc094f9c25",
        "cursor": {
          "ref": "08896944-e95d-47d4-af38-fe12f6360a21",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6c0671be-bc6f-4a8a-9ba8-1a06b072964c"
        },
        "item": {
          "id": "31c89998-b276-4070-9e56-c4dc094f9c25",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "0a061423-d496-4a4a-a971-4bf10983a17e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6699d81b-6c00-4288-8a11-9f6b960c9a30",
        "cursor": {
          "ref": "f416572b-49a2-48ba-ad37-9f13c72ffb60",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "30950fa1-8928-48d8-a047-0e55b61ea2a2"
        },
        "item": {
          "id": "6699d81b-6c00-4288-8a11-9f6b960c9a30",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "db8f6f05-aa71-4a67-8fa5-1823258b3039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f11ad0a1-c609-44d0-b6f8-22626a763c21",
        "cursor": {
          "ref": "3638d9ca-8f0c-4b4c-a6d1-027601546ecf",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c4fd07f7-770b-4934-a887-802cabbef77f"
        },
        "item": {
          "id": "f11ad0a1-c609-44d0-b6f8-22626a763c21",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e105cb38-63c3-4934-8fa3-8395c24a55da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 303,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26e1b9ec-e42f-4a26-bb95-46fcd5883315",
        "cursor": {
          "ref": "553e65ee-7479-4721-819e-1eaf36309f77",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a3ea7e16-a7ff-4145-b410-393e2be2102a"
        },
        "item": {
          "id": "26e1b9ec-e42f-4a26-bb95-46fcd5883315",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f61b7b7f-9726-4340-88bf-22045863f59e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8a8cc7-3bae-4828-a2ce-662f2e31c82d",
        "cursor": {
          "ref": "e6b20c7a-11cd-4bf2-a833-76aa2f235fc2",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c4ddeb91-b3ce-4c84-8d99-a38d1e334222"
        },
        "item": {
          "id": "2a8a8cc7-3bae-4828-a2ce-662f2e31c82d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1fd19b46-145c-4e3d-902b-318413e2b05b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1efbf0da-8d14-46a2-9e2b-3844d66c9100",
        "cursor": {
          "ref": "fdc6000e-b647-4597-86e3-f6bd5dab169e",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "8c35ac99-5828-43e5-8381-3947683a4f72"
        },
        "item": {
          "id": "1efbf0da-8d14-46a2-9e2b-3844d66c9100",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ad15d7b5-51f3-4118-a0b7-25c206c70683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c15038fc-76a1-4d3d-9475-4ac04fbe353a",
        "cursor": {
          "ref": "24868b49-533c-44da-abaf-3960484318aa",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "49f7b180-c3fa-4a9f-9979-7bc12ef8c314"
        },
        "item": {
          "id": "c15038fc-76a1-4d3d-9475-4ac04fbe353a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d5d4caaf-b850-4ded-bc77-de503c5dc994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 357,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ad0c17-87d9-4a8d-9c39-fdac6ad454ab",
        "cursor": {
          "ref": "147dd861-6b3f-4103-8fe4-a1efbfdb35de",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4b9cf407-bcc8-40e2-bd63-aeb753ad1dcc"
        },
        "item": {
          "id": "77ad0c17-87d9-4a8d-9c39-fdac6ad454ab",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3cabd4be-de96-4429-b60c-a706dd80369f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34717759-2aef-4b84-b8b8-334ddd570a61",
        "cursor": {
          "ref": "04d9972b-9e29-449d-8f4a-ff9bb00dbef9",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "2fa8d869-559c-4a73-9f49-64d1f870e342"
        },
        "item": {
          "id": "34717759-2aef-4b84-b8b8-334ddd570a61",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "9de5540a-1e26-4c43-809a-dca2a3635145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 256,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97fc1cfe-47f3-4940-abeb-b65cab8ba3c6",
        "cursor": {
          "ref": "80b39b50-3dbc-418f-8c2c-6686d7aeba68",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ea5d882b-3fc5-4255-9d09-85fe580a98a2"
        },
        "item": {
          "id": "97fc1cfe-47f3-4940-abeb-b65cab8ba3c6",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "57589b9c-f5cf-4f2d-9b0c-a9c4e4240ce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 359,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "169cf28b-0046-44d4-ac39-630fde42cff5",
        "cursor": {
          "ref": "1932bf09-2d31-4483-afbb-95c727c0c5d5",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ac1f1a11-1624-43dc-bdc7-c312c8c8ee9b"
        },
        "item": {
          "id": "169cf28b-0046-44d4-ac39-630fde42cff5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b7b2fb3d-ec55-4255-8f55-de0f98ba2adf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 713,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa4569be-3854-485c-a54f-454c7efad3f4",
        "cursor": {
          "ref": "55f492bc-0528-457a-af52-4986158e706e",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "57f3ae11-5218-4605-a49a-851cbf6ae504"
        },
        "item": {
          "id": "aa4569be-3854-485c-a54f-454c7efad3f4",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5eb64a82-d537-4dd9-8849-9d49da9f6757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 478,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5642cb0e-1d39-4810-ad00-758b87a72a63",
        "cursor": {
          "ref": "4ea24a74-c0a3-4b28-aa20-c0b7f4569697",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "6b4b43b3-fd3a-4076-b7bf-628e7a809d0b"
        },
        "item": {
          "id": "5642cb0e-1d39-4810-ad00-758b87a72a63",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "99276456-1925-48ef-b174-e3c2ddf4f762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2119,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04611214-297a-431d-aa7d-ecabb67ef881",
        "cursor": {
          "ref": "04d14dcd-795b-472d-93e3-4068da841aeb",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "27d63a5f-f869-497d-b387-493ea29896c4"
        },
        "item": {
          "id": "04611214-297a-431d-aa7d-ecabb67ef881",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "003fba46-2992-4d77-aa3b-5ee8e58570b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 429,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca95b4e-d4ea-4c39-aa64-b44633adea53",
        "cursor": {
          "ref": "c0f189e4-0a0b-49db-8b36-f7447923d372",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a5630cc2-c6fa-4f14-9d2d-54bb3363db2e"
        },
        "item": {
          "id": "cca95b4e-d4ea-4c39-aa64-b44633adea53",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "dc013170-d064-4004-9ef0-659ce5629384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 529,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9cfbcef-937c-4ba1-9b87-cf2704d638e1",
        "cursor": {
          "ref": "f7a5d6be-5830-4aaa-ab51-e60b2bd3abc0",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "185d1a98-ca76-4cb8-9214-0d4227f19732"
        },
        "item": {
          "id": "c9cfbcef-937c-4ba1-9b87-cf2704d638e1",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "73805adc-f2c8-46d8-b65d-38bc9818bf74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 541,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a55915c3-2996-4879-9517-05d196deba47",
        "cursor": {
          "ref": "1523259d-6054-4a6f-9154-1eb1a885344f",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "1fc78b54-c63d-4cb6-a5c6-041cf618a8f8"
        },
        "item": {
          "id": "a55915c3-2996-4879-9517-05d196deba47",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "89d5fd0c-cf40-4f78-84b3-20725e14cd26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 407,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21311be8-e1ae-4d6d-a53c-b657d2b2e235",
        "cursor": {
          "ref": "1eed7eb8-d52f-4fd4-8ee1-46089edd94ae",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3217c908-d73b-42f8-9324-45a6fcf80f71"
        },
        "item": {
          "id": "21311be8-e1ae-4d6d-a53c-b657d2b2e235",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "aa9441ff-1ae4-412d-a514-b2c54b3f2a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 311,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a9e30a-fa6a-4bb6-af66-655ed535bc91",
        "cursor": {
          "ref": "5dad73d5-ae99-4f85-8271-ab289eb302d8",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "98713108-4fa7-428c-8a38-6eb0811fb353"
        },
        "item": {
          "id": "95a9e30a-fa6a-4bb6-af66-655ed535bc91",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2cdc5539-df0a-40d5-a94a-1c836db78e49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 434,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d8205dd-1a93-4b38-bb33-bb0cc18e35f5",
        "cursor": {
          "ref": "b9c3ab4b-ab8a-4de1-a4ab-8366dbb4a44c",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "47d0621e-e38b-43ca-8cf3-3aede90ed39c"
        },
        "item": {
          "id": "5d8205dd-1a93-4b38-bb33-bb0cc18e35f5",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "07c6f9a3-39f4-418e-952c-ce7104facd25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 500,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3744cd30-fe95-4fb9-8102-9a67e65d89a0",
        "cursor": {
          "ref": "e889d4d1-8e11-47e1-a24a-c1d21ab500e6",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4552d025-cd61-4326-8239-111f1511172c"
        },
        "item": {
          "id": "3744cd30-fe95-4fb9-8102-9a67e65d89a0",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1cf39981-6994-4ccd-8f29-51438fc1da0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 477,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a422fc73-1d86-4a51-8b47-569bd0d3a59c",
        "cursor": {
          "ref": "913d437b-b5e8-41b8-b274-addc141c13d9",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "dbc1374e-cce1-40b4-a333-3eaf74a6df2f"
        },
        "item": {
          "id": "a422fc73-1d86-4a51-8b47-569bd0d3a59c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c0b80414-ff77-4e30-9f63-f0df3b15cbfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 323,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e76e0c68-089e-4646-84a3-0487077022be",
        "cursor": {
          "ref": "18c2d2d8-9280-42e2-899d-ebd2b592052e",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d92e39c1-4ddd-4528-87f2-ac86dd6548bd"
        },
        "item": {
          "id": "e76e0c68-089e-4646-84a3-0487077022be",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "60bcf848-3007-4f39-b7f7-1f569249e8eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 315,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b59a29cb-ee6a-4aea-bc62-6648c906875d",
        "cursor": {
          "ref": "066a9f1a-0558-4e5b-a513-909d2254d648",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "200865f5-b159-4000-a25d-5647f8cfefd5"
        },
        "item": {
          "id": "b59a29cb-ee6a-4aea-bc62-6648c906875d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7355e53a-2219-4494-bc97-e5b771fe2a10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 275,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19d5a3e6-7bc6-47a8-9c4e-6870b7cb80ad",
        "cursor": {
          "ref": "bbd9514b-7811-46ca-b883-c3e44939a8a5",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "6dcea240-e2cf-4ff6-9c95-d2630052d725"
        },
        "item": {
          "id": "19d5a3e6-7bc6-47a8-9c4e-6870b7cb80ad",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "3ecc7800-82ee-4f82-91f9-e39b1e3c66d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 305,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "362ecc3d-fc2f-4b5b-81f4-769123e56956",
        "cursor": {
          "ref": "011b64f1-8c68-4e43-bcc5-d62192e429fa",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9d4fd6ae-95cd-4ff4-9928-49d64e35489f"
        },
        "item": {
          "id": "362ecc3d-fc2f-4b5b-81f4-769123e56956",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c0718f5d-de47-40b9-978a-284941b18a36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a914dd6-72ef-43f4-95df-7c5e8110f2a5",
        "cursor": {
          "ref": "c0143761-5bbe-44b4-92c4-ca94d17537bd",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "dcab784c-66e5-448b-99cc-e16ba00fc07e"
        },
        "item": {
          "id": "2a914dd6-72ef-43f4-95df-7c5e8110f2a5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "3968e0e3-7ead-4f38-8065-fc78a2d741d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 272,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "601be44e-d875-485f-9538-01d1dad8f1da",
        "cursor": {
          "ref": "1f128113-303b-4805-be7e-0b7f2d9516c2",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c937235e-b15f-41ee-9844-8aa09fa2852e"
        },
        "item": {
          "id": "601be44e-d875-485f-9538-01d1dad8f1da",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4393fdaf-711d-4f49-919e-f66b62bc9079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "125f04c0-82c9-4444-93f3-67b18abce217",
        "cursor": {
          "ref": "d3898d2a-eaad-4a2c-9765-b13f32e40637",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "0875501a-2149-4b08-99a8-aaac2f6cffc4"
        },
        "item": {
          "id": "125f04c0-82c9-4444-93f3-67b18abce217",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "6b29531e-0ecb-40fd-8702-19a25e578fad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c80d1e2-2531-4045-994f-471dbde28406",
        "cursor": {
          "ref": "15649419-c3ad-4450-bbec-ef2c1596096f",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "787a3e75-9a4b-4e1c-9806-bd2417ab35e0"
        },
        "item": {
          "id": "9c80d1e2-2531-4045-994f-471dbde28406",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a48b37e8-376b-4cc7-ba5f-7a35e49fdf6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a8c95d-f8ea-4d6b-8d9d-0a5ba9082097",
        "cursor": {
          "ref": "9ecb29a8-a513-4c08-893d-c00c8133d64e",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "fa132a48-29ee-49d3-8ac7-a77cfb1c3c6b"
        },
        "item": {
          "id": "e5a8c95d-f8ea-4d6b-8d9d-0a5ba9082097",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9d3971b4-5a3d-4203-bc00-568198d6c0df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 273,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de418b3-06fd-48d4-b233-4316ce8dfd5a",
        "cursor": {
          "ref": "24a1e9cf-0a6d-4c2c-8762-f9b108d96bff",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "fcaa2c34-2d01-408f-9e9e-7a9b0c2bdd59"
        },
        "item": {
          "id": "3de418b3-06fd-48d4-b233-4316ce8dfd5a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e0b4a7f9-9699-49b8-ac38-920b7b3f2651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c262cb9-7082-4aaf-ace5-59041041632d",
        "cursor": {
          "ref": "a33fbfd3-d60a-4615-b9d1-e5d48f4bd922",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "841292bc-b9b7-44dd-9427-e758e16fbb2f"
        },
        "item": {
          "id": "1c262cb9-7082-4aaf-ace5-59041041632d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2296f8dc-9387-4d23-8389-65070f4f8712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3479c1bf-5c32-4e27-8aee-ad7552563f1d",
        "cursor": {
          "ref": "fcf49532-d6b3-424a-b75d-8d16ef746a6b",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ed6f61b3-cad7-467e-a4ea-812a89a6d0c3"
        },
        "item": {
          "id": "3479c1bf-5c32-4e27-8aee-ad7552563f1d",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "01ac32bd-49e6-4ea4-9784-504bf5dab373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9afd75c8-1584-4957-991a-a4e0b6bf33d2",
        "cursor": {
          "ref": "e0a9b55e-077f-4651-9d2b-4d5131e1bbc8",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "2250a7af-834c-4087-9110-f2769af398ed"
        },
        "item": {
          "id": "9afd75c8-1584-4957-991a-a4e0b6bf33d2",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "7f0f584f-75cf-4dd2-b3bc-39717beb5fca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aefbcf86-e216-4972-8b73-6450ab039a7a",
        "cursor": {
          "ref": "35fa5090-2fa1-402b-8ae2-5d0c9f07e621",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6ac0aafa-7bc8-446d-ad38-ae27dc589c59"
        },
        "item": {
          "id": "aefbcf86-e216-4972-8b73-6450ab039a7a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "c5c9d732-71c5-4650-b921-e95e195bf527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 356,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2684ab99-2c76-4e40-9faf-9575e1e759ab",
        "cursor": {
          "ref": "820d139a-a63f-459c-a89e-7b81a00b2856",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "6a1d63ce-fefc-442f-ba5a-d18d52ff3984"
        },
        "item": {
          "id": "2684ab99-2c76-4e40-9faf-9575e1e759ab",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "28ed3939-6f29-4216-8ed7-0ac9d57d9b84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfc9caa0-ae64-4c86-9f78-336df39a2cb8",
        "cursor": {
          "ref": "e18c9540-afb1-4e02-b4e5-6ebe82e25e64",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "0d3cf906-1052-4c36-a6b0-3f5734007013"
        },
        "item": {
          "id": "dfc9caa0-ae64-4c86-9f78-336df39a2cb8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "28abcc1b-2724-413c-a761-74708cdcf7f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac038d4-970e-4e39-8b78-aebd128598c6",
        "cursor": {
          "ref": "446a8218-851f-467a-aa4f-ac2a077c9262",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "804adf65-8b62-451b-a376-762433e19595"
        },
        "item": {
          "id": "eac038d4-970e-4e39-8b78-aebd128598c6",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "db3ee2fe-1dc3-4f3b-b87d-cf75ec08f8ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "364bedf2-54d9-49b8-a302-7155cad48d67",
        "cursor": {
          "ref": "40464df5-c551-48f2-98ad-449d9bf16378",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "bc7d2332-b859-4134-87ad-ea558c612b55"
        },
        "item": {
          "id": "364bedf2-54d9-49b8-a302-7155cad48d67",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "59e669ca-bfe0-446f-ad22-d584a6677538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "146d4ba5-6527-485c-a2fd-482887093dc0",
        "cursor": {
          "ref": "870735fe-82b0-4082-9b89-d6550badcf30",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "262e3745-d367-419c-a94c-58f9e10bf573"
        },
        "item": {
          "id": "146d4ba5-6527-485c-a2fd-482887093dc0",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "8efbefa2-b364-43ab-a8bd-a77a0d2a743b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38fb8569-ba89-4883-bbbc-9a97c30a9e30",
        "cursor": {
          "ref": "ca11cde9-922b-4b0a-83b4-6ed1f1dce8e1",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "006ee7ab-5690-429e-839e-9c5a0909e7b4"
        },
        "item": {
          "id": "38fb8569-ba89-4883-bbbc-9a97c30a9e30",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f1546171-ab7f-4ad1-be98-96353de64cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c0a0a52-a98b-42be-be6f-d790ff27b5dd",
        "cursor": {
          "ref": "89ff76bb-0836-4486-baf4-a10bbf9f6173",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ac744090-6f8c-4592-91ad-84e15056bce4"
        },
        "item": {
          "id": "5c0a0a52-a98b-42be-be6f-d790ff27b5dd",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "85a77051-6fbd-450a-a507-b5cbfee9f055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e79d364-83c2-4e0b-9c06-079e78f38207",
        "cursor": {
          "ref": "a07524d4-7690-4c92-8569-251d11062a98",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "27860c67-4b2b-4fc1-9baf-17ac35cc9d08"
        },
        "item": {
          "id": "3e79d364-83c2-4e0b-9c06-079e78f38207",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "615cfc54-6d06-4308-bc19-ee501dcc3cf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfdc21ff-c587-4395-9724-fb26f523681a",
        "cursor": {
          "ref": "a0d55fdf-324c-44ec-af9a-5aadc62a83ee",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6011909b-d6f7-4ecf-afaf-1654a9eed581"
        },
        "item": {
          "id": "bfdc21ff-c587-4395-9724-fb26f523681a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "452d933f-d98b-4707-8b96-0d6153489d68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c05aec-ca6b-40ca-8b42-53a9fb7c462e",
        "cursor": {
          "ref": "73e382f0-7714-4b04-b618-acfa89452e4a",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "de44fa15-3035-4807-8a3f-a0d69f40fb8c"
        },
        "item": {
          "id": "26c05aec-ca6b-40ca-8b42-53a9fb7c462e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2a6842e4-fcf6-42af-9cad-4a229e34b186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "894461d3-2d0f-4117-9080-897a006b5161",
        "cursor": {
          "ref": "74af1a5b-8b59-4b22-a1d9-ad0ab93fac6c",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7772d864-b6cd-4ea6-8e43-e442003cd6cc"
        },
        "item": {
          "id": "894461d3-2d0f-4117-9080-897a006b5161",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8360b1ca-3395-41fc-b25c-b9424f8c4534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516f6285-3d67-4534-b292-20ee34403b20",
        "cursor": {
          "ref": "c60ddd40-3076-409f-9c8e-1b35939cc12e",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "512dcea7-6205-4b89-9b09-309c9e367c42"
        },
        "item": {
          "id": "516f6285-3d67-4534-b292-20ee34403b20",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "8576d80e-d8b9-4fd2-b884-c20f370feee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d8e8e6c-4097-4eb0-8e1c-75fc465df9e0",
        "cursor": {
          "ref": "c33a4489-c5f0-4bde-b4d0-2a17b02af5a0",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "98a5d7e5-69ee-4841-83b8-6825c7a011f3"
        },
        "item": {
          "id": "2d8e8e6c-4097-4eb0-8e1c-75fc465df9e0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c67c14a3-6516-4bd8-b4a0-ba5cccd6dc8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "424752e5-9831-4826-a65d-2b5bd4ecf8a5",
        "cursor": {
          "ref": "a5e18c8a-2774-442a-a8dd-b1bd1d4f6285",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9ffc6f10-fdb4-4439-929d-ef19fbbf1850"
        },
        "item": {
          "id": "424752e5-9831-4826-a65d-2b5bd4ecf8a5",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "64638709-bcf6-400b-893a-942a5a8f98e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffc76ea8-5cce-4a51-961c-95ed6c05f815",
        "cursor": {
          "ref": "3ab1ba4e-e12d-4385-9cac-284786984a56",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "466f41af-5672-46e5-8ef3-83bdfb78778d"
        },
        "item": {
          "id": "ffc76ea8-5cce-4a51-961c-95ed6c05f815",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "aa762a32-cf7d-47de-ba6b-d51f789d94f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a7b750-eb24-419b-9c18-3c2ebb5201df",
        "cursor": {
          "ref": "31cdc66a-a470-4ea1-a812-0edf1f132a51",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f08c5052-a02e-46fd-9ae2-a76c981fc5cb"
        },
        "item": {
          "id": "77a7b750-eb24-419b-9c18-3c2ebb5201df",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "819d7773-6e70-4bc0-a2be-3782de486375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84c164e2-c918-41c7-b34e-fccd9f146b4b",
        "cursor": {
          "ref": "aa506486-8fb4-4733-a8e4-33b350ff1fd8",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "779c2d3b-338f-48fd-9de2-0ec8ed007d2b"
        },
        "item": {
          "id": "84c164e2-c918-41c7-b34e-fccd9f146b4b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a469e593-ce65-4273-b2f0-abb3246a1c95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56062636-a780-4b12-a86b-6deebd5f93c8",
        "cursor": {
          "ref": "6d037d4e-0adb-4097-b8b2-4b6e8d8610a2",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "7bc79eb1-0b77-47e1-a612-e41177657183"
        },
        "item": {
          "id": "56062636-a780-4b12-a86b-6deebd5f93c8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e57d54c4-e4fa-46e4-9f3e-d84c8afc3fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee77a5c-c3ff-4ec0-9560-195c24ae5ef4",
        "cursor": {
          "ref": "ce2e1799-f444-406a-baf3-12e56a2c41e0",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5492aae4-883a-405e-8c8e-ec3c99f3c6c8"
        },
        "item": {
          "id": "bee77a5c-c3ff-4ec0-9560-195c24ae5ef4",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "4db5217a-515f-4953-a16d-6f1502332393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "239ba4ed-71a7-4b13-ac96-76539fe75fd2",
        "cursor": {
          "ref": "51d0df6d-ad06-42dd-93a4-e968e544c2cd",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "4de0ec30-e032-451b-b087-1206f43702a1"
        },
        "item": {
          "id": "239ba4ed-71a7-4b13-ac96-76539fe75fd2",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9dd5412f-69f8-4a80-9c3e-0053db1afdd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb3b4784-867b-449a-97eb-8d26ce1ab962",
        "cursor": {
          "ref": "cf403691-1251-4b15-b8bc-b374d498f61b",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "17c1d3f6-a2ab-48c1-975a-fe50dbceab1b"
        },
        "item": {
          "id": "eb3b4784-867b-449a-97eb-8d26ce1ab962",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f2c98973-60ab-4979-a096-31df5301f8a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1622fcb5-6c0b-4f1e-ac31-42984a10f3ba",
        "cursor": {
          "ref": "e6b1f3c1-406d-49e7-9e81-b5cf0f47f0ef",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5ae7eb2f-1fee-4fbd-ba54-f55f964c2e24"
        },
        "item": {
          "id": "1622fcb5-6c0b-4f1e-ac31-42984a10f3ba",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "4c2d00ba-0e3f-4fb4-91f7-781295d6f22d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f467600a-e9ce-4aee-973b-f02b00183a8b",
        "cursor": {
          "ref": "443f7ca7-bf7c-44fb-8172-d906f6c4664e",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a9025192-c423-4d21-9901-678f6c6cb21d"
        },
        "item": {
          "id": "f467600a-e9ce-4aee-973b-f02b00183a8b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "26f2accc-3d13-4b9d-878e-9b49b3a64a1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d45441e6-d185-4d29-b330-b0da29398f3c",
        "cursor": {
          "ref": "572f2dc9-cec9-417f-9ca6-6263c2d1cbb8",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4cb42748-8814-41a5-882c-ddcf8472d725"
        },
        "item": {
          "id": "d45441e6-d185-4d29-b330-b0da29398f3c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "8cebf8fe-4527-466a-9fa3-df80caf7f5d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa129be1-7844-4a34-becc-9f8fffb661b1",
        "cursor": {
          "ref": "443edf8d-0689-49a0-9377-7cb834519945",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f8152424-86b6-4266-b663-1910dc01f02f"
        },
        "item": {
          "id": "fa129be1-7844-4a34-becc-9f8fffb661b1",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "789cdcab-0aa6-4069-be17-c794f26d9f87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0622da6-fc44-44d1-a4cc-1c2b5c162067",
        "cursor": {
          "ref": "194f54d7-bd33-4ceb-ab69-3258521c3b82",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c6a14c2b-9dff-402b-982e-14c8329279f6"
        },
        "item": {
          "id": "e0622da6-fc44-44d1-a4cc-1c2b5c162067",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c6e8e7e3-3673-47e1-8d48-f54b8222b766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cc123d7-38d5-4f60-b500-26418e5c47eb",
        "cursor": {
          "ref": "43268d87-a914-44a5-8972-eb000859b36f",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a58e87f3-bcbf-4ac2-8260-89f7e80c8d02"
        },
        "item": {
          "id": "5cc123d7-38d5-4f60-b500-26418e5c47eb",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "225b1efe-41e3-467a-bfe2-2e437b28abb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8efe2242-9ba0-4258-8474-fa734ec701dc",
        "cursor": {
          "ref": "59ff11f1-fd68-4618-9a14-5bff32d48c8e",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "aaed0b4e-40ef-4dbc-9ff9-00a57e188a1e"
        },
        "item": {
          "id": "8efe2242-9ba0-4258-8474-fa734ec701dc",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6c98b5d4-d71d-463e-ae16-ec517779c73a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f181d0d-179a-42f3-b520-5329a5bc9dcf",
        "cursor": {
          "ref": "425727d6-660f-4e99-9388-647ded64958a",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "51a9964e-fd0a-4483-9ba1-7ac57cc649e0"
        },
        "item": {
          "id": "0f181d0d-179a-42f3-b520-5329a5bc9dcf",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a0c3872f-f64c-470e-b37a-6fbe1ab6f3ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc31b40-04a6-4b4e-bc17-0c6d50055451",
        "cursor": {
          "ref": "f5cdf087-c978-4549-8f24-4f52cf234414",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "4e235377-729b-485a-9515-1cf86d5cbe82"
        },
        "item": {
          "id": "acc31b40-04a6-4b4e-bc17-0c6d50055451",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c5d18b2e-6463-4651-93e1-81ff2d89dbeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acacffb1-600d-434a-85d5-97ac88da521f",
        "cursor": {
          "ref": "2c0e3d17-2848-4535-b238-c59f58a2d7b9",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2c24303a-8619-461e-8935-0e0aedc1a32e"
        },
        "item": {
          "id": "acacffb1-600d-434a-85d5-97ac88da521f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a9444a0d-e49d-4227-b5c1-64956f2ffc9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58a4dd9e-0746-4f2e-940b-5fa81eca20eb",
        "cursor": {
          "ref": "4055f4ba-01dc-482d-a05b-1f488835c0e1",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "3c1102eb-4383-463b-b603-8f74fd1beeb7"
        },
        "item": {
          "id": "58a4dd9e-0746-4f2e-940b-5fa81eca20eb",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "19dc2a75-f54d-419c-836a-259d192cb7e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "847d99b8-e2ac-48f2-89e0-f6998df66b59",
        "cursor": {
          "ref": "1b005e47-b0fb-4d17-aad2-274fc426772d",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "69f3e85c-b912-48cb-a880-76593f782107"
        },
        "item": {
          "id": "847d99b8-e2ac-48f2-89e0-f6998df66b59",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "41a2d7ef-794a-4aed-8124-9dddcc7feb66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dc7fcaa-1b07-4fea-8296-7e42e1f19fef",
        "cursor": {
          "ref": "c2ce9a70-ed2f-4283-a6c4-68286ae2f2e0",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "1971f39b-d724-482b-833c-affff9c7efe2"
        },
        "item": {
          "id": "9dc7fcaa-1b07-4fea-8296-7e42e1f19fef",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "aa0c092d-a39b-4729-ac67-dcc65f9fabe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273e752c-41fd-49f8-a602-abbcfa681ed9",
        "cursor": {
          "ref": "332a876b-17cb-49e0-9dbd-45bb61b3fe08",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "1cbb0067-7581-4c90-80d0-e4d773b380b7"
        },
        "item": {
          "id": "273e752c-41fd-49f8-a602-abbcfa681ed9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "51013d7b-fd44-4434-8a12-789350e20372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8752949c-2ce4-4fa4-a56b-116c917da0b6",
        "cursor": {
          "ref": "7b765e99-0c3f-4f2c-a446-d6f067aecd5a",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3663581d-f592-4944-9d8e-d980276974db"
        },
        "item": {
          "id": "8752949c-2ce4-4fa4-a56b-116c917da0b6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "dd570687-d48f-4989-8048-97d5862e4a0c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a607b2-0d8b-4587-b6e8-d4db44bc87e8",
        "cursor": {
          "ref": "1a244880-0bfc-497b-b41d-48e1726a2700",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2a770497-5ecf-4add-b653-62fb05f2dd5c"
        },
        "item": {
          "id": "75a607b2-0d8b-4587-b6e8-d4db44bc87e8",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "f1e8f223-c4bf-4b40-8df7-02e23e93c4b9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 18,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b5a7f7-73b5-429a-b179-fef93e4f24f2",
        "cursor": {
          "ref": "b5d7c702-b397-4f50-8b5a-0bf14e7fec04",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5895b311-1155-4617-b583-cecb189e5f44"
        },
        "item": {
          "id": "42b5a7f7-73b5-429a-b179-fef93e4f24f2",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6a49f6e2-1b5d-4e70-a5a7-9dc034754bee",
          "status": "OK",
          "code": 200,
          "responseTime": 1736,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98e5e9c4-3a99-4965-b5c1-8f31ffcfbd2b",
        "cursor": {
          "ref": "d769c8b0-f14f-4075-9f75-49a97491d30d",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "fce27116-3c4f-42e1-a15f-82e4aab44ba0"
        },
        "item": {
          "id": "98e5e9c4-3a99-4965-b5c1-8f31ffcfbd2b",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "a9f8ff44-7477-49f5-89a4-7316d6f6aebb",
          "status": "OK",
          "code": 200,
          "responseTime": 3330,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57fa03e5-4a82-4607-9303-588e10528f4d",
        "cursor": {
          "ref": "d335c45b-d571-4a12-a685-61e26a3af31f",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "e581ecb4-3caf-4994-a6a7-af92c0f2eb36"
        },
        "item": {
          "id": "57fa03e5-4a82-4607-9303-588e10528f4d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "21ad3d23-f8c5-4c1f-81bd-3f96e6495872",
          "status": "OK",
          "code": 200,
          "responseTime": 903,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c5e0aca-dd83-4716-9ca5-3387872b70de",
        "cursor": {
          "ref": "1f2df5ca-2721-4731-91b1-da5f9fb8b6b1",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "75e5b7ad-31c9-40eb-89ac-c8332c5b28a4"
        },
        "item": {
          "id": "8c5e0aca-dd83-4716-9ca5-3387872b70de",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e04e6300-d0b4-4063-94bb-8f2a99657972",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c5e0aca-dd83-4716-9ca5-3387872b70de",
        "cursor": {
          "ref": "1f2df5ca-2721-4731-91b1-da5f9fb8b6b1",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "75e5b7ad-31c9-40eb-89ac-c8332c5b28a4"
        },
        "item": {
          "id": "8c5e0aca-dd83-4716-9ca5-3387872b70de",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e04e6300-d0b4-4063-94bb-8f2a99657972",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c5e0aca-dd83-4716-9ca5-3387872b70de",
        "cursor": {
          "ref": "1f2df5ca-2721-4731-91b1-da5f9fb8b6b1",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "75e5b7ad-31c9-40eb-89ac-c8332c5b28a4"
        },
        "item": {
          "id": "8c5e0aca-dd83-4716-9ca5-3387872b70de",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e04e6300-d0b4-4063-94bb-8f2a99657972",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57216dcf-87b4-4c06-96f9-b3b3ba3498ed",
        "cursor": {
          "ref": "512dc48c-4f40-4185-be58-0fb7ce448c63",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "82217ba8-c04f-4c02-89ed-40374e7b708f"
        },
        "item": {
          "id": "57216dcf-87b4-4c06-96f9-b3b3ba3498ed",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "0a5d3752-bbdf-4e3c-a9d5-4df478e16c2f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 46,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "672abbff-3b80-4d6b-ba48-88217a8cbc21",
        "cursor": {
          "ref": "97624850-087e-47bc-b09a-d7360294216f",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6dd5f902-7749-4574-90e9-61de12ad1c1d"
        },
        "item": {
          "id": "672abbff-3b80-4d6b-ba48-88217a8cbc21",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7b9a7aaf-76e1-4984-a14b-718c4e2d1ffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 509,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "672abbff-3b80-4d6b-ba48-88217a8cbc21",
        "cursor": {
          "ref": "97624850-087e-47bc-b09a-d7360294216f",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6dd5f902-7749-4574-90e9-61de12ad1c1d"
        },
        "item": {
          "id": "672abbff-3b80-4d6b-ba48-88217a8cbc21",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7b9a7aaf-76e1-4984-a14b-718c4e2d1ffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 509,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "3b6db236-1abf-47ca-b712-78601a31fb11",
        "cursor": {
          "ref": "be224fba-3fb3-44a3-a303-f3fab9d3d56c",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ef12a38b-9f49-48ed-912b-903fcbf8f4e7"
        },
        "item": {
          "id": "3b6db236-1abf-47ca-b712-78601a31fb11",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "be1208de-bea7-4828-90ee-75e3ffd66977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "274609d9-3cac-4977-9ef2-625625174f9f",
        "cursor": {
          "ref": "b1f4015c-b015-44a4-91e5-4d0167b0b28c",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "94ca1adf-03f3-4b00-b0d5-3cb48a468fa5"
        },
        "item": {
          "id": "274609d9-3cac-4977-9ef2-625625174f9f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "72de2087-2025-4adb-aa85-0e4f14ae3af2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "274609d9-3cac-4977-9ef2-625625174f9f",
        "cursor": {
          "ref": "b1f4015c-b015-44a4-91e5-4d0167b0b28c",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "94ca1adf-03f3-4b00-b0d5-3cb48a468fa5"
        },
        "item": {
          "id": "274609d9-3cac-4977-9ef2-625625174f9f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "72de2087-2025-4adb-aa85-0e4f14ae3af2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceeae08d-bc78-46f3-bb52-174c91b4b47c",
        "cursor": {
          "ref": "f4553a74-5705-460b-82d6-3a437a8a1635",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d545a181-5273-417d-a0be-c2bee29b7a83"
        },
        "item": {
          "id": "ceeae08d-bc78-46f3-bb52-174c91b4b47c",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "415d7683-e0d5-4638-b572-6df7500fde14",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 457,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}